{
    "!": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.", 
        "name": "!", 
        "params": [], 
        "path": "javascript/operators/logical_operators#Logical_NOT", 
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "!=": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "!=", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Inequality", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    "!==": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "!==", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Nonidentity", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    "$.Callbacks": {
        "descr": "The $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.", 
        "name": "jQuery.Callbacks", 
        "params": [
            {
                "descr": "Type: String  An optional list of space-separated flags that change how the callback list behaves.", 
                "name": "flags"
            }
        ], 
        "path": "jquery/jquery.callbacks", 
        "syntax": "jQuery.Callbacks( flags ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "$.Deferred": {
        "descr": "The jQuery.Deferred() factory creates a new deferred object.", 
        "name": "jQuery.Deferred", 
        "params": [
            {
                "descr": "Type: Function( Deferred deferred )  A function that is called just before the constructor returns.", 
                "name": "beforeStart"
            }
        ], 
        "path": "jquery/jquery.deferred", 
        "syntax": "jQuery.Deferred( [beforeStart ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "$.ajax": {
        "descr": "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:", 
        "name": "jQuery.ajax", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, all requests are sent asynchronously (i.e. ", 
                "name": "async"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. ", 
                "name": "beforeSend"
            }, 
            {
                "descr": "(default: true, false for dataType 'script' and 'jsonp') Type: Boolean  If set to false, it will force requested pages not to be cached by the browser. ", 
                "name": "cache"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). ", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ", 
                "name": "contents"
            }, 
            {
                "descr": "(default: 'application/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String  When sending data to the server, use this content type. ", 
                "name": "contentType"
            }, 
            {
                "descr": "Type: PlainObject  This object will be the context of all Ajax-related callbacks. ", 
                "name": "context"
            }, 
            {
                "descr": "(default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject  An object containing dataType-to-dataType converters. ", 
                "name": "converters"
            }, 
            {
                "descr": "(default: false for same-domain requests, true for cross-domain requests) Type: Boolean  If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)", 
                "name": "crossDomain"
            }, 
            {
                "descr": "Type: PlainObject or String or Array  Data to be sent to the server. ", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( String data, String type ) => Anything  A function to be used to handle the raw response data of XMLHttpRequest. ", 
                "name": "dataFilter"
            }, 
            {
                "descr": "(default: Intelligent Guess (xml, json, script, or html)) Type: String  The type of data that you're expecting back from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. ", 
                "name": "error"
            }, 
            {
                "descr": "(default: true) Type: Boolean  Whether to trigger global Ajax event handlers for this request. ", 
                "name": "global"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject  An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. ", 
                "name": "headers"
            }, 
            {
                "descr": "(default: false) Type: Boolean  Allow the request to be successful only if the response has changed since the last request. ", 
                "name": "ifModified"
            }, 
            {
                "descr": "(default: depends on current location protocol) Type: Boolean  Allow the current environment to be recognized as \"local,\" (e.g. ", 
                "name": "isLocal"
            }, 
            {
                "descr": "Type: String or Boolean  Override the callback function name in a JSONP request. ", 
                "name": "jsonp"
            }, 
            {
                "descr": "Type: String or Function() Specify the callback function name for a JSONP request. ", 
                "name": "jsonpCallback"
            }, 
            {
                "descr": "(default: 'GET') Type: String  The HTTP method to use for the request (e.g. ", 
                "name": "method"
            }, 
            {
                "descr": "Type: String  A mime type to override the XHR mime type. ", 
                "name": "mimeType"
            }, 
            {
                "descr": "Type: String  A password to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "password"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.", 
                "name": "processData"
            }, 
            {
                "descr": "Type: String  Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). ", 
                "name": "scriptCharset"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject   An object of numeric HTTP codes and functions to be called when the response has the corresponding code. ", 
                "name": "statusCode"
            }, 
            {
                "descr": "Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: Number  Set a timeout (in milliseconds) for the request. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Type: Boolean  Set this to true if you wish to use the traditional style of param serialization.", 
                "name": "traditional"
            }, 
            {
                "descr": "(default: 'GET') Type: String  An alias for method. ", 
                "name": "type"
            }, 
            {
                "descr": "(default: The current page) Type: String   A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: String  A username to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "username"
            }, 
            {
                "descr": "(default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. ", 
                "name": "xhr"
            }, 
            {
                "descr": "Type: PlainObject   An object of fieldName-fieldValue pairs to set on the native XHR object. ", 
                "name": "xhrFields"
            }
        ], 
        "path": "jquery/jquery.ajax", 
        "syntax": "jQuery.ajax( url [, settings ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.ajaxPrefilter": {
        "descr": "A typical prefilter registration using $.ajaxPrefilter() looks like this:", 
        "name": "jQuery.ajaxPrefilter", 
        "params": [
            {
                "descr": "Type: String  An optional string containing one or more space-separated dataTypes", 
                "name": "dataTypes"
            }, 
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to set default values for future Ajax requests.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/jquery.ajaxprefilter", 
        "syntax": "jQuery.ajaxPrefilter( [dataTypes ], handler ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "$.ajaxSetup": {
        "descr": "For details on the settings available for $.ajaxSetup(), see $.ajax().", 
        "name": "jQuery.ajaxSetup", 
        "params": [
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the default Ajax request. ", 
                "name": "options"
            }
        ], 
        "path": "jquery/jquery.ajaxsetup", 
        "syntax": "jQuery.ajaxSetup( options ) Returns:", 
        "type": "Ajax"
    }, 
    "$.ajaxTransport": {
        "descr": "A transport is an object that provides two methods, send and abort, that are used internally by $.ajax() to issue requests. A transport is the most advanced way to enhance $.ajax() and should be used only as a last resort when prefilters and converters are insufficient.", 
        "name": "jQuery.ajaxTransport", 
        "params": [
            {
                "descr": "Type: String  A string identifying the data type to use", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to return the new transport object to use with the data type provided in the first argument.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/jquery.ajaxtransport", 
        "syntax": "jQuery.ajaxTransport( dataType, handler ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "$.browser": {
        "descr": "The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "name": "jQuery.browser", 
        "params": [], 
        "path": "jquery/jquery.browser", 
        "syntax": "jQuery.browserReturns: PlainObjectversion deprecated: 1.3, removed: 1.9   Description: Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.  version added: 1.0jQuery.browser  The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "type": "Utilities"
    }, 
    "$.contains": {
        "descr": "The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.", 
        "name": "jQuery.contains", 
        "params": [
            {
                "descr": "Type: Element  The DOM element that may contain the other element.", 
                "name": "container"
            }, 
            {
                "descr": "Type: Element  The DOM element that may be contained by (a descendant of) the other element.", 
                "name": "contained"
            }
        ], 
        "path": "jquery/jquery.contains", 
        "syntax": "jQuery.contains( container, contained ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.cssHooks": {
        "descr": "The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.", 
        "name": "jQuery.cssHooks", 
        "params": [], 
        "path": "jquery/jquery.csshooks", 
        "syntax": "jQuery.cssHooksReturns: Object   Description: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.  version added: 1.4.3jQuery.cssHooks  The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.  For example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css()", 
        "type": "Miscellaneous"
    }, 
    "$.cssNumber": {
        "descr": "You can think about jQuery.cssNumber as a list of all CSS properties you might use without a unit. It's used by .css() to determine if it needs to add px to unitless values.", 
        "name": "jQuery.cssNumber", 
        "params": [], 
        "path": "jquery/jquery.cssnumber", 
        "syntax": "jQuery.cssNumberReturns: Object   Description: An object containing all CSS properties that may be used without a unit. The .css()", 
        "type": "Manipulation"
    }, 
    "$.data": {
        "descr": "Note: This is a low-level method; a more convenient .data() is also available.", 
        "name": "jQuery.data", 
        "params": [
            {
                "descr": "Type: Element  The DOM element to associate with the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to set.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Anything  The new data value; this can be any Javascript type except undefined.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  Name of the data stored.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.data", 
        "syntax": "jQuery.data( element, key, value ) Returns: Object", 
        "type": "Data"
    }, 
    "$.dequeue": {
        "descr": "Note: This is a low-level method, you should probably use .dequeue() instead.", 
        "name": "jQuery.dequeue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove and execute a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/jquery.dequeue", 
        "syntax": "jQuery.dequeue( element [, queueName ] ) Returns: undefined", 
        "type": "Data"
    }, 
    "$.each": {
        "descr": "The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.", 
        "name": "jQuery.each", 
        "params": [
            {
                "descr": "Type: Array  The array to iterate over.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function( Integer indexInArray, Object value ) The function that will be executed on every object.", 
                "name": "callback"
            }, 
            {
                "descr": "Type: Object  The object to iterate over.", 
                "name": "object"
            }, 
            {
                "descr": "Type: Function( String propertyName, Object valueOfProperty ) The function that will be executed on every object.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery.each", 
        "syntax": "jQuery.each( array, callback ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.error": {
        "descr": "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.", 
        "name": "jQuery.error", 
        "params": [
            {
                "descr": "Type: String  The message to send out.", 
                "name": "message"
            }
        ], 
        "path": "jquery/jquery.error", 
        "syntax": "jQuery.error( message ) Returns:", 
        "type": "Miscellaneous"
    }, 
    "$.escapeSelector": {
        "descr": "This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.", 
        "name": "jQuery.escapeSelector", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to escape.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/jquery.escapeselector", 
        "syntax": "jQuery.escapeSelector( selector ) Returns: Selector", 
        "type": "Miscellaneous"
    }, 
    "$.extend": {
        "descr": "When two or more object arguments are supplied to $.extend(), properties from all of the objects are added to the target object. Arguments that are null or undefined are ignored.", 
        "name": "jQuery.extend", 
        "params": [
            {
                "descr": "Type: Object   An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }, 
            {
                "descr": "Type: Boolean  If true, the merge becomes recursive (aka. ", 
                "name": "deep"
            }, 
            {
                "descr": "Type: Object  The object to extend. ", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }
        ], 
        "path": "jquery/jquery.extend", 
        "syntax": "jQuery.extend( target [, object1 ] [, objectN ] ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.fn.extend": {
        "descr": "Add two methods to the jQuery prototype ($.fn) object and then use one of them.", 
        "name": "jQuery.fn.extend", 
        "params": [
            {
                "descr": "Type: Object  An object to merge onto the jQuery prototype.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.fn.extend", 
        "syntax": "jQuery.fn.extend( object ) Returns: Object", 
        "type": "Utilities"
    }, 
    "$.fx.interval": {
        "descr": "This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.", 
        "name": "jQuery.fx.interval", 
        "params": [], 
        "path": "jquery/jquery.fx.interval", 
        "syntax": "jQuery.fx.intervalReturns: Number   Description: The rate (in milliseconds) at which animations fire.", 
        "type": "Effects"
    }, 
    "$.fx.off": {
        "descr": "When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:", 
        "name": "jQuery.fx.off", 
        "params": [], 
        "path": "jquery/jquery.fx.off", 
        "syntax": "jQuery.fx.offReturns: Boolean   Description: Globally disable all animations.  version added: 1.3jQuery.fx.off  When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:  jQuery is being used on a low-resource device. Users are encountering accessibility problems with the animations.  Animations can be turned back on by setting the property to false.  Example: Toggle animation on and off <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>jQuery.fx.off demo</title>  <style>  div {    width: 50px;    height: 30px;    margin: 5px;    float: left;    background: green;  }  </style>  <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script></head><body> <input type=\"button\" value=\"Run\"><button>Toggle fx</button><div></div> <script>var toggleFx = function() {  $.fx.off = !$.fx.off;};toggleFx();\n or $( \"button\" ).click( toggleFx );\n or $( \"input\" ).click(function() {  $( \"div\" ).toggle( \"slow\" );\n or });\n or </script> </body></html>);", 
        "type": "Effects"
    }, 
    "$.get": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.get", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }
        ], 
        "path": "jquery/jquery.get", 
        "syntax": "jQuery.get( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.getJSON": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getJSON", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.", 
                "name": "success"
            }
        ], 
        "path": "jquery/jquery.getjson", 
        "syntax": "jQuery.getJSON( url [, data ] [, success ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.getScript": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getScript", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.", 
                "name": "success"
            }
        ], 
        "path": "jquery/jquery.getscript", 
        "syntax": "jQuery.getScript( url [, success ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.globalEval": {
        "descr": "This method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).", 
        "name": "jQuery.globalEval", 
        "params": [
            {
                "descr": "Type: String  The JavaScript code to execute.", 
                "name": "code"
            }
        ], 
        "path": "jquery/jquery.globaleval", 
        "syntax": "jQuery.globalEval( code ) Returns:", 
        "type": "Utilities"
    }, 
    "$.grep": {
        "descr": "The $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.", 
        "name": "jQuery.grep", 
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The array-like object to search through.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Boolean  The function to process each item against. ", 
                "name": "function"
            }, 
            {
                "descr": "Type: Boolean  If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. ", 
                "name": "invert"
            }
        ], 
        "path": "jquery/jquery.grep", 
        "syntax": "jQuery.grep( array, function [, invert ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.hasData": {
        "descr": "The jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If there is no data object associated with an element, the method returns false; otherwise it returns true.", 
        "name": "jQuery.hasData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to be checked for data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.hasdata", 
        "syntax": "jQuery.hasData( element ) Returns: Boolean", 
        "type": "Data"
    }, 
    "$.holdReady": {
        "descr": "The $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <head> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.", 
        "name": "jQuery.holdReady", 
        "params": [
            {
                "descr": "Type: Boolean  Indicates whether the ready hold is being requested or released", 
                "name": "hold"
            }
        ], 
        "path": "jquery/jquery.holdready", 
        "syntax": "jQuery.holdReady( hold ) Returns: undefined", 
        "type": "Miscellaneous"
    }, 
    "$.htmlPrefilter": {
        "descr": "This method rarely needs to be called directly. Instead, use it as an entry point to modify existing jQuery manipulation methods. For instance, to remove all <del> tags from incoming HTML strings, do this:", 
        "name": "jQuery.htmlPrefilter", 
        "params": [
            {
                "descr": "Type: String  The HTML string on which to operate.", 
                "name": "html"
            }
        ], 
        "path": "jquery/jquery.htmlprefilter", 
        "syntax": "jQuery.htmlPrefilter( html ) Returns: String", 
        "type": "Manipulation"
    }, 
    "$.inArray": {
        "descr": "The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.", 
        "name": "jQuery.inArray", 
        "params": [
            {
                "descr": "Type: Anything  The value to search for.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Array  An array through which to search.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Number  The index of the array at which to begin the search. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "jquery/jquery.inarray", 
        "syntax": "jQuery.inArray( value, array [, fromIndex ] ) Returns: Number", 
        "type": "Utilities"
    }, 
    "$.isArray": {
        "descr": "$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).", 
        "name": "jQuery.isArray", 
        "params": [
            {
                "descr": "Type: Object  Object to test whether or not it is an array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isarray", 
        "syntax": "jQuery.isArray( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "$.isEmptyObject": {
        "descr": "As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()", 
        "name": "jQuery.isEmptyObject", 
        "params": [
            {
                "descr": "Type: Object  The object that will be checked to see if it's empty.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isemptyobject", 
        "syntax": "jQuery.isEmptyObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.isFunction": {
        "descr": "Note: As of jQuery 1.3, functions provided by the browser like alert() and DOM element methods like getAttribute() are not guaranteed to be detected as functions in browsers such as Internet Explorer.", 
        "name": "jQuery.isFunction", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a function.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isfunction", 
        "syntax": "jQuery.isFunction( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "$.isNumeric": {
        "descr": "The $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.", 
        "name": "jQuery.isNumeric", 
        "params": [
            {
                "descr": "Type: Anything  The value to be tested.", 
                "name": "value"
            }
        ], 
        "path": "jquery/jquery.isnumeric", 
        "syntax": "jQuery.isNumeric( value ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.isPlainObject": {
        "descr": "Note: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, $.isPlainObject() may evaluate inconsistently across browsers in certain instances.", 
        "name": "jQuery.isPlainObject", 
        "params": [
            {
                "descr": "Type: PlainObject  The object that will be checked to see if it's a plain object.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isplainobject", 
        "syntax": "jQuery.isPlainObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.isWindow": {
        "descr": "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).", 
        "name": "jQuery.isWindow", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a window.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.iswindow", 
        "syntax": "jQuery.isWindow( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "$.isXMLDoc": {
        "descr": "Check an object to see if it's in an XML document.", 
        "name": "jQuery.isXMLDoc", 
        "params": [
            {
                "descr": "Type: Element  The DOM node that will be checked to see if it's in an XML document.", 
                "name": "node"
            }
        ], 
        "path": "jquery/jquery.isxmldoc", 
        "syntax": "jQuery.isXMLDoc( node ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "$.makeArray": {
        "descr": "Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).", 
        "name": "jQuery.makeArray", 
        "params": [
            {
                "descr": "Type: PlainObject  Any object to turn into a native Array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.makearray", 
        "syntax": "jQuery.makeArray( obj ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.map": {
        "descr": "If you wish to process a jQuery object \u2014 for example, $('div').map( callback ); \u2014 use .map() instead.", 
        "name": "jQuery.map", 
        "params": [
            {
                "descr": "Type: Array  The Array to translate.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Object  The function to process each item against. ", 
                "name": "callback"
            }, 
            {
                "descr": "Type: Object  The Object to translate.", 
                "name": "object"
            }, 
            {
                "descr": "Type: Function( Object propertyOfObject, String key ) => Object  The function to process each item against. ", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery.map", 
        "syntax": "jQuery.map( array, callback ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.merge": {
        "descr": "The $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the length and numeric index properties of the first object to include items from the second.", 
        "name": "jQuery.merge", 
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The first array-like object to merge, the elements of second added.", 
                "name": "first"
            }, 
            {
                "descr": "Type: ArrayLikeObject  The second array-like object to merge into the first, unaltered.", 
                "name": "second"
            }
        ], 
        "path": "jquery/jquery.merge", 
        "syntax": "jQuery.merge( first, second ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.noConflict": {
        "descr": "Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to $.noConflict(). Old references of $ are saved during jQuery initialization; noConflict() simply restores them.", 
        "name": "jQuery.noConflict", 
        "params": [
            {
                "descr": "Type: Boolean  A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).", 
                "name": "removeAll"
            }
        ], 
        "path": "jquery/jquery.noconflict", 
        "syntax": "jQuery.noConflict( [removeAll ] ) Returns: Object", 
        "type": "Miscellaneous"
    }, 
    "$.noop": {
        "descr": "You can use this empty function when you wish to pass around a function that will do nothing.", 
        "name": "jQuery.noop", 
        "params": [], 
        "path": "jquery/jquery.noop", 
        "syntax": "jQuery.noop() Returns: undefined", 
        "type": "Utilities"
    }, 
    "$.now": {
        "descr": "The $.now() method is a shorthand for the number returned by the expression (new Date).getTime().", 
        "name": "jQuery.now", 
        "params": [], 
        "path": "jquery/jquery.now", 
        "syntax": "jQuery.now() Returns: Number", 
        "type": "Utilities"
    }, 
    "$.param": {
        "descr": "This function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).", 
        "name": "jQuery.param", 
        "params": [
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Boolean  A Boolean indicating whether to perform a traditional \"shallow\" serialization.", 
                "name": "traditional"
            }
        ], 
        "path": "jquery/jquery.param", 
        "syntax": "jQuery.param( obj ) Returns: String", 
        "type": "Ajax"
    }, 
    "$.parseHTML": {
        "descr": "jQuery.parseHTML uses native methods to convert the string to a set of DOM nodes, which can then be inserted into the document. These methods do render all trailing or leading text (even if that's just whitespace). To prevent trailing/leading whitespace from being converted to text nodes you can pass the HTML string through jQuery.trim.", 
        "name": "jQuery.parseHTML", 
        "params": [
            {
                "descr": "Type: String  HTML string to be parsed", 
                "name": "data"
            }, 
            {
                "descr": "(default: document) Type: Element  Document element to serve as the context in which the HTML fragment will be created", 
                "name": "context"
            }, 
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include scripts passed in the HTML string", 
                "name": "keepScripts"
            }
        ], 
        "path": "jquery/jquery.parsehtml", 
        "syntax": "jQuery.parseHTML( data [, context ] [, keepScripts ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.parseJSON": {
        "descr": "Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:", 
        "name": "jQuery.parseJSON", 
        "params": [
            {
                "descr": "Type: String  The JSON string to parse.", 
                "name": "json"
            }
        ], 
        "path": "jquery/jquery.parsejson", 
        "syntax": "jQuery.parseJSON( json ) Returns: String or Number or Object or Array or Booleanversion deprecated: 3.0", 
        "type": "Utilities"
    }, 
    "$.parseXML": {
        "descr": "jQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.", 
        "name": "jQuery.parseXML", 
        "params": [
            {
                "descr": "Type: String  a well-formed XML string to be parsed", 
                "name": "data"
            }
        ], 
        "path": "jquery/jquery.parsexml", 
        "syntax": "jQuery.parseXML( data ) Returns: XMLDocument", 
        "type": "Utilities"
    }, 
    "$.post": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.post", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }
        ], 
        "path": "jquery/jquery.post", 
        "syntax": "jQuery.post( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "$.proxy": {
        "descr": "This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.", 
        "name": "jQuery.proxy", 
        "params": [
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function referenced in the function argument.", 
                "name": "additionalArguments"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function named in the name argument.", 
                "name": "additionalArguments"
            }
        ], 
        "path": "jquery/jquery.proxy", 
        "syntax": "jQuery.proxy( function, context ) Returns: Function", 
        "type": "Utilities"
    }, 
    "$.queue": {
        "descr": "Note: This is a low-level method, you should probably use .queue() instead.", 
        "name": "jQuery.queue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to inspect for an attached queue.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Element  A DOM element where the array of queued functions is attached.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.", 
                "name": "newQueue"
            }, 
            {
                "descr": "Type: Element  A DOM element on which to add a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Function() The new function to add to the queue.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery.queue", 
        "syntax": "jQuery.queue( element [, queueName ] ) Returns: Array", 
        "type": "Data"
    }, 
    "$.removeData": {
        "descr": "Note: This is a low-level method, you should probably use .removeData() instead.", 
        "name": "jQuery.removeData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to remove.", 
                "name": "name"
            }
        ], 
        "path": "jquery/jquery.removedata", 
        "syntax": "jQuery.removeData( element [, name ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "$.speed": {
        "descr": "The $.speed() method provides a way to define properties, such as duration, easing, and queue, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.", 
        "name": "jQuery.speed", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: PlainObject      easing (default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "settings"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject      duration (default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "settings"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/jquery.speed", 
        "syntax": "jQuery.speed( [duration ] [, settings ] ) Returns: PlainObject", 
        "type": "Effects"
    }, 
    "$.sub": {
        "descr": "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.", 
        "name": "jQuery.sub", 
        "params": [], 
        "path": "jquery/jquery.sub", 
        "syntax": "jQuery.sub() Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Miscellaneous"
    }, 
    "$.trim": {
        "descr": "The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.", 
        "name": "jQuery.trim", 
        "params": [
            {
                "descr": "Type: String  The string to trim.", 
                "name": "str"
            }
        ], 
        "path": "jquery/jquery.trim", 
        "syntax": "jQuery.trim( str ) Returns: String", 
        "type": "Utilities"
    }, 
    "$.type": {
        "descr": "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:", 
        "name": "jQuery.type", 
        "params": [
            {
                "descr": "Type: Anything  Object to get the internal JavaScript [[Class]] of.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.type", 
        "syntax": "jQuery.type( obj ) Returns: String", 
        "type": "Utilities"
    }, 
    "$.unique": {
        "descr": "As of jQuery 3.0, this method is deprecated and just an alias of jQuery.uniqueSort(). Please use that method instead.", 
        "name": "jQuery.unique", 
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.", 
                "name": "array"
            }
        ], 
        "path": "jquery/jquery.unique", 
        "syntax": "jQuery.unique( array ) Returns: Arrayversion deprecated: 3.0", 
        "type": "Utilities"
    }, 
    "$.uniqueSort": {
        "descr": "The $.uniqueSort() function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the exact same node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.", 
        "name": "jQuery.uniqueSort", 
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.", 
                "name": "array"
            }
        ], 
        "path": "jquery/jquery.uniquesort", 
        "syntax": "jQuery.uniqueSort( array ) Returns: Array", 
        "type": "Utilities"
    }, 
    "$.when": {
        "descr": "If no arguments are passed to jQuery.when(), it will return a resolved Promise.", 
        "name": "jQuery.when", 
        "params": [
            {
                "descr": "Type: Deferred  Zero or more Deferred objects, or plain JavaScript objects.", 
                "name": "deferreds"
            }
        ], 
        "path": "jquery/jquery.when", 
        "syntax": "jQuery.when( deferreds ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "%": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "%", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Remainder", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "%=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "%=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Remainder_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "&": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": "&", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Bitwise_AND", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "&&": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.", 
        "name": "&&", 
        "params": [], 
        "path": "javascript/operators/logical_operators#Logical_AND", 
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "&=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "&=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Bitwise_AND_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "*": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "*", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Multiplication", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "**": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "**", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Exponentiation", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "*=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "*=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Multiplication_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "+": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "+", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Unary_plus", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "++": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "++", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Increment", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "+=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "+=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Addition_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "-": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "-", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Subtraction", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "--": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "--", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Decrement", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "-=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "-=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Subtraction_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "/": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "/", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators#Division", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "/=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "/=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Division_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    ":animated selector": {
        "descr": "Note: If you use a custom jQuery build without the effects module, the :animated selector will throw an error.", 
        "name": ":animated selector", 
        "params": [], 
        "path": "jquery/animated-selector", 
        "syntax": "animated selector  Description: Select all elements that are in the progress of an animation at the time the selector is run.  version added: 1.2jQuery( \":animated\" )  Note: If you use a custom jQuery build without the effects module, the :animated", 
        "type": "Selectors"
    }, 
    ":button selector": {
        "descr": "An equivalent selector to $( \":button\" ) using valid CSS is $( \"button, input[type='button']\" ).", 
        "name": ":button selector", 
        "params": [], 
        "path": "jquery/button-selector", 
        "syntax": "button selector  Description: Selects all button elements and elements of type button.  version added: 1.0jQuery( \":button\" )  An equivalent selector to $( \":button\" )", 
        "type": "Selectors"
    }, 
    ":checkbox selector": {
        "descr": "$( \":checkbox\" ) is equivalent to $( \"[type=checkbox]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':checkbox') is equivalent to $( \"*:checkbox\" ), so $( \"input:checkbox\" ) should be used instead.", 
        "name": ":checkbox selector", 
        "params": [], 
        "path": "jquery/checkbox-selector", 
        "syntax": "checkbox selector  Description: Selects all elements of type checkbox.  version added: 1.0jQuery( \":checkbox\" )  $( \":checkbox\" )", 
        "type": "Selectors"
    }, 
    ":checked selector": {
        "descr": "The :checked selector works for checkboxes, radio buttons, and options of select elements.", 
        "name": ":checked selector", 
        "params": [], 
        "path": "jquery/checked-selector", 
        "syntax": "checked selector  Description: Matches all elements that are checked or selected.  version added: 1.0jQuery( \":checked\" )  The :checked", 
        "type": "Selectors"
    }, 
    ":contains() selector": {
        "descr": "The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of :contains() can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.", 
        "name": ":contains() selector", 
        "params": [], 
        "path": "jquery/contains-selector", 
        "syntax": "contains selector  Description: Select all elements that contain the specified text.   version added: 1.1.4jQuery( \":contains(text)\" ) text: A string of text to look for. It's case sensitive.", 
        "type": "Selectors"
    }, 
    ":disabled selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled') is equivalent to $('*:disabled'), so $('input:disabled') or similar should be used instead.", 
        "name": ":disabled selector", 
        "params": [], 
        "path": "jquery/disabled-selector", 
        "syntax": "disabled selector  Description: Selects all elements that are disabled.  version added: 1.0jQuery( \":disabled\" )  As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $(':disabled')", 
        "type": "Selectors"
    }, 
    ":empty selector": {
        "descr": "This is the inverse of :parent.", 
        "name": ":empty selector", 
        "params": [], 
        "path": "jquery/empty-selector", 
        "syntax": "empty selector  Description: Select all elements that have no children (including text nodes).", 
        "type": "Selectors"
    }, 
    ":enabled selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":enabled\" ) is equivalent to $( \"*:enabled\" ), so $( \"input:enabled\" ) or similar should be used instead.", 
        "name": ":enabled selector", 
        "params": [], 
        "path": "jquery/enabled-selector", 
        "syntax": "enabled selector  Description: Selects all elements that are enabled.  version added: 1.0jQuery( \":enabled\" )  As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":enabled\" )", 
        "type": "Selectors"
    }, 
    ":eq() selector": {
        "descr": "The index-related selectors (:eq(), :lt(), :gt(), :even, :odd) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (.myclass) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.", 
        "name": ":eq() selector", 
        "params": [], 
        "path": "jquery/eq-selector", 
        "syntax": "eq selector  Description: Select the element at index n within the matched set.    version added: 1.0jQuery( \":eq(index)\" ) index: Zero-based index of the element to match.", 
        "type": "Selectors"
    }, 
    ":even selector": {
        "descr": "In particular, note that the 0-based indexing means that, counter-intuitively, :even selects the first element, third element, and so on within the matched set.", 
        "name": ":even selector", 
        "params": [], 
        "path": "jquery/even-selector", 
        "syntax": "even selector  Description: Selects even elements, zero-indexed. See also odd.  version added: 1.0jQuery( \":even\" )  In particular, note that the 0-based indexing means that, counter-intuitively, :even", 
        "type": "Selectors"
    }, 
    ":file selector": {
        "descr": ":file is equivalent to [type=\"file\"]. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $( \":file\" ) is equivalent to $(\"*:file\" ), so $( \"input:file\" ) should be used instead.", 
        "name": ":file selector", 
        "params": [], 
        "path": "jquery/file-selector", 
        "syntax": "file selector  Description: Selects all elements of type file.  version added: 1.0jQuery( \":file\" )  :file", 
        "type": "Selectors"
    }, 
    ":first selector": {
        "descr": "The :first pseudo-class is equivalent to :eq( 0 ). It could also be written as :lt( 1 ). While this matches only a single element, :first-child can match more than one: One for each parent.", 
        "name": ":first selector", 
        "params": [], 
        "path": "jquery/first-selector", 
        "syntax": "first selector  Description: Selects the first matched DOM element.  version added: 1.0jQuery( \":first\" )  The :first", 
        "type": "Selectors"
    }, 
    ":first-child selector": {
        "descr": "While :first matches only a single element, the :first-child selector can match more than one: one for each parent. This is equivalent to :nth-child(1).", 
        "name": ":first-child selector", 
        "params": [], 
        "path": "jquery/first-child-selector", 
        "syntax": "first-child selector  Description: Selects all elements that are the first child of their parent.  version added: 1.1.4jQuery( \":first-child\" )  While :first matches only a single element, the :first-child", 
        "type": "Selectors"
    }, 
    ":first-of-type selector": {
        "descr": "The :first-of-type selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.", 
        "name": ":first-of-type selector", 
        "params": [], 
        "path": "jquery/first-of-type-selector", 
        "syntax": "first-of-type selector  Description: Selects all elements that are the first among siblings of the same element name.  version added: 1.9jQuery( \":first-of-type\" )  The :first-of-type", 
        "type": "Selectors"
    }, 
    ":focus selector": {
        "descr": "As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":focus\" ) is equivalent to $( \"*:focus\" ). If you are looking for the currently focused element, $( document.activeElement ) will retrieve it without having to search the whole DOM tree.", 
        "name": ":focus selector", 
        "params": [], 
        "path": "jquery/focus-selector", 
        "syntax": "focus selector  Description: Selects element if it is currently focused.  version added: 1.6jQuery( \":focus\" )  As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede :focus", 
        "type": "Selectors"
    }, 
    ":gt() selector": {
        "descr": "index-related selectors", 
        "name": ":gt() selector", 
        "params": [], 
        "path": "jquery/gt-selector", 
        "syntax": "gt selector  Description: Select all elements at an index greater than index within the matched set.    version added: 1.0jQuery( \":gt(index)\" ) index: Zero-based index.", 
        "type": "Selectors"
    }, 
    ":has() selector": {
        "descr": "The expression $( \"div:has(p)\" ) matches a <div> if a <p> exists anywhere among its descendants, not just as a direct child.", 
        "name": ":has() selector", 
        "params": [], 
        "path": "jquery/has-selector", 
        "syntax": "has selector  Description: Selects elements which contain at least one element that matches the specified selector.   version added: 1.1.4jQuery( \":has(selector)\" ) selector: Any selector.", 
        "type": "Selectors"
    }, 
    ":header selector": {
        "descr": "Adds a background and text color to all the headers on the page.", 
        "name": ":header selector", 
        "params": [], 
        "path": "jquery/header-selector", 
        "syntax": "header selector  Description: Selects all elements that are headers, like h1, h2, h3 and so on.  version added: 1.2jQuery( \":header\" ) Additional Notes:  Because :header", 
        "type": "Selectors"
    }, 
    ":hidden selector": {
        "descr": "Elements can be considered hidden for several reasons:", 
        "name": ":hidden selector", 
        "params": [], 
        "path": "jquery/hidden-selector", 
        "syntax": "hidden selector  Description: Selects all elements that are hidden.  version added: 1.0jQuery( \":hidden\" )  Elements can be considered hidden for several reasons:", 
        "type": "Selectors"
    }, 
    ":image selector": {
        "descr": ":image is equivalent to [type=\"image\"]", 
        "name": ":image selector", 
        "params": [], 
        "path": "jquery/image-selector", 
        "syntax": "image selector  Description: Selects all elements of type image.  version added: 1.0jQuery( \":image\" )  :image", 
        "type": "Selectors"
    }, 
    ":input selector": {
        "descr": "The :input selector basically selects all form controls.", 
        "name": ":input selector", 
        "params": [], 
        "path": "jquery/input-selector", 
        "syntax": "input selector  Description: Selects all input, textarea, select and button elements.  version added: 1.0jQuery( \":input\" )  The :input", 
        "type": "Selectors"
    }, 
    ":lang() selector": {
        "descr": "The :lang() selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by \"-\". For example, the selector $(\"div:lang(en)\")will match <div lang=\"en\"> and <div lang=\"en-us\"> (and any of their descendant <div>s), but not <div lang=\"fr\">", 
        "name": ":lang() selector", 
        "params": [], 
        "path": "jquery/lang-selector", 
        "syntax": "lang selector  Description: Selects all elements of the specified language.   version added: 1.9jQuery( \":lang(language)\" ) language: A language code.", 
        "type": "Selectors"
    }, 
    ":last selector": {
        "descr": "Note that :last selects a single element by filtering the current jQuery collection and matching the last element within it.", 
        "name": ":last selector", 
        "params": [], 
        "path": "jquery/last-selector", 
        "syntax": "last selector  Description: Selects the last matched element.  version added: 1.0jQuery( \":last\" )  Note that :last", 
        "type": "Selectors"
    }, 
    ":last-child selector": {
        "descr": "While :last matches only a single element, :last-child can match more than one: one for each parent.", 
        "name": ":last-child selector", 
        "params": [], 
        "path": "jquery/last-child-selector", 
        "syntax": "last-child selector  Description: Selects all elements that are the last child of their parent.  version added: 1.1.4jQuery( \":last-child\" )  While :last matches only a single element, :last-child", 
        "type": "Selectors"
    }, 
    ":last-of-type selector": {
        "descr": "The :last-of-type selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.", 
        "name": ":last-of-type selector", 
        "params": [], 
        "path": "jquery/last-of-type-selector", 
        "syntax": "last-of-type selector  Description: Selects all elements that are the last among siblings of the same element name.  version added: 1.9jQuery( \":last-of-type\" )  The :last-of-type", 
        "type": "Selectors"
    }, 
    ":lt() selector": {
        "descr": "index-related selectors", 
        "name": ":lt() selector", 
        "params": [], 
        "path": "jquery/lt-selector", 
        "syntax": "lt selector  Description: Select all elements at an index less than index within the matched set.    version added: 1.0jQuery( \":lt(index)\" ) index: Zero-based index.", 
        "type": "Selectors"
    }, 
    ":not() selector": {
        "descr": "All selectors are accepted inside :not(), for example: :not(div a) and :not(div,a).", 
        "name": ":not() selector", 
        "params": [], 
        "path": "jquery/not-selector", 
        "syntax": "not selector  Description: Selects all elements that do not match the given selector.   version added: 1.0jQuery( \":not(selector)\" ) selector: A selector with which to filter by.", 
        "type": "Selectors"
    }, 
    ":nth-child() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing two <li>s, $( \"li:nth-child(1)\" ) selects the first <li> while $( \"li:eq(1)\" ) selects the second.", 
        "name": ":nth-child() selector", 
        "params": [], 
        "path": "jquery/nth-child-selector", 
        "syntax": "nth-child selector  Description: Selects all elements that are the nth-child of their parent.   version added: 1.1.4jQuery( \":nth-child(index/even/odd/equation)\" ) index: The index of each child to match, starting with 1", 
        "type": "Selectors"
    }, 
    ":nth-last-child() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing three <li>s, $( \"li:nth-last-child(1)\" ) selects the third, last, <li>.", 
        "name": ":nth-last-child() selector", 
        "params": [], 
        "path": "jquery/nth-last-child-selector", 
        "syntax": "nth-last-child selector  Description: Selects all elements that are the nth-child of their parent, counting from the last element to the first.   version added: 1.9jQuery( \":nth-last-child(index/even/odd/equation)\" ) index: The index of each child to match, starting with the last one (1", 
        "type": "Selectors"
    }, 
    ":nth-last-of-type() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting. Given a single <ul> containing three <li>s, $('li:nth-last-of-type(1)') selects the third, last, <li>.", 
        "name": ":nth-last-of-type() selector", 
        "params": [], 
        "path": "jquery/nth-last-of-type-selector", 
        "syntax": "nth-last-of-type selector  Description: Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.   version added: 1.9jQuery( \":nth-last-of-type(index/even/odd/equation)\" ) index: The index of each child to match, starting with the last one (1", 
        "type": "Selectors"
    }, 
    ":nth-of-type() selector": {
        "descr": "Because jQuery's implementation of :nth- selectors is strictly derived from the CSS specification, the value of n is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as :eq() or :even jQuery follows JavaScript's \"0-indexed\" counting.", 
        "name": ":nth-of-type() selector", 
        "params": [], 
        "path": "jquery/nth-of-type-selector", 
        "syntax": "nth-of-type selector  Description: Selects all elements that are the nth child of their parent in relation to siblings with the same element name.   version added: 1.9jQuery( \":nth-of-type(index/even/odd/equation)\" ) index: The index of each child to match, starting with 1", 
        "type": "Selectors"
    }, 
    ":odd selector": {
        "descr": "In particular, note that the 0-based indexing means that, counter-intuitively, :odd selects the second element, fourth element, and so on within the matched set.", 
        "name": ":odd selector", 
        "params": [], 
        "path": "jquery/odd-selector", 
        "syntax": "odd selector  Description: Selects odd elements, zero-indexed. See also even.  version added: 1.0jQuery( \":odd\" )  In particular, note that the 0-based indexing means that, counter-intuitively, :odd", 
        "type": "Selectors"
    }, 
    ":only-child selector": {
        "descr": "If the parent has other child elements, nothing is matched.", 
        "name": ":only-child selector", 
        "params": [], 
        "path": "jquery/only-child-selector", 
        "syntax": "only-child selector  Description: Selects all elements that are the only child of their parent.  version added: 1.1.4jQuery( \":only-child\" )  If the parent has other child elements, nothing is matched.", 
        "type": "Selectors"
    }, 
    ":only-of-type selector": {
        "descr": "If the parent has other child elements with the same element name, nothing is matched.", 
        "name": ":only-of-type selector", 
        "params": [], 
        "path": "jquery/only-of-type-selector", 
        "syntax": "only-of-type selector  Description: Selects all elements that have no siblings with the same element name.  version added: 1.9jQuery( \":only-of-type\" )  If the parent has other child elements with the same element name, nothing is matched.", 
        "type": "Selectors"
    }, 
    ":parent selector": {
        "descr": "This is the inverse of :empty.", 
        "name": ":parent selector", 
        "params": [], 
        "path": "jquery/parent-selector", 
        "syntax": "parent selector  Description: Select all elements that have at least one child node (either an element or text).", 
        "type": "Selectors"
    }, 
    ":password selector": {
        "descr": "$( \":password\" ) is equivalent to $( \"[type=password]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":password\" ) is equivalent to $( \"*:password\" ), so $( \"input:password\" ) should be used instead.", 
        "name": ":password selector", 
        "params": [], 
        "path": "jquery/password-selector", 
        "syntax": "password selector  Description: Selects all elements of type password.  version added: 1.0jQuery( \":password\" )  $( \":password\" )", 
        "type": "Selectors"
    }, 
    ":radio selector": {
        "descr": "$( \":radio\" ) is equivalent to $( \"[type=radio]\" ). As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare $( \":radio\" ) is equivalent to $( \"*:radio\" ), so $( \"input:radio\" ) should be used instead.", 
        "name": ":radio selector", 
        "params": [], 
        "path": "jquery/radio-selector", 
        "syntax": "radio selector  Description: Selects all elements of type radio.  version added: 1.0jQuery( \":radio\" )  $( \":radio\" )", 
        "type": "Selectors"
    }, 
    ":reset selector": {
        "descr": ":reset is equivalent to [type=\"reset\"]", 
        "name": ":reset selector", 
        "params": [], 
        "path": "jquery/reset-selector", 
        "syntax": "reset selector  Description: Selects all elements of type reset.  version added: 1.0jQuery( \":reset\" )  :reset", 
        "type": "Selectors"
    }, 
    ":root selector": {
        "descr": "In HTML, the root of the document, and thus the element that $(\":root\") selects, is always the <html> element.", 
        "name": ":root selector", 
        "params": [], 
        "path": "jquery/root-selector", 
        "syntax": "root selector  Description: Selects the element that is the root of the document.  version added: 1.9jQuery( \":root\" )  In HTML, the root of the document, and thus the element that $(\":root\")", 
        "type": "Selectors"
    }, 
    ":selected selector": {
        "descr": "The :selected selector works for <option> elements. It does not work for checkboxes or radio inputs; use :checked for them.", 
        "name": ":selected selector", 
        "params": [], 
        "path": "jquery/selected-selector", 
        "syntax": "selected selector  Description: Selects all elements that are selected.  version added: 1.0jQuery( \":selected\" )  The :selected", 
        "type": "Selectors"
    }, 
    ":submit selector": {
        "descr": "The :submit selector typically applies to button or input elements. Note that some browsers treat <button> element as type=\"submit\" implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a type property.", 
        "name": ":submit selector", 
        "params": [], 
        "path": "jquery/submit-selector", 
        "syntax": "submit selector  Description: Selects all elements of type submit.  version added: 1.0jQuery( \":submit\" )  The :submit", 
        "type": "Selectors"
    }, 
    ":target selector": {
        "descr": "If the document's URI contains a fragment identifier, or hash, then the :target selector will match the element with an ID that matches the identifier. For example, given a document with a URI of http://example.com/#foo, $( \"p:target\" ) will select the <p id=\"foo\"> element.", 
        "name": ":target selector", 
        "params": [], 
        "path": "jquery/target-selector", 
        "syntax": "target selector  Description: Selects the target element indicated by the fragment identifier of the document's URI.  version added: 1.9jQuery( \":target\" )  If the document's URI contains a fragment identifier, or hash, then the :target", 
        "type": "Selectors"
    }, 
    ":text selector": {
        "descr": "$( \":text\" ) allows us to select all <input type=\"text\"> elements. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare $( \":text\" ) is equivalent to $( \"*:text\" ), so $( \"input:text\" ) should be used instead.", 
        "name": ":text selector", 
        "params": [], 
        "path": "jquery/text-selector", 
        "syntax": "text selector  Description: Selects all input elements of type text.  version added: 1.0jQuery( \":text\" )  $( \":text\" )", 
        "type": "Selectors"
    }, 
    ":visible selector": {
        "descr": "Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.", 
        "name": ":visible selector", 
        "params": [], 
        "path": "jquery/visible-selector", 
        "syntax": "visible selector  Description: Selects all elements that are visible.  version added: 1.0jQuery( \":visible\" )  Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.", 
        "type": "Selectors"
    }, 
    "<": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "<", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Less_than_operator", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    "<<": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": "<<", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Left_shift", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "<<=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "<<=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Left_shift_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "<=": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "<=", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Less_than_or_equal_operator", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    "=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "==": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "==", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Equality", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    "===": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "===", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Identity", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    ">": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": ">", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Greater_than_operator", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    ">=": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": ">=", 
        "params": [], 
        "path": "javascript/operators/comparison_operators#Greater_than_or_equal_operator", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    ">>": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": ">>", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Right_shift", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    ">>=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": ">>=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Right_shift_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    ">>>": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": ">>>", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Unsigned_right_shift", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    ">>>=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": ">>>=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Unsigned_right_shift_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "@@species": {
        "descr": "The RegExp[@@species] accessor property returns the RegExp constructor.", 
        "name": "RegExp.@@species", 
        "params": [], 
        "path": "javascript/global_objects/regexp/@@species", 
        "syntax": "RegExp[Symbol.species] Description The species accessor property returns the default constructor for RegExp objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the RegExp constructor for RegExp objects: RegExp[Symbol.species]; // function RegExp()", 
        "type": "RegExp"
    }, 
    "AbstractWorker.onerror": {
        "descr": "The AbstractWorker.onerror property of the AbstractWorker interface represents an EventHandler, that is a function to be called when the error event occurs and bubbles through the Worker.", 
        "name": "AbstractWorker.onerror", 
        "params": [], 
        "path": "dom/abstractworker/onerror", 
        "syntax": "myWorker.onerror = function() { ... };", 
        "type": "Web Workers"
    }, 
    "Ajax events": {
        "descr": "Ajax requests produce a number of different events that you can subscribe to. Here's a full list of the events and in what order they are triggered.", 
        "name": "Ajax events", 
        "params": [], 
        "path": "jquery/ajax_events", 
        "syntax": "document, calling any handlers which may be listening. You can listen for these events like so:  $(document).bind(\"ajaxSend\", function(){   $(\"#loading\").show();\n or  }).bind(\"ajaxComplete\", function(){   $(\"#loading\").hide();\n or  });", 
        "type": "Ajax"
    }, 
    "All selector (\"*\"": {
        "descr": "Caution: The all, or universal, selector is extremely slow, except when used by itself.", 
        "name": "All selector (\"*\"", 
        "params": [], 
        "path": "jquery/all-selector", 
        "syntax": "all selector  Description: Selects all elements.  version added: 1.0jQuery( \"*\" )  Caution: The all, or universal, selector is extremely slow, except when used by itself.", 
        "type": "Selectors"
    }, 
    "Ambient Light Events": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Ambient Light Events", 
        "params": [], 
        "path": "dom/ambient_light_events", 
        "syntax": "DeviceLightEvent event that provides information about the exact light intensity. This event can be captured at the window object level by using the addEventListener", 
        "type": "Events"
    }, 
    "AnalyserNode.fftSize": {
        "descr": "The fftSize property of the AnalyserNode interface is an unsigned long value representing the size of the FFT (Fast Fourier Transform) to be used to determine the frequency domain.", 
        "name": "AnalyserNode.fftSize", 
        "params": [], 
        "path": "dom/analysernode/fftsize", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or analyser.fftSize = 2048;);", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.frequencyBinCount": {
        "descr": "The frequencyBinCount property of the AnalyserNode interface is an unsigned long value half that of the FFT size. This generally equates to the number of data values you will have to play with for the visualization.", 
        "name": "AnalyserNode.frequencyBinCount", 
        "params": [], 
        "path": "dom/analysernode/frequencybincount", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or var bufferLength = analyser.frequencyBinCount;);", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.getByteFrequencyData": {
        "descr": "The getByteFrequencyData() method of the AnalyserNode interface copies the current frequency data into a Uint8Array (unsigned byte array) passed into it.", 
        "name": "AnalyserNode.getByteFrequencyData", 
        "params": [
            {
                "descr": "The Uint8Array that the frequency domain data will be copied to.", 
                "name": "array"
            }
        ], 
        "path": "dom/analysernode/getbytefrequencydata", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or var dataArray = new Uint8Array(analyser.frequencyBinCount);\n or  // Uint8Array should be the same length as the frequencyBinCount analyser.getByteFrequencyData(dataArray);\n or  // fill the Uint8Array with data returned from getByteFrequencyData());", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.getByteTimeDomainData": {
        "descr": "The getByteTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it.", 
        "name": "AnalyserNode.getByteTimeDomainData", 
        "params": [
            {
                "descr": "The Uint8Array that the time domain data will be copied to.", 
                "name": "array"
            }
        ], 
        "path": "dom/analysernode/getbytetimedomaindata", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or var dataArray = new Uint8Array(analyser.fftSize);\n or  // Uint8Array should be the same length as the fftSize analyser.getByteTimeDomainData(dataArray);\n or  // fill the Uint8Array with data returned from getByteTimeDomainData());", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.getFloatFrequencyData": {
        "descr": "The getFloatFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Float32Array array passed into it.", 
        "name": "AnalyserNode.getFloatFrequencyData", 
        "params": [
            {
                "descr": "The Float32Array that the frequency domain data will be copied to.", 
                "name": "array"
            }
        ], 
        "path": "dom/analysernode/getfloatfrequencydata", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or var myDataArray = new Float32Array(analyser.frequencyBinCount);\n or  // Float32Array should be the same length as the frequencyBinCount analyser.getFloatFrequencyData(myDataArray);\n or  // fill the Float32Array with data returned from getFloatFrequencyData());", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.getFloatTimeDomainData": {
        "descr": "The getFloatTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Float32Array array passed into it.", 
        "name": "AnalyserNode.getFloatTimeDomainData", 
        "params": [
            {
                "descr": "The Float32Array that the time domain data will be copied to.", 
                "name": "array"
            }
        ], 
        "path": "dom/analysernode/getfloattimedomaindata", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or var dataArray = new Float32Array(analyser.fftSize);\n or  // Float32Array needs to be the same length as the fftSize analyser.getFloatTimeDomainData(myDataArray);\n or  // fill the Float32Array with data returned from getFloatTimeDomainData());", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.maxDecibels": {
        "descr": "The maxDecibels property of the AnalyserNode interface Is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values \u2014 basically, this specifies the maximum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().", 
        "name": "AnalyserNode.maxDecibels", 
        "params": [], 
        "path": "dom/analysernode/maxdecibels", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or analyser.maxDecibels = -10;);", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.minDecibels": {
        "descr": "The minDecibels property of the AnalyserNode interface Is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte/float values \u2014 basically, this specifies the minimum value for the range of results when using getFloatFrequencyData() or getByteFrequencyData().", 
        "name": "AnalyserNode.minDecibels", 
        "params": [], 
        "path": "dom/analysernode/mindecibels", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or analyser.minDecibels = -90;);", 
        "type": "Web Audio"
    }, 
    "AnalyserNode.smoothingTimeConstant": {
        "descr": "The smoothingTimeConstant property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame. It's basically an average between the current buffer and the last buffer the AnalyserNode processed, and results in a much smoother set of value changes over time.", 
        "name": "AnalyserNode.smoothingTimeConstant", 
        "params": [], 
        "path": "dom/analysernode/smoothingtimeconstant", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();\n or analyser.smoothingTimeConstant = 1;);", 
        "type": "Web Audio"
    }, 
    "Animation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation", 
        "params": [
            {
                "descr": "Creates a new Animation object instance.", 
                "name": "Animation()"
            }, 
            {
                "descr": "The current time value of the animation in milliseconds, whether running or paused. ", 
                "name": "Animation.currentTime"
            }, 
            {
                "descr": "Gets and sets the KeyframeEffect associated with this animation.", 
                "name": "Animation.effect"
            }, 
            {
                "descr": "Returns the current finished Promise for this animation.", 
                "name": "Animation.finished Read only"
            }, 
            {
                "descr": "Gets and sets the String used to identify the animation.", 
                "name": "Animation.id"
            }, 
            {
                "descr": "Returns an enumerated value describing the playback state of an animation.", 
                "name": "Animation.playState Read only"
            }, 
            {
                "descr": "Gets or sets the playback rate of the animation.", 
                "name": "Animation.playbackRate"
            }, 
            {
                "descr": "Returns the current ready Promise for this animation.", 
                "name": "Animation.ready Read only"
            }, 
            {
                "descr": "Gets or sets the scheduled time when an animation's playback should begin.", 
                "name": "Animation.startTime"
            }, 
            {
                "descr": "Gets or sets the timeline associated with this animation.", 
                "name": "Animation.timeline"
            }, 
            {
                "descr": "Gets and sets the event handler for the cancel event.", 
                "name": "Animation.oncancel"
            }, 
            {
                "descr": "Gets and sets the event handler for the finish event.", 
                "name": "Animation.onfinish"
            }, 
            {
                "descr": "Clears all keyframeEffects caused by this animation and aborts its playback.", 
                "name": "Animation.cancel()"
            }, 
            {
                "descr": "Seeks either end of an animation, depending on whether the animation is playing or reversing.", 
                "name": "Animation.finish()"
            }, 
            {
                "descr": "Suspends playing of an animation.", 
                "name": "Animation.pause()"
            }, 
            {
                "descr": "Starts or resumes playing of an animation, or begins the animation again if it previously finished.", 
                "name": "Animation.play()"
            }, 
            {
                "descr": "Reverses playback direction, stopping at the start of the animation. ", 
                "name": "Animation.reverse()"
            }
        ], 
        "path": "dom/animation", 
        "syntax": "Animation interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source. Constructor  Animation()", 
        "type": "Animation"
    }, 
    "Animation.cancel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.cancel", 
        "params": [], 
        "path": "dom/animation/cancel", 
        "syntax": "Animation.cancel()", 
        "type": "Animation"
    }, 
    "Animation.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.constructor", 
        "params": [
            {
                "descr": "The target KeyframeEffect to assign to the animation. ", 
                "name": "effect Optional"
            }, 
            {
                "descr": "Specifies the timeline with which to associate the animation. ", 
                "name": "timeline Optional"
            }
        ], 
        "path": "dom/animation/animation", 
        "syntax": "Animation()", 
        "type": "Animation"
    }, 
    "Animation.currentTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.currentTime", 
        "params": [], 
        "path": "dom/animation/currenttime", 
        "syntax": "Animation.currentTime property of the Web Animations API returns and sets the current time value of the animation in milliseconds, whether running or paused. If the animation lacks a timeline", 
        "type": "Animation"
    }, 
    "Animation.effect": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.effect", 
        "params": [], 
        "path": "dom/animation/effect", 
        "syntax": "Animation.effect property of the Web Animations API gets and sets the target effect of an animation. The target effect may be either a KeyframeEffect", 
        "type": "Animation"
    }, 
    "Animation.finish": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.finish", 
        "params": [], 
        "path": "dom/animation/finish", 
        "syntax": "Animation.finish()", 
        "type": "Animation"
    }, 
    "Animation.finished": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.finished", 
        "params": [], 
        "path": "dom/animation/finished", 
        "syntax": "Animation.finished read-only property of the Web Animations API allows you to return the finished state of the animation so that further code can be run after it has finished.  Note: The Promise is replaced with a new (pending) Promise object every time the animation leaves the finished", 
        "type": "Animation"
    }, 
    "Animation.id": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.id", 
        "params": [], 
        "path": "dom/animation/id", 
        "syntax": "Animation.id property of the Web Animations API returns or sets a string used to identify the animation. Syntax // gettingvar animationsId = animation.id;// settinganimation.id = \"newId\"; Value A DOMString, or null if the animation hasn't been assigned an id. Examples In the Follow the White Rabbit example, you can assign the rabbitDownAnimation an id like so: rabbitDownAnimation.effect.id = \"rabbitGo\"; Specifications    Specification Status Comment   Web AnimationsThe definition of 'Animation.id' in that specification. Working Draft Editor's draft.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 39.0 48 (48) [1] No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support (Yes) 48 (48) [1] No support No support No support     [1] This feature is enabled by default as of Firefox 48. For older versions the preference dom.animations-api.core.enabled", 
        "type": "Animation"
    }, 
    "Animation.oncancel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.oncancel", 
        "params": [], 
        "path": "dom/animation/oncancel", 
        "syntax": "Animation.oncancel property of the Web Animations API is the event handler for the cancel event. The cancel event can be triggered manually with Animation.cancel()", 
        "type": "Animation"
    }, 
    "Animation.onfinish": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.onfinish", 
        "params": [], 
        "path": "dom/animation/onfinish", 
        "syntax": "Animation.onfinish property of the Web Animations API is the event handler for the finish event. The finish event can be triggered manually with Animation.finish()", 
        "type": "Animation"
    }, 
    "Animation.pause": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.pause", 
        "params": [], 
        "path": "dom/animation/pause", 
        "syntax": "Animation.pause()", 
        "type": "Animation"
    }, 
    "Animation.play": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.play", 
        "params": [], 
        "path": "dom/animation/play", 
        "syntax": "Animation.play()", 
        "type": "Animation"
    }, 
    "Animation.playState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.playState", 
        "params": [
            {
                "descr": "The current time of the animation is unresolved and there are no pending tasks.", 
                "name": "idle"
            }, 
            {
                "descr": "The animation is waiting on some pending task to complete.", 
                "name": "pending"
            }, 
            {
                "descr": "The animation is running.", 
                "name": "running"
            }, 
            {
                "descr": "The animation was suspended and the Animation.currentTime property is not updating.", 
                "name": "paused"
            }, 
            {
                "descr": "The animation has reached one of its boundaries and the Animation.currentTime property is not updating.", 
                "name": "finished"
            }
        ], 
        "path": "dom/animation/playstate", 
        "syntax": "Animation.playState property of the Web Animations API returns and sets an enumerated value describing the playback state of an animation.  Note: This property is readonly for CSS Animations and Transitions.  Syntax // getting playStatevar currentPlayState = anAnimationPlayer.playState;// setting playStateanAnimationPlayer.playState = 'paused'; Value  idle The current time of the animation is unresolved and there are no pending tasks. pending The animation is waiting on some pending task to complete. running The animation is running. paused The animation was suspended and the Animation.currentTime property is not updating. finished The animation has reached one of its boundaries and the Animation.currentTime property is not updating.  Example In the Growing/Shrinking Alice Game example, players can get an ending with Alice crying into a pool of tears. In the game, for performance reasons, the tears should only be animating when they're visible. So they must be paused as soon as they are animated like so: // Setting up the tear animationstears.forEach(function(el) { \u00a0\u00a0 el.animate(\u00a0 \u00a0 tearsFalling,\u00a0\u00a0 \u00a0 {\u00a0 \u00a0 \u00a0 delay: getRandomMsRange(-1000, 1000), // randomized for each tear\u00a0 \u00a0 \u00a0 duration: getRandomMsRange(2000, 6000), // randomized for each tear\u00a0 \u00a0 \u00a0 iterations: Infinity,\u00a0 \u00a0 \u00a0 easing: \"cubic-bezier(0.6, 0.04, 0.98, 0.335)\"\u00a0 \u00a0 });\n or \u00a0 el.playState = 'paused';});\n or // Play the tears falling when the ending needs to be shown. tears.forEach(function(el) { \u00a0 el.playState = 'playing'; });\n or // Reset the crying tears animations and pause them.tears.forEach(function(el) { \u00a0  el.playState = \"paused\";  el.currentTime = 0;});", 
        "type": "Animation"
    }, 
    "Animation.playbackRate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.playbackRate", 
        "params": [], 
        "path": "dom/animation/playbackrate", 
        "syntax": "Animation.playbackRate property of the Web Animations API returns or sets the playback rate of the animation. Animations have a playback rate that provides a scaling factor from the rate of change of the animation's timeline", 
        "type": "Animation"
    }, 
    "Animation.ready": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.ready", 
        "params": [], 
        "path": "dom/animation/ready", 
        "syntax": "Animation.ready property of the Web Animations API returns the current ready Promise for this object. The object is replaced with a new Promise object every time the animation enters the pending play state as well as when the animation is canceled.  Note: Since the same Promise object is used for both pending play and pending pause requests, authors are advised to check the state of the animation when the Promise object is resolved.  Syntax animation.ready.then(function() {  // do something when ready});", 
        "type": "Animation"
    }, 
    "Animation.reverse": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.reverse", 
        "params": [], 
        "path": "dom/animation/reverse", 
        "syntax": "Animation.reverse()", 
        "type": "Animation"
    }, 
    "Animation.startTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.startTime", 
        "params": [], 
        "path": "dom/animation/starttime", 
        "syntax": "Animation.startTime property of the Animation interface returns or sets the scheduled time when an animation's playback should begin.  An animation\u2019s start time is the time value of its DocumentTimeline when its target KeyframeEffect", 
        "type": "Animation"
    }, 
    "Animation.timeline": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Animation.timeline", 
        "params": [], 
        "path": "dom/animation/timeline", 
        "syntax": "Animation.timeline property of the Animation interface returns or sets the timeline", 
        "type": "Animation"
    }, 
    "AnimationEffectReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectReadOnly", 
        "params": [
            {
                "descr": "The AnimationEffectTimingReadOnly object associated with the animation containing all the animation's timing values.", 
                "name": "AnimationEffectReadOnly.timing Read only"
            }, 
            {
                "descr": "Returns the calculated timing properties for this Animation Effect.", 
                "name": "AnimationEffectReadOnly.getComputedTiming()"
            }
        ], 
        "path": "dom/animationeffectreadonly", 
        "syntax": "AnimationEffectReadOnly interface of the Web Animations API defines current and future \"Animation Effects\" like KeyframeEffect", 
        "type": "Animation"
    }, 
    "AnimationEffectReadOnly.getComputedTiming": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectReadOnly.getComputedTiming", 
        "params": [
            {
                "descr": "Returns the calculated value of the iteration duration. ", 
                "name": "duration"
            }, 
            {
                "descr": "The auto value is replaced with the appropriate AnimationEffectTimingReadOnly.fill value.", 
                "name": "fill"
            }, 
            {
                "descr": "The end time of the animation in milliseconds from the animation's start (if the KeyframeEffect is associated with an Animation). ", 
                "name": "endTime"
            }, 
            {
                "descr": "The length of time in milliseconds that the animation's effects will run. ", 
                "name": "activeDuration"
            }, 
            {
                "descr": "The current time of the animation in milliseconds. ", 
                "name": "localTime"
            }, 
            {
                "descr": "Indicates how far along the animation is through its current iteration with values between 0 and 1. ", 
                "name": "progress"
            }, 
            {
                "descr": "The number of times this animation has looped, starting from 0. ", 
                "name": "currentIteration"
            }
        ], 
        "path": "dom/animationeffectreadonly/getcomputedtiming", 
        "syntax": "getComputedTiming()", 
        "type": "Animation"
    }, 
    "AnimationEffectReadOnly.timing": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectReadOnly.timing", 
        "params": [], 
        "path": "dom/animationeffectreadonly/timing", 
        "syntax": "AnimationEffectReadOnly.timing read-only attribute of the AnimationEffectReadOnly", 
        "type": "Animation"
    }, 
    "AnimationEffectTiming": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTiming", 
        "params": [
            {
                "descr": "The number of milliseconds to delay the start of the animation. ", 
                "name": "AnimationEffectTimingReadOnly.delay"
            }, 
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ", 
                "name": "AnimationEffectTimingReadOnly.endDelay"
            }, 
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) state prior to playing (backwards), retained after the animation has completed playing (forwards), or both. ", 
                "name": "AnimationEffectTimingReadOnly.fill"
            }, 
            {
                "descr": "A number representing the which repetition the animation begins at and its progress through it.", 
                "name": "AnimationEffectTimingReadOnly.iterationStart"
            }, 
            {
                "descr": "The number of times the animation should repeat. ", 
                "name": "AnimationEffectTimingReadOnly.iterations"
            }, 
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ", 
                "name": "AnimationEffectTimingReadOnly.duration"
            }, 
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.", 
                "name": "AnimationEffectReadOnly.direction"
            }, 
            {
                "descr": "The rate of the animation's change over time. ", 
                "name": "AnimationEffectTimingReadOnly.easing"
            }
        ], 
        "path": "dom/animationeffecttiming", 
        "syntax": "AnimationEffectTiming interface of the Web Animations API is comprised of timing properties. It is returned by the timing attribute of a KeyframeEffect", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties", 
        "params": [
            {
                "descr": "The number of milliseconds to delay the start of the animation. ", 
                "name": "AnimationEffectTimingProperties.delay Optional"
            }, 
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.", 
                "name": "AnimationEffectTimingProperties.direction Optional"
            }, 
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ", 
                "name": "AnimationEffectTimingProperties.duration Optional"
            }, 
            {
                "descr": "The rate of the animation's change over time. ", 
                "name": "AnimationEffectTimingProperties.easing Optional"
            }, 
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ", 
                "name": "AnimationEffectTimingProperties.endDelay Optional"
            }, 
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (backwards), retained after the animation has completed playing (forwards), or both. ", 
                "name": "AnimationEffectTimingProperties.fill Optional"
            }, 
            {
                "descr": "Describes at what point in the iteration the animation should start. ", 
                "name": "AnimationEffectTimingProperties.iterationStart Optional"
            }, 
            {
                "descr": "The number of times the animation should repeat. ", 
                "name": "AnimationEffectTimingProperties.iterations Optional"
            }
        ], 
        "path": "dom/animationeffecttimingproperties", 
        "syntax": "Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.delay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.delay", 
        "params": [], 
        "path": "dom/animationeffecttimingproperties/delay", 
        "syntax": "delay property of the Web Animations API represents the number of milliseconds to delay the start of the animation.  Note: Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.direction": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.direction", 
        "params": [
            {
                "descr": "The animation runs forwards, from beginning to end, in the way we experience the flow of time.", 
                "name": "normal"
            }, 
            {
                "descr": "The animation runs backwards, or \"rewinds.\"", 
                "name": "reverse"
            }, 
            {
                "descr": "The animation switches direction after each iteration, going from forwards to backwards then back again every two iterations.", 
                "name": "alternate"
            }, 
            {
                "descr": "The reverse of the above: the animation switches direction after each iteration, going from backwards to forwards then back again every two iterations.", 
                "name": "alternate-reverse"
            }
        ], 
        "path": "dom/animationeffecttimingproperties/direction", 
        "syntax": "direction property of the Web Animations API represents the direction of the animation's playback along its timeline and its behavior after completing each iteration.  Note: Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.duration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.duration", 
        "params": [], 
        "path": "dom/animationeffecttimingproperties/duration", 
        "syntax": "duration property of the Web Animations API represents the duration in milliseconds to complete a single iteration of the animation.  Note: Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.easing": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.easing", 
        "params": [
            {
                "descr": "A constant rate of change, neither accelerating nor deccelerating.", 
                "name": "linear"
            }, 
            {
                "descr": "Specifies a cubic B\u00e9zier timing function. ", 
                "name": "cubic-bezier(<number>, <number>, <number>, <number>)"
            }, 
            {
                "descr": "A decelerated rate of change, going from fast to slow. ", 
                "name": "ease"
            }, 
            {
                "descr": "An accelerated rate of change, going from slow to fast. ", 
                "name": "ease-in"
            }, 
            {
                "descr": "Another decelerated rate of change, going from fast to slow. ", 
                "name": "ease-out"
            }, 
            {
                "descr": "This rate of change speeds up in the middle. ", 
                "name": "ease-in-out"
            }, 
            {
                "descr": "Specifies a step timing function. ", 
                "name": "steps(<integer>[, [ start | end ] ]?)"
            }, 
            {
                "descr": "Equivalent to steps(1, start)", 
                "name": "step-start"
            }, 
            {
                "descr": "Equivalent to steps(1, end).", 
                "name": "step-end"
            }
        ], 
        "path": "dom/animationeffecttimingproperties/easing", 
        "syntax": "easing property of the Web Animations API represents the timing function used to scale the time to produce easing effects. Easing is the rate of the animation's change over time.  Note: Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.endDelay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.endDelay", 
        "params": [], 
        "path": "dom/animationeffecttimingproperties/enddelay", 
        "syntax": "endDelay property of the Web Animations API represents the number of milliseconds to delay after the end time of an animation. The end time of an animation effect is simply the sum of its delay, duration, and endDelay.  This is useful for sequencing animations based on the end time of another animation.  Note: Although this is typically only useful in combination with sequence effects introduced in a subsequent level of this specification, it is included here for the purpose of representing the min attribute in SVG ([SVG11], Chapter 19).", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.fill": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.fill", 
        "params": [
            {
                "descr": "The animation's effects are only visible while the animation is iterating or its playhead is positioned over an iteration. ", 
                "name": "none"
            }, 
            {
                "descr": "The animation's effects should be retained after the animation has completed playing, in spite of and during any endDelay or when its playState is finished.", 
                "name": "forwards"
            }, 
            {
                "descr": "The animation's effects should be reflected by the element(s) state prior to playing, in spite of and during any delay and pending playState.", 
                "name": "backwards"
            }, 
            {
                "descr": "Combining the effects of both forwards and backwards: The animation's effects should be reflected by the element(s) state prior to playing and retained after the animation has completed playing, in spite of and during any endDelay, delay and/or pending or finished playState.", 
                "name": "both"
            }
        ], 
        "path": "dom/animationeffecttimingproperties/fill", 
        "syntax": "fill property of the Web Animations API dictates how and when the animation's effects should be reflected by the element(s) visual state.", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.iterationStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.iterationStart", 
        "params": [], 
        "path": "dom/animationeffecttimingproperties/iterationstart", 
        "syntax": "iterationStart property of the Web Animations API represents which repetition the animation begins at and its progress through it.  Note: Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingProperties.iterations": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingProperties.iterations", 
        "params": [], 
        "path": "dom/animationeffecttimingproperties/iterations", 
        "syntax": "iterations property of the Web Animations API the number of times the animation should repeat. It defaults to 1, and can also take a value of Infinity to make it loop infinitely.   Note: Element.animate()", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly", 
        "params": [
            {
                "descr": "The number of milliseconds to delay the start of the animation. ", 
                "name": "AnimationEffectTimingReadOnly.delayRead only"
            }, 
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.", 
                "name": "AnimationEffectTimingReadOnly.directionRead only"
            }, 
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ", 
                "name": "AnimationEffectTimingReadOnly.durationRead only"
            }, 
            {
                "descr": "The rate of the animation's change over time. ", 
                "name": "AnimationEffectTimingReadOnly.easingRead only"
            }, 
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ", 
                "name": "AnimationEffectTimingReadOnly.endDelayRead only"
            }, 
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) state prior to playing (backwards), retained after the animation has completed playing (forwards), or both. ", 
                "name": "AnimationEffectTimingReadOnly.fillRead only"
            }, 
            {
                "descr": "A number representing which repetition the animation begins at and its progress through it.", 
                "name": "AnimationEffectTimingReadOnly.iterationStartRead only"
            }, 
            {
                "descr": "The number of times the animation should repeat. ", 
                "name": "AnimationEffectTimingReadOnly.iterationsRead only"
            }
        ], 
        "path": "dom/animationeffecttimingreadonly", 
        "syntax": "AnimationEffectTimingReadOnly interface of the Web Animations API is comprised of timing properties. This object is returned by the timing attribute of a KeyframeEffectReadOnly", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.delay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.delay", 
        "params": [], 
        "path": "dom/animationeffecttimingreadonly/delay", 
        "syntax": "delay property of the AnimationEffectTimingReadOnly object represents the number of milliseconds to delay the start of the animation.  Note: In AnimationEffectTiming, a mutable subclass of AnimationEffectTimingReadOnly used withKeyframeEffects", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.direction": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.direction", 
        "params": [
            {
                "descr": "The animation runs forwards, from beginning to end, in the way we experience the flow of time.", 
                "name": "normal"
            }, 
            {
                "descr": "The animation runs backwards, or \"rewinds.\"", 
                "name": "reverse"
            }, 
            {
                "descr": "The animation switches direction after each iteration, going from forwards to backwards then back again every two iterations.", 
                "name": "alternate"
            }, 
            {
                "descr": "The reverse of the above: the animation switches direction after each iteration, going from backwards to forwards then back again every two iterations.", 
                "name": "alternate-reverse"
            }
        ], 
        "path": "dom/animationeffecttimingreadonly/direction", 
        "syntax": "direction property of the AnimationEffectTimingReadOnly dictionary object represents the direction of the animation's playback along its timeline and its behavior after completing each iteration.  Note: In AnimationEffectTiming, a mutable subclass of AnimationEffectTimingReadOnly used withKeyframeEffects", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.duration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.duration", 
        "params": [], 
        "path": "dom/animationeffecttimingreadonly/duration", 
        "syntax": "duration property of AnimationEffectTimingReadOnly represents the duration in milliseconds to complete a single iteration of the animation.  Note: In AnimationEffectTiming, a mutable subclass of AnimationEffectTimingReadOnly used withKeyframeEffects", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.easing": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.easing", 
        "params": [
            {
                "descr": "A constant rate of change, neither accelerating nor deccelerating.", 
                "name": "linear"
            }, 
            {
                "descr": "Specifies a cubic B\u00e9zier timing function. ", 
                "name": "cubic-bezier(<number>, <number>, <number>, <number>)"
            }, 
            {
                "descr": "A decelerated rate of change, going from fast to slow. ", 
                "name": "ease"
            }, 
            {
                "descr": "An accelerated rate of change, going from slow to fast. ", 
                "name": "ease-in"
            }, 
            {
                "descr": "Another decelerated rate of change, going from fast to slow. ", 
                "name": "ease-out"
            }, 
            {
                "descr": "This rate of change speeds up in the middle. ", 
                "name": "ease-in-out"
            }, 
            {
                "descr": "Specifies a step timing function. ", 
                "name": "steps(<integer>[, [ start | end ] ]?)"
            }, 
            {
                "descr": "Equivalent to steps(1, start)", 
                "name": "step-start"
            }, 
            {
                "descr": "Equivalent to steps(1, end).", 
                "name": "step-end"
            }
        ], 
        "path": "dom/animationeffecttimingreadonly/easing", 
        "syntax": "easing property of the AnimationEffectTimingReadOnly object represents the timing function used to scale the time to produce easing effects. Easing is the rate of the animation's change over time.  Note: In AnimationEffectTiming, a mutable subclass of AnimationEffectTimingReadOnly used withKeyframeEffects", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.endDelay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.endDelay", 
        "params": [], 
        "path": "dom/animationeffecttimingreadonly/enddelay", 
        "syntax": "endDelay property of AnimationEffectTimingReadOnly represents the number of milliseconds to delay after the end time of an animation. The end time of an animation effect is simply the sum of its delay, duration, and endDelay.  This is useful for sequencing animations based on the end time of another animation.  Note: Although this is typically only useful in combination with sequence effects introduced in a subsequent level of this specification, it is included here for the purpose of representing the min attribute in SVG ([SVG11], Chapter 19).", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.fill": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.fill", 
        "params": [
            {
                "descr": "The animation's effects are only visible while the animation is iterating or its playhead is positioned over an iteration. ", 
                "name": "none"
            }, 
            {
                "descr": "The animation's effects should be retained after the animation has completed playing, in spite of and during any endDelay or when its playState is finished.", 
                "name": "forwards"
            }, 
            {
                "descr": "The animation's effects should be reflected by the element(s) state prior to playing, in spite of and during any delay and pending playState.", 
                "name": "backwards"
            }, 
            {
                "descr": "Combining the effects of both forwards and backwards: The animation's effects should be reflected by the element(s) state prior to playing and retained after the animation has completed playing, in spite of and during any endDelay, delay and/or pending or finished playState.", 
                "name": "both"
            }
        ], 
        "path": "dom/animationeffecttimingreadonly/fill", 
        "syntax": "fill property of AnimationEffectTimingReadOnly dictates how and when the animation's effects should be reflected by the element(s) visual state.", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.iterationStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.iterationStart", 
        "params": [], 
        "path": "dom/animationeffecttimingreadonly/iterationstart", 
        "syntax": "iterationStart property of AnimationEffectTimingReadOnly represents which repetition the animation begins at and its progress through it.  Note: In AnimationEffectTiming, a mutable subclass of AnimationEffectTimingReadOnly used withKeyframeEffects", 
        "type": "Animation"
    }, 
    "AnimationEffectTimingReadOnly.iterations": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEffectTimingReadOnly.iterations", 
        "params": [], 
        "path": "dom/animationeffecttimingreadonly/iterations", 
        "syntax": "iterations property of AnimationEffectTimingReadOnly represents the number of times the animation should repeat. It defaults to 1, and can also take a value of Infinity to make it loop infinitely.   Note: In AnimationEffectTiming, a mutable subclass of AnimationEffectTimingReadOnly used withKeyframeEffects", 
        "type": "Animation"
    }, 
    "AnimationEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent", 
        "params": [
            {
                "descr": "Is a DOMString containing the value of the animation-name CSS property associated with the transition.", 
                "name": "AnimationEvent.animationName Read only"
            }, 
            {
                "descr": "Is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "AnimationEvent.elapsedTime Read only"
            }, 
            {
                "descr": "Is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. ", 
                "name": "AnimationEvent.pseudoElement Read only"
            }, 
            {
                "descr": "Creates an AnimationEvent event with the given parameters.", 
                "name": "AnimationEvent()"
            }, 
            {
                "descr": "Initializes a AnimationEvent created using the deprecated Document.createEvent(\"AnimationEvent\") method.", 
                "name": "AnimationEvent.initAnimationEvent()"
            }
        ], 
        "path": "dom/animationevent", 
        "syntax": "AnimationEvent interface represents events providing information related to animations.   Properties Also inherits properties from its parent Event.  AnimationEvent.animationName Read only  Is a DOMString containing the value of the animation-name CSS property associated with the transition. AnimationEvent.elapsedTime", 
        "type": "Animation"
    }, 
    "AnimationEvent.animationName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.animationName", 
        "params": [], 
        "path": "dom/animationevent/animationname", 
        "syntax": "AnimationEvent.animationName read-only property is a DOMString containing the value of the animation-name CSS property associated with the transition. Syntax name = AnimationEvent.animationName Specifications    Specification Status Comment     CSS AnimationsThe definition of 'AnimationEvent.animationName' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 6.0 (6.0) 10.0 (Yes) (Yes)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? ? ? ? ? 43.0     See also", 
        "type": "Animation"
    }, 
    "AnimationEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationEvent.constructor", 
        "params": [
            {
                "descr": "A DOMString representing the name of the type of the AnimationEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "A DOMString containing the value of the animation-name CSS property associated with the transition. ", 
                "name": "animationName Optional"
            }, 
            {
                "descr": "A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "elapsedTime Optional"
            }, 
            {
                "descr": "Is a DOMString, starting with \"::\", containing the name of the pseudo-element the animation runs on. ", 
                "name": "pseudoElement Optional"
            }
        ], 
        "path": "dom/animationevent/animationevent", 
        "syntax": "AnimationEvent()", 
        "type": "Animation"
    }, 
    "AnimationEvent.elapsedTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.elapsedTime", 
        "params": [], 
        "path": "dom/animationevent/elapsedtime", 
        "syntax": "AnimationEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an \"animationstart\" event, elapsedTime is 0.0 unless there was a negative value for animation-delay, in which case the event will be fired with elapsedTime containing (-1 * delay)", 
        "type": "Animation"
    }, 
    "AnimationEvent.initAnimationEvent": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "AnimationEvent.initAnimationEvent", 
        "params": [
            {
                "descr": "A DOMString identifying the specific type of animation event that occurred. ", 
                "name": "typeArg"
            }, 
            {
                "descr": "A Boolean flag indicating if the event can bubble (true) or not (false).", 
                "name": "canBubbleArg"
            }, 
            {
                "descr": "A Boolean flag indicating if the event associated action can be avoided (true) or not (false).", 
                "name": "cancelableArg"
            }, 
            {
                "descr": "A DOMString containing the value of the animation-name CSS property associated with the transition.", 
                "name": "animationNameArg"
            }, 
            {
                "descr": "A float indicating the amount of time the animation has been running, in seconds, as of the time the event was fired, excluding any time the animation was paused. ", 
                "name": "elapsedTimeArg"
            }
        ], 
        "path": "dom/animationevent/initanimationevent", 
        "syntax": "animationEvent.initAnimationEvent(typeArg, canBubbleArg, cancelableArg, animationNameArg, elapsedTimeArg);", 
        "type": "Animation"
    }, 
    "AnimationEvent.pseudoElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "AnimationEvent.pseudoElement", 
        "params": [], 
        "path": "dom/animationevent/pseudoelement", 
        "syntax": "AnimationEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element, an empty string: ''. Syntax name = AnimationEvent.pseudoElement Specifications    Specification Status Comment     CSS AnimationsThe definition of 'AnimationEvent.pseudoElement' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported     See also", 
        "type": "Animation"
    }, 
    "AnimationPlaybackEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationPlaybackEvent", 
        "params": [
            {
                "descr": "Constructs a new AnimationPlaybackEvent object instance.", 
                "name": "AnimationPlaybackEvent.AnimationPlaybackEvent()"
            }, 
            {
                "descr": "The current time of the animation that generated the event.", 
                "name": "AnimationPlaybackEvent.currentTime"
            }, 
            {
                "descr": "The time value of the timeline of the animation that generated the event.", 
                "name": "AnimationPlaybackEvent.timelineTime"
            }
        ], 
        "path": "dom/animationplaybackevent", 
        "syntax": "playState through animation events. Constructor  AnimationPlaybackEvent.AnimationPlaybackEvent()", 
        "type": "Animation"
    }, 
    "AnimationPlaybackEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationPlaybackEvent.constructor", 
        "params": [
            {
                "descr": "A DOMString representing the name of the event.", 
                "name": "type"
            }, 
            {
                "descr": "An optional EventInit dictionary object containing the following fields:  bubbles Optional Defaults to false, of type Boolean, indicating if the event bubbles or not.", 
                "name": "eventInitDict\u00a0Optional"
            }, 
            {
                "descr": "Defaults to false, of type Boolean, indicating if the event can be canceled or not.", 
                "name": "cancelable Optional"
            }, 
            {
                "descr": "Defaults to null, of type any \u2014 an event-dependent value associated with the event.", 
                "name": "detail Optional"
            }
        ], 
        "path": "dom/animationplaybackevent/animationplaybackevent", 
        "syntax": "AnimationPlaybackEvent()", 
        "type": "Animation"
    }, 
    "AnimationPlaybackEvent.currentTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationPlaybackEvent.currentTime", 
        "params": [], 
        "path": "dom/animationplaybackevent/currenttime", 
        "syntax": "currentTime read-only property of the AnimationPlaybackEvent interface represents the current time of the animation that generated the event at the moment the event is queued. This will be unresolved if the animation was idle at the time the event was generated. Value A number representing the current time in milliseconds, or null. Specifications    Specification Status Comment   Web AnimationsThe definition of 'AnimationPlaybackEvent.currentTime' in that specification. Working Draft Editor's draft.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support No support (Yes) No support No support No support         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support No support No support No support No support No support No support No support No support     See also", 
        "type": "Animation"
    }, 
    "AnimationPlaybackEvent.timelineTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationPlaybackEvent.timelineTime", 
        "params": [], 
        "path": "dom/animationplaybackevent/timelinetime", 
        "syntax": "timelineTime read-only property of the AnimationPlaybackEvent interface represents the time value of the animation's timeline", 
        "type": "Animation"
    }, 
    "AnimationTimeline": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationTimeline", 
        "params": [
            {
                "descr": "Returns the time value in milliseconds for this timeline or null if this timeline is inactive.", 
                "name": "AnimationTimeline.currentTime Read only"
            }
        ], 
        "path": "dom/animationtimeline", 
        "syntax": "AnimationTimeline interface of the Web Animations API represents the timeline of animation. This interface exists to define timeline features (inherited by DocumentTimeline", 
        "type": "Animation"
    }, 
    "AnimationTimeline.currentTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "AnimationTimeline.currentTime", 
        "params": [], 
        "path": "dom/animationtimeline/currenttime", 
        "syntax": "currentTime read only property of the AnimationTimeline", 
        "type": "Animation"
    }, 
    "Arithmetic Operators": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "Arithmetic Operators", 
        "params": [], 
        "path": "javascript/operators/arithmetic_operators", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "Array": {
        "descr": "The JavaScript Array object is a global object that is used in the construction of arrays; which are high-level, list-like objects.", 
        "name": "Array", 
        "params": [
            {
                "descr": "A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the Array constructor and that argument is a number (see the arrayLength parameter below).Note that this special case only applies to JavaScript arrays created with the Array constructor, not array literals created with the bracket syntax.", 
                "name": "elementN"
            }, 
            {
                "descr": "If the only argument passed to the Array constructor is an integer between 0 and 232-1 (inclusive), this returns a new JavaScript array with length set to that number. ", 
                "name": "arrayLength"
            }, 
            {
                "descr": "The Array constructor's length property whose value is 1.", 
                "name": "Array.length"
            }, 
            {
                "descr": "The constructor function that is used to create derived objects.", 
                "name": "get Array[@@species]"
            }, 
            {
                "descr": "Allows the addition of properties to all array objects.", 
                "name": "Array.prototype"
            }, 
            {
                "descr": "Creates a new Array instance from an array-like or iterable object.", 
                "name": "Array.from()"
            }, 
            {
                "descr": "Returns true if a variable is an array, if not false.", 
                "name": "Array.isArray()"
            }, 
            {
                "descr": "Creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.", 
                "name": "Array.of()"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "Array.prototype.constructor"
            }, 
            {
                "descr": "Reflects the number of elements in an array.", 
                "name": "Array.prototype.length"
            }, 
            {
                "descr": "A symbol containing property names to exclude from a with binding scope.", 
                "name": "Array.prototype[@@unscopables]"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array.", 
                "name": "Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value.", 
                "name": "Array.prototype.fill()"
            }, 
            {
                "descr": "Removes the last element from an array and returns that element.", 
                "name": "Array.prototype.pop()"
            }, 
            {
                "descr": "Adds one or more elements to the end of an array and returns the new length of the array.", 
                "name": "Array.prototype.push()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array in place \u2014 the first becomes the last, and the last becomes the first.", 
                "name": "Array.prototype.reverse()"
            }, 
            {
                "descr": "Removes the first element from an array and returns that element.", 
                "name": "Array.prototype.shift()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array.", 
                "name": "Array.prototype.sort()"
            }, 
            {
                "descr": "Adds and/or removes elements from an array.", 
                "name": "Array.prototype.splice()"
            }, 
            {
                "descr": "Adds one or more elements to the front of an array and returns the new length of the array.", 
                "name": "Array.prototype.unshift()"
            }, 
            {
                "descr": "Returns a new array comprised of this array joined with other array(s) and/or value(s).", 
                "name": "Array.prototype.concat()"
            }, 
            {
                "descr": "Determines whether an array contains a certain element, returning true or false as appropriate.", 
                "name": "Array.prototype.includes()"
            }, 
            {
                "descr": "Joins all elements of an array into a string.", 
                "name": "Array.prototype.join()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array.", 
                "name": "Array.prototype.slice()"
            }, 
            {
                "descr": "Returns an array literal representing the specified array; you can use this value to create a new array. ", 
                "name": "Array.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Calls a function for each element in the array.", 
                "name": "Array.prototype.forEach()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array.", 
                "name": "Array.prototype.entries()"
            }, 
            {
                "descr": "Returns true if every element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.every()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.some()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true.", 
                "name": "Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.", 
                "name": "Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.", 
                "name": "Array.prototype.findIndex()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array.", 
                "name": "Array.prototype.keys()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array.", 
                "name": "Array.prototype.map()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.", 
                "name": "Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.", 
                "name": "Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Array.prototype.values()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/array", 
        "syntax": "[element0, element1, ..., elementN]new Array(element0, element1[, ...[, elementN]])new Array(arrayLength)", 
        "type": "Array"
    }, 
    "Array comprehensions": {
        "descr": "The array comprehension syntax is a JavaScript expression which allows you to quickly assemble a new array based on an existing one. Comprehensions exist in many programming languages.", 
        "name": "Array comprehensions", 
        "params": [], 
        "path": "javascript/operators/array_comprehensions", 
        "syntax": "[for (x of iterable) x][for (x of iterable) if (condition) x][for (x of iterable) for (y of iterable) x + y]", 
        "type": "Operators"
    }, 
    "Array.@@species": {
        "descr": "The Array[@@species] accessor property returns the Array constructor.", 
        "name": "Array.@@species", 
        "params": [], 
        "path": "javascript/global_objects/array/@@species", 
        "syntax": "Array[Symbol.species] Return value The Array constructor. Description The species accessor property returns the default constructor for Array objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the Array constructor for Array objects: Array[Symbol.species]; // function Array()", 
        "type": "Array"
    }, 
    "Array.from": {
        "descr": "The Array.from() method creates a new Array instance from an array-like or iterable object.", 
        "name": "Array.from", 
        "params": [
            {
                "descr": "An array-like or iterable object to convert to an array.", 
                "name": "arrayLike"
            }, 
            {
                "descr": "Optional. Map function to call on every element of the array.", 
                "name": "mapFn"
            }, 
            {
                "descr": "Optional. Value to use as this when executing mapFn.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/from", 
        "syntax": "Array.from are \"inherited\" by subclasses of Array and create new instances of the subclass, not Array. Syntax Array.from(arrayLike[, mapFn[, thisArg]])", 
        "type": "Array"
    }, 
    "Array.isArray": {
        "descr": "The Array.isArray() determines whether the passed value is an Array.", 
        "name": "Array.isArray", 
        "params": [
            {
                "descr": "The object to be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/array/isarray", 
        "syntax": "Array.isArray(obj)", 
        "type": "Array"
    }, 
    "Array.of": {
        "descr": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.", 
        "name": "Array.of", 
        "params": [
            {
                "descr": "Elements of which to create the array.", 
                "name": "elementN"
            }
        ], 
        "path": "javascript/global_objects/array/of", 
        "syntax": "Array.of(element0[, element1[, ...[, elementN]]])", 
        "type": "Array"
    }, 
    "Array.prototype": {
        "descr": "The Array.prototype property represents the prototype for the Array constructor.", 
        "name": "Array.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "Array.prototype.constructor"
            }, 
            {
                "descr": "Reflects the number of elements in an array.", 
                "name": "Array.prototype.length"
            }, 
            {
                "descr": "A symbol containing property names to exclude from a with binding scope.", 
                "name": "Array.prototype[@@unscopables]"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array.", 
                "name": "Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value.", 
                "name": "Array.prototype.fill()"
            }, 
            {
                "descr": "Removes the last element from an array and returns that element.", 
                "name": "Array.prototype.pop()"
            }, 
            {
                "descr": "Adds one or more elements to the end of an array and returns the new length of the array.", 
                "name": "Array.prototype.push()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array in place \u2014 the first becomes the last, and the last becomes the first.", 
                "name": "Array.prototype.reverse()"
            }, 
            {
                "descr": "Removes the first element from an array and returns that element.", 
                "name": "Array.prototype.shift()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array.", 
                "name": "Array.prototype.sort()"
            }, 
            {
                "descr": "Adds and/or removes elements from an array.", 
                "name": "Array.prototype.splice()"
            }, 
            {
                "descr": "Adds one or more elements to the front of an array and returns the new length of the array.", 
                "name": "Array.prototype.unshift()"
            }, 
            {
                "descr": "Returns a new array comprised of this array joined with other array(s) and/or value(s).", 
                "name": "Array.prototype.concat()"
            }, 
            {
                "descr": "Determines whether an array contains a certain element, returning true or false as appropriate.", 
                "name": "Array.prototype.includes()"
            }, 
            {
                "descr": "Joins all elements of an array into a string.", 
                "name": "Array.prototype.join()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array.", 
                "name": "Array.prototype.slice()"
            }, 
            {
                "descr": "Returns an array literal representing the specified array; you can use this value to create a new array. ", 
                "name": "Array.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.", 
                "name": "Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Calls a function for each element in the array.", 
                "name": "Array.prototype.forEach()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array.", 
                "name": "Array.prototype.entries()"
            }, 
            {
                "descr": "Returns true if every element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.every()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function.", 
                "name": "Array.prototype.some()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true.", 
                "name": "Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.", 
                "name": "Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.", 
                "name": "Array.prototype.findIndex()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array.", 
                "name": "Array.prototype.keys()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array.", 
                "name": "Array.prototype.map()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.", 
                "name": "Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.", 
                "name": "Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Array.prototype.values()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/array/prototype", 
        "syntax": "Array.prototype.toSource()", 
        "type": "Array"
    }, 
    "ArrayBuffer": {
        "descr": "The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You cannot directly manipulate the contents of an ArrayBuffer; instead, you create one of the typed array objects or a DataView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.", 
        "name": "ArrayBuffer", 
        "params": [
            {
                "descr": "The size, in bytes, of the array buffer to create.", 
                "name": "length"
            }, 
            {
                "descr": "The ArrayBuffer constructor's length property whose value is 1.", 
                "name": "ArrayBuffer.length"
            }, 
            {
                "descr": "The constructor function that is used to create derived objects.", 
                "name": "get ArrayBuffer[@@species]"
            }, 
            {
                "descr": "Allows the addition of properties to all ArrayBuffer objects.", 
                "name": "ArrayBuffer.prototype"
            }, 
            {
                "descr": "Returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView. ", 
                "name": "ArrayBuffer.isView(arg)"
            }, 
            {
                "descr": "Returns a new ArrayBuffer whose contents are taken from the oldBuffer's data and then is either truncated or zero-extended by newByteLength.", 
                "name": "ArrayBuffer.transfer(oldBuffer [, newByteLength])"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype. ", 
                "name": "ArrayBuffer.prototype.constructor"
            }, 
            {
                "descr": "The size, in bytes, of the array. ", 
                "name": "ArrayBuffer.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive. ", 
                "name": "ArrayBuffer.prototype.slice()"
            }
        ], 
        "path": "javascript/global_objects/arraybuffer", 
        "syntax": "new ArrayBuffer(length)", 
        "type": "ArrayBuffer"
    }, 
    "ArrayBuffer.@@species": {
        "descr": "The ArrayBuffer[@@species] accessor property returns the ArrayBuffer constructor.", 
        "name": "ArrayBuffer.@@species", 
        "params": [], 
        "path": "javascript/global_objects/arraybuffer/@@species", 
        "syntax": "ArrayBuffer[Symbol.species] Description The species accessor property returns the default constructor for ArrayBuffer objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the ArrayBuffer constructor for ArrayBuffer objects: ArrayBuffer[Symbol.species]; // function ArrayBuffer()", 
        "type": "ArrayBuffer"
    }, 
    "ArrayBuffer.isView": {
        "descr": "The ArrayBuffer.isView() method returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.", 
        "name": "ArrayBuffer.isView", 
        "params": [
            {
                "descr": "The argument to be checked.", 
                "name": "arg"
            }
        ], 
        "path": "javascript/global_objects/arraybuffer/isview", 
        "syntax": "ArrayBuffer.isView(arg)", 
        "type": "ArrayBuffer"
    }, 
    "ArrayBuffer.transfer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ArrayBuffer.transfer", 
        "params": [
            {
                "descr": "An ArrayBuffer object from which to transfer.", 
                "name": "oldBuffer"
            }, 
            {
                "descr": "The byte length of the new ArrayBuffer object.", 
                "name": "newByteLength"
            }
        ], 
        "path": "javascript/global_objects/arraybuffer/transfer", 
        "syntax": "ArrayBuffer.transfer()", 
        "type": "ArrayBuffer"
    }, 
    "ArrayBufferView": {
        "descr": "ArrayBufferView is a helper type representing any of the following JavaScript TypedArray types:", 
        "name": "ArrayBufferView", 
        "params": [], 
        "path": "dom/arraybufferview", 
        "syntax": "Int8Array, Uint8Array", 
        "type": "Miscellaneous"
    }, 
    "Arrow functions": {
        "descr": "An arrow function expression has a shorter syntax compared to function expressions and lexically binds the this value (does not bind its own this, arguments, super, or new.target). Arrow functions are always anonymous. These function expression are best suited for non-method functions.", 
        "name": "Arrow functions", 
        "params": [], 
        "path": "javascript/functions/arrow_functions", 
        "syntax": "this value (does not bind its own this, arguments, super, or new.target). Arrow functions are always anonymous. These function expression are best suited for non-method functions.", 
        "type": "Function"
    }, 
    "Assignment Operators": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "Assignment Operators", 
        "params": [], 
        "path": "javascript/operators/assignment_operators", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "Atomics": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Atomics", 
        "params": [
            {
                "descr": "Adds a given value at a given position in the array. ", 
                "name": "Atomics.add()"
            }, 
            {
                "descr": "Computes a bitwise AND at a given position in the array. ", 
                "name": "Atomics.and()"
            }, 
            {
                "descr": "Stores a given value at a given position in the array, if it equals a given value. ", 
                "name": "Atomics.compareExchange()"
            }, 
            {
                "descr": "Stores a given value at a given position in the array. ", 
                "name": "Atomics.exchange()"
            }, 
            {
                "descr": "Returns the value at the given position in the array.", 
                "name": "Atomics.load()"
            }, 
            {
                "descr": "Computes a bitwise OR at a given position in the array. ", 
                "name": "Atomics.or()"
            }, 
            {
                "descr": "Stores a given value at the given position in the array. ", 
                "name": "Atomics.store()"
            }, 
            {
                "descr": "Subtracts a given value at a given position in the array. ", 
                "name": "Atomics.sub()"
            }, 
            {
                "descr": "Computes a bitwise XOR at a given position in the array. ", 
                "name": "Atomics.xor()"
            }, 
            {
                "descr": "Verifies that a given position in the array still contains a given value and sleeps awaiting or times out. ", 
                "name": "Atomics.wait()"
            }, 
            {
                "descr": "Wakes up some agents that are sleeping in the wait queue on the given array position. ", 
                "name": "Atomics.wake()"
            }, 
            {
                "descr": "An optimization primitive that can be used to determine whether to use locks or atomic operations. ", 
                "name": "Atomics.isLockFree(size)"
            }
        ], 
        "path": "javascript/global_objects/atomics", 
        "syntax": "Atomics object provides atomic operations as static methods. They are used with SharedArrayBuffer objects. The Atomic operations are installed on an Atomics module. Unlike the other global objects, Atomics is not a constructor. You cannot use it with a new operator or invoke the Atomics object as a function. All properties and methods of Atomics are static (as is the case with the Math object, for example).", 
        "type": "Atomics"
    }, 
    "Atomics.isLockFree": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Atomics.isLockFree", 
        "params": [
            {
                "descr": "The size in byte to check.", 
                "name": "size"
            }
        ], 
        "path": "javascript/global_objects/atomics/islockfree", 
        "syntax": "Atomics.isLockFree()", 
        "type": "Atomics"
    }, 
    "Atomics.load": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Atomics.load", 
        "params": [
            {
                "descr": "A shared integer typed array. One of Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, or Uint32Array.", 
                "name": "typedArray"
            }, 
            {
                "descr": "The position in the typedArray to load from.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/atomics/load", 
        "syntax": "Atomics.load()", 
        "type": "Atomics"
    }, 
    "Atomics.wait": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Atomics.wait", 
        "params": [
            {
                "descr": "A shared Int32Array.", 
                "name": "typedArray"
            }, 
            {
                "descr": "The position in the typedArray to wait on.", 
                "name": "index"
            }, 
            {
                "descr": "The expected value to test .", 
                "name": "value"
            }, 
            {
                "descr": "Time to wait in milliseconds. Infinity, if no time is provided.", 
                "name": "timeout Optional"
            }
        ], 
        "path": "javascript/global_objects/atomics/wait", 
        "syntax": "Atomics.wait()", 
        "type": "Atomics"
    }, 
    "Atomics.wake": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Atomics.wake", 
        "params": [
            {
                "descr": "A shared Int32Array.", 
                "name": "typedArray"
            }, 
            {
                "descr": "The position in the typedArray to wake up on.", 
                "name": "index"
            }, 
            {
                "descr": "The number of sleeping agents to wake. ", 
                "name": "count"
            }
        ], 
        "path": "javascript/global_objects/atomics/wake", 
        "syntax": "Atomics.wake()", 
        "type": "Atomics"
    }, 
    "Attr.localName": {
        "descr": "The Attr.localName read-only property returns the local part of the qualified name of an element.", 
        "name": "Attr.localName", 
        "params": [], 
        "path": "dom/attr/localname", 
        "syntax": "name = attribute.localName Return value A DOMString representing the local part of the attribute's qualified name. Notes The local name of an attribute is the part of the attribute's qualified name that comes after the colon. Qualified names are typically used in XML as part of the namespace(s) of the particular XML documents.", 
        "type": "Miscellaneous"
    }, 
    "Attr.namespaceURI": {
        "descr": "The Attr.namespaceURI read-only property returns the namespace URI of the attribute, or null if the element is not in a namespace.", 
        "name": "Attr.namespaceURI", 
        "params": [], 
        "path": "dom/attr/namespaceuri", 
        "syntax": "namespace = attribute.namespaceURI Example In this snippet, an attribute is being examined for its localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (attribute.localName == \"value\" &&     attribute.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") {  // this is a XUL value }", 
        "type": "Miscellaneous"
    }, 
    "Attr.prefix": {
        "descr": "The Attr.prefix read-only property returns the namespace prefix of the specified attribute, or null if no prefix is specified.", 
        "name": "Attr.prefix", 
        "params": [], 
        "path": "dom/attr/prefix", 
        "syntax": "string = attribute.prefix Examples The following logs \"x\" to the console. <div x:id=\"example\" onclick=\"console.log(this.attributes[0].prefix)\"/>", 
        "type": "Miscellaneous"
    }, 
    "Attribute contains prefix selector [name|=\"value\"]": {
        "descr": "This selector was introduced into the CSS specification to handle language attributes.", 
        "name": "Attribute contains prefix selector [name|=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-contains-prefix-selector", 
        "syntax": "attributeContainsPrefix selector  Description: Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).", 
        "type": "Selectors"
    }, 
    "Attribute contains selector [name*=\"value\"]": {
        "descr": "This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=\"word\"]), which is more appropriate in many cases.", 
        "name": "Attribute contains selector [name*=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-contains-selector", 
        "syntax": "attributeContains selector  Description: Selects elements that have the specified attribute with a value containing a given substring.   version added: 1.0jQuery( \"[attribute*='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute contains word selector [name~=\"value\"]": {
        "descr": "This selector matches the test string against each word in the attribute value, where a \"word\" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.", 
        "name": "Attribute contains word selector [name~=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-contains-word-selector", 
        "syntax": "attributeContainsWord selector  Description: Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.   version added: 1.0jQuery( \"[attribute~='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute ends with selector [name$=\"value\"]": {
        "descr": "Finds all inputs with an attribute name that ends with 'letter' and puts text in them.", 
        "name": "Attribute ends with selector [name$=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-ends-with-selector", 
        "syntax": "attributeEndsWith selector  Description: Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.   version added: 1.0jQuery( \"[attribute$='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute equals selector [name=\"value\"]": {
        "descr": "Finds all inputs with a value of \"Hot Fuzz\" and changes the text of the next sibling span.", 
        "name": "Attribute equals selector [name=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-equals-selector", 
        "syntax": "attributeEquals selector  Description: Selects elements that have the specified attribute with a value exactly equal to a certain value.   version added: 1.0jQuery( \"[attribute='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute not equal selector [name!=\"value\"]": {
        "descr": "This selector is equivalent to :not([attr='value']).", 
        "name": "Attribute not equal selector [name!=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-not-equal-selector", 
        "syntax": "attributeNotEqual selector  Description: Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.   version added: 1.0jQuery( \"[attribute!='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "Attribute starts with selector [name^=\"value\"]": {
        "descr": "This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.", 
        "name": "Attribute starts with selector [name^=\"value\"]", 
        "params": [], 
        "path": "jquery/attribute-starts-with-selector", 
        "syntax": "attributeStartsWith selector  Description: Selects elements that have the specified attribute with a value beginning exactly with a given string.   version added: 1.0jQuery( \"[attribute^='value']\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "AudioBuffer": {
        "descr": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.", 
        "name": "AudioBuffer", 
        "params": [
            {
                "descr": "Returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.", 
                "name": "AudioBuffer.sampleRate Read only"
            }, 
            {
                "descr": "Returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.", 
                "name": "AudioBuffer.length Read only"
            }, 
            {
                "descr": "Returns a double representing the duration, in seconds, of the PCM data stored in the buffer.", 
                "name": "AudioBuffer.duration Read only"
            }, 
            {
                "descr": "Returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.", 
                "name": "AudioBuffer.numberOfChannels Read only"
            }, 
            {
                "descr": "Returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).", 
                "name": "AudioBuffer.getChannelData()"
            }, 
            {
                "descr": "Copies the samples from the specified channel of the AudioBuffer to the destination array.", 
                "name": "AudioBuffer.copyFromChannel()"
            }, 
            {
                "descr": "Copies the samples to the specified channel of the AudioBuffer, from the source array.", 
                "name": "AudioBuffer.copyToChannel()"
            }
        ], 
        "path": "dom/audiobuffer", 
        "syntax": "Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel). AudioBuffer.copyFromChannel()", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.copyFromChannel": {
        "descr": "The copyFromChannel() method of the AudioBuffer interface copies the samples from the specified channel of the AudioBuffer to the destination array.", 
        "name": "AudioBuffer.copyFromChannel", 
        "params": [
            {
                "descr": "A Float32Array to copy the channel data to.", 
                "name": "destination"
            }, 
            {
                "descr": "The channel number of the current AudioBuffer to copy the channel data from. ", 
                "name": "channelNumber"
            }, 
            {
                "descr": "An optional offset to copy the data from. ", 
                "name": "startInChannel Optional"
            }
        ], 
        "path": "dom/audiobuffer/copyfromchannel", 
        "syntax": "myArrayBuffer.copyFromChannel(destination,channelNumber,startInChannel);", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.copyToChannel": {
        "descr": "The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array.", 
        "name": "AudioBuffer.copyToChannel", 
        "params": [
            {
                "descr": "A Float32Array that the channel data will be copied from.", 
                "name": "source"
            }, 
            {
                "descr": "The channel number of the current AudioBuffer to copy the channel data to. ", 
                "name": "channelNumber"
            }, 
            {
                "descr": "An optional offset to copy the data to. ", 
                "name": "startInChannel Optional"
            }
        ], 
        "path": "dom/audiobuffer/copytochannel", 
        "syntax": "myArrayBuffer.copyToChannel(source, channelNumber, startInChannel);", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.duration": {
        "descr": "The duration property of the AudioBuffer interface returns a double representing the duration, in seconds, of the PCM data stored in the buffer.", 
        "name": "AudioBuffer.duration", 
        "params": [], 
        "path": "dom/audiobuffer/duration", 
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or myArrayBuffer.duration;);", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.getChannelData": {
        "descr": "The getChannelData() method of the AudioBuffer Interface returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).", 
        "name": "AudioBuffer.getChannelData", 
        "params": [
            {
                "descr": "The channel property is an index representing the particular channel to get data for. ", 
                "name": "channel"
            }
        ], 
        "path": "dom/audiobuffer/getchanneldata", 
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or var nowBuffering = myArrayBuffer.getChannelData(channel);", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.length": {
        "descr": "The length property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.", 
        "name": "AudioBuffer.length", 
        "params": [], 
        "path": "dom/audiobuffer/length", 
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or myArrayBuffer.length;);", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.numberOfChannels": {
        "descr": "The numberOfChannels property of the AudioBuffer interface returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.", 
        "name": "AudioBuffer.numberOfChannels", 
        "params": [], 
        "path": "dom/audiobuffer/numberofchannels", 
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or myArrayBuffer.numberOfChannels;);", 
        "type": "Web Audio"
    }, 
    "AudioBuffer.sampleRate": {
        "descr": "The sampleRate property of the AudioBuffer interface returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.", 
        "name": "AudioBuffer.sampleRate", 
        "params": [], 
        "path": "dom/audiobuffer/samplerate", 
        "syntax": "var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);\n or myArrayBuffer.sampleRate;);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.buffer": {
        "descr": "The buffer property of the AudioBufferSourceNode interface represents an AudioBuffer that defines the audio asset to be played.", 
        "name": "AudioBufferSourceNode.buffer", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/buffer", 
        "syntax": "var source = audioCtx.createBufferSource();\n or // from audioCtx.createBuffer, or audioCtx.decodeAudioDatasource.buffer = myBuffer;);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.detune": {
        "descr": "The detune property of the AudioBufferSourceNode interface is an k-rate AudioParam representing detuning of oscillation in cents.", 
        "name": "AudioBufferSourceNode.detune", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/detune", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.detune.value = 100; // value in cents);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.loop": {
        "descr": "The loop property of the AudioBufferSourceNode interface is a Boolean indicating if the audio asset must be replayed when the end of the AudioBuffer is reached.", 
        "name": "AudioBufferSourceNode.loop", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/loop", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.loop = true;);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.loopEnd": {
        "descr": "The loopEnd property of the AudioBufferSourceNode interface is a double value indicating, in seconds, where in the AudioBuffer the restart of the play must end (and then loop again.)", 
        "name": "AudioBufferSourceNode.loopEnd", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/loopend", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.loopEnd = 3;);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.loopStart": {
        "descr": "The loopStart property of the AudioBufferSourceNode interface is a double value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.", 
        "name": "AudioBufferSourceNode.loopStart", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/loopstart", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.loopStart = 3;);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.onended": {
        "descr": "The onended event handler of the AudioBufferSourceNode contains the callback associated with the ended event: this allows you to run code in response to the audio track finishing playback.", 
        "name": "AudioBufferSourceNode.onended", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/onended", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.onended = function() { ... };);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.playbackRate": {
        "descr": "The playbackRate property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.", 
        "name": "AudioBufferSourceNode.playbackRate", 
        "params": [], 
        "path": "dom/audiobuffersourcenode/playbackrate", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.playbackRate.value = 1.25; // play 25% faster than normal speed (1));", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.start": {
        "descr": "The start() method of the AudioBufferSourceNode Interface is used to schedule the start of the audio buffer playback.", 
        "name": "AudioBufferSourceNode.start", 
        "params": [
            {
                "descr": "The when parameter defines when the play will start. ", 
                "name": "when"
            }, 
            {
                "descr": "The offset parameter, which defaults to 0, defines where the playback will start.", 
                "name": "offset"
            }, 
            {
                "descr": "The duration parameter, which defaults to the length of the asset minus the value of offset, defines the length of the portion of the asset to be played.", 
                "name": "duration"
            }
        ], 
        "path": "dom/audiobuffersourcenode/start", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.start(audioCtx.currentTime + 1,3,10);", 
        "type": "Web Audio"
    }, 
    "AudioBufferSourceNode.stop": {
        "descr": "The stop() method of the AudioBufferSourceNode Interface is used to schedule when audio buffer playback should stop.", 
        "name": "AudioBufferSourceNode.stop", 
        "params": [
            {
                "descr": "The when parameter defines when the playback will stop. ", 
                "name": "when"
            }
        ], 
        "path": "dom/audiobuffersourcenode/stop", 
        "syntax": "var source = audioCtx.createBufferSource();\n or source.stop(audioCtx.currentTime + 3);", 
        "type": "Web Audio"
    }, 
    "AudioContext.CreateIIRFilter": {
        "descr": "The createIIRFilter() method of the AudioContext interface creates an IIRFilterNode, which represents a second order filter configurable as several different common filter types.", 
        "name": "AudioContext.CreateIIRFilter", 
        "params": [
            {
                "descr": "An array of doubles specifying the feedforward (numerator) coefficients for the transfer function of the IIR filter. ", 
                "name": "feedforward Optional"
            }, 
            {
                "descr": "An array of doubles specifying the feedback (denominator) coefficients for the tranfer function of the IIR filter. ", 
                "name": "feedback Optional"
            }
        ], 
        "path": "dom/audiocontext/createiirfilter", 
        "syntax": "var audioCtx = new AudioContext();\n or var iirFilter = audioCtx.createIIRFilter();", 
        "type": "Web Audio"
    }, 
    "AudioContext.close": {
        "descr": "The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.", 
        "name": "AudioContext.close", 
        "params": [], 
        "path": "dom/audiocontext/close", 
        "syntax": "var audioCtx = new AudioContext();\n or audioCtx.close().then(function() { ... });", 
        "type": "Web Audio"
    }, 
    "AudioContext.createAnalyser": {
        "descr": "The createAnalyser() method of the AudioContext interface creates an AnalyserNode, which can be used to expose audio time and frequency data and create data visualisations.", 
        "name": "AudioContext.createAnalyser", 
        "params": [], 
        "path": "dom/audiocontext/createanalyser", 
        "syntax": "var audioCtx = new AudioContext();\n or var analyser = audioCtx.createAnalyser();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createBiquadFilter": {
        "descr": "The createBiquadFilter() method of the AudioContext interface creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types.", 
        "name": "AudioContext.createBiquadFilter", 
        "params": [], 
        "path": "dom/audiocontext/createbiquadfilter", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createBuffer": {
        "descr": "The createBuffer() method of the AudioContext Interface is used to create a new, empty AudioBuffer object, which can then be populated by data, and played via an AudioBufferSourceNode", 
        "name": "AudioContext.createBuffer", 
        "params": [
            {
                "descr": "An integer representing the number of channels this buffer should have. ", 
                "name": "numOfChannels"
            }, 
            {
                "descr": "An integer representing the size of the buffer in sample-frames.", 
                "name": "length"
            }, 
            {
                "descr": "The sample-rate of the linear audio data in sample-frames per second. ", 
                "name": "sampleRate"
            }
        ], 
        "path": "dom/audiocontext/createbuffer", 
        "syntax": "var audioCtx = new AudioContext();\n or var buffer = audioCtx.createBuffer(2, 22050, 44100);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createBufferSource": {
        "descr": "The createBufferSource() method of the AudioContext Interface is used to create a new AudioBufferSourceNode, which can be used to play audio data contained within an AudioBuffer object. AudioBuffers are created using AudioContext.createBuffer or returned by AudioContext.decodeAudioData when it successfully decodes an audio track.", 
        "name": "AudioContext.createBufferSource", 
        "params": [], 
        "path": "dom/audiocontext/createbuffersource", 
        "syntax": "var audioCtx = new AudioContext();\n or var source = audioCtx.createBufferSource();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createChannelMerger": {
        "descr": "The createChannelMerger() method of the AudioContext interface creates a ChannelMergerNode, which combines channels from multiple audio streams into a single audio stream.", 
        "name": "AudioContext.createChannelMerger", 
        "params": [
            {
                "descr": "The number of channels in the input audio streams, which the output stream will contain; the default is 6 if this parameter is not specified.", 
                "name": "numberOfInputs"
            }
        ], 
        "path": "dom/audiocontext/createchannelmerger", 
        "syntax": "var audioCtx = new AudioContext();\n or var merger = audioCtx.createChannelMerger(2);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createChannelSplitter": {
        "descr": "The createChannelSplitter() method of the AudioContext Interface is used to create a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately.", 
        "name": "AudioContext.createChannelSplitter", 
        "params": [
            {
                "descr": "The number of channels in the input audio stream that you want to output separately; the default is 6 if this parameter is not specified.", 
                "name": "numberOfOutputs"
            }
        ], 
        "path": "dom/audiocontext/createchannelsplitter", 
        "syntax": "var audioCtx = new AudioContext();\n or var splitter = audioCtx.createChannelSplitter(2);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createConvolver": {
        "descr": "The createConvolver() method of the AudioContext interface creates a ConvolverNode, which is commonly used to apply reverb effects to your audio. See the spec definition of Convolution for more information.", 
        "name": "AudioContext.createConvolver", 
        "params": [], 
        "path": "dom/audiocontext/createconvolver", 
        "syntax": "var audioCtx = new AudioContext();\n or var convolver = audioCtx.createConvolver();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createDelay": {
        "descr": "The createDelay() method of the AudioContext Interface is used to create a DelayNode, which is used to delay the incoming audio signal by a certain amount.", 
        "name": "AudioContext.createDelay", 
        "params": [
            {
                "descr": "The maximum amount of time, in seconds, that the audio signal can be delayed by. ", 
                "name": "maxDelayTime"
            }
        ], 
        "path": "dom/audiocontext/createdelay", 
        "syntax": "var audioCtx = new AudioContext();\n or var synthDelay = audioCtx.createDelay(5.0);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createDynamicsCompressor": {
        "descr": "The createDynamicsCompressor() method of the AudioContext Interface is used to create a DynamicsCompressorNode, which can be used to apply compression to an audio signal.", 
        "name": "AudioContext.createDynamicsCompressor", 
        "params": [], 
        "path": "dom/audiocontext/createdynamicscompressor", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createGain": {
        "descr": "The createGain() method of the AudioContext interface creates a GainNode, which can be used to control the overall volume of the audio graph.", 
        "name": "AudioContext.createGain", 
        "params": [], 
        "path": "dom/audiocontext/creategain", 
        "syntax": "var audioCtx = new AudioContext();\n or var gainNode = audioCtx.createGain();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createJavaScriptNode": {
        "descr": "This method is obsolete, and has been renamed to AudioContext.createScriptProcessor. See also ScriptProcessorNode.", 
        "name": "AudioContext.createJavaScriptNode", 
        "params": [
            {
                "descr": "The buffer size must be in units of sample frames, i.e., one of: 256, 512, 1024, 2048, 4096, 8192, or 16384. ", 
                "name": "bufferSize"
            }, 
            {
                "descr": "The number of input channels in the audio stream.", 
                "name": "numInputChannels"
            }, 
            {
                "descr": "The number of output channels in the audio stream.", 
                "name": "numOutputChannels"
            }
        ], 
        "path": "dom/audiocontext/createjavascriptnode", 
        "syntax": "AudioContext.createJavaScriptNode(bufferSize, numInputChannels, numOutputChannels)", 
        "type": "Web Audio"
    }, 
    "AudioContext.createMediaElementSource": {
        "descr": "The createMediaElementSource() method of the AudioContext Interface is used to create a new MediaElementAudioSourceNode object, given an existing HTML <audio> or <video> element, the audio from which can then be played and manipulated.", 
        "name": "AudioContext.createMediaElementSource", 
        "params": [
            {
                "descr": "An HTMLMediaElement object that you want to feed into an audio processing graph to manipulate.", 
                "name": "myMediaElement"
            }
        ], 
        "path": "dom/audiocontext/createmediaelementsource", 
        "syntax": "var audioCtx = new AudioContext();\n or var source = audioCtx.createMediaElementSource(myMediaElement);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createMediaStreamDestination": {
        "descr": "The createMediaStreamDestination() method of the AudioContext Interface is used to create a new MediaStreamAudioDestinationNode object associated with a WebRTC MediaStream representing an audio stream, which may be stored in a local file or sent to another computer.", 
        "name": "AudioContext.createMediaStreamDestination", 
        "params": [], 
        "path": "dom/audiocontext/createmediastreamdestination", 
        "syntax": "var audioCtx = new AudioContext();\n or var destination = audioCtx.createMediaStreamDestination();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createMediaStreamSource": {
        "descr": "The createMediaStreamSource() method of the AudioContext Interface is used to create a new MediaStreamAudioSourceNode object, given a media stream (say, from a navigator.getUserMedia instance), the audio from which can then be played and manipulated.", 
        "name": "AudioContext.createMediaStreamSource", 
        "params": [
            {
                "descr": "A MediaStream object that you want to feed into an audio processing graph to manipulate.", 
                "name": "stream"
            }
        ], 
        "path": "dom/audiocontext/createmediastreamsource", 
        "syntax": "var audioCtx = new AudioContext();\n or var source = audioCtx.createMediaStreamSource(stream);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createOscillator": {
        "descr": "The createOscillator() method of the AudioContext interface creates an OscillatorNode, a source representing a periodic waveform. It basically generates a constant tone.", 
        "name": "AudioContext.createOscillator", 
        "params": [], 
        "path": "dom/audiocontext/createoscillator", 
        "syntax": "var audioCtx = new AudioContext();\n or var oscillator = audioCtx.createOscillator();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createPanner": {
        "descr": "The createPanner() method of the AudioContext Interface is used to create a new PannerNode, which is used to spatialize an incoming audio stream in 3D space.", 
        "name": "AudioContext.createPanner", 
        "params": [], 
        "path": "dom/audiocontext/createpanner", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createPeriodicWave": {
        "descr": "The createPeriodicWave() method of the AudioContext Interface is used to create a PeriodicWave, which is used to define a periodic waveform that can be used to shape the output of an OscillatorNode.", 
        "name": "AudioContext.createPeriodicWave", 
        "params": [
            {
                "descr": "An array of cosine terms (traditionally the A terms).", 
                "name": "real"
            }, 
            {
                "descr": "An array of sine terms (traditionally the B terms).", 
                "name": "imag"
            }, 
            {
                "descr": "An dictionary object that specifies whether normalization should be disabled (if not specified, normalization is enabled by default.) It takes one property:  disableNormalization: If set to true, normalization is disabled for the periodic wave.", 
                "name": "constraints Optional"
            }
        ], 
        "path": "dom/audiocontext/createperiodicwave", 
        "syntax": "var audioCtx = new AudioContext();\n or var wave = audioCtx.createPeriodicWave(real, imag, constraints);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createScriptProcessor": {
        "descr": "The createScriptProcessor() method of the AudioContext interface creates a ScriptProcessorNode used for direct audio processing.", 
        "name": "AudioContext.createScriptProcessor", 
        "params": [
            {
                "descr": "The buffer size in units of sample-frames. ", 
                "name": "bufferSize"
            }, 
            {
                "descr": "Integer specifying the number of channels for this node's input, defaults to 2. ", 
                "name": "numberOfInputChannels"
            }, 
            {
                "descr": "Integer specifying the number of channels for this node's output, defaults to 2. ", 
                "name": "numberOfOutputChannels"
            }
        ], 
        "path": "dom/audiocontext/createscriptprocessor", 
        "syntax": "var audioCtx = new AudioContext();\n or myScriptProcessor = audioCtx.createScriptProcessor(1024, 1, 1);", 
        "type": "Web Audio"
    }, 
    "AudioContext.createStereoPanner": {
        "descr": "The createStereoPanner() method of the AudioContext interface creates a StereoPannerNode, which can be used to apply stereo panning to an audio source. It positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.", 
        "name": "AudioContext.createStereoPanner", 
        "params": [], 
        "path": "dom/audiocontext/createstereopanner", 
        "syntax": "var audioCtx = new AudioContext();\n or var panNode = audioCtx.createStereoPanner();", 
        "type": "Web Audio"
    }, 
    "AudioContext.createWaveShaper": {
        "descr": "The createWaveShaper() method of the AudioContext interface creates a WaveShaperNode, which represents a non-linear distortion. It is used to apply distortion effects to your audio.", 
        "name": "AudioContext.createWaveShaper", 
        "params": [], 
        "path": "dom/audiocontext/createwaveshaper", 
        "syntax": "var audioCtx = new AudioContext();\n or var distortion = audioCtx.createWaveShaper();", 
        "type": "Web Audio"
    }, 
    "AudioContext.currentTime": {
        "descr": "The currentTime read-only property of the AudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc. It starts at 0.", 
        "name": "AudioContext.currentTime", 
        "params": [], 
        "path": "dom/audiocontext/currenttime", 
        "syntax": "var audioCtx = new AudioContext();\n or console.log(audioCtx.currentTime);", 
        "type": "Web Audio"
    }, 
    "AudioContext.decodeAudioData": {
        "descr": "The decodeAudioData() method of the AudioContext Interface is used to asynchronously decode audio file data contained in an ArrayBuffer. In this case the ArrayBuffer is usually loaded from an XMLHttpRequest's response attribute after setting the responseType to arraybuffer. The decoded AudioBuffer is resampled to the AudioContext's sampling rate, then passed to a callback or promise.", 
        "name": "AudioContext.decodeAudioData", 
        "params": [
            {
                "descr": "An ArrayBuffer containing the audio data to be decoded, usually grabbed from an XMLHttpRequest's response attribute after setting the responseType to arraybuffer.", 
                "name": "ArrayBuffer"
            }, 
            {
                "descr": "A callback function to be invoked when the decoding successfully finishes. ", 
                "name": "DecodeSuccessCallback"
            }, 
            {
                "descr": "An optional error callback, to be invoked if an error occurs when the audio data is being decoded.", 
                "name": "DecodeErrorCallback"
            }
        ], 
        "path": "dom/audiocontext/decodeaudiodata", 
        "syntax": "audioCtx.decodeAudioData(audioData, function(decodedData) {  // use the dec\u200boded data here});", 
        "type": "Web Audio"
    }, 
    "AudioContext.destination": {
        "descr": "The destination property of the AudioContext interface returns an AudioDestinationNode representing the final destination of all audio in the context. It often represents an actual audio-rendering device such as your device's speakers.", 
        "name": "AudioContext.destination", 
        "params": [], 
        "path": "dom/audiocontext/destination", 
        "syntax": "var audioCtx = new AudioContext();\n or gainNode.connect(audioCtx.destination);", 
        "type": "Web Audio"
    }, 
    "AudioContext.listener": {
        "descr": "The listener property of the AudioContext interface returns an AudioListener object that can then be used for implementing 3D audio spatialization.", 
        "name": "AudioContext.listener", 
        "params": [], 
        "path": "dom/audiocontext/listener", 
        "syntax": "var audioCtx = new AudioContext();\n or var myListener = audioCtx.listener;);", 
        "type": "Web Audio"
    }, 
    "AudioContext.onstatechange": {
        "descr": "The onstatechange property of the AudioContext interface defines an event handler function to be called when the statechange event fires: this occurs when the audio context's state changes.", 
        "name": "AudioContext.onstatechange", 
        "params": [], 
        "path": "dom/audiocontext/onstatechange", 
        "syntax": "var audioCtx = new AudioContext();\n or audioCtx.onstatechange = function() { ... };);", 
        "type": "Web Audio"
    }, 
    "AudioContext.resume": {
        "descr": "The resume() method of the AudioContext Interface resumes the progression of time in an audio context that has previously been suspended.", 
        "name": "AudioContext.resume", 
        "params": [], 
        "path": "dom/audiocontext/resume", 
        "syntax": "var audioCtx = new AudioContext();\n or audioCtx.resume().then(function() { ... });", 
        "type": "Web Audio"
    }, 
    "AudioContext.sampleRate": {
        "descr": "The sampleRate property of the AudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context. This limitation means that sample-rate converters are not supported.", 
        "name": "AudioContext.sampleRate", 
        "params": [], 
        "path": "dom/audiocontext/samplerate", 
        "syntax": "var audioCtx = new AudioContext();\n or var mySampleRate = audioCtx.sampleRate;);", 
        "type": "Web Audio"
    }, 
    "AudioContext.state": {
        "descr": "The state read-only property of the AudioContext interface returns the current state of the AudioContext.", 
        "name": "AudioContext.state", 
        "params": [], 
        "path": "dom/audiocontext/state", 
        "syntax": "var audioCtx = new AudioContext();\n or var myState = audioCtx.state;);", 
        "type": "Web Audio"
    }, 
    "AudioContext.suspend": {
        "descr": "The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process \u2014 this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while.", 
        "name": "AudioContext.suspend", 
        "params": [], 
        "path": "dom/audiocontext/suspend", 
        "syntax": "var audioCtx = new AudioContext();\n or audioCtx.suspend().then(function() { ... });", 
        "type": "Web Audio"
    }, 
    "AudioDestinationNode.maxChannelCount": {
        "descr": "The maxchannelCount property of the AudioDestinationNode interface is an unsigned long defining the maximum amount of channels that the physical device can handle.", 
        "name": "AudioDestinationNode.maxChannelCount", 
        "params": [], 
        "path": "dom/audiodestinationnode/maxchannelcount", 
        "syntax": "var audioCtx = new AudioContext();\n or var myDestination = audioCtx.destination;myDestination.maxChannelCount = 2;);", 
        "type": "Web Audio"
    }, 
    "AudioListener.dopplerFactor": {
        "descr": "The dopplerFactor property of the AudioListener interface is a double value representing the amount of pitch shift to use when rendering a doppler effect.", 
        "name": "AudioListener.dopplerFactor", 
        "params": [], 
        "path": "dom/audiolistener/dopplerfactor", 
        "syntax": "var audioCtx = new AudioContext();\n or var myListener = audioCtx.listener;myListener.dopplerFactor = 1;);", 
        "type": "Web Audio"
    }, 
    "AudioListener.setOrientation": {
        "descr": "The setOrientation() method of the AudioListener interface defines the orientation of the listener.", 
        "name": "AudioListener.setOrientation", 
        "params": [
            {
                "descr": "The x value of the front vector of the listener.", 
                "name": "x"
            }, 
            {
                "descr": "The y value of the front vector of the listener.", 
                "name": "y"
            }, 
            {
                "descr": "The z value of the front vector of the listener.", 
                "name": "z"
            }, 
            {
                "descr": "The x value of the up vector of the listener.", 
                "name": "xUp"
            }, 
            {
                "descr": "The y value of the up vector of the listener.", 
                "name": "yUp"
            }, 
            {
                "descr": "The z value of the up vector of the listener.", 
                "name": "zUp"
            }
        ], 
        "path": "dom/audiolistener/setorientation", 
        "syntax": "var audioCtx = new AudioContext();\n or var myListener = audioCtx.listener;myListener.setOrientation(0,0,-1,0,1,0);", 
        "type": "Web Audio"
    }, 
    "AudioListener.setPosition": {
        "descr": "The setPosition() method of the AudioListener Interface defines the position of the listener.", 
        "name": "AudioListener.setPosition", 
        "params": [
            {
                "descr": "The x position of the listener in 3D space.", 
                "name": "x"
            }, 
            {
                "descr": "The y position of the listener in 3D space.", 
                "name": "y"
            }, 
            {
                "descr": "The z position of the listener in 3D space.", 
                "name": "z"
            }
        ], 
        "path": "dom/audiolistener/setposition", 
        "syntax": "var audioCtx = new AudioContext();\n or var myListener = audioCtx.listener;myListener.setPosition(1,1,1);", 
        "type": "Web Audio"
    }, 
    "AudioListener.speedOfSound": {
        "descr": "The speedOfSound property of the AudioListener interface is a double value representing the speed of sound, in meters per second.", 
        "name": "AudioListener.speedOfSound", 
        "params": [], 
        "path": "dom/audiolistener/speedofsound", 
        "syntax": "var audioCtx = new AudioContext();\n or var myListener = audioCtx.listener;myListener.speedOfSound = 343.3;);", 
        "type": "Web Audio"
    }, 
    "AudioNode.channelCount": {
        "descr": "The channelCount property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.", 
        "name": "AudioNode.channelCount", 
        "params": [], 
        "path": "dom/audionode/channelcount", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or var channels = oscillator.channelCount;);", 
        "type": "Web Audio"
    }, 
    "AudioNode.channelCountMode": {
        "descr": "The channelCountMode property of the AudioNode interface represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.", 
        "name": "AudioNode.channelCountMode", 
        "params": [], 
        "path": "dom/audionode/channelcountmode", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.channelCountMode = 'explicit';);", 
        "type": "Web Audio"
    }, 
    "AudioNode.channelInterpretation": {
        "descr": "The channelInterpretation property of the AudioNode interface represents an enumerated value describing the meaning of the channels. This interpretation will define how audio up-mixing and down-mixing will happen.", 
        "name": "AudioNode.channelInterpretation", 
        "params": [], 
        "path": "dom/audionode/channelinterpretation", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.channelInterpretation = 'discrete';);", 
        "type": "Web Audio"
    }, 
    "AudioNode.connect(AudioNode": {
        "descr": "The connect method of the AudioNode interface allows you to connect one output of the current node to one input of another node.", 
        "name": "AudioNode.connect(AudioNode", 
        "params": [
            {
                "descr": "The AudioNode you are connecting to.", 
                "name": "destination"
            }, 
            {
                "descr": "An index describing which output of the current AudioNode you want to connect to the destination. ", 
                "name": "output Optional"
            }, 
            {
                "descr": "An index describing which input of the destination you want to connect the current AudioNode to. ", 
                "name": "input Optional"
            }
        ], 
        "path": "dom/audionode/connect(audionode)", 
        "syntax": "var AudioNode = AudioNode.connect(destination, output, input)", 
        "type": "Web Audio"
    }, 
    "AudioNode.connect(AudioParam": {
        "descr": "The connect method of the AudioNode interface allows us to connect one output of the current node to one input of an audio parameter (AudioParam node), allowing us to control the parameter value with an audio signal.", 
        "name": "AudioNode.connect(AudioParam", 
        "params": [
            {
                "descr": "The AudioParam you are connecting to.", 
                "name": "Destination"
            }, 
            {
                "descr": "An index describing which output of the current AudioNode you want to connect to the AudioParam. ", 
                "name": "Output (optional)"
            }
        ], 
        "path": "dom/audionode/connect(audioparam)", 
        "syntax": "var lfo = audioCtx.createOscillator();\n or lfo.frequency.value = 2.0; // Hz, two times per secondvar lfoGain = audioCtx.createGain();\n or lfoGain.gain.value = 0.5;// this is the parameter that is going to be modulatedvar gain = audioCtx.createGain();\n or gain.gain.value = 0.5;// Oscillators go from -1 to 1// Make it go from -0.5 to +0.5 by connecting it to a GainNode with a gain value of 0.5lfo.connect(lfoGain);\n or // because the value of the gain.gain AudioParam is originaly 0.5, the value is added, and it will go from 0.0 to 1.0lfoGain.connect(gain.gain);\n or lfo.connect(gain.gain);", 
        "type": "Web Audio"
    }, 
    "AudioNode.context": {
        "descr": "The read-only context property of the AudioNode interface returns the associated AudioContext, that is the object representing the processing graph the node is participating in.", 
        "name": "AudioNode.context", 
        "params": [], 
        "path": "dom/audionode/context", 
        "syntax": "var aContext = anAudioNode.context; Value An AudioContext object. Example var AudioContext = window.AudioContext || window.webkitAudioContext;var audioCtx = new AudioContext();\n or var oscillator = audioCtx.createOscillator();\n or var gainNode = audioCtx.createGain();\n or oscillator.connect(gainNode);\n or gainNode.connect(audioCtx.destination);\n or oscillator.context;);", 
        "type": "Web Audio"
    }, 
    "AudioNode.disconnect": {
        "descr": "The disconnect method of the AudioNode interface allows you to disconnect the current node from another one that it is already connected to.", 
        "name": "AudioNode.disconnect", 
        "params": [
            {
                "descr": "A specific AudioNode to disconnect from.", 
                "name": "Destination (optional)"
            }, 
            {
                "descr": "An index describing which output of the current AudioNode you want to disconnect. ", 
                "name": "Output (optional)"
            }, 
            {
                "descr": "An index describing which input of the given destination AudioNode you want to disconnect. ", 
                "name": "Input (optional)"
            }
        ], 
        "path": "dom/audionode/disconnect", 
        "syntax": "oscillator.connect(audioCtx.destination);\n or oscillator.disconnect();", 
        "type": "Web Audio"
    }, 
    "AudioNode.numberOfInputs": {
        "descr": "The numberOfInputs property of the AudioNode interface returns the number of inputs feeding the node. Source nodes are defined as nodes having a numberOfInputs property with a value of 0.", 
        "name": "AudioNode.numberOfInputs", 
        "params": [], 
        "path": "dom/audionode/numberofinputs", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or var inputs = oscillator.numberOfInputs;);", 
        "type": "Web Audio"
    }, 
    "AudioNode.numberOfOutputs": {
        "descr": "The numberOfOutputs property of the AudioNode interface returns the number of outputs coming out of the node. Destination nodes \u2014 like AudioDestinationNode \u2014 have a value of 0 for this attribute.", 
        "name": "AudioNode.numberOfOutputs", 
        "params": [], 
        "path": "dom/audionode/numberofoutputs", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or var outputs = oscillator.numberOfOutputs;);", 
        "type": "Web Audio"
    }, 
    "AudioParam.cancelScheduledValues": {
        "descr": "The cancelScheduledValues() method of the AudioParam Interface cancels all scheduled future changes to the AudioParam.", 
        "name": "AudioParam.cancelScheduledValues", 
        "params": [
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created after which all scheduled changes will be cancelled.", 
                "name": "startTime"
            }
        ], 
        "path": "dom/audioparam/cancelscheduledvalues", 
        "syntax": "var AudioParam = AudioParam.cancelScheduledValues(startTime)", 
        "type": "Web Audio"
    }, 
    "AudioParam.defaultValue": {
        "descr": "The defaultValue property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the AudioParam.", 
        "name": "AudioParam.defaultValue", 
        "params": [], 
        "path": "dom/audioparam/defaultvalue", 
        "syntax": "var gainNode = audioCtx.createGain();\n or var gainDefault = gainNode.gain.defaultValue; //'gain' is the AudioParam);", 
        "type": "Web Audio"
    }, 
    "AudioParam.exponentialRampToValueAtTime": {
        "descr": "The exponentialRampToValueAtTime() method of the AudioParam Interface schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.", 
        "name": "AudioParam.exponentialRampToValueAtTime", 
        "params": [
            {
                "descr": "A floating point number representing the value the AudioParam will ramp to by the given time.", 
                "name": "value"
            }, 
            {
                "descr": "A double representing the exact time (in seconds) after the ramping starts that the changing of the value will stop.", 
                "name": "endTime"
            }
        ], 
        "path": "dom/audioparam/exponentialramptovalueattime", 
        "syntax": "var AudioParam = AudioParam.exponentialRampToValueAtTime(value, endTime)", 
        "type": "Web Audio"
    }, 
    "AudioParam.linearRampToValueAtTime": {
        "descr": "NOTE: both the example and live example are incorrect, see https://github.com/WebAudio/web-audio-api/issues/34", 
        "name": "AudioParam.linearRampToValueAtTime", 
        "params": [
            {
                "descr": "A floating point number representing the value the AudioParam will ramp to by the given time.", 
                "name": "value"
            }, 
            {
                "descr": "A double representing the exact time (in seconds) after the ramping starts that the changing of the value will stop.", 
                "name": "endTime"
            }
        ], 
        "path": "dom/audioparam/linearramptovalueattime", 
        "syntax": "var AudioParam = AudioParam.linearRampToValueAtTime(value, endTime)", 
        "type": "Web Audio"
    }, 
    "AudioParam.setTargetAtTime": {
        "descr": "The setTargetAtTime() method of the AudioParam Interface schedules the start of a change to the value of the AudioParam.", 
        "name": "AudioParam.setTargetAtTime", 
        "params": [
            {
                "descr": "The value the parameter will start to transition towards at the given start time.", 
                "name": "target"
            }, 
            {
                "descr": "The time that the exponential transition will begin, which will be relative to AudioContext.currentTime.", 
                "name": "startTime"
            }, 
            {
                "descr": "The time-constant value of first-order filter (exponential) approach to the target value. ", 
                "name": "timeConstant"
            }
        ], 
        "path": "dom/audioparam/settargetattime", 
        "syntax": "var AudioParam = AudioParam.setTargetAtTime(target, startTime, timeConstant)", 
        "type": "Web Audio"
    }, 
    "AudioParam.setValueAtTime": {
        "descr": "The setValueAtTime() method of the AudioParam Interface schedules an instant change to the value of the AudioParam at a precise time, as measured against AudioContext.currentTime. The new value is given in the value parameter.", 
        "name": "AudioParam.setValueAtTime", 
        "params": [
            {
                "descr": "A floating point number representing the value the AudioParam will change to at the given time.", 
                "name": "value"
            }, 
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created that the change in value will happen. ", 
                "name": "startTime"
            }
        ], 
        "path": "dom/audioparam/setvalueattime", 
        "syntax": "var AudioParam = AudioParam.setValueAtTime(value, startTime)", 
        "type": "Web Audio"
    }, 
    "AudioParam.setValueCurveAtTime": {
        "descr": "The setValueCurveAtTime() method of the AudioParam Interface schedules a transition between values defined by a Float32Array, which are scaled to fit into the given interval starting at startTime and having a specific duration. The transition between values was undefined in the original spec but has now been specified as linear. Chrome 46.0.2490 uses linear interpolation; earlier versions use nearest neighbor (no interpolation).", 
        "name": "AudioParam.setValueCurveAtTime", 
        "params": [
            {
                "descr": "A Float32Array representing the value curve the AudioParam will change through along the duration.", 
                "name": "values"
            }, 
            {
                "descr": "A double representing the time (in seconds) after the AudioContext was first created that the change in value will happen.", 
                "name": "startTime"
            }, 
            {
                "descr": "A double representing the time (in seconds) the values will be changed between. ", 
                "name": "duration"
            }
        ], 
        "path": "dom/audioparam/setvaluecurveattime", 
        "syntax": "var AudioParam = AudioParam.setValueCurveAtTime(values, startTime, duration)", 
        "type": "Web Audio"
    }, 
    "AudioParam.value": {
        "descr": "The value property of the AudioParam interface represents the parameter's current floating point value, which is initially set to the value of AudioParam.defaultValue.", 
        "name": "AudioParam.value", 
        "params": [], 
        "path": "dom/audioparam/value", 
        "syntax": "var gainNode = audioCtx.createGain();\n or gainNode.gain.value = 0; //'gain' is the AudioParam);", 
        "type": "Web Audio"
    }, 
    "Basic Concepts Behind IndexedDB": {
        "descr": "IndexedDB is a way for you to persistently store data inside a user's browser. Because it lets you create web applications with rich query abilities regardless of network availability, these applications can work both online and offline. IndexedDB is useful for applications that store a large amount of data (for example, a catalog of DVDs in a lending library) and applications that don't need persistent internet connectivity to work (for example, mail clients, to-do lists, and notepads).", 
        "name": "Basic Concepts Behind IndexedDB", 
        "params": [
            {
                "descr": ". An origin is the domain, application layer protocol, and port of a URL of the document where the script is being executed. ", 
                "name": "IndexedDB adheres to a same-origin policy"
            }, 
            {
                "descr": "A repository of information, typically comprising one or more object stores. ", 
                "name": "database"
            }, 
            {
                "descr": "In Firefox, IndexedDB used to be durable, meaning that in a readwrite transaction IDBTransaction.oncomplete was fired only when all data was guaranteed to have been flushed to disk. ", 
                "name": "durable"
            }, 
            {
                "descr": "The mechanism by which data is stored in the database. ", 
                "name": "object store"
            }, 
            {
                "descr": "When a database is first created, its version is the integer 1. ", 
                "name": "version"
            }, 
            {
                "descr": "An operation created by opening a database. ", 
                "name": "database connection"
            }, 
            {
                "descr": "An atomic set of data-access and data-modification operations on a particular database. ", 
                "name": "transaction"
            }, 
            {
                "descr": "The operation by which reading and writing on a database is done. ", 
                "name": "request"
            }, 
            {
                "descr": "An index is a specialized object store for looking up records in another object store, called the referenced object store. ", 
                "name": "index"
            }, 
            {
                "descr": "A data value by which stored values are organized and retrieved in the object store. ", 
                "name": "key"
            }, 
            {
                "descr": "A mechanism for producing new keys in an ordered sequence. ", 
                "name": "key generator"
            }, 
            {
                "descr": "A key that is stored as part of the stored value. ", 
                "name": "in-line key"
            }, 
            {
                "descr": "A key that is stored separately from the value being stored.", 
                "name": "out-of-line key"
            }, 
            {
                "descr": "Defines where the browser should extract the key from in the object store or index. ", 
                "name": "key path"
            }, 
            {
                "descr": "Each record has a value, which could include anything that can be expressed in JavaScript, including boolean, number, string, date, object, array, regexp, undefined, and null. ", 
                "name": "value"
            }
        ], 
        "path": "dom/indexeddb_api/basic_concepts_behind_indexeddb", 
        "syntax": "onsuccess and onerror properties, and you can call addEventListener()", 
        "type": "IndexedDB"
    }, 
    "Battery Status API": {
        "descr": "The Battery Status API, more often referred to as the Battery API, provides information about the system's battery charge level and lets you be notified by events that are sent when the battery level or charging status change. This can be used to adjust your app's resource usage to reduce battery drain when the battery is low, or to save changes before the battery runs out in order to prevent data loss.", 
        "name": "Battery Status API", 
        "params": [], 
        "path": "dom/battery_status_api", 
        "syntax": "Navigator.getBattery()", 
        "type": "Battery Status"
    }, 
    "BatteryManager.charging": {
        "descr": "A Boolean value indicating whether or not the device's battery is currently being charged.", 
        "name": "BatteryManager.charging", 
        "params": [], 
        "path": "dom/batterymanager/charging", 
        "syntax": "var charging = battery.charging On return, charging indicates whether or not the battery, which is a BatteryManager object, is currently being charged; if the battery is charging, this value is true. Otherwise, the value is false. Example HTML Content <div id=\"charging\">(charging state unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.chargingTime": {
        "descr": "Indicates the amount of time, in seconds, that remain until the battery is fully charged.", 
        "name": "BatteryManager.chargingTime", 
        "params": [], 
        "path": "dom/batterymanager/chargingtime", 
        "syntax": "var time = battery.chargingTime On return, time is the remaining time in seconds until the battery, which is a BatteryManager object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is Infinity. Example HTML Content <div id=\"chargingTime\">(charging time unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.dischargingTime": {
        "descr": "Indicates the amount of time, in seconds, that remains until the battery is fully discharged.", 
        "name": "BatteryManager.dischargingTime", 
        "params": [], 
        "path": "dom/batterymanager/dischargingtime", 
        "syntax": "var time = battery.dischargingTime On return, time is the remaining time in seconds until the battery, which is a BatteryManager object, is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time. Example HTML Content <div id=\"dischargingTime\">(discharging time unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.level": {
        "descr": "Indicates the current battery charge level as a value between 0.0 and 1.0.", 
        "name": "BatteryManager.level", 
        "params": [], 
        "path": "dom/batterymanager/level", 
        "syntax": "var level = battery.level On return, level is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery, which is a BatteryManager object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered. Example HTML Content <div id=\"level\">(battery level unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.onchargingchange": {
        "descr": "Specifies an event listener to receive chargingchange events. These events occur when the battery charging state is updated.", 
        "name": "BatteryManager.onchargingchange", 
        "params": [], 
        "path": "dom/batterymanager/onchargingchange", 
        "syntax": "battery.onchargingchange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the chargingchange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div><div id=\"chargingTime\">(charging time unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.onchargingtimechange": {
        "descr": "Specifies an event listener to receive chargingtimechange events. These events occur when the battery chargingTime is updated.", 
        "name": "BatteryManager.onchargingtimechange", 
        "params": [], 
        "path": "dom/batterymanager/onchargingtimechange", 
        "syntax": "battery.onchargingtimechange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the chargingtimechange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div><div id=\"chargingTime\">(charging time unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.ondischargingtimechange": {
        "descr": "Specifies an event listener to receive dischargingtimechange events. These events occur when the battery dischargingTime is updated.", 
        "name": "BatteryManager.ondischargingtimechange", 
        "params": [], 
        "path": "dom/batterymanager/ondischargingtimechange", 
        "syntax": "battery.ondischargingtimechange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the dischargingtimechange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div><div id=\"chargingTime\">(charging time unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BatteryManager.onlevelchange": {
        "descr": "Specifies an event listener to receive levelchange events. These events occur when the battery level is updated.", 
        "name": "BatteryManager.onlevelchange", 
        "params": [], 
        "path": "dom/batterymanager/onlevelchange", 
        "syntax": "navigator.battery.onlevelchange = funcRef Where battery is a BatteryManager object, and funcRef is a function to be called when the levelchange event occurs. Example HTML Content <div id=\"level\">(battery level unknown)</div><div id=\"stateBaterry\">(charging state unknown)</div>", 
        "type": "Battery Status"
    }, 
    "BiquadFilterNode.Q": {
        "descr": "The Q property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing a Q factor, or quality factor.", 
        "name": "BiquadFilterNode.Q", 
        "params": [], 
        "path": "dom/biquadfilternode/q", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();\n or biquadfilter.Q.value = 100;);", 
        "type": "Web Audio"
    }, 
    "BiquadFilterNode.detune": {
        "descr": "The detune property of the BiquadFilterNode interface is an a-rate AudioParam representing detuning of the frequency in cents.", 
        "name": "BiquadFilterNode.detune", 
        "params": [], 
        "path": "dom/biquadfilternode/detune", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();\n or biquadFilter.detune.value = 100;);", 
        "type": "Web Audio"
    }, 
    "BiquadFilterNode.frequency": {
        "descr": "The frequency property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing a frequency in the current filtering algorithm measured in hertz (Hz).", 
        "name": "BiquadFilterNode.frequency", 
        "params": [], 
        "path": "dom/biquadfilternode/frequency", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();\n or biquadFilter.frequency.value = 3000;);", 
        "type": "Web Audio"
    }, 
    "BiquadFilterNode.gain": {
        "descr": "The gain property of the BiquadFilterNode interface Is a k-rate AudioParam, a double representing the gain used in the current filtering algorithm.", 
        "name": "BiquadFilterNode.gain", 
        "params": [], 
        "path": "dom/biquadfilternode/gain", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();\n or biquadfilter.gain.value = 25;);", 
        "type": "Web Audio"
    }, 
    "BiquadFilterNode.getFrequencyResponse": {
        "descr": "The getFrequencyResponse() method of the BiquadFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in the frequencyHz array of frequencies.", 
        "name": "BiquadFilterNode.getFrequencyResponse", 
        "params": [
            {
                "descr": "An array containing hertz values that you want the frequency response for.", 
                "name": "frequencyHz"
            }, 
            {
                "descr": "An array that will contain the outputted magnitude of the frequency response for each inputted frequency (hertz) value. ", 
                "name": "magResponse"
            }, 
            {
                "descr": "An array that will contain the outputted phase of the frequency response for each inputted frequency (hertz) value, measured in radians.", 
                "name": "phaseResponse"
            }
        ], 
        "path": "dom/biquadfilternode/getfrequencyresponse", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();\n or biquadfilter.getFrequencyResponse(myFrequencyArray,magResponseOutput,phaseResponseOutput);", 
        "type": "Web Audio"
    }, 
    "BiquadFilterNode.type": {
        "descr": "The type property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.", 
        "name": "BiquadFilterNode.type", 
        "params": [], 
        "path": "dom/biquadfilternode/type", 
        "syntax": "var audioCtx = new AudioContext();\n or var biquadFilter = audioCtx.createBiquadFilter();\n or biquadfilter.type = 'lowpass';);", 
        "type": "Web Audio"
    }, 
    "Bitwise Operators": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": "Bitwise Operators", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "Blob": {
        "descr": "A Blob object represents a file-like object of immutable, raw data. Blobs represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system.", 
        "name": "Blob", 
        "params": [
            {
                "descr": "Returns a newly created Blob object whose content consists of the concatenation of the array of values given in parameter.", 
                "name": "Blob(blobParts[, options])"
            }, 
            {
                "descr": "A boolean value, indicating whether the Blob.close() method has been called on the blob. ", 
                "name": "Blob.isClosed Read only"
            }, 
            {
                "descr": "The size, in bytes, of the data contained in the Blob object.", 
                "name": "Blob.size Read only"
            }, 
            {
                "descr": "A string indicating the MIME type of the data contained in the Blob. ", 
                "name": "Blob.type Read only"
            }, 
            {
                "descr": "Closes the blob object, possibly freeing underlying resources.", 
                "name": "Blob.close()"
            }, 
            {
                "descr": "Returns a new Blob object containing the data in the specified range of bytes of the source Blob.", 
                "name": "Blob.slice([start[, end[, contentType]]])"
            }
        ], 
        "path": "dom/blob", 
        "syntax": "Array.slice()", 
        "type": "File"
    }, 
    "Blob.constructor": {
        "descr": "The Blob() constructor returns a new Blob object. The content of the blob consists of the concatenation of the values given in the parameter array.", 
        "name": "Blob.constructor", 
        "params": [], 
        "path": "dom/blob/blob", 
        "syntax": "var aBlob = new Blob( array, options );", 
        "type": "File"
    }, 
    "Blob.size": {
        "descr": "The Blob.size property returns the size in bytes of the Blob or a File.", 
        "name": "Blob.size", 
        "params": [], 
        "path": "dom/blob/size", 
        "syntax": "var sizeInBytes = blob.size Value A number. Example // fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\">var fileInput = document.getElementById(\"myfileinput\");\n or // files is a FileList object (simliar to NodeList)var files = fileInput.files;for (var i = 0; i < files.length; i++) {  console.log(files[i].name + \" has a size of \" + files[i].size + \" Bytes\");\n or });", 
        "type": "File"
    }, 
    "Blob.slice": {
        "descr": "The slice is used to create a new Blob object containing the data in the specified range of bytes of the source Blob.", 
        "name": "Blob.slice", 
        "params": [
            {
                "descr": "An index into the Blob indicating the first byte to include in the new Blob. ", 
                "name": "start Optional"
            }, 
            {
                "descr": "An index into the Blob indicating the first byte that will *not* be included in the new Blob (i.e. ", 
                "name": "end Optional"
            }, 
            {
                "descr": "The content type to assign to the new Blob; this will be the value of its type property. ", 
                "name": "contentType Optional"
            }
        ], 
        "path": "dom/blob/slice", 
        "syntax": "var blob = instanceOfBlob.slice([start [, end [, contentType]]]);", 
        "type": "File"
    }, 
    "Blob.type": {
        "descr": "The type property of a Blob object provides the MIME type of the file. It returns an empty string if the type couldn't determined.", 
        "name": "Blob.type", 
        "params": [], 
        "path": "dom/blob/type", 
        "syntax": "var mimetype = instanceOfFile.type Value A string Example var i, fileInput, files, allowedFileTypes;// fileInput is a HTMLInputElement: <input type=\"file\" multiple id=\"myfileinput\">fileInput = document.getElementById(\"myfileinput\");\n or // files is a FileList object (simliar to NodeList)files = fileInput.files;// our application only allows *.png, *.jpeg and *.gif imagesallowedFileTypes = [\"image/png\", \"image/jpeg\", \"image/gif\"];for (i = 0; i < files.length; i++) {  // Test if file.type is an allowed file type.  if (allowedFileTypes.indexOf(files[i].type) > -1) {    // file type matched is one of allowed file types. Do something here.  }});", 
        "type": "File"
    }, 
    "BlobBuilder": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "BlobBuilder", 
        "params": [
            {
                "descr": "The data to append to the Blob being constructed.", 
                "name": "data"
            }, 
            {
                "descr": "Specifies how strings containing \\n are to be written out. ", 
                "name": "endings"
            }, 
            {
                "descr": "The MIME type of the data to be returned in the Blob. ", 
                "name": "contentType Optional"
            }, 
            {
                "descr": "The file name.", 
                "name": "name"
            }, 
            {
                "descr": "The MIME type of the data to be returned in the File. ", 
                "name": "contentType Optional"
            }
        ], 
        "path": "dom/blobbuilder", 
        "syntax": "data The data to append to the Blob being constructed. endings Specifies how strings containing \\n are to be written out. This can be \"transparent\" (endings unchanged) or \"native\"", 
        "type": "Miscellaneous"
    }, 
    "BlobEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BlobEvent", 
        "params": [
            {
                "descr": "A Blob representing the data associated with the event. ", 
                "name": "BlobEvent.data Read only"
            }, 
            {
                "descr": "Creates a BlobEvent event with the given parameters.", 
                "name": "BlobEvent()"
            }
        ], 
        "path": "dom/blobevent", 
        "syntax": "BlobEvent interface represents events associated with a Blob. These blobs are typically, but not necessarily, associated with media content. Properties Inherits properties from its parent Event.  BlobEvent.data Read only  A Blob representing the data associated with the event. The event was fired on the EventTarget because of something happening on that specific Blob.  Constructor  BlobEvent()", 
        "type": "Stream"
    }, 
    "BlobEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BlobEvent.constructor", 
        "params": [
            {
                "descr": "Is an Blob associated with the event.", 
                "name": "data"
            }
        ], 
        "path": "dom/blobevent/blobevent", 
        "syntax": "BlobEvent()", 
        "type": "Stream"
    }, 
    "BlobEvent.data": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BlobEvent.data", 
        "params": [], 
        "path": "dom/blobevent/data", 
        "syntax": "BlobEvent.data read-only property represents a Blob associated with the event. Syntax associatedBlob = BlobEvent.data Specifications    Specification Status Comment   MediaStream RecordingThe definition of 'BlobEvent.data' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 22.0 (22.0) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 22.0 (22.0) Not supported Not supported Not supported     See also", 
        "type": "Stream"
    }, 
    "Body": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Body", 
        "params": [
            {
                "descr": "Contains a Boolean that indicates whether the body has been read.", 
                "name": "Body.bodyUsed Read only"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.arrayBuffer()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.blob()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.formData()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.json()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.text()"
            }
        ], 
        "path": "dom/body", 
        "syntax": "Body mixin of the Fetch API represents the body of the response/request, allowing you to declare what its content type is and how it should be handled. Body is implemented by both Request and Response \u2014 this provides these objects with an associated body (a byte stream), a used flag (initially unset), and a MIME type (initially the empty byte sequence).", 
        "type": "Fetch"
    }, 
    "Body.arrayBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Body.arrayBuffer", 
        "params": [], 
        "path": "dom/body/arraybuffer", 
        "syntax": "arrayBuffer()", 
        "type": "Fetch"
    }, 
    "Body.blob": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Body.blob", 
        "params": [], 
        "path": "dom/body/blob", 
        "syntax": "blob()", 
        "type": "Fetch"
    }, 
    "Body.bodyUsed": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Body.bodyUsed", 
        "params": [], 
        "path": "dom/body/bodyused", 
        "syntax": "bodyUsedread-only property of the Body mixin contains a Boolean that indicates whether the body has been read yet. Syntax var myBodyUsed = response.bodyUsed; Value A Boolean. Example In our fetch request example (run fetch request live), we create a new request using the Request.Request", 
        "type": "Fetch"
    }, 
    "Body.formData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Body.formData", 
        "params": [], 
        "path": "dom/body/formdata", 
        "syntax": "formData()", 
        "type": "Fetch"
    }, 
    "Body.json": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Body.json", 
        "params": [], 
        "path": "dom/body/json", 
        "syntax": "json()", 
        "type": "Fetch"
    }, 
    "Body.text": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Body.text", 
        "params": [], 
        "path": "dom/body/text", 
        "syntax": "text()", 
        "type": "Fetch"
    }, 
    "Boolean": {
        "descr": "The Boolean object is an object wrapper for a boolean value.", 
        "name": "Boolean", 
        "params": [
            {
                "descr": "Optional. The initial value of the Boolean object.", 
                "name": "value"
            }, 
            {
                "descr": "Length property whose value is 1.", 
                "name": "Boolean.length"
            }, 
            {
                "descr": "Represents the prototype for the Boolean constructor.", 
                "name": "Boolean.prototype"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Boolean.prototype.constructor"
            }, 
            {
                "descr": "Returns a string containing the source of the Boolean object; you can use this string to create an equivalent object. ", 
                "name": "Boolean.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string of either \"true\" or \"false\" depending upon the value of the object. ", 
                "name": "Boolean.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of the Boolean object. ", 
                "name": "Boolean.prototype.valueOf()"
            }
        ], 
        "path": "javascript/global_objects/boolean", 
        "syntax": "new Boolean([value])", 
        "type": "Boolean"
    }, 
    "Broadcast Channel API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Broadcast Channel API", 
        "params": [], 
        "path": "dom/broadcast_channel_api", 
        "syntax": "BroadcastChannel object, which is listening to the underlying channel, you are able to receive any message that has been posted to it. An interesting point is that you no longer have to maintain a reference to iframes or workers that you with to communicate with. They can simply \u201csubscribe\u201d to particular channels by constructing a BroadcastChannel", 
        "type": "Broadcast Channel"
    }, 
    "BroadcastChannel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "BroadcastChannel", 
        "params": [
            {
                "descr": "Creates an object linking to the named channel.", 
                "name": "BroadcastChannel()"
            }, 
            {
                "descr": "Returns a DOMString, the name of the channel.", 
                "name": "BroadcastChannel.name"
            }, 
            {
                "descr": "Is an EventHandler property that specifies the function to execute when a message event is fired on this object.", 
                "name": "BroadcastChannel.onmessage"
            }, 
            {
                "descr": "Sends the message, of any type of object, to each BroadcastChannel object listening to the same channel.", 
                "name": "BroadcastChannel.postMessage()"
            }, 
            {
                "descr": "Closes the channel object, indicating it won't get any new messages, and allowing it to be, eventually, garbage collected.", 
                "name": "BroadcastChannel.close()"
            }
        ], 
        "path": "dom/broadcastchannel", 
        "syntax": "BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message", 
        "type": "Broadcast Channel"
    }, 
    "BroadcastChannel.close": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BroadcastChannel.close", 
        "params": [], 
        "path": "dom/broadcastchannel/close", 
        "syntax": "BroadcastChannel.close()", 
        "type": "Broadcast Channel"
    }, 
    "BroadcastChannel.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BroadcastChannel.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the channel; there is one single channel with this name for all browser contexts with the same origin.", 
                "name": "channel"
            }
        ], 
        "path": "dom/broadcastchannel/broadcastchannel", 
        "syntax": "BroadcastChannel()", 
        "type": "Broadcast Channel"
    }, 
    "BroadcastChannel.name": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BroadcastChannel.name", 
        "params": [], 
        "path": "dom/broadcastchannel/name", 
        "syntax": "BroadcastChannel.name property returns a DOMString, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel()", 
        "type": "Broadcast Channel"
    }, 
    "BroadcastChannel.onmessage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BroadcastChannel.onmessage", 
        "params": [], 
        "path": "dom/broadcastchannel/onmessage", 
        "syntax": "BroadcastChannel.onmessage event handler is a property that specifies the function to execute when a message event, of type MessageEvent, is received by this BroadcastChannel", 
        "type": "Broadcast Channel"
    }, 
    "BroadcastChannel.postMessage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "BroadcastChannel.postMessage", 
        "params": [], 
        "path": "dom/broadcastchannel/postmessage", 
        "syntax": "BroadcastChannel.postMessage()", 
        "type": "Broadcast Channel"
    }, 
    "Browser storage limits and eviction criteria": {
        "descr": "Note: The information below should be fairly accurate for most modern browsers, but browser specifics are called out where known. Opera and Chrome should behave the same in all cases. Opera Mini (still presto-based, server-side rendering) doesn't store any data on the client.", 
        "name": "Browser storage limits and eviction criteria", 
        "params": [], 
        "path": "dom/indexeddb_api/browser_storage_limits_and_eviction_criteria", 
        "syntax": "storage \u2014 when you create an IndexedDB database using open()", 
        "type": "File"
    }, 
    "CSS Font Loading API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CSS Font Loading API", 
        "params": [
            {
                "descr": "Represents a single usable font face.", 
                "name": "FontFace"
            }, 
            {
                "descr": "An interface loading font faces and checking their download statuses.", 
                "name": "FontFaceSet"
            }, 
            {
                "descr": "An mixing providing all of the fonts used in font-related operations, unless defined otherwise. ", 
                "name": "FontFaceSource"
            }, 
            {
                "descr": "An interface to data about a font load event.", 
                "name": "FontFaceSetLoadEvent"
            }
        ], 
        "path": "dom/css_font_loading_api", 
        "syntax": "FontFace Represents a single usable font face. FontFaceSet An interface loading font faces and checking their download statuses. FontFaceSource An mixing providing all of the fonts used in font-related operations, unless defined otherwise. It defines the FontFaceSources.fonts property available to Document", 
        "type": "CSS"
    }, 
    "CSS.escape": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CSS.escape", 
        "params": [
            {
                "descr": "The DOMString to be escaped.", 
                "name": "str"
            }
        ], 
        "path": "dom/css/escape", 
        "syntax": "CSS.escape()", 
        "type": "CSS"
    }, 
    "CSS.supports": {
        "descr": "The CSS.supports() static methods returns a Boolean value indicating if the browser supports a given CSS feature, or not.", 
        "name": "CSS.supports", 
        "params": [
            {
                "descr": "A DOMString containing the name of the CSS property to check.", 
                "name": "propertyName"
            }, 
            {
                "descr": "A DOMString containing the value of the CSS property to check.", 
                "name": "value"
            }, 
            {
                "descr": "A DOMString containing the condition to check.", 
                "name": "supportCondition"
            }
        ], 
        "path": "dom/css/supports", 
        "syntax": "boolValue = CSS.supports(propertyName, value);\n or boolValue = CSS.supports(supportCondition);", 
        "type": "CSS"
    }, 
    "CSSConditionRule": {
        "descr": "An object implementing the CSSConditionRule interface represents a single condition CSS at-rule, which consists of a condition and a statement block. It is a child of CSSGroupingRule.", 
        "name": "CSSConditionRule", 
        "params": [
            {
                "descr": "Represents the text of the condition of the rule.", 
                "name": "CSSConditionRule.conditionText"
            }
        ], 
        "path": "dom/cssconditionrule", 
        "syntax": "interface CSSConditionRule : CSSGroupingRule {    attribute DOMString conditionText;} Properties The CSSConditionRule derives from CSSRule, CSSGroupingRule and inherits all properties of these classes. It has one specific property:  CSSConditionRule.conditionText Represents the text of the condition of the rule.  Methods The CSSConditionRule derives from CSSRule, CSSGroupingRule and inherits all methods of these classes. It has no specific property of its own. Specifications    Specification Status Comment     CSS Conditional Rules Module Level 3The definition of 'CSSConditionRule' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported 20.0 (20.0) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support Not supported 20.0 (20.0) Not supported Not supported Not supported     See also", 
        "type": "CSS"
    }, 
    "CSSGroupingRule": {
        "descr": "An object implementing the CSSGroupingRule interface represents any CSS at-rule that contains other rules nested within it.", 
        "name": "CSSGroupingRule", 
        "params": [], 
        "path": "dom/cssgroupingrule", 
        "syntax": "interface CSSGroupingRule : CSSRule {    readonly attribute CSSRuleList cssRules;    unsigned long insertRule (DOMString rule, unsigned long index);\n or     void deleteRule (unsigned long index);\n or });", 
        "type": "CSS"
    }, 
    "CSSKeyframeRule": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CSSKeyframeRule", 
        "params": [
            {
                "descr": "Represents the key of the keyframe, like '10%', '75%'. ", 
                "name": "CSSKeyframe.keyText"
            }
        ], 
        "path": "dom/csskeyframerule", 
        "syntax": "CSSKeyframeRule interface describes an object representing a set of style for a given keyframe. It corresponds to the contains of a single keyframe of a @keyframes", 
        "type": "CSS"
    }, 
    "CSSKeyframesRule": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CSSKeyframesRule", 
        "params": [
            {
                "descr": "Represents the name of the animation, used by the animation-name property.", 
                "name": "CSSPageRule.name"
            }, 
            {
                "descr": "Returns a keyframe rule corresponding to the given key. ", 
                "name": "CSSPageRule.findRule"
            }
        ], 
        "path": "dom/csskeyframesrule", 
        "syntax": "CSSKeyframesRule interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contains of a whole @keyframes", 
        "type": "CSS"
    }, 
    "CSSMediaRule": {
        "descr": "The CSSMediaRule is an interface representing a single CSS @media rule. It implements the CSSConditionRule interface, and therefore the CSSGroupingRule and the CSSRule interface with a type value of 4 (CSSRule.MEDIA_RULE).", 
        "name": "CSSMediaRule", 
        "params": [
            {
                "descr": "Specifies a MediaList representing the intended destination medium for style information.", 
                "name": "CSSMediaRule.media Read only"
            }
        ], 
        "path": "dom/cssmediarule", 
        "syntax": "interface CSSMediaRule : CSSConditionRule {    readonly attribute MediaList media;} Properties As a CSSConditionRule, and therefore both a CSSGroupingRule and a CSSRule, CSSMediaRule also implements the properties of these interfaces. It has the following specific property:  CSSMediaRule.media Read only  Specifies a MediaList representing the intended destination medium for style information.  Methods As a CSSConditionRule, and therefore both a CSSGroupingRule and a CSSRule, CSSMediaRule also implements the methods of that interface. It has no specific methods. Specifications    Specification Status Comment     CSS Conditional Rules Module Level 3The definition of 'CSSMediaRule' in that specification. Candidate Recommendation Make it derived from the CSSConditionRule.   CSS Object Model (CSSOM)The definition of 'CSSMediaRule' in that specification. Working Draft No changes from Document Object Model (DOM) Level 2 Style Specification   Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSMediaRule' in that specification. Recommendation      Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSNamespaceRule": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CSSNamespaceRule", 
        "params": [
            {
                "descr": "Returns a DOMString with the name of the prefix associated to this namespace. ", 
                "name": "CSSNamespaceRule.prefix"
            }
        ], 
        "path": "dom/cssnamespacerule", 
        "syntax": "CSSNamespaceRule interface describes an object representing a single CSS @namespace at-rule. It implements the CSSRule interface, with a type value of 10 (CSSRule.NAMESPACE_RULE).", 
        "type": "CSS"
    }, 
    "CSSNamespaceRule.namespaceURI": {
        "descr": "The CSSNamespaceRule.namespaceURI read-only property returns a DOMString containing the text of the URI of the given namespace.", 
        "name": "CSSNamespaceRule.namespaceURI", 
        "params": [], 
        "path": "dom/cssnamespacerule/namespaceuri", 
        "syntax": "var namespaceURI = CSSNamespaceRule.namespaceURI Returns A DOMString containing a URI. Specifications    Specification Status Comment   CSS Object Model (CSSOM)The definition of 'namespaceURI' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSNamespaceRule.prefix": {
        "descr": "The CSSNamespaceRule.prefix read-only property returns a DOMString with the name of the prefix associated to this namespace. If there is no such prefix, returns null.", 
        "name": "CSSNamespaceRule.prefix", 
        "params": [], 
        "path": "dom/cssnamespacerule/prefix", 
        "syntax": "var prefix = CSSNamespaceRule.prefix Returns A DOMString containing the prefix associated to this namespace. Specifications    Specification Status Comment   CSS Object Model (CSSOM)The definition of 'namespaceURI' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSPageRule": {
        "descr": "CSSPageRule is an interface representing a single CSS @page rule. It implements the CSSRule interface with a type value of 6 (CSSRule.PAGE_RULE).", 
        "name": "CSSPageRule", 
        "params": [
            {
                "descr": "Represents the text of the page selector associated with the at-rule.", 
                "name": "CSSPageRule.selectorText"
            }, 
            {
                "descr": "Returns the declaration block associated with the at-rule.", 
                "name": "CSSPageRule.style Read only"
            }
        ], 
        "path": "dom/csspagerule", 
        "syntax": "interface CSSPageRule : CSSRule {  attribute DOMString selectorText;  readonly attribute CSSStyleDeclaration style;}; Properties As a CSSRule, CSSPageRule also implements the properties of this interface. It has the following specific properties:  CSSPageRule.selectorText Represents the text of the page selector associated with the at-rule. CSSPageRule.style Read only  Returns the declaration block associated with the at-rule.  Methods As a CSSRule, CSSPageRule also implements the methods of that interface. It has no specific methods. Specifications    Specification Status Comment     CSS Object Model (CSSOM)The definition of 'CSSPageRule' in that specification. Working Draft No changes from Document Object Model (DOM) Level 2 Style Specification   Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSPageRule' in that specification. Recommendation Initial definition    Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue": {
        "descr": "The CSSPrimitiveValue interface derives from the CSSValue interface and represents the current computed value of a CSS property.", 
        "name": "CSSPrimitiveValue", 
        "params": [
            {
                "descr": "An unsigned short representing the type of the value. ", 
                "name": "CSSPrimitiveValue.primitiveType Read only"
            }, 
            {
                "descr": "This method is used to get the counter value. ", 
                "name": "CSSPrimitiveValue.getCounterValue()"
            }, 
            {
                "descr": "This method is used to get a float value in a specified unit. ", 
                "name": "CSSPrimitiveValue.getFloatValue()"
            }, 
            {
                "descr": "This method is used to get the RGB color. ", 
                "name": "CSSPrimitiveValue.getRGBColorValue()"
            }, 
            {
                "descr": "This method is used to get the Rect value. ", 
                "name": "CSSPrimitiveValue.getRectValue()"
            }, 
            {
                "descr": "This method is used to get the string value. ", 
                "name": "CSSPrimitiveValue.getStringValue()"
            }, 
            {
                "descr": "A method to set the float value with a specified unit. ", 
                "name": "CSSPrimitiveValue.setFloatValue()"
            }, 
            {
                "descr": "A method to set the string value with the specified unit. ", 
                "name": "CSSPrimitiveValue.setStringValue()"
            }
        ], 
        "path": "dom/cssprimitivevalue", 
        "syntax": "<angle> in degrees. The value can be obtained by using the getFloatValue()", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.getCounterValue": {
        "descr": "The getCounterValue() method of the CSSPrimitiveValue interface is used to get the counter value. If this CSS value doesn't contain a counter value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Counter interface.", 
        "name": "CSSPrimitiveValue.getCounterValue", 
        "params": [], 
        "path": "dom/cssprimitivevalue/getcountervalue", 
        "syntax": "var counterValue = cssPrimitiveValue.getCounterValue();", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.getFloatValue": {
        "descr": "The getFloatValue() method of the CSSPrimitiveValue interface is used to get a float value in a specified unit. If this CSS value doesn't contain a float value or can't be converted into the specified unit, a DOMException is raised.", 
        "name": "CSSPrimitiveValue.getFloatValue", 
        "params": [
            {
                "descr": "An unsigned short representing the code for the unit type, in which the value should be returned. ", 
                "name": "unitType"
            }
        ], 
        "path": "dom/cssprimitivevalue/getfloatvalue", 
        "syntax": "var floatValue = cssPrimitiveValue.getFloatValue(unit);", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.getRGBColorValue": {
        "descr": "The getRGBColorValue() method of the CSSPrimitiveValue interface is used to get an RGB color value. If this CSS value doesn't contain a RGB color value, a DOMException is raised. Modification to the corresponding style property can be achieved using the RGBColor interface.", 
        "name": "CSSPrimitiveValue.getRGBColorValue", 
        "params": [], 
        "path": "dom/cssprimitivevalue/getrgbcolorvalue", 
        "syntax": "var rgbColorValue = cssPrimitiveValue.getRGBColorValue();", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.getRectValue": {
        "descr": "The getRectValue() method of the CSSPrimitiveValue interface is used to get a rect value. If this CSS value doesn't contain a rect value, a DOMException is raised. Modification to the corresponding style property can be achieved using the Rect interface.", 
        "name": "CSSPrimitiveValue.getRectValue", 
        "params": [], 
        "path": "dom/cssprimitivevalue/getrectvalue", 
        "syntax": "var rectValue = cssPrimitiveValue.getRectValue();", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.getStringValue": {
        "descr": "The getStringValue() method of the CSSPrimitiveValue interface is used to get a string value. If this CSS value doesn't contain a string value, a DOMException is raised.", 
        "name": "CSSPrimitiveValue.getStringValue", 
        "params": [], 
        "path": "dom/cssprimitivevalue/getstringvalue", 
        "syntax": "var stringValue = cssPrimitiveValue.getStringValue();", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.primitiveType": {
        "descr": "The primitiveType read-only property of the CSSPrimitiveValue interface represents the type of a CSS value.", 
        "name": "CSSPrimitiveValue.primitiveType", 
        "params": [], 
        "path": "dom/cssprimitivevalue/primitivetype", 
        "syntax": "type = cssPrimitiveValue.primitiveType; Value An unsigned short representing the type of the value. Possible values are:    Constant Description   CSS_ATTR The value is an attr()", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.setFloatValue": {
        "descr": "The setFloatValue() method of the CSSPrimitiveValue interface is used to set a float value. If the property attached to this value can't accept the specified unit or the float value, the value will be unchanged and a DOMException will be raised.", 
        "name": "CSSPrimitiveValue.setFloatValue", 
        "params": [
            {
                "descr": "An unsigned short representing the code for the unit type, in which the value should be returned. ", 
                "name": "unitType"
            }, 
            {
                "descr": "A float representing the new float value.", 
                "name": "floatValue"
            }
        ], 
        "path": "dom/cssprimitivevalue/setfloatvalue", 
        "syntax": "cssPrimitiveValue.setFloatValue(unitType, floatValue);", 
        "type": "CSS"
    }, 
    "CSSPrimitiveValue.setStringValue": {
        "descr": "The setStringValue() method of the CSSPrimitiveValue interface is used to set a string value. If the property attached to this value can't accept the specified unit or the string value, the value will be unchanged and a DOMException will be raised.", 
        "name": "CSSPrimitiveValue.setStringValue", 
        "params": [
            {
                "descr": "An unsigned short representing the type of the value. ", 
                "name": "stringType"
            }, 
            {
                "descr": "A DOMString representing the new string value.", 
                "name": "stringValue"
            }
        ], 
        "path": "dom/cssprimitivevalue/setstringvalue", 
        "syntax": "cssPrimitiveValue.setStringValue(stringType, stringValue);", 
        "type": "CSS"
    }, 
    "CSSRule": {
        "descr": "The CSSRule interface represents a single CSS rule. There are several types of rules, listed in the Type constants section below.", 
        "name": "CSSRule", 
        "params": [], 
        "path": "dom/cssrule", 
        "syntax": "CSSRule interface specifies the properties common to all rules, while properties unique to specific rule types are specified in the more specialized interfaces for those rules' respective types. References to a CSSRule may be obtained by looking at a CSSStyleSheet's cssRules list. Properties common to all CSSRule instances  CSSRule.cssText Represents the textual representation of the rule, e.g. \"h1,h2 { font-size: 16pt }\" or \"@import 'url'\". To access or modify parts of the rule (e.g. the value of \"font-size\" in the example) use the properties on the specialized interface for the rule's type. CSSRule.parentRule", 
        "type": "CSS"
    }, 
    "CSSRule.cssText": {
        "descr": "Not to be confused with element-style CSSStyleDeclaration.cssText.", 
        "name": "CSSRule.cssText", 
        "params": [], 
        "path": "dom/cssrule/csstext", 
        "syntax": "string = cssRule.cssText  Example <style>body { background-color: darkblue; }</style><script>  var stylesheet = document.styleSheets[0];  alert(stylesheet.cssRules[0].cssText);\n or  // body { background-color: darkblue; }</script>);", 
        "type": "CSS"
    }, 
    "CSSRule.parentStyleSheet": {
        "descr": "parentStyleSheet returns the stylesheet object in which the current rule is defined.", 
        "name": "CSSRule.parentStyleSheet", 
        "params": [], 
        "path": "dom/cssrule/parentstylesheet", 
        "syntax": "var stylesheet = cssRule.parentStyleSheet  Parameters  stylesheet is a stylesheet object.  Example if ( bgRule.parentStyleSheet\u00a0!= mySheet ) {   // alien style rule!}", 
        "type": "CSS"
    }, 
    "CSSRuleList": {
        "descr": "A CSSRuleList is an (indirect-modify only) array-like object containing an ordered collection of CSSRule objects.", 
        "name": "CSSRuleList", 
        "params": [], 
        "path": "dom/cssrulelist", 
        "syntax": "CSSRule can be accessed as rules.item(index),", 
        "type": "CSS"
    }, 
    "CSSStyleDeclaration": {
        "descr": "CSSStyleDeclaration represents a collection of CSS property-value pairs. It is used in a few APIs:", 
        "name": "CSSStyleDeclaration", 
        "params": [
            {
                "descr": "Textual representation of the declaration block. ", 
                "name": "CSSStyleDeclaration.cssText"
            }, 
            {
                "descr": "The number of properties. See the item method below.", 
                "name": "CSSStyleDeclaration.length"
            }, 
            {
                "descr": "The containing CssRule.", 
                "name": "CSSStyleDeclaration.parentRule"
            }, 
            {
                "descr": "Returns the optional priority, \"important\". ", 
                "name": "CSSStyleDeclaration.getPropertyPriority()"
            }, 
            {
                "descr": "Returns the property value. Example: valString= styleObj.getPropertyValue('color')", 
                "name": "CSSStyleDeclaration.getPropertyValue()"
            }, 
            {
                "descr": "Returns a property name. Example: nameString= styleObj.item(0) Alternative: nameString= styleObj[0]", 
                "name": "CSSStyleDeclaration.item()"
            }, 
            {
                "descr": "Returns the value deleted. Example: valString= styleObj.removeProperty('color')", 
                "name": "CSSStyleDeclaration.removeProperty()"
            }, 
            {
                "descr": "No return. Example: styleObj.setProperty('color', 'red', 'important')", 
                "name": "CSSStyleDeclaration.setProperty()"
            }, 
            {
                "descr": "Only supported via getComputedStyle. ", 
                "name": "CSSStyleDeclaration.getPropertyCSSValue()"
            }
        ], 
        "path": "dom/cssstyledeclaration", 
        "syntax": "CSSStyleDeclaration.cssText Textual representation of the declaration block. Setting this attribute changes the style. CSSStyleDeclaration.length The number of properties. See the item method below. CSSStyleDeclaration.parentRule The containing CssRule.  Methods  CSSStyleDeclaration.getPropertyPriority()", 
        "type": "CSS"
    }, 
    "CSSStyleDeclaration.cssText": {
        "descr": "Not to be confused with stylesheet style-rule CSSRule.cssText.", 
        "name": "CSSStyleDeclaration.cssText", 
        "params": [], 
        "path": "dom/cssstyledeclaration/csstext", 
        "syntax": "string = elem.style.cssText  Example <span id=\"s1\" style=\"color: red;\">Some text</span><script>  var elem = document.getElementById(\"s1\");\n or   alert(elem.style.cssText);\n or  // { color: red; }</script>);", 
        "type": "CSS"
    }, 
    "CSSStyleRule": {
        "descr": "CSSStyleRule represents a single CSS style rule. It implements the CSSRule interface with a type value of 1 (CSSRule.STYLE_RULE).", 
        "name": "CSSStyleRule", 
        "params": [], 
        "path": "dom/cssstylerule", 
        "syntax": "interface CSSStyleRule : CSSRule {\u00a0\u00a0\u00a0 attribute DOMString selectorText;\u00a0\u00a0\u00a0 readonly attribute CSSStyleDeclaration style;}; Properties  CSSStyleRule.selectorText Gets the textual representation of the selector for this rule, e.g. \"h1,h2\". CSSStyleRule.style Read only  Returns the CSSStyleDeclaration object for the rule. Read only.  Specification    Specification Status Comment     CSS Object Model (CSSOM)The definition of 'CSSStyleRule' in that specification. Working Draft No changes   Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSRule' in that specification. Recommendation      Browser compatibility", 
        "type": "CSS"
    }, 
    "CSSStyleRule.selectorText": {
        "descr": "The CSSRule.selectorText property gets the textual representation of the selector for the rule set. This is implemented in a readonly manner; to set stylesheet rules dynamically, see Using dynamic styling information.", 
        "name": "CSSStyleRule.selectorText", 
        "params": [], 
        "path": "dom/cssstylerule/selectortext", 
        "syntax": "string = cssRule.selectorText  Example // for cssrule: body { background-color: darkblue; }var stylesheet = document.styleSheets[0];alert(stylesheet.cssRules[0].selectorText);\n or  // body);", 
        "type": "CSS"
    }, 
    "CSSStyleRule.style": {
        "descr": "The CSSRule.style property is the CSSStyleDeclaration interface for the declaration block of the CSSRule.", 
        "name": "CSSStyleRule.style", 
        "params": [], 
        "path": "dom/cssstylerule/style", 
        "syntax": "styleObj = cssRule.style Example function stilo() {  alert(document.styleSheets[0].cssRules[0].style.cssText);\n or }// displays \"background-color: gray;\");", 
        "type": "CSS"
    }, 
    "CSSStyleSheet": {
        "descr": "The CSSStyleSheet interface represents a single CSS style sheet. It inherits properties and methods from its parent, StyleSheet.", 
        "name": "CSSStyleSheet", 
        "params": [], 
        "path": "dom/cssstylesheet", 
        "syntax": "h1,h2 { font-size: 16pt }\"), various at-rules (@import", 
        "type": "CSS"
    }, 
    "CSSStyleSheet.deleteRule": {
        "descr": "The CSSStyleSheet.deleteRule() method removes a style rule from the current style sheet object.", 
        "name": "CSSStyleSheet.deleteRule", 
        "params": [], 
        "path": "dom/cssstylesheet/deleterule", 
        "syntax": "stylesheet.deleteRule(index)", 
        "type": "CSS"
    }, 
    "CSSStyleSheet.insertRule": {
        "descr": "CSSStyleSheet.insertRule() method inserts a new style rule into the current style sheet. (with some restrictions)", 
        "name": "CSSStyleSheet.insertRule", 
        "params": [], 
        "path": "dom/cssstylesheet/insertrule", 
        "syntax": "stylesheet.insertRule(rule, index)", 
        "type": "CSS"
    }, 
    "CSSSupportsRule": {
        "descr": "The CSSSupportsRule interface describes an object representing a single CSS @supports at-rule. It implements the CSSConditionRule interface, and therefore the CSSRule and CSSGroupingRule interfaces with a type value of 12 (CSSRule.SUPPORTS_RULE).", 
        "name": "CSSSupportsRule", 
        "params": [], 
        "path": "dom/csssupportsrule", 
        "syntax": "interface CSSSupportsRule : CSSConditionRule {} Properties As a CSSConditionRule and therefore a CSSRule and a CSSGroupingRule, CSSSupportsRule also implements the properties of these interfaces. It has no specific properties. Methods As a CSSConditionRule and therefore a CSSRuleand a CSSGroupingRule, CSSSupportsRule also implements the methods of that interface. It has no specific methods. Specification    Specification Status Comment     CSS Conditional Rules Module Level 3The definition of 'CSSSupportsRule' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported 17 (17)[1] Not supported 12.10 Not supported         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support Not supported 17.0 (17)[1] Not supported Not supported Not supported     [1] As prefixing this at-rule has no sense, the CSSSupportsRule", 
        "type": "CSS"
    }, 
    "CSSValue.cssText": {
        "descr": "The cssText property of the CSSValue interface represents the current computed CSS property value.", 
        "name": "CSSValue.cssText", 
        "params": [], 
        "path": "dom/cssvalue/csstext", 
        "syntax": "cssText = cssValue.cssText; Value A DOMString representing the current CSS property value. Example var styleDeclaration = document.styleSheets[0].cssRules[0].style;var cssValue = styleDeclaration.getPropertyCSSValue(\"color\");\n or console.log(cssValue.cssText);", 
        "type": "CSS"
    }, 
    "CSSValue.cssValueType": {
        "descr": "The cssValueType read-only property of the CSSValue interface represents the type of the current computed CSS property value.", 
        "name": "CSSValue.cssValueType", 
        "params": [], 
        "path": "dom/cssvalue/cssvaluetype", 
        "syntax": "cssValueType = cssValue.cssValueType; Value An unsigned short representing a code defining the type of the value. Possible values are:    Constant Description   CSS_CUSTOM The value is a custom value.   CSS_INHERIT The value is inherited and the cssText contains \"inherit\".   CSS_PRIMITIVE_VALUE The value is a primitive value and an instance of the CSSPrimitiveValue interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface.   CSS_VALUE_LIST The value is a CSSValue list and an instance of the CSSValueList interface can be obtained by using binding-specific casting methods on this instance of the CSSValue interface.    Example var styleDeclaration = document.styleSheets[0].cssRules[0].style;var cssValue = styleDeclaration.getPropertyCSSValue(\"color\");\n or console.log(cssValue.cssValueType);", 
        "type": "CSS"
    }, 
    "CSSValueList": {
        "descr": "The CSSValueList interface derives from the CSSValue interface and provides the abstraction of an ordered collection of CSS values.", 
        "name": "CSSValueList", 
        "params": [
            {
                "descr": "An unsigned long representing the number of CSSValues in the list.", 
                "name": "CSSValueList.length Read only"
            }, 
            {
                "descr": "This method is used to retrieve a CSSValue by ordinal index. ", 
                "name": "CSSValueList.item()"
            }
        ], 
        "path": "dom/cssvaluelist", 
        "syntax": "none identifier. So, an empty list means that the property has the value none. The items in the CSSValueList are accessible via an integral index, starting from 0.   Properties Inherits properties from its parent, CSSValue.  CSSValueList.length Read only  An unsigned long representing the number of CSSValues in the list.  Methods  CSSValueList.item()", 
        "type": "CSS"
    }, 
    "CSSValueList.item": {
        "descr": "The item() method of the CSSValueList interface is used to retrieve a CSSValue by ordinal index.", 
        "name": "CSSValueList.item", 
        "params": [
            {
                "descr": "An unsigned long representing the index of the CSS value within the collection.", 
                "name": "index"
            }
        ], 
        "path": "dom/cssvaluelist/item", 
        "syntax": "var cssValue = cssValueList.item(index);", 
        "type": "CSS"
    }, 
    "CSSValueList.length": {
        "descr": "The length read-only property of the CSSValueList interface represents the number of CSSValues in the list. The range of valid values of the indices is 0 to length-1 inclusive.", 
        "name": "CSSValueList.length", 
        "params": [], 
        "path": "dom/cssvaluelist/length", 
        "syntax": "var length = cssValueList.length; Value An unsigned long representing the number of CSSValues. Specifications    Specification Status Comment   Document Object Model (DOM) Level 2 Style SpecificationThe definition of 'CSSValueList.length' in that specification. Recommendation Initial definition    Browser compatibility", 
        "type": "CSS"
    }, 
    "Cache": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache", 
        "params": [
            {
                "descr": "Returns a Promise that resolves to the response associated with the first matching request in the Cache object.", 
                "name": "Cache.match(request, options)"
            }, 
            {
                "descr": "Returns a Promise that resolves to an array of all matching requests in the Cache object.", 
                "name": "Cache.matchAll(request, options)"
            }, 
            {
                "descr": "Takes a URL, retrieves it and adds the resulting response object to the given cache. ", 
                "name": "Cache.add(request)"
            }, 
            {
                "descr": "Takes an array of URLs, retrieves them, and adds the resulting response objects to the given cache.", 
                "name": "Cache.addAll(requests)"
            }, 
            {
                "descr": "Takes both a request and its response and adds it to the given cache.", 
                "name": "Cache.put(request, response)"
            }, 
            {
                "descr": "Finds the Cache entry whose key is the request, and if found, deletes the Cache entry and returns a Promise that resolves to true. ", 
                "name": "Cache.delete(request, options)"
            }, 
            {
                "descr": "Returns a Promise that resolves to an array of Cache keys.", 
                "name": "Cache.keys(request, options)"
            }
        ], 
        "path": "dom/cache", 
        "syntax": "Cache interface provides a storage mechanism for Request / Response object pairs that are cached, for example as part of the ServiceWorker", 
        "type": "Service Workers"
    }, 
    "Cache.add": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.add", 
        "params": [
            {
                "descr": "The request you want to add to the cache. ", 
                "name": "request"
            }
        ], 
        "path": "dom/cache/add", 
        "syntax": "add()", 
        "type": "Service Workers"
    }, 
    "Cache.addAll": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.addAll", 
        "params": [
            {
                "descr": "An array of Request objects you want to add to the cache.", 
                "name": "requests"
            }
        ], 
        "path": "dom/cache/addall", 
        "syntax": "addAll()", 
        "type": "Service Workers"
    }, 
    "Cache.delete": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.delete", 
        "params": [
            {
                "descr": "The Request you are looking to delete.", 
                "name": "request"
            }, 
            {
                "descr": "An object whose properties control how matching is done in the delete operation. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/cache/delete", 
        "syntax": "delete()", 
        "type": "Service Workers"
    }, 
    "Cache.keys": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.keys", 
        "params": [
            {
                "descr": "The Request want to return, if a specific key is desired.", 
                "name": "request Optional"
            }, 
            {
                "descr": "An object whose properties control how matching is done in the keys operation. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/cache/keys", 
        "syntax": "keys()", 
        "type": "Service Workers"
    }, 
    "Cache.match": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.match", 
        "params": [
            {
                "descr": "The Request you are attempting to find in the Cache.", 
                "name": "request"
            }, 
            {
                "descr": "An object that sets options for the match operation. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/cache/match", 
        "syntax": "match()", 
        "type": "Service Workers"
    }, 
    "Cache.matchAll": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.matchAll", 
        "params": [
            {
                "descr": "The Request you are attempting to find in the Cache.", 
                "name": "request"
            }, 
            {
                "descr": "An options object allowing you to set specific control options for the matching done in the match operation. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/cache/matchall", 
        "syntax": "matchAll()", 
        "type": "Service Workers"
    }, 
    "Cache.put": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Cache.put", 
        "params": [
            {
                "descr": "The Request you want to add to the cache.", 
                "name": "request"
            }, 
            {
                "descr": "The Response you want to match up to the request.", 
                "name": "response"
            }
        ], 
        "path": "dom/cache/put", 
        "syntax": "put()", 
        "type": "Service Workers"
    }, 
    "CacheStorage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CacheStorage", 
        "params": [
            {
                "descr": "Checks if a given Request is a key in any of the Cache objects that the CacheStorage object tracks and returns a Promise that resolves to that match.", 
                "name": "CacheStorage.match()"
            }, 
            {
                "descr": "Returns a Promise that resolves to true if a Cache object matching the cacheName exists.", 
                "name": "CacheStorage.has()"
            }, 
            {
                "descr": "Returns a Promise that resolves to the Cache object matching the cacheName (a new cache is created if it doesn't exist.)", 
                "name": "CacheStorage.open()"
            }, 
            {
                "descr": "Finds the Cache object matching the cacheName, and if found, deletes the Cache object and returns a Promise that resolves to true. ", 
                "name": "CacheStorage.delete()"
            }, 
            {
                "descr": "Returns a Promise that will resolve with an array containing strings corresponding to all of the named Cache objects tracked by the CacheStorage. ", 
                "name": "CacheStorage.keys()"
            }
        ], 
        "path": "dom/cachestorage", 
        "syntax": "CacheStorage interface represents the storage for Cache objects. It provides a master directory of all the named caches that a ServiceWorker", 
        "type": "Service Workers"
    }, 
    "CacheStorage.delete": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CacheStorage.delete", 
        "params": [
            {
                "descr": "The name of the cache you want to delete.", 
                "name": "cacheName"
            }
        ], 
        "path": "dom/cachestorage/delete", 
        "syntax": "delete()", 
        "type": "Service Workers"
    }, 
    "CacheStorage.has": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CacheStorage.has", 
        "params": [
            {
                "descr": "A DOMString representing the name of the Cache object you are looking for in the CacheStorage.", 
                "name": "cacheName"
            }
        ], 
        "path": "dom/cachestorage/has", 
        "syntax": "has()", 
        "type": "Service Workers"
    }, 
    "CacheStorage.keys": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CacheStorage.keys", 
        "params": [], 
        "path": "dom/cachestorage/keys", 
        "syntax": "keys()", 
        "type": "Service Workers"
    }, 
    "CacheStorage.match": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CacheStorage.match", 
        "params": [
            {
                "descr": "The Request you want to match.", 
                "name": "request"
            }, 
            {
                "descr": "An object whose properties control how matching is done in the match operation. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/cachestorage/match", 
        "syntax": "match()", 
        "type": "Service Workers"
    }, 
    "CacheStorage.open": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CacheStorage.open", 
        "params": [
            {
                "descr": "The name of the cache you want to open.", 
                "name": "cacheName"
            }
        ], 
        "path": "dom/cachestorage/open", 
        "syntax": "open()", 
        "type": "Service Workers"
    }, 
    "Canvas API: Applying styles and colors": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Applying styles and colors", 
        "params": [
            {
                "descr": "Sets the style used when filling shapes.", 
                "name": "fillStyle = color"
            }, 
            {
                "descr": "Sets the style for shapes' outlines.", 
                "name": "strokeStyle = color"
            }, 
            {
                "descr": "Applies the specified transparency value to all future shapes drawn on the canvas. ", 
                "name": "globalAlpha = transparencyValue"
            }, 
            {
                "descr": "Sets the width of lines drawn in the future.", 
                "name": "lineWidth = value"
            }, 
            {
                "descr": "Sets the appearance of the ends of lines.", 
                "name": "lineCap = type"
            }, 
            {
                "descr": "Sets the appearance of the \"corners\" where lines meet.", 
                "name": "lineJoin = type"
            }, 
            {
                "descr": "Establishes a limit on the miter when two lines join at a sharp angle, to let you control how thick the junction becomes.", 
                "name": "miterLimit = value"
            }, 
            {
                "descr": "Returns the current line dash pattern array containing an even number of non-negative numbers.", 
                "name": "getLineDash()"
            }, 
            {
                "descr": "Sets the current line dash pattern.", 
                "name": "setLineDash(segments)"
            }, 
            {
                "descr": "Specifies where to start a dash array on a line.", 
                "name": "lineDashOffset = value"
            }, 
            {
                "descr": "The ends of lines are squared off at the endpoints.", 
                "name": "butt"
            }, 
            {
                "descr": "The ends of lines are rounded.", 
                "name": "round"
            }, 
            {
                "descr": "The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.", 
                "name": "square"
            }, 
            {
                "descr": "Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. ", 
                "name": "round"
            }, 
            {
                "descr": "Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.", 
                "name": "bevel"
            }, 
            {
                "descr": "Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. ", 
                "name": "miter"
            }, 
            {
                "descr": "miterLength / lineWidth = 1 / sin ( min \u03b8 / 2 )", 
                "name": "max"
            }, 
            {
                "descr": "Creates a linear gradient object with a starting point of (x1, y1) and an end point of (x2, y2).", 
                "name": "createLinearGradient(x1, y1, x2, y2)"
            }, 
            {
                "descr": "Creates a radial gradient. The parameters represent two circles, one with its center at (x1, y1) and a radius of r1, and the other with its center at (x2, y2) with a radius of r2.", 
                "name": "createRadialGradient(x1, y1, r1, x2, y2, r2)"
            }, 
            {
                "descr": "Creates a new color stop on the gradient object. ", 
                "name": "gradient.addColorStop(position, color)"
            }, 
            {
                "descr": "Creates and returns a new canvas pattern object. ", 
                "name": "createPattern(image, type)"
            }, 
            {
                "descr": "Tiles the image in both vertical and horizontal directions.", 
                "name": "repeat"
            }, 
            {
                "descr": "Tiles the image horizontally but not vertically.", 
                "name": "repeat-x"
            }, 
            {
                "descr": "Tiles the image vertically but not horizontally.", 
                "name": "repeat-y"
            }, 
            {
                "descr": "Doesn't tile the image. It's used only once.", 
                "name": "no-repeat"
            }, 
            {
                "descr": "Indicates the horizontal distance the shadow should extend from the object. ", 
                "name": "shadowOffsetX = float"
            }, 
            {
                "descr": "Indicates the vertical distance the shadow should extend from the object. ", 
                "name": "shadowOffsetY = float"
            }, 
            {
                "descr": "Indicates the size of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. ", 
                "name": "shadowBlur = float"
            }, 
            {
                "descr": "A standard CSS color value indicating the color of the shadow effect; by default, it is fully-transparent black.", 
                "name": "shadowColor = color"
            }, 
            {
                "descr": "\": The non-zero winding rule, which is the default rule.", 
                "name": "\"nonzero"
            }, 
            {
                "descr": ": The even-odd winding rule.", 
                "name": "\"evenodd\""
            }
        ], 
        "path": "dom/canvas_api/tutorial/applying_styles_and_colors", 
        "syntax": "lineCap example The lineCap property determines how the end points of every line are drawn. There are three possible values for this property and those are: butt, round and square. By default this property is set to butt.   butt The ends of lines are squared off at the endpoints. round The ends of lines are rounded. square The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.  In this example, we'll draw three lines, each with a different value for the lineCap property. I also added two guides to see the exact differences between the three. Each of these lines starts and ends exactly on these guides. The line on the left uses the default butt option. You'll notice that it's drawn completely flush with the guides. The second is set to use the round option. This adds a semicircle to the end that has a radius half the width of the line. The line on the right uses the square option. This adds a box with an equal width and half the height of the line thickness. function draw() {  var ctx = document.getElementById('canvas').getContext('2d');\n or   var lineCap = ['butt','round','square'];  // Draw guides  ctx.strokeStyle = '#09f';  ctx.beginPath();\n or   ctx.moveTo(10,10);\n or   ctx.lineTo(140,10);\n or   ctx.moveTo(10,140);\n or   ctx.lineTo(140,140);\n or   ctx.stroke();\n or   // Draw lines  ctx.strokeStyle = 'black';  for (var i=0;i<lineCap.length;i++){    ctx.lineWidth = 15;    ctx.lineCap = lineCap[i];    ctx.beginPath();\n or     ctx.moveTo(25+i*50,10);\n or     ctx.lineTo(25+i*50,140);\n or     ctx.stroke();\n or   }});", 
        "type": "Canvas"
    }, 
    "Canvas API: Basic usage": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Basic usage", 
        "params": [], 
        "path": "dom/canvas_api/tutorial/basic_usage", 
        "syntax": "<canvas> element differs from an <img> tag in that, like for <video>, <audio>, or <picture>", 
        "type": "Canvas"
    }, 
    "Canvas API: Compositing": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Compositing", 
        "params": [
            {
                "descr": "This sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the twelve compositing operations to use.", 
                "name": "globalCompositeOperation = type"
            }, 
            {
                "descr": "Turns the path currently being built into the current clipping path.", 
                "name": "clip()"
            }
        ], 
        "path": "dom/canvas_api/tutorial/compositing", 
        "syntax": "clearRect()", 
        "type": "Canvas"
    }, 
    "Canvas API: Drawing DOM objects into a canvas": {
        "descr": "Before you start", 
        "name": "Canvas API: Drawing DOM objects into a canvas", 
        "params": [], 
        "path": "dom/canvas_api/drawing_dom_objects_into_a_canvas", 
        "syntax": "<foreignObject> element containing the HTML, then draw that SVG image into your canvas. Step-by-step The only really tricky thing here\u2014and that's probably an overstatement\u2014is creating the SVG for your image. All you need to do is create a string containing the XML for the SVG and construct a Blob", 
        "type": "Canvas"
    }, 
    "Canvas API: Drawing shapes": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Drawing shapes", 
        "params": [
            {
                "descr": "Draws a filled rectangle.", 
                "name": "fillRect(x, y, width, height)"
            }, 
            {
                "descr": "Draws a rectangular outline.", 
                "name": "strokeRect(x, y, width, height)"
            }, 
            {
                "descr": "Clears the specified rectangular area, making it fully transparent.", 
                "name": "clearRect(x, y, width, height)"
            }, 
            {
                "descr": "Creates a new path. Once created, future drawing commands are directed into the path and used to build the path up.", 
                "name": "beginPath()"
            }, 
            {
                "descr": "Methods to set different paths for objects.", 
                "name": "Path methods"
            }, 
            {
                "descr": "Closes the path so that future drawing commands are once again directed to the context.", 
                "name": "closePath()"
            }, 
            {
                "descr": "Draws the shape by stroking its outline.", 
                "name": "stroke()"
            }, 
            {
                "descr": "Draws a solid shape by filling the path's content area.", 
                "name": "fill()"
            }, 
            {
                "descr": "Moves the pen to the coordinates specified by x and y.", 
                "name": "moveTo(x, y)"
            }, 
            {
                "descr": "Draws a line from the current drawing position to the position specified by x and y.", 
                "name": "lineTo(x, y)"
            }, 
            {
                "descr": "Draws an arc which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction indicated by anticlockwise (defaulting to clockwise).", 
                "name": "arc(x, y, radius, startAngle, endAngle, anticlockwise)"
            }, 
            {
                "descr": "Draws an arc with the given control points and radius, connected to the previous point by a straight line.", 
                "name": "arcTo(x1, y1, x2, y2, radius)"
            }, 
            {
                "descr": "Draws a quadratic B\u00e9zier curve from the current pen position to the end point specified by x and y, using the control point specified by cp1x and cp1y.", 
                "name": "quadraticCurveTo(cp1x, cp1y, x, y)"
            }, 
            {
                "descr": "Draws a cubic B\u00e9zier curve from the current pen position to the end point specified by x and y, using the control points specified by (cp1x, cp1y) and (cp2x, cp2y).", 
                "name": "bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)"
            }, 
            {
                "descr": "Draws a rectangle whose top-left corner is specified by (x, y) with the specified width and height.", 
                "name": "rect(x, y, width, height)"
            }, 
            {
                "descr": "The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.", 
                "name": "Path2D()"
            }, 
            {
                "descr": "Adds a path to the current path with an optional transformation matrix.", 
                "name": "Path2D.addPath(path [, transform])"
            }
        ], 
        "path": "dom/canvas_api/tutorial/drawing_shapes", 
        "syntax": "<canvas> only supports one primitive shape: rectangles. All other shapes must be created by combining one or more paths, lists of points connected by lines. Luckily, we have an assortment of path drawing functions which make it possible to compose very complex shapes. First let's look at the rectangle. There are three functions that draw rectangles on the canvas:  fillRect(x, y, width, height)", 
        "type": "Canvas"
    }, 
    "Canvas API: Drawing text": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Drawing text", 
        "params": [
            {
                "descr": "Fills a given text at the given (x,y) position. ", 
                "name": "fillText(text, x, y [, maxWidth])"
            }, 
            {
                "descr": "Strokes a given text at the given (x,y) position. ", 
                "name": "strokeText(text, x, y [, maxWidth])"
            }, 
            {
                "descr": "The current text style being used when drawing text. ", 
                "name": "font = value"
            }, 
            {
                "descr": "Text alignment setting. Possible values: start, end, left, right or center. ", 
                "name": "textAlign = value"
            }, 
            {
                "descr": "Baseline alignment setting. Possible values: top, hanging, middle, alphabetic, ideographic, bottom. ", 
                "name": "textBaseline = value"
            }, 
            {
                "descr": "Directionality. Possible values: ltr, rtl, inherit. ", 
                "name": "direction = value"
            }, 
            {
                "descr": "Returns a TextMetrics object containing the width, in pixels, that the specified text will be when drawn in the current text style.", 
                "name": "measureText()"
            }
        ], 
        "path": "dom/canvas_api/tutorial/drawing_text", 
        "syntax": "font = value The current text style being used when drawing text. This string uses the same syntax as the CSS font property. The default font is 10px sans-serif. textAlign = value Text alignment setting. Possible values: start, end, left, right or center. The default value is start. textBaseline = value Baseline alignment setting. Possible values: top, hanging, middle, alphabetic, ideographic, bottom. The default value is alphabetic. direction = value Directionality. Possible values: ltr, rtl, inherit. The default value is inherit.  These properties might be familiar to you, if you have worked with CSS before. The following diagram from the WHATWG demonstrates the various baselines supported by the textBaseline property.<img src=\"http://www.whatwg.org/specs/web-apps/current-work/images/baselines.png\" alt=\"The top of the em square isroughly at the top of the glyphs in a font, the hanging baseline iswhere some glyphs like \u0906 are anchored, the middle is half-waybetween the top of the em square and the bottom of the em square,the alphabetic baseline is where characters like \u00c1, \u00ff,f, and \u03a9 are anchored, the ideographic baseline iswhere glyphs like \u79c1 and \u9054 are anchored, and the bottomof the em square is roughly at the bottom of the glyphs in afont. The top and bottom of the bounding box can be far from thesebaselines, due to glyphs extending far outside the em square.\"> A textBaseline example Edit the code below and see your changes update live in the canvas: ctx.font = \"48px serif\";ctx.textBaseline = \"hanging\";ctx.strokeText(\"Hello world\", 0, 100);", 
        "type": "Canvas"
    }, 
    "Canvas API: Pixel manipulation with canvas": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Pixel manipulation with canvas", 
        "params": [
            {
                "descr": "The width of the image in pixels.", 
                "name": "width"
            }, 
            {
                "descr": "The height of the image in pixels.", 
                "name": "height"
            }, 
            {
                "descr": "A Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).", 
                "name": "data"
            }, 
            {
                "descr": "Default setting. Creates a PNG image.", 
                "name": "canvas.toDataURL('image/png')"
            }, 
            {
                "descr": "Creates a JPG image. Optionally, you can provide a quality in the range from 0 to 1, with one being the best quality and with 0 almost not recognizable but small in file size.", 
                "name": "canvas.toDataURL('image/jpeg', quality)"
            }, 
            {
                "descr": "Creates a Blob object representing the image contained in the canvas.", 
                "name": "<a title=\"The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi. The third argument is used with image/jpeg images to specify the quality of the output.\" href=\"../../htmlcanvaselement/toblob\">canvas.toBlob(callback, type, encoderOptions)"
            }
        ], 
        "path": "dom/canvas_api/tutorial/pixel_manipulation_with_canvas", 
        "syntax": "Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).  The data", 
        "type": "Canvas"
    }, 
    "Canvas API: Transformations": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Transformations", 
        "params": [
            {
                "descr": "Saves the entire state of the canvas.", 
                "name": "save()"
            }, 
            {
                "descr": "Restores the most recently saved canvas state.", 
                "name": "restore()"
            }, 
            {
                "descr": "Moves the canvas and its origin on the grid. ", 
                "name": "translate(x, y)"
            }, 
            {
                "descr": "Rotates the canvas clockwise around the current origin by the angle number of radians.", 
                "name": "rotate(angle)"
            }, 
            {
                "descr": "Scales the canvas units by x horizontally and by y vertically. ", 
                "name": "scale(x, y)"
            }, 
            {
                "descr": "Multiplies the current transformation matrix with the matrix described by its arguments. ", 
                "name": "transform(a, b, c, d, e, f)"
            }, 
            {
                "descr": "Horizontal scaling.", 
                "name": "a (m11)"
            }, 
            {
                "descr": "Horizontal skewing.", 
                "name": "b (m12)"
            }, 
            {
                "descr": "Vertical skewing.", 
                "name": "c (m21)"
            }, 
            {
                "descr": "Vertical scaling.", 
                "name": "d (m22)"
            }, 
            {
                "descr": "Horizontal moving.", 
                "name": "e (dx)"
            }, 
            {
                "descr": "Vertical moving.", 
                "name": "f (dy)"
            }, 
            {
                "descr": "Resets the current transform to the identity matrix, and then invokes the transform() method with the same arguments. ", 
                "name": "setTransform(a, b, c, d, e, f)"
            }, 
            {
                "descr": "Resets the current transform to the identity matrix. ", 
                "name": "resetTransform()"
            }
        ], 
        "path": "dom/canvas_api/tutorial/transformations", 
        "syntax": "font, textAlign, textBaseline, direction, imageSmoothingEnabled", 
        "type": "Canvas"
    }, 
    "Canvas API: Using images": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "Canvas API: Using images", 
        "params": [
            {
                "descr": "These are images created using the Image() constructor, as well as any <img> element.", 
                "name": "HTMLImageElement"
            }, 
            {
                "descr": "Using an HTML <video> element as your image source grabs the current frame from the video and uses it as an image.", 
                "name": "HTMLVideoElement"
            }, 
            {
                "descr": "You can use another <canvas> element as your image source.", 
                "name": "HTMLCanvasElement"
            }, 
            {
                "descr": "Draws the CanvasImageSource specified by the image parameter at the coordinates (x, y).", 
                "name": "drawImage(image, x, y)"
            }, 
            {
                "descr": "This adds the width and height parameters, which indicate the size to which to scale the image when drawing it onto the canvas.", 
                "name": "drawImage(image, x, y, width, height)"
            }, 
            {
                "descr": "Given an image, this function takes the area of the source image specified by the rectangle whose top-left corner is (sx, sy) and whose width and height are sWidth and sHeight and draws it into the canvas, placing it on the canvas at (dx, dy) and scaling it to the size specified by dWidth and dHeight.", 
                "name": "drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)"
            }
        ], 
        "path": "dom/canvas_api/tutorial/using_images", 
        "syntax": "drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight)", 
        "type": "Canvas"
    }, 
    "CanvasCaptureMediaStream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CanvasCaptureMediaStream", 
        "params": [
            {
                "descr": "Returns the HTMLCanvasElement object whose surface is captured in real-time.", 
                "name": "CanvasCaptureMediaStream.canvas Read only"
            }, 
            {
                "descr": "Manually forces a frame to be captured and sent to the stream. ", 
                "name": "CanvasCaptureMediaStream.requestFrame()"
            }
        ], 
        "path": "dom/canvascapturemediastream", 
        "syntax": "CanvasCaptureMediaStream interface represents a MediaStream capturing in real-time the surface of an HTMLCanvasElement. Properties This interface inherits the properties of its parents, MediaStream and EventTarget.  CanvasCaptureMediaStream.canvas Read only  Returns the HTMLCanvasElement object whose surface is captured in real-time.  Methods This interface inherits the methods of its parent, MediaStream and EventTarget.  CanvasCaptureMediaStream.requestFrame()", 
        "type": "Canvas"
    }, 
    "CanvasCaptureMediaStream.canvas": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CanvasCaptureMediaStream.canvas", 
        "params": [], 
        "path": "dom/canvascapturemediastream/canvas", 
        "syntax": "CanvasCaptureMediaStream.canvas read-only property returns the HTMLCanvasElement associated with the stream. Syntax var elt = stream.canvas; Example // Find the canvas element to capturevar canvasElt = document.getElementsByTagName(\"canvas\")[0];// Get the streamvar stream = canvasElt.captureStream(25);\n or  // 25 FPS// Do things to the stream...// Obtain the canvas associated with the streamvar canvas = stream.canvas;);", 
        "type": "Canvas"
    }, 
    "CanvasCaptureMediaStream.requestFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CanvasCaptureMediaStream.requestFrame", 
        "params": [], 
        "path": "dom/canvascapturemediastream/requestframe", 
        "syntax": "CanvasCaptureMediaStream.requestFrame()", 
        "type": "Canvas"
    }, 
    "CanvasGradient.addColorStop": {
        "descr": "The CanvasGradient.addColorStop() method adds a new stop, defined by an offset and a color, to the gradient. If the offset is not between 0 and 1, an INDEX_SIZE_ERR is raised, if the color can't be parsed as a CSS <color>, a SYNTAX_ERR is raised.", 
        "name": "CanvasGradient.addColorStop", 
        "params": [
            {
                "descr": "A number between 0 and 1. An INDEX_SIZE_ERR is raised, if the number is not in that range.", 
                "name": "offset"
            }, 
            {
                "descr": "A CSS <color>. A SYNTAX_ERR is raised, if the value can not be parsed as a CSS <color> value.", 
                "name": "color"
            }
        ], 
        "path": "dom/canvasgradient/addcolorstop", 
        "syntax": "void gradient.addColorStop(offset, color);", 
        "type": "Canvas"
    }, 
    "CanvasPattern.setTransform": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "CanvasPattern.setTransform", 
        "params": [
            {
                "descr": "An SVGMatrix to use as the pattern's transformation matrix.", 
                "name": "matrix"
            }
        ], 
        "path": "dom/canvaspattern/settransform", 
        "syntax": "CanvasPattern.setTransform()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D": {
        "descr": "To get an object of this interface, call getContext() on a <canvas>\u00a0element, supplying \"2d\" as the argument:", 
        "name": "CanvasRenderingContext2D", 
        "params": [
            {
                "descr": "Sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content.", 
                "name": "CanvasRenderingContext2D.clearRect()"
            }, 
            {
                "descr": "Draws a filled rectangle at (x, y) position whose size is determined by width and height.", 
                "name": "CanvasRenderingContext2D.fillRect()"
            }, 
            {
                "descr": "Paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style.", 
                "name": "CanvasRenderingContext2D.strokeRect()"
            }, 
            {
                "descr": "Draws (fills) a given text at the given (x,y) position.", 
                "name": "CanvasRenderingContext2D.fillText()"
            }, 
            {
                "descr": "Draws (strokes) a given text at the given (x, y) position.", 
                "name": "CanvasRenderingContext2D.strokeText()"
            }, 
            {
                "descr": "Returns a TextMetrics object.", 
                "name": "CanvasRenderingContext2D.measureText()"
            }, 
            {
                "descr": "Width of lines. Default 1.0", 
                "name": "CanvasRenderingContext2D.lineWidth"
            }, 
            {
                "descr": "Type of endings on the end of lines. ", 
                "name": "CanvasRenderingContext2D.lineCap"
            }, 
            {
                "descr": "Defines the type of corners where two lines meet. ", 
                "name": "CanvasRenderingContext2D.lineJoin"
            }, 
            {
                "descr": "Miter limit ratio. Default 10.", 
                "name": "CanvasRenderingContext2D.miterLimit"
            }, 
            {
                "descr": "Returns the current line dash pattern array containing an even number of non-negative numbers.", 
                "name": "CanvasRenderingContext2D.getLineDash()"
            }, 
            {
                "descr": "Sets the current line dash pattern.", 
                "name": "CanvasRenderingContext2D.setLineDash()"
            }, 
            {
                "descr": "Specifies where to start a dash array on a line.", 
                "name": "CanvasRenderingContext2D.lineDashOffset"
            }, 
            {
                "descr": "Font setting. Default value 10px sans-serif.", 
                "name": "CanvasRenderingContext2D.font"
            }, 
            {
                "descr": "Text alignment setting. Possible values: start (default), end, left, right or center.", 
                "name": "CanvasRenderingContext2D.textAlign"
            }, 
            {
                "descr": "Baseline alignment setting. Possible values: top, hanging, middle, alphabetic (default), ideographic, bottom.", 
                "name": "CanvasRenderingContext2D.textBaseline"
            }, 
            {
                "descr": "Directionality. Possible values: ltr, rtl, inherit (default).", 
                "name": "CanvasRenderingContext2D.direction"
            }, 
            {
                "descr": "Color or style to use inside shapes. ", 
                "name": "CanvasRenderingContext2D.fillStyle"
            }, 
            {
                "descr": "Color or style to use for the lines around shapes. ", 
                "name": "CanvasRenderingContext2D.strokeStyle"
            }, 
            {
                "descr": "Creates a linear gradient along the line given by the coordinates represented by the parameters.", 
                "name": "CanvasRenderingContext2D.createLinearGradient()"
            }, 
            {
                "descr": "Creates a radial gradient given by the coordinates of the two circles represented by the parameters.", 
                "name": "CanvasRenderingContext2D.createRadialGradient()"
            }, 
            {
                "descr": "Creates a pattern using the specified image (a CanvasImageSource). ", 
                "name": "CanvasRenderingContext2D.createPattern()"
            }, 
            {
                "descr": "Specifies the blurring effect. Default 0", 
                "name": "CanvasRenderingContext2D.shadowBlur"
            }, 
            {
                "descr": "Color of the shadow. Default fully-transparent black.", 
                "name": "CanvasRenderingContext2D.shadowColor"
            }, 
            {
                "descr": "Horizontal distance the shadow will be offset. ", 
                "name": "CanvasRenderingContext2D.shadowOffsetX"
            }, 
            {
                "descr": "Vertical distance the shadow will be offset. ", 
                "name": "CanvasRenderingContext2D.shadowOffsetY"
            }, 
            {
                "descr": "Starts a new path by emptying the list of sub-paths. ", 
                "name": "CanvasRenderingContext2D.beginPath()"
            }, 
            {
                "descr": "Causes the point of the pen to move back to the start of the current sub-path. ", 
                "name": "CanvasRenderingContext2D.closePath()"
            }, 
            {
                "descr": "Moves the starting point of a new sub-path to the (x, y) coordinates.", 
                "name": "CanvasRenderingContext2D.moveTo()"
            }, 
            {
                "descr": "Connects the last point in the subpath to the x, y coordinates with a straight line.", 
                "name": "CanvasRenderingContext2D.lineTo()"
            }, 
            {
                "descr": "Adds a cubic B\u00e9zier curve to the path. ", 
                "name": "CanvasRenderingContext2D.bezierCurveTo()"
            }, 
            {
                "descr": "Adds a quadratic B\u00e9zier curve to the current path.", 
                "name": "CanvasRenderingContext2D.quadraticCurveTo()"
            }, 
            {
                "descr": "Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).", 
                "name": "CanvasRenderingContext2D.arc()"
            }, 
            {
                "descr": "Adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.", 
                "name": "CanvasRenderingContext2D.arcTo()"
            }, 
            {
                "descr": "Adds an ellipse to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).", 
                "name": "CanvasRenderingContext2D.ellipse()"
            }, 
            {
                "descr": "Creates a path for a rectangle atposition (x, y) with a size that is determined by width and height.", 
                "name": "CanvasRenderingContext2D.rect()"
            }, 
            {
                "descr": "Fills the subpaths with the current fill style.", 
                "name": "CanvasRenderingContext2D.fill()"
            }, 
            {
                "descr": "Strokes the subpaths with the current stroke style.", 
                "name": "CanvasRenderingContext2D.stroke()"
            }, 
            {
                "descr": "If a given element is focused, this method draws a focus ring around the current path.", 
                "name": "CanvasRenderingContext2D.drawFocusIfNeeded()"
            }, 
            {
                "descr": "Scrolls the current path or a given path into the view.", 
                "name": "CanvasRenderingContext2D.scrollPathIntoView()"
            }, 
            {
                "descr": "Creates a clipping path from the current sub-paths. ", 
                "name": "CanvasRenderingContext2D.clip()"
            }, 
            {
                "descr": "Reports whether or not the specified point is contained in the current path.", 
                "name": "CanvasRenderingContext2D.isPointInPath()"
            }, 
            {
                "descr": "Reports whether or not the specified point is inside the area contained by the stroking of a path.", 
                "name": "CanvasRenderingContext2D.isPointInStroke()"
            }, 
            {
                "descr": "Current transformation matrix (SVGMatrix object).", 
                "name": "CanvasRenderingContext2D.currentTransform"
            }, 
            {
                "descr": "Adds a rotation to the transformation matrix. ", 
                "name": "CanvasRenderingContext2D.rotate()"
            }, 
            {
                "descr": "Adds a scaling transformation to the canvas units by x horizontally and by y vertically.", 
                "name": "CanvasRenderingContext2D.scale()"
            }, 
            {
                "descr": "Adds a translation transformation by moving the canvas and its origin x horzontally and y vertically on the grid.", 
                "name": "CanvasRenderingContext2D.translate()"
            }, 
            {
                "descr": "Multiplies the current transformation matrix with the matrix described by its arguments.", 
                "name": "CanvasRenderingContext2D.transform()"
            }, 
            {
                "descr": "Resets the current transform to the identity matrix, and then invokes the transform() method with the same arguments.", 
                "name": "CanvasRenderingContext2D.setTransform()"
            }, 
            {
                "descr": "Resets the current transform by the identity matrix.", 
                "name": "CanvasRenderingContext2D.resetTransform()"
            }, 
            {
                "descr": "Alpha value that is applied to shapes and images before they are composited onto the canvas. ", 
                "name": "CanvasRenderingContext2D.globalAlpha"
            }, 
            {
                "descr": "With globalAlpha applied this sets how shapes and images are drawn onto the existing bitmap.", 
                "name": "CanvasRenderingContext2D.globalCompositeOperation"
            }, 
            {
                "descr": "Draws the specified image. This method is available in multiple formats, providing a great deal of flexibility in its use.", 
                "name": "CanvasRenderingContext2D.drawImage()"
            }, 
            {
                "descr": "Creates a new, blank ImageData object with the specified dimensions. ", 
                "name": "CanvasRenderingContext2D.createImageData()"
            }, 
            {
                "descr": "Returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height.", 
                "name": "CanvasRenderingContext2D.getImageData()"
            }, 
            {
                "descr": "Paints data from the given ImageData object onto the bitmap. ", 
                "name": "CanvasRenderingContext2D.putImageData()"
            }, 
            {
                "descr": "Image smoothing mode; if disabled, images will not be smoothed if scaled.", 
                "name": "CanvasRenderingContext2D.imageSmoothingEnabled"
            }, 
            {
                "descr": "Saves the current drawing style state using a stack so you can revert any change you make to it using restore().", 
                "name": "CanvasRenderingContext2D.save()"
            }, 
            {
                "descr": "Restores the drawing style state to the last element on the 'state stack' saved by save().", 
                "name": "CanvasRenderingContext2D.restore()"
            }, 
            {
                "descr": "A read-only back-reference to the HTMLCanvasElement. ", 
                "name": "CanvasRenderingContext2D.canvas"
            }, 
            {
                "descr": "Adds a hit region to the canvas.", 
                "name": "CanvasRenderingContext2D.addHitRegion()"
            }, 
            {
                "descr": "Removes the hit region with the specified id from the canvas.", 
                "name": "CanvasRenderingContext2D.removeHitRegion()"
            }, 
            {
                "descr": "Removes all hit regions from the canvas.", 
                "name": "CanvasRenderingContext2D.clearHitRegions()"
            }, 
            {
                "descr": "Removes all shadow settings like CanvasRenderingContext2D.shadowColor and CanvasRenderingContext2D.shadowBlur.", 
                "name": "CanvasRenderingContext2D.clearShadow()"
            }, 
            {
                "descr": "This is redundant with an equivalent overload of drawImage.", 
                "name": "CanvasRenderingContext2D.drawImageFromRect()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.globalAlpha instead.", 
                "name": "CanvasRenderingContext2D.setAlpha()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.globalCompositeOperation instead.", 
                "name": "CanvasRenderingContext2D.setCompositeOperation()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.lineWidth instead.", 
                "name": "CanvasRenderingContext2D.setLineWidth()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.lineJoin instead.", 
                "name": "CanvasRenderingContext2D.setLineJoin()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.lineCap instead.", 
                "name": "CanvasRenderingContext2D.setLineCap()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.miterLimit instead.", 
                "name": "CanvasRenderingContext2D.setMiterLimit()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.strokeStyle instead.", 
                "name": "CanvasRenderingContext2D.setStrokeColor()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.fillStyle instead.", 
                "name": "CanvasRenderingContext2D.setFillColor()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.shadowColor and CanvasRenderingContext2D.shadowBlur instead.", 
                "name": "CanvasRenderingContext2D.setShadow()"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.getLineDash() and CanvasRenderingContext2D.setLineDash() instead.", 
                "name": "CanvasRenderingContext2D.webkitLineDash"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.lineDashOffset instead.", 
                "name": "CanvasRenderingContext2D.webkitLineDashOffset"
            }, 
            {
                "descr": "Use CanvasRenderingContext2D.imageSmoothingEnabled instead.", 
                "name": "CanvasRenderingContext2D.webkitImageSmoothingEnabled"
            }, 
            {
                "descr": "Inspired by the same WebGLRenderingContext method it returns an Canvas2DContextAttributes object that contains the attributes \"storage\" to indicate which storage is used (\"persistent\" by default) and the attribute \"alpha\" (true by default) to indicate that transparency is used in the canvas.", 
                "name": "CanvasRenderingContext2D.getContextAttributes()"
            }, 
            {
                "descr": "Inspired by the same WebGLRenderingContext method it returns true if the Canvas context has been lost, or false if not.", 
                "name": "CanvasRenderingContext2D.isContextLost()"
            }, 
            {
                "descr": "The backing store size in relation to the canvas element. ", 
                "name": "CanvasRenderingContext2D.webkitBackingStorePixelRatio"
            }, 
            {
                "descr": "Intended for HD backing stores, but removed from canvas specifications.", 
                "name": "CanvasRenderingContext2D.webkitGetImageDataHD"
            }, 
            {
                "descr": "Intended for HD backing stores, but removed from canvas specifications.", 
                "name": "CanvasRenderingContext2D.webkitPutImageDataHD"
            }, 
            {
                "descr": "CSS and SVG filters as Canvas APIs. ", 
                "name": "CanvasRenderingContext2D.filter"
            }, 
            {
                "descr": "Sets or gets the current transformation matrix, see CanvasRenderingContext2D.currentTransform.", 
                "name": "CanvasRenderingContext2D.mozCurrentTransform"
            }, 
            {
                "descr": "Sets or gets the current inversed transformation matrix.", 
                "name": "CanvasRenderingContext2D.mozCurrentTransformInverse"
            }, 
            {
                "descr": "The fill rule to use. This must be one of evenodd or nonzero (default).", 
                "name": "CanvasRenderingContext2D.mozFillRule"
            }, 
            {
                "descr": "See CanvasRenderingContext2D.imageSmoothingEnabled.", 
                "name": "CanvasRenderingContext2D.mozImageSmoothingEnabled"
            }, 
            {
                "descr": "An array which specifies the lengths of alternating dashes and gaps . ", 
                "name": "CanvasRenderingContext2D.mozDash"
            }, 
            {
                "descr": "Specifies where to start a dash array on a line. ", 
                "name": "CanvasRenderingContext2D.mozDashOffset"
            }, 
            {
                "descr": "Introduced in in Gecko 1.9, deprecated in favor of the CanvasRenderingContext2D.font property.", 
                "name": "CanvasRenderingContext2D.mozTextStyle"
            }, 
            {
                "descr": "This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0. ", 
                "name": "CanvasRenderingContext2D.mozDrawText()"
            }, 
            {
                "descr": "This method was introduced in Gecko 1.9 and is unimplemented starting with Gecko 7.0. ", 
                "name": "CanvasRenderingContext2D.mozMeasureText()"
            }, 
            {
                "descr": "This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0.", 
                "name": "CanvasRenderingContext2D.mozPathText()"
            }, 
            {
                "descr": "This method was introduced in Gecko 1.9 and is removed starting with Gecko 7.0.", 
                "name": "CanvasRenderingContext2D.mozTextAlongPath()"
            }, 
            {
                "descr": "Renders a region of a XUL element into the canvas.", 
                "name": "CanvasRenderingContext2D.asyncDrawXULElement()"
            }, 
            {
                "descr": "Renders a region of a window into the canvas. ", 
                "name": "CanvasRenderingContext2D.drawWindow()"
            }, 
            {
                "descr": "This causes a context that is currently using a hardware-accelerated backend to fallback to a software one. ", 
                "name": "CanvasRenderingContext2D.demote()"
            }, 
            {
                "descr": "The fill rule to use. This must be one of evenodd or nonzero (default).", 
                "name": "CanvasRenderingContext2D.msFillRule"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d", 
        "syntax": "CanvasRenderingContext2D.font Font setting. Default value 10px sans-serif. CanvasRenderingContext2D.textAlign Text alignment setting. Possible values: start (default), end", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.addHitRegion": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.addHitRegion", 
        "params": [
            {
                "descr": "A Path2D object describing the area of the hit region. ", 
                "name": "path"
            }, 
            {
                "descr": "The fill rule to use (defaults to \"nonzero\").", 
                "name": "fillRule"
            }, 
            {
                "descr": "The ID for this hit region to reference it for later use in events, for example.", 
                "name": "id"
            }, 
            {
                "descr": "The ID of the parent region for cursor fallback and navigation by accessibility tools.", 
                "name": "parentID"
            }, 
            {
                "descr": "The cursor to use when the mouse is over this region (defaults to \"inherit\"). ", 
                "name": "cursor"
            }, 
            {
                "descr": "An element (descendant of the canvas) to which events are to be routed. ", 
                "name": "control"
            }, 
            {
                "descr": "A text label for accessibility tools to use as a description of the region, if there is no control. ", 
                "name": "label"
            }, 
            {
                "descr": "An ARIA role for accessibility tools to determine how to represent this region, if there is no control. ", 
                "name": "role"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/addhitregion", 
        "syntax": "CanvasRenderingContext2D.addHitRegion()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.arc": {
        "descr": "The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).", 
        "name": "CanvasRenderingContext2D.arc", 
        "params": [
            {
                "descr": "The x coordinate of the arc's center.", 
                "name": "x"
            }, 
            {
                "descr": "The y coordinate of the arc's center.", 
                "name": "y"
            }, 
            {
                "descr": "The arc's radius.", 
                "name": "radius"
            }, 
            {
                "descr": "The angle at which the arc starts, measured clockwise from the positive x axis and expressed in radians.", 
                "name": "startAngle"
            }, 
            {
                "descr": "The angle at which the arc ends, measured clockwise from the positive x axis and expressed in radians.", 
                "name": "endAngle"
            }, 
            {
                "descr": "An optional Boolean which, if true, causes the arc to be drawn counter-clockwise between the two angles. ", 
                "name": "anticlockwise Optional"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/arc", 
        "syntax": "void ctx.arc(x, y, radius, startAngle, endAngle, anticlockwise);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.arcTo": {
        "descr": "The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.", 
        "name": "CanvasRenderingContext2D.arcTo", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the first control point.", 
                "name": "x1"
            }, 
            {
                "descr": "The y axis of the coordinate for the first control point.", 
                "name": "y1"
            }, 
            {
                "descr": "The x axis of the coordinate for the second control point.", 
                "name": "x2"
            }, 
            {
                "descr": "The y axis of the coordinate for the second control point.", 
                "name": "y2"
            }, 
            {
                "descr": "The arc's radius.", 
                "name": "radius"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/arcto", 
        "syntax": "void ctx.arcTo(x1, y1, x2, y2, radius);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.beginPath": {
        "descr": "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.", 
        "name": "CanvasRenderingContext2D.beginPath", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/beginpath", 
        "syntax": "void ctx.beginPath();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.bezierCurveTo": {
        "descr": "The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic B\u00e9zier curve to the path. It requires three points. The first two points are control points and the third one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the B\u00e9zier curve.", 
        "name": "CanvasRenderingContext2D.bezierCurveTo", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the first control point.", 
                "name": "cp1x"
            }, 
            {
                "descr": "The y axis of the coordinate for first control point.", 
                "name": "cp1y"
            }, 
            {
                "descr": "The x axis of the coordinate for the second control point.", 
                "name": "cp2x"
            }, 
            {
                "descr": "The y axis of the coordinate for the second control point.", 
                "name": "cp2y"
            }, 
            {
                "descr": "The x axis of the coordinate for the end point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the end point.", 
                "name": "y"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/beziercurveto", 
        "syntax": "void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.canvas": {
        "descr": "The CanvasRenderingContext2D.canvas property is a read-only reference to the HTMLCanvasElement object that is associated with the context. It might be null if there is no association with an <canvas> element.", 
        "name": "CanvasRenderingContext2D.canvas", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/canvas", 
        "syntax": "ctx.canvas; Examples Given this <canvas>", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.clearHitRegions": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.clearHitRegions", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/clearhitregions", 
        "syntax": "CanvasRenderingContext2D.clearHitRegions()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.clearRect": {
        "descr": "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API sets all pixels in the rectangle defined by starting point (x, y) and size (width, height) to transparent black, erasing any previously drawn content.", 
        "name": "CanvasRenderingContext2D.clearRect", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the rectangle starting point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the rectangle starting point.", 
                "name": "y"
            }, 
            {
                "descr": "The rectangle's width.", 
                "name": "width"
            }, 
            {
                "descr": "The rectangle's height.", 
                "name": "height"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/clearrect", 
        "syntax": "void ctx.clearRect(x, y, width, height);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.clip": {
        "descr": "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the path currently being built into the current clipping path.", 
        "name": "CanvasRenderingContext2D.clip", 
        "params": [
            {
                "descr": "The algorithm by which to determine if a point is inside a path or outside a path. ", 
                "name": "fillRule"
            }, 
            {
                "descr": "A Path2D path to clip.", 
                "name": "path"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/clip", 
        "syntax": "void ctx.clip();\n or void ctx.clip(fillRule);\n or void ctx.clip(path, fillRule);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.closePath": {
        "descr": "The CanvasRenderingContext2D.closePath() method of the Canvas 2D API causes the point of the pen to move back to the start of the current sub-path. It tries to add a straight line (but does not actually draw it) from the current point to the start. If the shape has already been closed or has only one point, this function does nothing.", 
        "name": "CanvasRenderingContext2D.closePath", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/closepath", 
        "syntax": "void ctx.closePath();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.createImageData": {
        "descr": "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.", 
        "name": "CanvasRenderingContext2D.createImageData", 
        "params": [
            {
                "descr": "The width to give the new ImageData object.", 
                "name": "width"
            }, 
            {
                "descr": "The height to give the new ImageData object.", 
                "name": "height"
            }, 
            {
                "descr": "An existing ImageData object from which to copy the width and height. ", 
                "name": "imagedata"
            }, 
            {
                "descr": "Thrown if either of the width or height arguments are zero.", 
                "name": "IndexSizeError"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/createimagedata", 
        "syntax": "ImageData ctx.createImageData(width, height);\n or ImageData ctx.createImageData(imagedata);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.createLinearGradient": {
        "descr": "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line given by the coordinates represented by the parameters. This method returns a linear CanvasGradient.", 
        "name": "CanvasRenderingContext2D.createLinearGradient", 
        "params": [
            {
                "descr": "The x axis of the coordinate of the start point.", 
                "name": "x0"
            }, 
            {
                "descr": "The y axis of the coordinate of the start point.", 
                "name": "y0"
            }, 
            {
                "descr": "The x axis of the coordinate of the end point.", 
                "name": "x1"
            }, 
            {
                "descr": "The y axis of the coordinate of the end point.", 
                "name": "y1"
            }, 
            {
                "descr": "A linear CanvasGradient initialized with the specified line.", 
                "name": "CanvasGradient"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/createlineargradient", 
        "syntax": "CanvasGradient ctx.createLinearGradient(x0, y0, x1, y1);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.createPattern": {
        "descr": "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image (a CanvasImageSource). It repeats the source in the directions specified by the repetition argument. This method returns a CanvasPattern.", 
        "name": "CanvasRenderingContext2D.createPattern", 
        "params": [
            {
                "descr": "A CanvasImageSource to be used as image to repeat. ", 
                "name": "image"
            }, 
            {
                "descr": "A DOMString indicating how to repeat the image. ", 
                "name": "repetition"
            }, 
            {
                "descr": "An opaque object describing a pattern.", 
                "name": "CanvasPattern"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/createpattern", 
        "syntax": "CanvasPattern ctx.createPattern(image, repetition);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.createRadialGradient": {
        "descr": "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient given by the coordinates of the two circles represented by the parameters. This method returns a CanvasGradient.", 
        "name": "CanvasRenderingContext2D.createRadialGradient", 
        "params": [
            {
                "descr": "The x axis of the coordinate of the start circle.", 
                "name": "x0"
            }, 
            {
                "descr": "The y axis of the coordinate of the start circle.", 
                "name": "y0"
            }, 
            {
                "descr": "The radius of the start circle.", 
                "name": "r0"
            }, 
            {
                "descr": "The x axis of the coordinate of the end circle.", 
                "name": "x1"
            }, 
            {
                "descr": "The y axis of the coordinate of the end circle.", 
                "name": "y1"
            }, 
            {
                "descr": "The radius of the end circle.", 
                "name": "r1"
            }, 
            {
                "descr": "A radial CanvasGradient initialized with the two specified circles.", 
                "name": "CanvasGradient"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/createradialgradient", 
        "syntax": "CanvasGradient ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.currentTransform": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.currentTransform", 
        "params": [
            {
                "descr": "An SVGMatrix object to use as the current transformation matrix.", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/currenttransform", 
        "syntax": "CanvasRenderingContext2D.currentTransform property of the Canvas 2D API returns or sets an SVGMatrix object for the current transformation matrix. Syntax ctx.currentTransform [= value];  value An SVGMatrix object to use as the current transformation matrix.  Examples Using the currentTransform method This is just a simple code snippet that uses the currentTransform property to set a transformation matrix. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or var matrix = ctx.currentTransform;matrix.a = 1;matrix.b = 1;matrix.c = 0;matrix.d = 1;matrix.e = 0;matrix.f = 0;ctx.currentTransform = matrix;ctx.fillRect(0,0,100,100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.direction": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.direction", 
        "params": [
            {
                "descr": "The text direction is left-to-right.", 
                "name": "ltr"
            }, 
            {
                "descr": "The text direction is right-to-left.", 
                "name": "rtl"
            }, 
            {
                "descr": "The text direction is inherited from the <canvas> element or the Document as appropriate.", 
                "name": "inherit"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/direction", 
        "syntax": "CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text direction used when drawing text. Syntax ctx.direction = \"ltr\" || \"rtl\" || \"inherit\"; Options Possible values:  ltr The text direction is left-to-right. rtl The text direction is right-to-left. inherit The text direction is inherited from the <canvas>", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.drawFocusIfNeeded": {
        "descr": "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current path or given path, If a given element is focused.", 
        "name": "CanvasRenderingContext2D.drawFocusIfNeeded", 
        "params": [
            {
                "descr": "The element to check whether it is focused or not.", 
                "name": "element"
            }, 
            {
                "descr": "A Path2D path to use.", 
                "name": "path"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/drawfocusifneeded", 
        "syntax": "void ctx.drawFocusIfNeeded(element);\n or void ctx.drawFocusIfNeeded(path, element);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.drawImage": {
        "descr": "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas.", 
        "name": "CanvasRenderingContext2D.drawImage", 
        "params": [
            {
                "descr": "An element to draw into the context. ", 
                "name": "image"
            }, 
            {
                "descr": "The X coordinate in the destination canvas at which to place the top-left corner of the source image.", 
                "name": "dx"
            }, 
            {
                "descr": "The Y coordinate in the destination canvas at which to place the top-left corner of the source image.", 
                "name": "dy"
            }, 
            {
                "descr": "The width to draw the image in the destination canvas. ", 
                "name": "dWidth"
            }, 
            {
                "descr": "The height to draw the image in the destination canvas. ", 
                "name": "dHeight"
            }, 
            {
                "descr": "The X coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.", 
                "name": "sx"
            }, 
            {
                "descr": "The Y coordinate of the top left corner of the sub-rectangle of the source image to draw into the destination context.", 
                "name": "sy"
            }, 
            {
                "descr": "The width of the sub-rectangle of the source image to draw into the destination context. ", 
                "name": "sWidth"
            }, 
            {
                "descr": "The height of the sub-rectangle of the source image to draw into the destination context.", 
                "name": "sHeight"
            }, 
            {
                "descr": "If the canvas or source rectangle width or height is zero.", 
                "name": "INDEX_SIZE_ERR"
            }, 
            {
                "descr": "The image has no image data.", 
                "name": "INVALID_STATE_ERR"
            }, 
            {
                "descr": "The specified source element isn't supported.", 
                "name": "TYPE_MISMATCH_ERR"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/drawimage", 
        "syntax": "void ctx.drawImage(image, dx, dy);\n or void ctx.drawImage(image, dx, dy, dWidth, dHeight);\n or void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.ellipse": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.ellipse", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the ellipse's center.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the ellipse's center.", 
                "name": "y"
            }, 
            {
                "descr": "The ellipse's major-axis radius.", 
                "name": "radiusX"
            }, 
            {
                "descr": "The ellipse's minor-axis radius.", 
                "name": "radiusY"
            }, 
            {
                "descr": "The rotation for this ellipse, expressed in radians.", 
                "name": "rotation"
            }, 
            {
                "descr": "The starting point, measured from the x axis, from which it will be drawn, expressed in radians.", 
                "name": "startAngle"
            }, 
            {
                "descr": "The end ellipse's angle to which it will be drawn, expressed in radians.", 
                "name": "endAngle"
            }, 
            {
                "descr": "An optional Boolean which, if true, draws the ellipse anticlockwise (counter-clockwise), otherwise in a clockwise direction.", 
                "name": "anticlockwise Optional"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/ellipse", 
        "syntax": "CanvasRenderingContext2D.ellipse()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.fill": {
        "descr": "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fill style using the non-zero or even-odd winding rule.", 
        "name": "CanvasRenderingContext2D.fill", 
        "params": [
            {
                "descr": "The algorithm by which to determine if a point is inside a path or outside a path. ", 
                "name": "fillRule"
            }, 
            {
                "descr": "A Path2D path to fill.", 
                "name": "path"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/fill", 
        "syntax": "void ctx.fill();\n or void ctx.fill(fillRule);\n or void ctx.fill(path, fillRule);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.fillRect": {
        "descr": "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a filled rectangle at (x, y) position whose size is determined by width and height and whose style is determined by the fillStyle attribute.", 
        "name": "CanvasRenderingContext2D.fillRect", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the rectangle starting point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the rectangle starting point.", 
                "name": "y"
            }, 
            {
                "descr": "The rectangle's width.", 
                "name": "width"
            }, 
            {
                "descr": "The rectangle's height.", 
                "name": "height"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/fillrect", 
        "syntax": "void ctx.fillRect(x, y, width, height);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.fillStyle": {
        "descr": "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color or style to use inside shapes. The default is #000 (black).", 
        "name": "CanvasRenderingContext2D.fillStyle", 
        "params": [
            {
                "descr": "A DOMString parsed as CSS <color> value.", 
                "name": "color"
            }, 
            {
                "descr": "A CanvasGradient object (a linear or radial gradient).", 
                "name": "gradient"
            }, 
            {
                "descr": "A CanvasPattern object (a repetitive image).", 
                "name": "pattern"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/fillstyle", 
        "syntax": "ctx.fillStyle = color;ctx.fillStyle = gradient;ctx.fillStyle = pattern; Options  color A DOMString parsed as CSS <color> value. gradient A CanvasGradient", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.fillText": {
        "descr": "The CanvasRenderingContext2D.fillText() method of the Canvas 2D API fills a given text at the given (x, y) position. If the optional fourth parameter for a maximum width is provided, the text will be scaled to fit that width.", 
        "name": "CanvasRenderingContext2D.fillText", 
        "params": [
            {
                "descr": "The text to render using the current font, textAlign, textBaseline, and direction values.", 
                "name": "text"
            }, 
            {
                "descr": "The x axis of the coordinate for the text starting point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the text starting point.", 
                "name": "y"
            }, 
            {
                "descr": "The maximum width to draw. If specified, and the string is computed to be wider than this width, the font is adjusted to use a more horizontally condensed font (if one is available or if a reasonably readable one can be synthesized by scaling the current font horizontally) or a smaller font.", 
                "name": "maxWidth Optional"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/filltext", 
        "syntax": "void ctx.fillText(text, x, y [, maxWidth]);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.filter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.filter", 
        "params": [
            {
                "descr": "The url() function takes the location of an XML file that specifies an SVG filter, and may include an anchor to a specific filter element.", 
                "name": "url(<url>)"
            }, 
            {
                "descr": "CSS length. Applies a Gaussian blur to the drawing.", 
                "name": "blur(<length>)"
            }, 
            {
                "descr": "Percentage. Applies a linear multiplier to the drawing, making it appear more or less bright.", 
                "name": "brightness(<percentage>)"
            }, 
            {
                "descr": "Percentage. Adjusts the contrast of the drawing. ", 
                "name": "contrast(<percentage>)"
            }, 
            {
                "descr": "Applies a drop shadow effect to the drawing. ", 
                "name": "drop-shadow(<offset-x> <offset-y> <blur-radius> <color>)"
            }, 
            {
                "descr": "Percentage. Converts the drawing to a gray-scale picture. ", 
                "name": "grayscale(<percentage>)"
            }, 
            {
                "descr": "Degree. Applies a hue rotation on the drawing. ", 
                "name": "hue-rotate(<degree>)"
            }, 
            {
                "descr": "Percentage. Inverts the drawing. ", 
                "name": "invert(<percentage>)"
            }, 
            {
                "descr": "Percentage. Applies transparency to the drawing. ", 
                "name": "opacity(<percentage>)"
            }, 
            {
                "descr": "Saturates the drawing. A value of 0% means completely un-saturated. ", 
                "name": "saturate(<percentage>)"
            }, 
            {
                "descr": "Converts the drawing to sepia. A value of 100% means completely sepia. ", 
                "name": "sepia(<percentage>)"
            }, 
            {
                "descr": "No filter is applied. Initial value.", 
                "name": "none"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/filter", 
        "syntax": "CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects like blurring or gray-scaling. It is similar to the CSS filter property and accepts the same functions. Syntax ctx.filter = \"<filter-function1> [<filter-function2] [<filter-functionN]\";ctx.filter = \"none\"; Filter functions The filter property accepts one or more of the following filter functions in a DOMString.  url(<url>)", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.font": {
        "descr": "The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style being used when drawing text. This string uses the same syntax as the CSS font specifier. The default font is 10px sans-serif.", 
        "name": "CanvasRenderingContext2D.font", 
        "params": [
            {
                "descr": "A DOMString parsed as CSS font value. ", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/font", 
        "syntax": "ctx.font = value; Options  value A DOMString parsed as CSS font value. The default font is 10px sans-serif.  Examples Using the font property This is just a simple code snippet using the font property to set a different font size and font family. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.font = \"48px serif\";ctx.strokeText(\"Hello world\", 50, 100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.getImageData": {
        "descr": "The CanvasRenderingContext2D.getImageData() method of the Canvas 2D API returns an ImageData object representing the underlying pixel data for the area of the canvas denoted by the rectangle which starts at (sx, sy) and has an sw width and sh height.", 
        "name": "CanvasRenderingContext2D.getImageData", 
        "params": [
            {
                "descr": "The x coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.", 
                "name": "sx"
            }, 
            {
                "descr": "The y coordinate of the upper left corner of the rectangle from which the ImageData will be extracted.", 
                "name": "sy"
            }, 
            {
                "descr": "The width of the rectangle from which the ImageData will be extracted.", 
                "name": "sw"
            }, 
            {
                "descr": "The height of the rectangle from which the ImageData will be extracted.", 
                "name": "sh"
            }, 
            {
                "descr": "Thrown if either of the width or height arguments are zero.", 
                "name": "IndexSizeError"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/getimagedata", 
        "syntax": "ImageData ctx.getImageData(sx, sy, sw, sh);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.getLineDash": {
        "descr": "The CanvasRenderingContext2D.getLineDash() method of the Canvas 2D API gets the current line dash pattern.", 
        "name": "CanvasRenderingContext2D.getLineDash", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/getlinedash", 
        "syntax": "ctx.getLineDash();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.globalAlpha": {
        "descr": "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha value that is applied to shapes and images before they are drawn onto the canvas. The value is in the range from 0.0 (fully transparent) to 1.0 (fully opaque).", 
        "name": "CanvasRenderingContext2D.globalAlpha", 
        "params": [
            {
                "descr": "A number between 0.0 (fully transparent) and 1.0 (fully opaque). ", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/globalalpha", 
        "syntax": "ctx.globalAlpha = value; Options  value A number between 0.0 (fully transparent) and 1.0 (fully opaque). The default value is 1.0 Values outside the range, including Infinity", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.globalCompositeOperation": {
        "descr": "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes, where type is a string identifying which of the compositing or blending mode operations to use.", 
        "name": "CanvasRenderingContext2D.globalCompositeOperation", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/globalcompositeoperation", 
        "syntax": "ctx.globalCompositeOperation = type; Types  Examples Using the globalCompositeOperation property This is just a simple code snippet using the globalCompositeOperation property to draw two rectangles that exclude themselves where they overlap. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.globalCompositeOperation = \"xor\";ctx.fillStyle = \"blue\";ctx.fillRect(10, 10, 100, 100);\n or ctx.fillStyle = \"red\";ctx.fillRect(50, 50, 100, 100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.imageSmoothingEnabled": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.imageSmoothingEnabled", 
        "params": [
            {
                "descr": "A Boolean indicating whether to smooth images or not.", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/imagesmoothingenabled", 
        "syntax": "CanvasRenderingContext2D.imageSmoothingEnabled property of the Canvas 2D API can be set to change if images are smoothed (true, default) or not (false", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.isPointInPath": {
        "descr": "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path.", 
        "name": "CanvasRenderingContext2D.isPointInPath", 
        "params": [
            {
                "descr": "The X coordinate of the point to check.", 
                "name": "x"
            }, 
            {
                "descr": "The Y coordinate of the point to check.", 
                "name": "y"
            }, 
            {
                "descr": "The algorithm by which to determine if a point is inside a path or outside a path. ", 
                "name": "fillRule"
            }, 
            {
                "descr": "A Path2D path to use.", 
                "name": "path"
            }, 
            {
                "descr": "A Boolean, which is true if the specified point is contained in the current or specified path, otherwise false.", 
                "name": "Boolean"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/ispointinpath", 
        "syntax": "boolean ctx.isPointInPath(x, y);\n or boolean ctx.isPointInPath(x, y, fillRule);\n or boolean ctx.isPointInPath(path, x, y);\n or boolean ctx.isPointInPath(path, x, y, fillRule);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.isPointInStroke": {
        "descr": "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path.", 
        "name": "CanvasRenderingContext2D.isPointInStroke", 
        "params": [
            {
                "descr": "The X coordinate of the point to check.", 
                "name": "x"
            }, 
            {
                "descr": "The Y coordinate of the point to check.", 
                "name": "y"
            }, 
            {
                "descr": "A Path2D path to use.", 
                "name": "path"
            }, 
            {
                "descr": "A Boolean, which is true if the point is inside the area contained by the stroking of a path, otherwise false.", 
                "name": "Boolean"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/ispointinstroke", 
        "syntax": "boolean ctx.isPointInStroke(x, y);\n or boolean ctx.isPointInStroke(path, x, y);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.lineCap": {
        "descr": "The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines how the end points of every line are drawn. There are three possible values for this property and those are: butt, round and square. By default this property is set to butt.", 
        "name": "CanvasRenderingContext2D.lineCap", 
        "params": [
            {
                "descr": "The ends of lines are squared off at the endpoints.", 
                "name": "butt"
            }, 
            {
                "descr": "The ends of lines are rounded.", 
                "name": "round"
            }, 
            {
                "descr": "The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.", 
                "name": "square"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/linecap", 
        "syntax": "ctx.lineCap = \"butt\";ctx.lineCap = \"round\";ctx.lineCap = \"square\"; Options  butt The ends of lines are squared off at the endpoints. round The ends of lines are rounded. square The ends of lines are squared off by adding a box with an equal width and half the height of the line's thickness.  Examples Using the lineCap property This is just a simple code snippet using the lineCap property to draw lines with a rounded end. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.beginPath();\n or ctx.moveTo(0,0);\n or ctx.lineWidth = 15;ctx.lineCap = \"round\";ctx.lineTo(100, 100);\n or ctx.stroke();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.lineDashOffset": {
        "descr": "The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash pattern offset or \"phase\" to achieve a \"marching ants\" effect, for example.", 
        "name": "CanvasRenderingContext2D.lineDashOffset", 
        "params": [
            {
                "descr": "A float specifying the amount of the offset. ", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/linedashoffset", 
        "syntax": "ctx.lineDashOffset = value;  value A float specifying the amount of the offset. Initially 0.0.  Examples Using the lineDashOffset property This is just a simple code snippet which uses the lineDashOffset property to draw a dashed line. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.setLineDash([4, 16]);\n or ctx.lineDashOffset = 2;ctx.beginPath();\n or ctx.moveTo(0,100);\n or ctx.lineTo(400, 100);\n or ctx.stroke();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.lineJoin": {
        "descr": "The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines how two connecting segments (of lines, arcs or curves) with non-zero lengths in a shape are joined together (degenerate segments with zero lengths, whose specified endpoints and control points are exactly at the same position, are skipped).", 
        "name": "CanvasRenderingContext2D.lineJoin", 
        "params": [
            {
                "descr": "Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. ", 
                "name": "round"
            }, 
            {
                "descr": "Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment.", 
                "name": "bevel"
            }, 
            {
                "descr": "Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. ", 
                "name": "miter"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/linejoin", 
        "syntax": "ctx.lineJoin = \"bevel\";ctx.lineJoin = \"round\";ctx.lineJoin = \"miter\"; Options There are three possible values for this property: round, bevel and miter. By default this property is set to miter. Note that the lineJoin setting has no effect if the two connected segments have the same direction, because no joining area will be added in this case.   round Rounds off the corners of a shape by filling an additional sector of disc centered at the common endpoint of connected segments. The radius for these rounded corners is equal to the line width. bevel Fills an additional triangular area between the common endpoint of connected segments, and the separate outside rectangular corners of each segment. miter Connected segments are joined by extending their outside edges to connect at a single point, with the effect of filling an additional lozenge-shaped area. This setting is effected by the miterLimit", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.lineTo": {
        "descr": "The CanvasRenderingContext2D.lineTo() method of the Canvas 2D API connects the last point in the sub-path to the x, y coordinates with a straight line (but does not actually draw it).", 
        "name": "CanvasRenderingContext2D.lineTo", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the end of the line.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the end of the line.", 
                "name": "y"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/lineto", 
        "syntax": "void ctx.lineTo(x, y);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.lineWidth": {
        "descr": "The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines in space units. When getting, it returns the current value (1.0 by default). When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.", 
        "name": "CanvasRenderingContext2D.lineWidth", 
        "params": [
            {
                "descr": "A number specifying the line width in space units. ", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/linewidth", 
        "syntax": "ctx.lineWidth = value; Options  value A number specifying the line width in space units. Zero, negative, Infinity and NaN values are ignored.  Examples Using the lineWidth property This is just a simple code snippet using the lineWidth property to draw lines with a rounded end. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.beginPath();\n or ctx.moveTo(0,0);\n or ctx.lineWidth = 15;ctx.lineTo(100, 100);\n or ctx.stroke();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.measureText": {
        "descr": "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width for example).", 
        "name": "CanvasRenderingContext2D.measureText", 
        "params": [
            {
                "descr": "The text to measure.", 
                "name": "text"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/measuretext", 
        "syntax": "ctx.measureText(text);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.miterLimit": {
        "descr": "The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio in space units. When getting, it returns the current value (10.0 by default). When setting, zero, negative, Infinity and NaN values are ignored; otherwise the current value is set to the new value.", 
        "name": "CanvasRenderingContext2D.miterLimit", 
        "params": [
            {
                "descr": "A number specifying the miter limit ratio in space units. ", 
                "name": "value"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/miterlimit", 
        "syntax": "ctx.miterLimit = value; Options  value A number specifying the miter limit ratio in space units. Zero, negative, Infinity and NaN values are ignored.  Examples Using the miterLimit property See the chapter Applying styles and color in the Canvas Tutorial for more information.  ScreenshotLive sample Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'CanvasRenderingContext2D.miterLimit' in that specification. Living Standard      Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes) (Yes) (Yes) (Yes)         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) (Yes) (Yes) (Yes)     WebKit/Blink-specific notes", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.moveTo": {
        "descr": "The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API moves the starting point of a new sub-path to the (x, y) coordinates.", 
        "name": "CanvasRenderingContext2D.moveTo", 
        "params": [
            {
                "descr": "The x axis of the point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the point.", 
                "name": "y"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/moveto", 
        "syntax": "void ctx.moveTo(x, y);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.putImageData": {
        "descr": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the bitmap. If a dirty rectangle is provided, only the pixels from that rectangle are painted.", 
        "name": "CanvasRenderingContext2D.putImageData", 
        "params": [
            {
                "descr": "Horizontal position (x-coordinate) of the upper-left corner of the image data rectangle in the target canvas context.", 
                "name": "dx"
            }, 
            {
                "descr": "Vertical position (y-coordinate) of the upper-left corner of the image data rectangle in the target canvas context.", 
                "name": "dy"
            }, 
            {
                "descr": "Horizontal position (x-coordinate) where to place the image on the canvas. ", 
                "name": "dirtyX Optional"
            }, 
            {
                "descr": "Vertical position (y-coordinate) where to place the image on the canvas. ", 
                "name": "dirtyY Optional"
            }, 
            {
                "descr": "Width of the rectangle to be painted, in the origin image data. ", 
                "name": "dirtyWidth Optional"
            }, 
            {
                "descr": "Height of the rectangle to be painted, in the origin image data. ", 
                "name": "dirtyHeight Optional"
            }, 
            {
                "descr": "Thrown if either of the arguments are infinite.", 
                "name": "NotSupportedError"
            }, 
            {
                "descr": "Thrown if the ImageData object's data has been detached.", 
                "name": "InvalidStateError"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/putimagedata", 
        "syntax": "void ctx.putImageData(imagedata, dx, dy);\n or void ctx.putImageData(imagedata, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.quadraticCurveTo": {
        "descr": "The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic B\u00e9zier curve to the path. It requires two points. The first point is a control point and the second one is the end point. The starting point is the last point in the current path, which can be changed using moveTo() before creating the quadratic B\u00e9zier curve.", 
        "name": "CanvasRenderingContext2D.quadraticCurveTo", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the control point.", 
                "name": "cpx"
            }, 
            {
                "descr": "The y axis of the coordinate for the control point.", 
                "name": "cpy"
            }, 
            {
                "descr": "The x axis of the coordinate for the end point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the end point.", 
                "name": "y"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/quadraticcurveto", 
        "syntax": "void ctx.quadraticCurveTo(cpx, cpy, x, y);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.rect": {
        "descr": "The CanvasRenderingContext2D.rect() method of the Canvas 2D API creates a path for a rectangle atposition (x, y) with a size that is determined by width and height. Those four points are connected by straight lines and the sub-path is marked as closed, so that you can fill or stroke this rectangle.", 
        "name": "CanvasRenderingContext2D.rect", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the rectangle starting point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the rectangle starting point.", 
                "name": "y"
            }, 
            {
                "descr": "The rectangle's width.", 
                "name": "width"
            }, 
            {
                "descr": "The rectangle's height.", 
                "name": "height"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/rect", 
        "syntax": "void ctx.rect(x, y, width, height);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.removeHitRegion": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.removeHitRegion", 
        "params": [
            {
                "descr": "A DOMString representing the id of the region that is to be removed.", 
                "name": "id"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/removehitregion", 
        "syntax": "CanvasRenderingContext2D.removeHitRegion()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.resetTransform": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.resetTransform", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/resettransform", 
        "syntax": "CanvasRenderingContext2D.resetTransform()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.restore": {
        "descr": "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.", 
        "name": "CanvasRenderingContext2D.restore", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/restore", 
        "syntax": "void ctx.restore();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.rotate": {
        "descr": "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix. The angle argument represents a clockwise rotation angle and is expressed in radians.", 
        "name": "CanvasRenderingContext2D.rotate", 
        "params": [
            {
                "descr": "The angle to rotate clockwise in radians. ", 
                "name": "angle"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/rotate", 
        "syntax": "void ctx.rotate(angle);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.save": {
        "descr": "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack.", 
        "name": "CanvasRenderingContext2D.save", 
        "params": [], 
        "path": "dom/canvasrenderingcontext2d/save", 
        "syntax": "void ctx.save();", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.scale": {
        "descr": "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units by x horizontally and by y vertically.", 
        "name": "CanvasRenderingContext2D.scale", 
        "params": [
            {
                "descr": "Scaling factor in the horizontal direction.", 
                "name": "x"
            }, 
            {
                "descr": "Scaling factor in the vertical direction.", 
                "name": "y"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/scale", 
        "syntax": "void ctx.scale(x, y);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.scrollPathIntoView": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CanvasRenderingContext2D.scrollPathIntoView", 
        "params": [
            {
                "descr": "A Path2D path to use.", 
                "name": "path"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/scrollpathintoview", 
        "syntax": "CanvasRenderingContext2D.scrollPathIntoView()", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.setLineDash": {
        "descr": "The CanvasRenderingContext2D.setLineDash() method of the Canvas 2D API sets the line dash pattern.", 
        "name": "CanvasRenderingContext2D.setLineDash", 
        "params": [
            {
                "descr": "An Array. A list of numbers that specifies distances to alternately draw a line and a gap (in coordinate space units). ", 
                "name": "segments"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/setlinedash", 
        "syntax": "void ctx.setLineDash(segments);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.setTransform": {
        "descr": "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix and then invokes a transformation described by the arguments of this method.", 
        "name": "CanvasRenderingContext2D.setTransform", 
        "params": [
            {
                "descr": "Horizontal scaling.", 
                "name": "a (m11)"
            }, 
            {
                "descr": "Horizontal skewing.", 
                "name": "b (m12)"
            }, 
            {
                "descr": "Vertical skewing.", 
                "name": "c (m21)"
            }, 
            {
                "descr": "Vertical scaling.", 
                "name": "d (m22)"
            }, 
            {
                "descr": "Horizontal moving.", 
                "name": "e (dx)"
            }, 
            {
                "descr": "Vertical moving.", 
                "name": "f (dy)"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/settransform", 
        "syntax": "void ctx.setTransform(a, b, c, d, e, f);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.shadowBlur": {
        "descr": "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the level of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. The default value is 0.", 
        "name": "CanvasRenderingContext2D.shadowBlur", 
        "params": [
            {
                "descr": "A float specifying the level of the blurring effect. ", 
                "name": "level"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/shadowblur", 
        "syntax": "ctx.shadowBlur = level;  level A float specifying the level of the blurring effect. The default value is 0. Negative, Infinity or NaN values are ignored.  Examples Using the shadowBlur property This is just a simple code snippet using the shadowblur property to set a blurred shadow. Note that shadows are only drawn, if the shadowColor property is set to a non-transparent value, too. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.shadowColor = \"black\";ctx.shadowBlur = 10;ctx.fillStyle = \"white\";ctx.fillRect(10, 10, 100, 100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.shadowColor": {
        "descr": "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of the shadow.", 
        "name": "CanvasRenderingContext2D.shadowColor", 
        "params": [
            {
                "descr": "A DOMString parsed as CSS <color> value. ", 
                "name": "color"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/shadowcolor", 
        "syntax": "ctx.shadowColor = color;  color A DOMString parsed as CSS <color> value. The default value is fully-transparent black.  Examples Using the shadowColor property This is just a simple code snippet using the shadowColor property to set a shadow color. Note that shadows are only drawn, if the shadowColor property is set (non-transparent) and either the shadowBlur", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.shadowOffsetX": {
        "descr": "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that the shadow will be offset in horizontal distance.", 
        "name": "CanvasRenderingContext2D.shadowOffsetX", 
        "params": [
            {
                "descr": "A float specifying the distance that the shadow will be offset in horizontal distance. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/shadowoffsetx", 
        "syntax": "ctx.shadowOffsetX = offset;  offset A float specifying the distance that the shadow will be offset in horizontal distance. The default value is 0. Infinity or NaN values are ignored.  Examples Using the shadowOffsetX property This is just a simple code snippet using the shadowOffsetX property to set a shadow with a horizontal offset. Note that shadows are only drawn, if the shadowColor property is set to a non-transparent value, too. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.shadowColor = \"black\";ctx.shadowOffsetX = 10;ctx.shadowBlur = 10;ctx.fillStyle = \"green\";ctx.fillRect(10, 10, 100, 100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.shadowOffsetY": {
        "descr": "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that the shadow will be offset in vertical distance.", 
        "name": "CanvasRenderingContext2D.shadowOffsetY", 
        "params": [
            {
                "descr": "A float specifying the distance that the shadow will be offset in vertical distance. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/shadowoffsety", 
        "syntax": "ctx.shadowOffsetY = offset;  offset A float specifying the distance that the shadow will be offset in vertical distance. The default value is 0. Infinity or NaN values are ignored.  Examples Using the shadowOffsetY property This is just a simple code snippet using the shadowOffsetY property to set a shadow with a vertical offset. Note that shadows are only drawn, if the shadowColor property is set to a non-transparent value, too. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.shadowColor = \"black\";ctx.shadowOffsetY = 10;ctx.shadowBlur = 10;ctx.fillStyle = \"green\";ctx.fillRect(10, 10, 100, 100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.stroke": {
        "descr": "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes the current or given path with the current stroke style using the non-zero winding rule.", 
        "name": "CanvasRenderingContext2D.stroke", 
        "params": [
            {
                "descr": "A Path2D path to stroke.", 
                "name": "path"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/stroke", 
        "syntax": "void ctx.stroke();\n or void ctx.stroke(path);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.strokeRect": {
        "descr": "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API paints a rectangle which has a starting point at (x, y) and has a w width and an h height onto the canvas, using the current stroke style.", 
        "name": "CanvasRenderingContext2D.strokeRect", 
        "params": [
            {
                "descr": "The x axis of the coordinate for the rectangle starting point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the rectangle starting point.", 
                "name": "y"
            }, 
            {
                "descr": "The rectangle's width.", 
                "name": "width"
            }, 
            {
                "descr": "The rectangle's height.", 
                "name": "height"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/strokerect", 
        "syntax": "void ctx.strokeRect(x, y, width, height);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.strokeStyle": {
        "descr": "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color or style to use for the lines around shapes. The default is #000 (black).", 
        "name": "CanvasRenderingContext2D.strokeStyle", 
        "params": [
            {
                "descr": "A DOMString parsed as CSS <color> value.", 
                "name": "color"
            }, 
            {
                "descr": "A CanvasGradient object (a linear or radial gradient).", 
                "name": "gradient"
            }, 
            {
                "descr": "A CanvasPattern object (a repetitive image).", 
                "name": "pattern"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/strokestyle", 
        "syntax": "ctx.strokeStyle = color;ctx.strokeStyle = gradient;ctx.strokeStyle = pattern; Options  color A DOMString parsed as CSS <color> value. gradient A CanvasGradient", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.strokeText": {
        "descr": "The CanvasRenderingContext2D.strokeText() method of the Canvas 2D API strokes a given text at the given (x, y) position. If the optional fourth parameter for a maximum width is provided, the text will be scaled to fit that width.", 
        "name": "CanvasRenderingContext2D.strokeText", 
        "params": [
            {
                "descr": "The text to render using the current font, textAlign, textBaseline, and direction values.", 
                "name": "text"
            }, 
            {
                "descr": "The x axis of the coordinate for the text starting point.", 
                "name": "x"
            }, 
            {
                "descr": "The y axis of the coordinate for the text starting point.", 
                "name": "y"
            }, 
            {
                "descr": "The maximum width to draw. If specified, and the string is computed to be wider than this width, the font is adjusted to use a more horizontally condensed font (if one is available or if a reasonably readable one can be synthesized by scaling the current font horizontally) or a smaller font.", 
                "name": "maxWidth Optional"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/stroketext", 
        "syntax": "void ctx.strokeText(text, x, y [, maxWidth]);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.textAlign": {
        "descr": "The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment being used when drawing text. Beware that the alignment is base on the x value of the CanvasRenderingContext2D.fillText method. So if textAlign=\"center\", then the text would be drawn at x-50%*width.", 
        "name": "CanvasRenderingContext2D.textAlign", 
        "params": [
            {
                "descr": "The text is left-aligned.", 
                "name": "left"
            }, 
            {
                "descr": "The text is right-aligned.", 
                "name": "right"
            }, 
            {
                "descr": "The text is centered.", 
                "name": "center"
            }, 
            {
                "descr": "The text is aligned at the normal start of the line (left-aligned for left-to-right locales, right-aligned for right-to-left locales).", 
                "name": "start"
            }, 
            {
                "descr": "The text is aligned at the normal end of the line (right-aligned for left-to-right locales, left-aligned for right-to-left locales).", 
                "name": "end"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/textalign", 
        "syntax": "ctx.textAlign = \"left\" || \"right\" || \"center\" || \"start\" || \"end\"; Options Possible values:  left The text is left-aligned. right The text is right-aligned. center The text is centered. start The text is aligned at the normal start of the line (left-aligned for left-to-right locales, right-aligned for right-to-left locales). end The text is aligned at the normal end of the line (right-aligned for left-to-right locales, left-aligned for right-to-left locales).  The default value is start", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.textBaseline": {
        "descr": "The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline being used when drawing text.", 
        "name": "CanvasRenderingContext2D.textBaseline", 
        "params": [
            {
                "descr": "The text baseline is the top of the em square.", 
                "name": "top"
            }, 
            {
                "descr": "The text baseline is the hanging baseline.", 
                "name": "hanging"
            }, 
            {
                "descr": "The text baseline is the middle of the em square.", 
                "name": "middle"
            }, 
            {
                "descr": "The text baseline is the normal alphabetic baseline.", 
                "name": "alphabetic"
            }, 
            {
                "descr": "The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline.", 
                "name": "ideographic"
            }, 
            {
                "descr": "The text baseline is the bottom of the bounding box. ", 
                "name": "bottom"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/textbaseline", 
        "syntax": "ctx.textBaseline = \"top\" || \"hanging\" || \"middle\" || \"alphabetic\" || \"ideographic\" || \"bottom\"; Options Possible values:   top  The text baseline is the top of the em square.  hanging  The text baseline is the hanging baseline.  middle  The text baseline is the middle of the em square.  alphabetic  The text baseline is the normal alphabetic baseline.  ideographic  The text baseline is the ideographic baseline; this is the bottom of the body of the characters, if the main body of characters protrudes beneath the alphabetic baseline.  bottom  The text baseline is the bottom of the bounding box. This differs from the ideographic baseline in that the ideographic baseline doesn't consider descenders.  The default value is alphabetic. Examples Using the textBaseline property This is just a simple code snippet using the textBaseline property to set a different text baseline setting. HTML <canvas id=\"canvas\"></canvas> JavaScript var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.font = \"48px serif\";ctx.textBaseline = \"hanging\";ctx.strokeText(\"Hello world\", 0, 100);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.transform": {
        "descr": "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. You are able to scale, rotate, move and skew the context.", 
        "name": "CanvasRenderingContext2D.transform", 
        "params": [
            {
                "descr": "Horizontal scaling.", 
                "name": "a (m11)"
            }, 
            {
                "descr": "Horizontal skewing.", 
                "name": "b (m12)"
            }, 
            {
                "descr": "Vertical skewing.", 
                "name": "c (m21)"
            }, 
            {
                "descr": "Vertical scaling.", 
                "name": "d (m22)"
            }, 
            {
                "descr": "Horizontal moving.", 
                "name": "e (dx)"
            }, 
            {
                "descr": "Vertical moving.", 
                "name": "f (dy)"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/transform", 
        "syntax": "void ctx.transform(a, b, c, d, e, f);", 
        "type": "Canvas"
    }, 
    "CanvasRenderingContext2D.translate": {
        "descr": "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation by moving the canvas and its origin x horizontally and y vertically on the grid.", 
        "name": "CanvasRenderingContext2D.translate", 
        "params": [
            {
                "descr": "Distance to move in the horizontal direction.", 
                "name": "x"
            }, 
            {
                "descr": "Distance to move in the vertical direction.", 
                "name": "y"
            }
        ], 
        "path": "dom/canvasrenderingcontext2d/translate", 
        "syntax": "void ctx.translate(x, y);", 
        "type": "Canvas"
    }, 
    "CaretPosition": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CaretPosition", 
        "params": [
            {
                "descr": "Returns a Node containing the found node at the caret's position.", 
                "name": "CaretPosition.offsetNode Read only"
            }, 
            {
                "descr": "Returns a long representing the character offset in the caret position node.", 
                "name": "CaretPosition.offset Read only"
            }
        ], 
        "path": "dom/caretposition", 
        "syntax": "CaretPosition interface represents the caret postion, an indicator for the text insertion point. You can get a CaretPosition using the document.caretPositionFromPoint method. Properties This interface doesn't inherit any property.  CaretPosition.offsetNode Read only  Returns a Node", 
        "type": "CSS"
    }, 
    "Channel Messaging API": {
        "descr": "A message channel is created using the MessageChannel() constructor. Once created, the two ports of the channel can be accessed through the MessageChannel.port1 and MessageChannel.port2 properties (which both return MessagePort objects.) The app that created the channel uses port1, and the app at the other end of the port uses port2 \u2014 you send a message to port2, and transfer the port over to the other browsing context using window.postMessage along with two arguments (the message to send, and the object to transfer ownership of, in this case the port itself.)", 
        "name": "Channel Messaging API", 
        "params": [
            {
                "descr": "Creates a new message channel to send messages across.", 
                "name": "MessageChannel"
            }, 
            {
                "descr": "Controls the ports on the message channel, allowing sending of messages from one port and listening out for them arriving at the other.", 
                "name": "MessagePort"
            }, 
            {
                "descr": "An array of MessagePorts; an experimental solution to allow broadcasting of a message to multiple ports simultaneously.", 
                "name": "PortCollection"
            }
        ], 
        "path": "dom/channel_messaging_api", 
        "syntax": "Recommendation W3C version of the spec.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 4 41 (41) 10.0 10.6 5   PortCollection Not supported Not supported Not supported Not supported Not supported   Available in workers (Yes) 41 (41) (Yes) (Yes) (Yes)         Feature Android Chrome for Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 4.4 4 41.0 (41) Not supported 10.0 11.5 5.1   PortCollection Not supported Not supported Not supported Not supported Not supported Not supported Not supported   Available in workers (Yes) (Yes) 41.0 (41) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "Web Messaging"
    }, 
    "Channel Messaging API: Using channel messaging": {
        "descr": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, or two documents via a SharedWorker) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end. In this article we'll explore the basics of using this technology.", 
        "name": "Channel Messaging API: Using channel messaging", 
        "params": [], 
        "path": "dom/channel_messaging_api/using_channel_messaging", 
        "syntax": "<iframe>. The embedded IFrame then sends a confirmation message back. Second, have a look at our multimessaging demo (run this live), which shows a slightly more complex setup that can send multiple messages between main page and IFrame.", 
        "type": "Web Messaging"
    }, 
    "Child selector (\"parent > child\"": {
        "descr": "The child combinator (E > F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.", 
        "name": "Child selector (\"parent > child\"", 
        "params": [], 
        "path": "jquery/child-selector", 
        "syntax": "child selector  Description: Selects all direct child elements specified by \"child\" of elements specified by \"parent\".   version added: 1.0jQuery( \"parent > child\" ) parent: Any valid selector.", 
        "type": "Selectors"
    }, 
    "ChildNode.after": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ChildNode.after", 
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.", 
                "name": "nodes"
            }
        ], 
        "path": "dom/childnode/after", 
        "syntax": "ChildNode.after()", 
        "type": "Node"
    }, 
    "ChildNode.before": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ChildNode.before", 
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.", 
                "name": "nodes"
            }
        ], 
        "path": "dom/childnode/before", 
        "syntax": "ChildNode.before method inserts a set of Node", 
        "type": "Node"
    }, 
    "ChildNode.remove": {
        "descr": "The ChildNode.remove() method removes the object from the tree it belongs to.", 
        "name": "ChildNode.remove", 
        "params": [], 
        "path": "dom/childnode/remove", 
        "syntax": "elementNodeReference.remove();", 
        "type": "Node"
    }, 
    "ChildNode.replaceWith": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ChildNode.replaceWith", 
        "params": [
            {
                "descr": "A set of Node or DOMString objects to replace.", 
                "name": "nodes"
            }
        ], 
        "path": "dom/childnode/replacewith", 
        "syntax": "ChildNode.replaceWith()", 
        "type": "Node"
    }, 
    "Class selector (\".class\"": {
        "descr": "For class selectors, jQuery uses JavaScript's native getElementsByClassName() function if the browser supports it.", 
        "name": "Class selector (\".class\"", 
        "params": [], 
        "path": "jquery/class-selector", 
        "syntax": "class selector  Description: Selects all elements with the given class.    version added: 1.0jQuery( \".class\" ) class: A class to search for. An element can have multiple classes; only one of them must match.", 
        "type": "Selectors"
    }, 
    "Classes": {
        "descr": "JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar over JavaScript's existing prototype-based inheritance. The class syntax is not introducing a new object-oriented inheritance model to JavaScript. JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.", 
        "name": "Classes", 
        "params": [], 
        "path": "javascript/classes", 
        "syntax": "class keyword with the name of the class (\"Polygon\" here).", 
        "type": "Classes"
    }, 
    "Client": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Client", 
        "params": [
            {
                "descr": "Allows a service worker to send a message to a ServiceWorkerClient.", 
                "name": "Client.postMessage()"
            }, 
            {
                "descr": "Indicates the type of browsing context of the current client. ", 
                "name": "Client.frameType Read only"
            }, 
            {
                "descr": "Returns the universally unique identifier of the Client object.", 
                "name": "Client.id Read only"
            }, 
            {
                "descr": "The URL of the current service worker client.", 
                "name": "Client.url Read only"
            }
        ], 
        "path": "dom/client", 
        "syntax": "Client interface of the ServiceWorker API represents the scope of a service worker client. A service worker client is either a document in a browser context or a SharedWorker, which is controlled by an active worker. A client object acts as a snapshot representation of its associated service worker client in the scope of a service worker. Methods  Client.postMessage()", 
        "type": "Service Workers"
    }, 
    "Client.frameType": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Client.frameType", 
        "params": [], 
        "path": "dom/client/frametype", 
        "syntax": "frameType read-only property of the Client interface indicates the type of browsing context of the current Client. This value can be one of auxiliary, top-level, nested, or none. Syntax var myFrameType = Client.frameType; Example TBD Specifications    Specification Status Comment   Service WorkersThe definition of 'frameType' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 43.0 44.0 (44.0)[1] No support ? No support         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 44.0 (44.0) ? No support ? No support 43.0     [1] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)", 
        "type": "Service Workers"
    }, 
    "Client.id": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Client.id", 
        "params": [], 
        "path": "dom/client/id", 
        "syntax": "id read-only property of the Client interface returns the universally unique identifier of the Client object. Syntax var clientId = Client.id; Example TBD Specifications    Specification Status Comment   Service WorkersThe definition of 'id' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 45.0[1] 44.0 (44.0)[2] No support ? No support         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support No support 44.0 (44.0) ? No support ? No support 45.0 [1]      [1] Behind a flag in Chrome 40 through 44. [2] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)       Edit this page on MDN", 
        "type": "Service Workers"
    }, 
    "Client.postMessage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Client.postMessage", 
        "params": [
            {
                "descr": "The message to send to the service worker.", 
                "name": "message"
            }, 
            {
                "descr": "A transferable object such as, for example, a reference to a port.", 
                "name": "transfer Optional"
            }
        ], 
        "path": "dom/client/postmessage", 
        "syntax": "Client.postMessage()", 
        "type": "Service Workers"
    }, 
    "Client.url": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Client.url", 
        "params": [], 
        "path": "dom/client/url", 
        "syntax": "url read-only property of the Client interface returns the URL of the current service worker client. Syntax var clientUrl = Client.url; Value A USVString. Example self.addEventListener('notificationclick', function(event) {  console.log('On notification click: ', event.notification.tag);\n or   event.notification.close();\n or   // This looks to see if the current is already open and  // focuses if it is  event.waitUntil(clients.matchAll({    type: \"window\"  }).then(function(clientList) {    for (var i = 0; i < clientList.length; i++) {      var client = clientList[i];      if (client.url == '/' && 'focus' in client)        return client.focus();\n or     }    if (clients.openWindow)      return clients.openWindow('/');\n or   }));\n or });", 
        "type": "Service Workers"
    }, 
    "Clients": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Clients", 
        "params": [
            {
                "descr": "Gets a service worker client matching a given id and returns it in a Promise.", 
                "name": "Clients.get()"
            }, 
            {
                "descr": "Gets a list of service worker clients and returns them in a Promise. ", 
                "name": "Clients.matchAll()"
            }, 
            {
                "descr": "Opens a service worker Client in a new browser window.", 
                "name": "Clients.openWindow()"
            }, 
            {
                "descr": "Allows an active Service Worker to set itself as the active worker for a client page when the worker and the page are in the same scope.", 
                "name": "Clients.claim()"
            }
        ], 
        "path": "dom/clients", 
        "syntax": "Clients interface of the Service Workers API represents a container for a list of Client objects. Methods  Clients.get()", 
        "type": "Service Workers"
    }, 
    "Clients.claim": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Clients.claim", 
        "params": [], 
        "path": "dom/clients/claim", 
        "syntax": "claim()", 
        "type": "Service Workers"
    }, 
    "Clients.get": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Clients.get", 
        "params": [
            {
                "descr": "A DOMString representing the id of the client you want to get.", 
                "name": "id"
            }
        ], 
        "path": "dom/clients/get", 
        "syntax": "get()", 
        "type": "Service Workers"
    }, 
    "Clients.matchAll": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Clients.matchAll", 
        "params": [
            {
                "descr": "An options object allowing you to set options for the matching operation. ", 
                "name": "options\u00a0Optional"
            }
        ], 
        "path": "dom/clients/matchall", 
        "syntax": "matchAll()", 
        "type": "Service Workers"
    }, 
    "Clients.openWindow": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Clients.openWindow", 
        "params": [
            {
                "descr": "A USVString representing the URL of the client you want to open in the window. ", 
                "name": "url"
            }
        ], 
        "path": "dom/clients/openwindow", 
        "syntax": "openWindow()", 
        "type": "Service Workers"
    }, 
    "ClipboardEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ClipboardEvent", 
        "params": [
            {
                "descr": "Is a DataTransfer object containing the data affected by the user-initiated cut, copy, or paste operation, along with its MIME type.", 
                "name": "ClipboardEvent.clipboardData Read only"
            }, 
            {
                "descr": "Creates a ClipboardEvent event with the given parameters.", 
                "name": "ClipboardEvent()"
            }
        ], 
        "path": "dom/clipboardevent", 
        "syntax": "ClipboardEvent interface represents events providing information related to modification of the clipboard, that is cut, copy, and paste events. Properties Also inherits properties from its parent Event.  ClipboardEvent.clipboardData Read only  Is a DataTransfer object containing the data affected by the user-initiated cut, copy, or paste operation, along with its MIME type.  Constructor  ClipboardEvent()", 
        "type": "Events"
    }, 
    "ClipboardEvent.clipboardData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ClipboardEvent.clipboardData", 
        "params": [], 
        "path": "dom/clipboardevent/clipboarddata", 
        "syntax": "ClipboardEvent.clipboardData property holds a DataTransfer object, which can be used:  to specify what data should be put into the clipboard from the cut and copy event handlers, typically with a setData(format, data)", 
        "type": "Events"
    }, 
    "ClipboardEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ClipboardEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the ClipboardEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a DOMString containing the MIME-type of the data contained in the data argument.", 
                "name": "dataType"
            }, 
            {
                "descr": "Is a DOMString containing the data concerned by the clipboard event.", 
                "name": "data"
            }
        ], 
        "path": "dom/clipboardevent/clipboardevent", 
        "syntax": "ClipboardEvent()", 
        "type": "Events"
    }, 
    "CloseEvent.constructor": {
        "descr": "The CloseEvent() constructor creates a new CloseEvent.", 
        "name": "CloseEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a CloseEventInit dictionary, having the following fields:  \"wasClean\", optional and defaulting to false, of type long, indicates if the connection has been closed cleanly or not. ", 
                "name": "closeEventInitOptional"
            }
        ], 
        "path": "dom/closeevent/closeevent", 
        "syntax": "event = new CloseEvent(typeArg, closeEventInit);", 
        "type": "Events"
    }, 
    "Comma Operator": {
        "descr": "The comma operator evaluates each of its operands (from left to right) and returns the value of the last operand.", 
        "name": "Comma Operator", 
        "params": [
            {
                "descr": "Any expressions.", 
                "name": "expr1, expr2, expr3..."
            }
        ], 
        "path": "javascript/operators/comma_operator", 
        "syntax": "expr1, expr2, expr3... Parameters  expr1, expr2, expr3... Any expressions.  Description You can use the comma operator when you want to include multiple expressions in a location that requires a single expression. The most common usage of this operator is to supply multiple parameters in a for loop. Examples If a is a 2-dimensional array with 10 elements on each side, the following code uses the comma operator to increment two variables at once. The following code prints the values of the diagonal elements in the array: for (var i = 0, j = 9; i <= 9; i++, j--)  console.log(\"a[\" + i + \"][\" + j + \"] = \" + a[i][j]);", 
        "type": "Operators"
    }, 
    "Comment.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Comment.constructor", 
        "params": [], 
        "path": "dom/comment/comment", 
        "syntax": "Comment()", 
        "type": "Miscellaneous"
    }, 
    "Comparison Operators": {
        "descr": "JavaScript has both strict and type\u2013converting comparisons. A strict comparison (e.g., ===) is only true if the operands are of the same type and the contents match. The more commonly-used abstract comparison (e.g. ==) converts the operands to the same type before making the comparison. For relational abstract comparisons (e.g., <=), the operands are first converted to primitives, then to the same type, before comparison.", 
        "name": "Comparison Operators", 
        "params": [], 
        "path": "javascript/operators/comparison_operators", 
        "syntax": "x == y Examples   1   ==  1        // true \"1\"  ==  1        // true  1   == '1'       // true  0   == false     // true  0   == null      // false  0   == undefined // falsenull  == undefined // true Inequality (!=) The inequality operator returns true if the operands are not equal. If the two operands are not of the same type, JavaScript attempts to convert the operands to an appropriate type for the comparison. If both operands are objects, then JavaScript compares internal references which are not equal when operands refer to different objects in memory.", 
        "type": "Operators"
    }, 
    "Conditional Operator": {
        "descr": "The conditional (ternary) operator is the only JavaScript operator that takes three operands. This operator is frequently used as a shortcut for the if statement.", 
        "name": "Conditional Operator", 
        "params": [
            {
                "descr": "An expression that evaluates to true or false.", 
                "name": "condition"
            }, 
            {
                "descr": "Expressions with values of any type.", 
                "name": "expr1, expr2"
            }
        ], 
        "path": "javascript/operators/conditional_operator", 
        "syntax": "condition ? expr1 : expr2  Parameters  condition An expression that evaluates to true or false.   expr1, expr2 Expressions with values of any type.  Description If condition is true, the operator returns the value of expr1; otherwise, it returns the value of expr2. For example, to display a different message based on the value of the isMember variable, you could use this statement: \"The fee is \" + (isMember ? \"$2.00\" : \"$10.00\")", 
        "type": "Operators"
    }, 
    "ConvolverNode": {
        "descr": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.", 
        "name": "ConvolverNode", 
        "params": [
            {
                "descr": "A mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect.", 
                "name": "ConvolverNode.buffer"
            }, 
            {
                "descr": "A boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.", 
                "name": "ConvolverNode.normalize"
            }
        ], 
        "path": "dom/convolvernode", 
        "syntax": "1   Number of outputs 1   Channel count mode \"clamped-max\"   Channel count 2   Channel interpretation \"speakers\"    Properties Inherits properties from its parent, AudioNode", 
        "type": "Web Audio"
    }, 
    "ConvolverNode.buffer": {
        "descr": "The buffer property of the ConvolverNode interface represents a mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect.", 
        "name": "ConvolverNode.buffer", 
        "params": [], 
        "path": "dom/convolvernode/buffer", 
        "syntax": "var audioCtx = new AudioContext();\n or var convolver = audioCtx.createConvolver();\n or convolver.buffer = myAudioBuffer;);", 
        "type": "Web Audio"
    }, 
    "ConvolverNode.normalize": {
        "descr": "The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.", 
        "name": "ConvolverNode.normalize", 
        "params": [], 
        "path": "dom/convolvernode/normalize", 
        "syntax": "var audioCtx = new AudioContext();\n or var convolver = audioCtx.createConvolver();\n or convolver.normalize = false;);", 
        "type": "Web Audio"
    }, 
    "Coordinates.accuracy": {
        "descr": "The Coordinates.accuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the Coordinates.latitude and Coordinates.longitude properties expressed in meters.", 
        "name": "Coordinates.accuracy", 
        "params": [], 
        "path": "dom/coordinates/accuracy", 
        "syntax": "acc = coordinates.accuracy Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.accuracy' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.altitude": {
        "descr": "The Coordinates.altitude read-only property is a double representing the altitude of the position in meters, relative to sea level. This value is null if the implementation cannot provide this data.", 
        "name": "Coordinates.altitude", 
        "params": [], 
        "path": "dom/coordinates/altitude", 
        "syntax": "alt = coordinates.altitude Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.altitude' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.altitudeAccuracy": {
        "descr": "The Coordinates.altitudeAccuracy read-only property is a strictly positive double representing the accuracy, with a 95% confidence level, of the altitude expressed in meters. This value is null if the implementation doesn't support measuring altitude.", 
        "name": "Coordinates.altitudeAccuracy", 
        "params": [], 
        "path": "dom/coordinates/altitudeaccuracy", 
        "syntax": "altAcc = coordinates.altitudeAccuracy Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.altitudeAccuracy' in that specification. Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.heading": {
        "descr": "The Coordinates.heading read-only property is a double representing the direction in which the device is traveling. This value, specified in degrees, indicates how far off from heading due north the device is. 0 degrees represents true true north, and the direction is determined clockwise (which means that east is 90 degrees and west is 270 degrees). If Coordinates.speed is 0, heading is NaN. If the device is not able to provide heading information, this value is null.", 
        "name": "Coordinates.heading", 
        "params": [], 
        "path": "dom/coordinates/heading", 
        "syntax": "heading = coordinates.heading Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.heading' in that specification. Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.latitude": {
        "descr": "The Coordinates.latitude read-only property is a double representing the latitude of the position in decimal degrees.", 
        "name": "Coordinates.latitude", 
        "params": [], 
        "path": "dom/coordinates/latitude", 
        "syntax": "lat = coordinates.latitude Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.latitude' in that specification. Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.longitude": {
        "descr": "The Coordinates.longitude read-only property is a double representing the longitude of the position in decimal degrees.", 
        "name": "Coordinates.longitude", 
        "params": [], 
        "path": "dom/coordinates/longitude", 
        "syntax": "lon = coordinates.longitude Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.longitude' in that specification. Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Coordinates.speed": {
        "descr": "The Coordinates.speed read-only property is a double representing the velocity of the device in meters per second. This value is null if the implementation is not able to measure it.", 
        "name": "Coordinates.speed", 
        "params": [], 
        "path": "dom/coordinates/speed", 
        "syntax": "speed = coordinates.speed Specifications    Specification Status Comment     Geolocation APIThe definition of 'Coordinates.speed' in that specification. Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Credential": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Credential", 
        "params": [
            {
                "descr": "Returns a DOMString containing the URL of an image for the credential. ", 
                "name": "Credential.iconURL Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the credential's identifier. ", 
                "name": "Credential.id Read only"
            }, 
            {
                "descr": "Returns a DOMString containing a name associated with the credential. ", 
                "name": "Credential.name Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the credential's type. ", 
                "name": "Credential.type Read only"
            }
        ], 
        "path": "dom/credential", 
        "syntax": "Credential interface of the the Credential Management API provides information about an entity as a prerequisite to a trust decision. Properties  Credential.iconURL Read only  Returns a DOMString containing the URL of an image for the credential. The URL must be from a secure context. Credential.id Read only  Returns a DOMString containing the credential's identifier. This might be any one of a GUID, username, or email address. Credential.name Read only  Returns a DOMString containing a name associated with the credential. This is intended to be a human-readable public name. Credential.type Read only  Returns a DOMString containing the credential's type. Valid values are password and federated.  Event handlers None. Methods None. Examples // TBD Specifications    Specification Status Comment   Credential Management Level 1 Editor's Draft Initial definition.    Browser Compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support  51.0", 
        "type": "Credential Management"
    }, 
    "Credential Management API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Credential Management API", 
        "params": [
            {
                "descr": "Provides information about an entity as a prerequisite to a trust decision.", 
                "name": "Credential"
            }, 
            {
                "descr": "Exposes methods to request credentials and notify the user agent when interesting events occur such as successful sign in or sign out. ", 
                "name": "CredentialsContainer"
            }, 
            {
                "descr": "Provides information about credentials from a federated identity provider, which is an entity that a website trusts to correctly authenticate a user, and which provides an API for that purpose. ", 
                "name": "FederatedCredential"
            }, 
            {
                "descr": "Provides information about a username/password pair.", 
                "name": "PasswordCredential"
            }
        ], 
        "path": "dom/credential_management_api", 
        "syntax": "get()", 
        "type": "Credential Management"
    }, 
    "Credential.iconURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Credential.iconURL", 
        "params": [], 
        "path": "dom/credential/iconurl", 
        "syntax": "iconURL property of the Credential interface returns a DOMString containing the URL of an image for the credential. The URL must be from a secure context. Syntax var iconURL = Credential.iconURL; Value A DOMString containing the URL of an image for the credential. Example // TBD Specifications    Specification Status Comment   Credential Management Level 1 Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 51.0 ? ? ? ? ? 51.0          Edit this page on MDN", 
        "type": "Credential Management"
    }, 
    "Credential.id": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Credential.id", 
        "params": [], 
        "path": "dom/credential/id", 
        "syntax": "id property of the Credential interface returns a DOMString containing the credential's identifier. This might be any one of a GUID, username, or email address. Syntax var id = Credential.id; Value A a DOMString containing the credential's identifier. Example // TBD Specifications    Specification Status Comment   Credential Management Level 1 Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 51.0 ? ? ? ? ? 51.0          Edit this page on MDN", 
        "type": "Credential Management"
    }, 
    "Credential.name": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Credential.name", 
        "params": [], 
        "path": "dom/credential/name", 
        "syntax": "name property of the Credential interface returns a DOMString containing a name associated with the credential. This is intended to be a human-readable public name. Syntax var credName = Credentials.name; Value A DOMString containing a name associated with the credential. Example // TBD Specifications    Specification Status Comment   Credential Management Level 1 Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 51.0 ? ? ? ? ? 51.0          Edit this page on MDN", 
        "type": "Credential Management"
    }, 
    "Credential.type": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Credential.type", 
        "params": [], 
        "path": "dom/credential/type", 
        "syntax": "type property of the Credential interface returns a DOMString containing the credential's type. Valid values are password and federated. Syntax var credType = Credentials.type; Value A DOMString containing a name associated with the credential. Example // TBD Specifications    Specification Status Comment   Credential Management Level 1 Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 51.0 ? ? ? ? ? 51.0          Edit this page on MDN", 
        "type": "Credential Management"
    }, 
    "CredentialsContainer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CredentialsContainer", 
        "params": [
            {
                "descr": "Returns a Promise to a Credential instance that matches the provided parameters.", 
                "name": "CredentialsContainer.get()"
            }, 
            {
                "descr": "Returns an empty Promise after acquiring user mediation for credentials returned from a particular origin. ", 
                "name": "CredentialsContainer.requireUserMediation()"
            }, 
            {
                "descr": "Stores a set of credentials for a user, inside a provided Credential instance and returns that instance in a Promise.", 
                "name": "CredentialsContainer.store()"
            }
        ], 
        "path": "dom/credentialscontainer", 
        "syntax": "CredentialsContainer interface of the the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out haappen. This interface is accessible from Navigator.credentials. Properties None. Event handlers None. Methods  CredentialsContainer.get()", 
        "type": "Credential Management"
    }, 
    "CredentialsContainer.get": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CredentialsContainer.get", 
        "params": [
            {
                "descr": "An object that sets options to look for among the credentials in the CredentialsContainer. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/credentialscontainer/get", 
        "syntax": "get()", 
        "type": "Credential Management"
    }, 
    "CredentialsContainer.requireUserMediation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CredentialsContainer.requireUserMediation", 
        "params": [], 
        "path": "dom/credentialscontainer/requireusermediation", 
        "syntax": "requireUserMediation()", 
        "type": "Credential Management"
    }, 
    "CredentialsContainer.store": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "CredentialsContainer.store", 
        "params": [
            {
                "descr": "A valid Credential instance.", 
                "name": "Credentials"
            }
        ], 
        "path": "dom/credentialscontainer/store", 
        "syntax": "store()", 
        "type": "Credential Management"
    }, 
    "Crypto.subtle": {
        "descr": "The Crypto.subtle read-only property returns a SubtleCrypto object allowing to perform cryptographical operations.", 
        "name": "Crypto.subtle", 
        "params": [], 
        "path": "dom/crypto/subtle", 
        "syntax": "var crypto = crypto.subtle; Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'Crypto.subtle' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 37 34 (34) Not supported ? Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 37 34.0 (34) Not supported ? Not supported     See also", 
        "type": "Web Cryptography"
    }, 
    "CryptoKey.algorithm": {
        "descr": "The CryptoKey.algorithm read-only property is an opaque value containing all the information about the algorithm related to the key.", 
        "name": "CryptoKey.algorithm", 
        "params": [], 
        "path": "dom/cryptokey/algorithm", 
        "syntax": "result = key.algorithm Return value  result is an opaque object describing the algorithm the key relates to.  Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'CryptoKey.algorithm' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 37 34 (34) Not supported ? Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 37 34.0 (34) Not supported ? Not supported     See also", 
        "type": "Web Cryptography"
    }, 
    "CryptoKey.extractable": {
        "descr": "The CryptoKey.extractable read-only property that indicates if the raw material key can be extracted, for example for archiving it.", 
        "name": "CryptoKey.extractable", 
        "params": [], 
        "path": "dom/cryptokey/extractable", 
        "syntax": "result = key.extractable Return value  result is a Boolean indicating if the key can be extracted.  Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'CryptoKey.extractable' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 37 34 (34) Not supported ? Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 37 34.0 (34) Not supported ? Not supported     See also", 
        "type": "Web Cryptography"
    }, 
    "CryptoKey.type": {
        "descr": "The CryptoKey.type read-only property that indicates the type of the key: if it is the key for a symmetric algorithm (\"secret\") or for an asymmetric algorithm (\"public\" or \"private\", depending of its purpose).", 
        "name": "CryptoKey.type", 
        "params": [], 
        "path": "dom/cryptokey/type", 
        "syntax": "result = key.type Return value  result is an enumerated value that can be:  \"secret\" represents the unique key used for encrypting or decrypting a message using a symmetric algorithm. \"public\" represents a publicly shareable key used in an asymmetric algorithm. \"private\" represents a key used in an asymmetric algorithm that must be kept private.    Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'CryptoKey.type' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 37 34 (34) Not supported ? Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 37 34.0 (34) Not supported ? Not supported     See also", 
        "type": "Web Cryptography"
    }, 
    "CryptoKey.usages": {
        "descr": "The CryptoKey.usages read-only property is an array of enumerated that indicates the purposes of the key.", 
        "name": "CryptoKey.usages", 
        "params": [], 
        "path": "dom/cryptokey/usages", 
        "syntax": "result = key.usages Return value  result is an Array of enumerated values.  Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'CryptoKey.usages' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 37 34 (34) Not supported ? Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 37 34.0 (34) Not supported ? Not supported     See also", 
        "type": "Web Cryptography"
    }, 
    "CustomEvent.constructor": {
        "descr": "The CustomEvent() constructor creates a new CustomEvent.", 
        "name": "CustomEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a CustomEventInit dictionary, having the following fields:  \"detail\", optional and defaulting to null, of type any, that is an event-dependent value associated with the event. ", 
                "name": "customEventInitOptional"
            }
        ], 
        "path": "dom/customevent/customevent", 
        "syntax": "event = new CustomEvent(typeArg, customEventInit);", 
        "type": "Events"
    }, 
    "DOMConfiguration": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "DOMConfiguration", 
        "params": [
            {
                "descr": "Is a DOMStringList", 
                "name": "DOMConfiguration.parameterNames Read only"
            }, 
            {
                "descr": "Returns a Boolean", 
                "name": "DOMConfiguration.canSetParameter()"
            }, 
            {
                "descr": "Returns a DOMUserData", 
                "name": "DOMConfiguration.getParameter()"
            }, 
            {
                "descr": "Sets a parameter", 
                "name": "DOMConfiguration.setParameter()"
            }
        ], 
        "path": "dom/domconfiguration", 
        "syntax": "DOMConfiguration.parameterNames Read only  Is a DOMStringList", 
        "type": "DOM"
    }, 
    "DOMError": {
        "descr": "The DOMError interface describes an error object that contains an error name.", 
        "name": "DOMError", 
        "params": [
            {
                "descr": "Returns a DOMString representing one of the error type names (see below).", 
                "name": "DOMError.name Read only"
            }
        ], 
        "path": "dom/domerror", 
        "syntax": "InvalidModificationError The object can not be modified in this way.   NamespaceError The operation is not allowed by Namespaces in XML   InvalidAccessError The object does not support the operation or argument.   TypeMismatchError The type of the object does not match the expected type.   SecurityError The operation is insecure.   NetworkError A network error occurred.   AbortError The operation was aborted.   URLMismatchError The given URL does not match another URL.   QuotaExceededError The quota has been exceeded.   TimeoutError The operation timed out.   InvalidNodeTypeError The node is incorrect or has an incorrect ancestor for this operation.   DataCloneError The object can not be cloned.    Specifications    Specification Status Comment   DOM4The definition of 'DOMError' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support ? 12.0 ? ? (Yes)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? 12.0 ? ? ?     See also", 
        "type": "DOM"
    }, 
    "DOMException": {
        "descr": "The DOMException interface represents an abnormal event (called an exception) which occurs as a result of calling a method or accessing a property of a web API. This is basically how error conditions are described in web APIs.", 
        "name": "DOMException", 
        "params": [
            {
                "descr": "Returns a DOMException object with a specified message and name.", 
                "name": "DOMException()"
            }, 
            {
                "descr": "Returns a short that contains one of the error code constants, or 0 if none match. ", 
                "name": "DOMException.code  Read only"
            }, 
            {
                "descr": "Returns a DOMString that contains one of the strings associated with an error name.", 
                "name": "DOMException.name Read only"
            }, 
            {
                "descr": "The index is not in the allowed range. ", 
                "name": "IndexSizeError"
            }, 
            {
                "descr": "The node tree hierarchy is not correct. ", 
                "name": "HierarchyRequestError"
            }, 
            {
                "descr": "The object is in the wrong Document. ", 
                "name": "WrongDocumentError"
            }, 
            {
                "descr": "The string contains invalid characters. ", 
                "name": "InvalidCharacterError"
            }, 
            {
                "descr": "The object can not be modified. ", 
                "name": "NoModificationAllowedError"
            }, 
            {
                "descr": "The object can not be found here. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "The operation is not supported. ", 
                "name": "NotSupportedError"
            }, 
            {
                "descr": "The object is in an invalid state. ", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The string did not match the expected pattern. ", 
                "name": "SyntaxError"
            }, 
            {
                "descr": "The object can not be modified in this way. ", 
                "name": "InvalidModificationError"
            }, 
            {
                "descr": "The operation is not allowed by Namespaces in XML. ", 
                "name": "NamespaceError"
            }, 
            {
                "descr": "The object does not support the operation or argument. ", 
                "name": "InvalidAccessError"
            }, 
            {
                "descr": "The type of the object does not match the expected type. ", 
                "name": "TypeMismatchError"
            }, 
            {
                "descr": "The operation is insecure. (Legacy code value: 18 and legacy constant name: SECURITY_ERR)", 
                "name": "SecurityError"
            }, 
            {
                "descr": "A network error occurred. (Legacy code value: 19 and legacy constant name: NETWORK_ERR)", 
                "name": "NetworkError"
            }, 
            {
                "descr": "The operation was aborted. (Legacy code value: 20 and legacy constant name: ABORT_ERR)", 
                "name": "AbortError"
            }, 
            {
                "descr": "The given URL does not match another URL. ", 
                "name": "URLMismatchError"
            }, 
            {
                "descr": "The quota has been exceeded. (Legacy code value: 22 and legacy constant name: QUOTA_EXCEEDED_ERR)", 
                "name": "QuotaExceededError"
            }, 
            {
                "descr": "The operation timed out. (Legacy code value: 23 and legacy constant name: TIMEOUT_ERR)", 
                "name": "TimeoutError"
            }, 
            {
                "descr": "The node is incorrect or has an incorrect ancestor for this operation. ", 
                "name": "InvalidNodeTypeError"
            }, 
            {
                "descr": "The object can not be cloned. (Legacy code value: 25 and legacy constant name: DATA_CLONE_ERR)", 
                "name": "DataCloneError"
            }, 
            {
                "descr": "The encoding operation, being an encoding or a decoding one, failed (No legacy code value and constant name).", 
                "name": "EncodingError"
            }, 
            {
                "descr": "The input/output read operation failed (No legacy code value and constant name).", 
                "name": "NotReadableError"
            }
        ], 
        "path": "dom/domexception", 
        "syntax": "SyntaxError The string did not match the expected pattern. (Legacy code value: 12 and legacy constant name: SYNTAX_ERR) InvalidModificationError", 
        "type": "DOM"
    }, 
    "DOMException.constructor": {
        "descr": "The DOMException() constructor returns a DOMException object with a specified message and name.", 
        "name": "DOMException.constructor", 
        "params": [
            {
                "descr": "A description of the exception. ", 
                "name": "message Optional"
            }, 
            {
                "descr": "Returns a DOMString that contains one of the string associated with an error constant.", 
                "name": "name Optional"
            }, 
            {
                "descr": "A newly created DOMException object.", 
                "name": "Return value  DOMException"
            }
        ], 
        "path": "dom/domexception/domexception", 
        "syntax": "var domException = new DOMException();\n or var domException = new DOMException(message);\n or var domException = new DOMException(message, name);", 
        "type": "DOM"
    }, 
    "DOMImplementation.createDocument": {
        "descr": "The DOMImplementation.createDocument() method creates and returns an XMLDocument.", 
        "name": "DOMImplementation.createDocument", 
        "params": [
            {
                "descr": "Is a DOMString containing the namespace URI of the document to be created, or null if the document doesn't belong to one.", 
                "name": "namespaceURI"
            }, 
            {
                "descr": "Is a DOMString containing the qualified name, that is an optional prefix and colon plus the local root element name, of the document to be created.", 
                "name": "qualifiedNameStr"
            }, 
            {
                "descr": "Is the DocumentType of the document to be created. ", 
                "name": "documentType Optional"
            }
        ], 
        "path": "dom/domimplementation/createdocument", 
        "syntax": "doc = document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType);", 
        "type": "DOM"
    }, 
    "DOMImplementation.createDocumentType": {
        "descr": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().", 
        "name": "DOMImplementation.createDocumentType", 
        "params": [
            {
                "descr": "Is a DOMString containing the qualified name, like svg:svg.", 
                "name": "qualifiedNameStr"
            }, 
            {
                "descr": "Is a DOMString containing the PUBLIC identifier.", 
                "name": "publicId"
            }, 
            {
                "descr": "Is a DOMString containing the SYSTEM identifiers.", 
                "name": "systemId"
            }
        ], 
        "path": "dom/domimplementation/createdocumenttype", 
        "syntax": "doctype = document.implementation.createDocumentType(qualifiedNameStr, publicId, systemId)", 
        "type": "DOM"
    }, 
    "DOMImplementation.createHTMLDocument": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMImplementation.createHTMLDocument", 
        "params": [
            {
                "descr": "Is a DOMString containing the title to give the new HTML document.", 
                "name": "title Optional"
            }
        ], 
        "path": "dom/domimplementation/createhtmldocument", 
        "syntax": "DOMImplementation.createHTMLDocument()", 
        "type": "DOM"
    }, 
    "DOMMatrix": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMMatrix", 
        "params": [
            {
                "descr": "Are double representing each component of a 4x4 matrix.", 
                "name": "m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44"
            }, 
            {
                "descr": "Are double representing each component of a 4x4 matrix needed for 2D rotations and translations. ", 
                "name": "a, b, c, d, e, f Read only"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being multiplied by the given DOMMatrix.", 
                "name": "DOMMatrixReadOnly.multiplySelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the given DOMMatrix being multiplied by the original matrix.", 
                "name": "DOMMatrixReadOnly.preMultiplySelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the matrix being translated by the given vector.", 
                "name": "DOMMatrix.translateSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the matrix x and y dimensions being scaled by the given factor, centered on the origin given.", 
                "name": "DOMMatrix.scaleSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the matrix x, y and z dimension being scaled by the given factor, centered on the origin given.", 
                "name": "DOMMatrix.scale3dSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the matrix x, y and z dimension being scaled by the given factor for each dimension, centered on the origin given.", 
                "name": "DOMMatrix.scaleNonUniformSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being rotated by the given angle, with the rotation centered on the origin given.", 
                "name": "DOMMatrix.rotateSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being rotated by the angle between the given vector and (1,0), centered on the origin given.", 
                "name": "DOMMatrix.rotateFromVectorSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being rotated by the given angle and the give vector.", 
                "name": "DOMMatrix.rotateAxisAngleSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being skewed along the x-axis by the given factor.", 
                "name": "DOMMatrix.skewXSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being skewed along the y-axis by the given factor.", 
                "name": "DOMMatrix.skewYSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its new content being the result of the original matrix being inverted. ", 
                "name": "DOMMatrix.invertSelf()"
            }, 
            {
                "descr": "Returns itself, a DOMMatrix, with its describing the matrix representing the same transformation as the CSS transform functions given in parameter.", 
                "name": "DOMMatrix.setMatrixValue()"
            }
        ], 
        "path": "dom/dommatrix", 
        "syntax": "DOMMatrix interface represents 4x4 matrices, suitable for 2D and 3D operations. A 4x4 matrix is suitable to describe any rotation and translation in 3D. This interface should be available inside Web workers, though some implementations don't allow it yet. Properties This interface inherits properties from DOMMatrixReadOnly, though some are modified not to be read-only.  m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44 Are double representing each component of a 4x4 matrix. a, b, c, d, e, f Read only  Are double representing each component of a 4x4 matrix needed for 2D rotations and translations. They are aliases for some components of the 4x4 matrix:    2D 3D equivalent     a m11   b m12   c m21   d m22   e m41   f m42      Methods This interface inherits methods from DOMMatrixReadOnly.  DOMMatrixReadOnly.multiplySelf()", 
        "type": "DOM"
    }, 
    "DOMMatrixReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMMatrixReadOnly", 
        "params": [
            {
                "descr": "Are double representing each component of a 4x4 matrix. ", 
                "name": "m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44 Read only"
            }, 
            {
                "descr": "Are double representing each component of a 4x4 matrix needed for 2D rotations and translations. ", 
                "name": "a, b, c, d, e, f Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if the matrix contains a 2D matrix and only accept 2D transformations.", 
                "name": "DOMMatrixReadOnly.is2D Read only"
            }, 
            {
                "descr": "Is a Boolean indincating if the matrix identity, that is a matrix with 1 on the components of its diagonal, and 0 elsewhere.", 
                "name": "DOMMatrixReadOnly.isIdentity Read only"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the matrix being translated by the given vector. ", 
                "name": "DOMMatrixReadOnly.translate()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the matrix x and y dimensions being scaled by the given factor, centered on the origin given. ", 
                "name": "DOMMatrixReadOnly.scale()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the matrix x, y and z dimension being scaled by the given factor, centered on the origin given. ", 
                "name": "DOMMatrixReadOnly.scale3d()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the matrix x, y and z dimension being scaled by the given factor for each dimension, centered on the origin given. ", 
                "name": "DOMMatrixReadOnly.scaleNonUniform()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being rotated by the given angle, with the rotation centered on the origin given. ", 
                "name": "DOMMatrixReadOnly.rotate()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being rotated by the angle between the given vector and (1,0), centered on the origin given. ", 
                "name": "DOMMatrixReadOnly.rotateFromVector()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being rotated by the given angle and the give vector. ", 
                "name": "DOMMatrixReadOnly.rotateAxisAngle()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being skewed along the x-axis by the given factor. ", 
                "name": "DOMMatrixReadOnly.skewX()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being skewed along the y-axis by the given factor. ", 
                "name": "DOMMatrixReadOnly.skewY()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being multiplied by the given DOMMatrix. ", 
                "name": "DOMMatrixReadOnly.multiply()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being flipped around the x-axis, that is multiplied by the DOMMatrix(-1, 0, 0, 1, 0, 0). ", 
                "name": "DOMMatrixReadOnly.flipX()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being flipped around the y-axis, that is multiplied by the DOMMatrix(1, 0, 0, -1, 0, 0). ", 
                "name": "DOMMatrixReadOnly.flipY()"
            }, 
            {
                "descr": "Returns a DOMMatrix containing a new matrix being the result of the original matrix being inverted. ", 
                "name": "DOMMatrixReadOnly.invert()"
            }, 
            {
                "descr": "Returns a DOMPoint that is the point given in parameter multiplied by the matrix. ", 
                "name": "DOMMatrixReadOnly.transformPoint()"
            }, 
            {
                "descr": "Returns a Float32Array containing the 6 components (a, b, c, d, e, f) in the case of a 2D matrix or the 16 components (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) for a 3D matrix.", 
                "name": "DOMMatrixReadOnly.toFloat32Array()"
            }, 
            {
                "descr": "Returns a Float64Array containing the 6 components (a, b, c, d, e, f) in the case of a 2D matrix or the 16 components (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) for a 3D matrix.", 
                "name": "DOMMatrixReadOnly.toFloat64Array()"
            }, 
            {
                "descr": "Returns a DOMString containing the 6 components separated by a ',' and prefixed by the CSS matrix functional notation, as 'matrix (a, b, c, d, e, f)', in the case of a 2D matrix or matrix3d functional notation and the 16 components,'matrix3d(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44)', for a 3D matrix.", 
                "name": "DOMMatrixReadOnly.toString()"
            }
        ], 
        "path": "dom/dommatrixreadonly", 
        "syntax": "DOMMatrixReadOnly interface represents 4x4 matrices, suitable for 2D and 3D operations. If this interface defines only read-only matrices, the DOMMatrix interface which inherits from it, add all the properties and the methods to allow to have modifiable matrices. A 4x4 matrix is suitable to describe any rotation and translation in 3D. This interface should be available inside Web workers, though some implementations doesn't allow it yet. Properties This interface doesn't inherit any other property.  m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44 Read only  Are double representing each component of a 4x4 matrix. They are read-only, but their counterpart, with the same name, in DOMMatrix aren't. a, b, c, d, e, f Read only  Are double representing each component of a 4x4 matrix needed for 2D rotations and translations. They are aliases for some components of the 4x4 matrix:    2D 3D equivalent     a m11   b m12   c m21   d m22   e m41   f m42    They are read-only, but their counterpart, with the same name, in DOMMatrix aren't. DOMMatrixReadOnly.is2D Read only  Is a Boolean indicating if the matrix contains a 2D matrix and only accept 2D transformations. DOMMatrixReadOnly.isIdentity Read only  Is a Boolean indincating if the matrix identity, that is a matrix with 1 on the components of its diagonal, and 0 elsewhere.  Methods This interface doesn't inherit any method.  DOMMatrixReadOnly.translate()", 
        "type": "DOM"
    }, 
    "DOMParser": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMParser", 
        "params": [], 
        "path": "dom/domparser", 
        "syntax": "DOMParser can parse XML or HTML source stored in a string into a DOM Document. DOMParser is specified in DOM Parsing and Serialization. Note that XMLHttpRequest supports parsing XML and HTML from URL-addressable resources. Creating a DOMParser To create a DOMParser object simply use new DOMParser()", 
        "type": "DOM"
    }, 
    "DOMPoint": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMPoint", 
        "params": [
            {
                "descr": "Creates a new DOMPoint object.", 
                "name": "DOMPoint()"
            }, 
            {
                "descr": "Translates the position/perspective of a DOMPoint to a new position (doesn't appear to be supported anywhere yet.)", 
                "name": "DOMPointReadOnly.fromPoint"
            }, 
            {
                "descr": "The x coordinate of the DOMPoint.", 
                "name": "DOMPointReadOnly.x Read only"
            }, 
            {
                "descr": "The y coordinate of the DOMPoint.", 
                "name": "DOMPointReadOnly.y Read only"
            }, 
            {
                "descr": "The z coordinate of the DOMPoint.", 
                "name": "DOMPointReadOnly.z Read only"
            }, 
            {
                "descr": "The perspective value of the DOMPoint.", 
                "name": "DOMPointReadOnly.w Read only"
            }
        ], 
        "path": "dom/dompoint", 
        "syntax": "DOMPoint represents a 2D or 3D point in a coordinate system. In general, a positive x component represents a position right of the origin, a positive y component upwards from the origin, and a positive z component outwards from the screen (in other words, opposite the direction that the user is facing).", 
        "type": "DOM"
    }, 
    "DOMPoint.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMPoint.constructor", 
        "params": [
            {
                "descr": "The x coordinate for the new DOMPoint.", 
                "name": "x"
            }, 
            {
                "descr": "The y coordinate for the new DOMPoint.", 
                "name": "y"
            }, 
            {
                "descr": "The z coordinate for the new DOMPoint.", 
                "name": "z"
            }, 
            {
                "descr": "The perspective value of the new DOMPoint.", 
                "name": "w"
            }
        ], 
        "path": "dom/dompoint/dompoint", 
        "syntax": "DOMPoint()", 
        "type": "DOM"
    }, 
    "DOMPointReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMPointReadOnly", 
        "params": [
            {
                "descr": "Defined to create a new DOMPointReadOnly object, but note that this constructor cannot be called by 3rd party JavaScript: doing so returns an \"Illegal constructor\" typeError.", 
                "name": "DOMPointReadOnly()"
            }, 
            {
                "descr": "Translates the position/perspective of a DOMPoint to a new position (doesn't appear to be supported anywhere yet.)", 
                "name": "DOMPointReadOnly.fromPoint"
            }, 
            {
                "descr": "Applies a matrix transform to a DOMPointReadOnly object (doesn't appear to be supported anywhere yet.)", 
                "name": "DOMPointReadOnly.matrixTransform"
            }, 
            {
                "descr": "The x coordinate of the DOMPoint.", 
                "name": "DOMPointReadOnly.x Read only"
            }, 
            {
                "descr": "The y coordinate of the DOMPoint.", 
                "name": "DOMPointReadOnly.y Read only"
            }, 
            {
                "descr": "The z coordinate of the DOMPoint.", 
                "name": "DOMPointReadOnly.z Read only"
            }, 
            {
                "descr": "The perspective value of the DOMPoint.", 
                "name": "DOMPointReadOnly.w Read only"
            }
        ], 
        "path": "dom/dompointreadonly", 
        "syntax": "DOMPointReadOnly interface specifies the standard properties used by DOMPoint to define a 2D or 3D point in a coordinate system. Constructor  DOMPointReadOnly()", 
        "type": "DOM"
    }, 
    "DOMPointReadOnly.w": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMPointReadOnly.w", 
        "params": [], 
        "path": "dom/dompointreadonly/w", 
        "syntax": "w read-only property of the DOMPointReadOnly interface represents the perspective of a point. Syntax var perspective = DOMPoint.w; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'w' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMPointReadOnly.x": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMPointReadOnly.x", 
        "params": [], 
        "path": "dom/dompointreadonly/x", 
        "syntax": "x read-only property of the DOMPointReadOnly interface represents the x coordinate of a point. In general, positive x means to the right, and negative x means to the left. Syntax var xPos = DOMPoint.x; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'x' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMPointReadOnly.y": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMPointReadOnly.y", 
        "params": [], 
        "path": "dom/dompointreadonly/y", 
        "syntax": "y read-only property of the DOMPointReadOnly interface represents the y coordinate of a point. In general, positive y means upwards, and negative y means downwards. Syntax var yPos = DOMPoint.y; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'y' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMPointReadOnly.z": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMPointReadOnly.z", 
        "params": [], 
        "path": "dom/dompointreadonly/z", 
        "syntax": "z read-only property of the DOMPointReadOnly interface represents the z coordinate of a point. In general, positive z means out of the screen (the opposite of the direction the user is facing), and negative z means into the screen (the same way the user is facing).", 
        "type": "DOM"
    }, 
    "DOMRect": {
        "descr": "Draft This page is not complete.", 
        "name": "DOMRect", 
        "params": [
            {
                "descr": "Creates a new DOMPoint object.", 
                "name": "DOMRect()"
            }, 
            {
                "descr": "Translates the position/perspective of a DOMRect to a new position (doesn't appear to be supported anywhere yet.)", 
                "name": "DOMRectReadOnly.fromRect"
            }, 
            {
                "descr": "The x coordinate of the DOMRect's origin.", 
                "name": "DOMRectReadOnly.x Read only"
            }, 
            {
                "descr": "The y coordinate of the DOMRect's origin.", 
                "name": "DOMRectReadOnly.y Read only"
            }, 
            {
                "descr": "The width of the DOMRect.", 
                "name": "DOMRectReadOnly.width Read only"
            }, 
            {
                "descr": "The height of the DOMRect.", 
                "name": "DOMRectReadOnly.height Read only"
            }, 
            {
                "descr": "Returns the top coordinate value of the DOMRect (has the same value as y, or y + height if height is negative.)", 
                "name": "DOMRectReadOnly.top Read only"
            }, 
            {
                "descr": "Returns the right coordinate value of the DOMRect (has the same value as x + width, or x if width is negative.)", 
                "name": "DOMRectReadOnly.right Read only"
            }, 
            {
                "descr": "Returns the bottom coordinate value of the DOMRect (has the same value as y + height, or y if height is negative.)", 
                "name": "DOMRectReadOnly.bottom Read only"
            }, 
            {
                "descr": "Returns the left coordinate value of the DOMRect (has the same value as x, or x + width if width is negative.)", 
                "name": "DOMRectReadOnly.left Read only"
            }
        ], 
        "path": "dom/domrect", 
        "syntax": "DOMRect represents a rectangle. The type of box represented by the DOMRect is specified by the method or property that returned it. For example, VREyeParameters.renderRect from the WebVR API specifies the viewport of a canvas into which visuals for one eye of a head mounted display should be rendered. It inherits from its parent, DOMRectReadOnly. Constructor  DOMRect()", 
        "type": "DOM"
    }, 
    "DOMRect.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMRect.constructor", 
        "params": [
            {
                "descr": "The x coordinate of the DOMRect's origin.", 
                "name": "x"
            }, 
            {
                "descr": "The y coordinate of the DOMRect's origin.", 
                "name": "y"
            }, 
            {
                "descr": "The width of the DOMRect.", 
                "name": "width"
            }, 
            {
                "descr": "The height of the DOMRect.", 
                "name": "height"
            }
        ], 
        "path": "dom/domrect/domrect", 
        "syntax": "DOMRect()", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly": {
        "descr": "Draft This page is not complete.", 
        "name": "DOMRectReadOnly", 
        "params": [
            {
                "descr": "Defined to create a new DOMRectReadOnly object, but note that this constructor cannot be called by 3rd party JavaScript: doing so returns an \"Illegal constructor\" typeError.", 
                "name": "DOMRectReadOnly()"
            }, 
            {
                "descr": "Translates the position/perspective of a DOMRect to a new position. ", 
                "name": "DOMRectReadOnly.fromRect"
            }, 
            {
                "descr": "The x coordinate of the DOMRect's origin.", 
                "name": "DOMRectReadOnly.x Read only"
            }, 
            {
                "descr": "The y coordinate of the DOMRect's origin.", 
                "name": "DOMRectReadOnly.y Read only"
            }, 
            {
                "descr": "The width of the DOMRect.", 
                "name": "DOMRectReadOnly.width Read only"
            }, 
            {
                "descr": "The height of the DOMRect.", 
                "name": "DOMRectReadOnly.height Read only"
            }, 
            {
                "descr": "Returns the top coordinate value of the DOMRect (usually the same as y.)", 
                "name": "DOMRectReadOnly.top Read only"
            }, 
            {
                "descr": "Returns the right coordinate value of the DOMRect (usually the same as x + width).", 
                "name": "DOMRectReadOnly.right Read only"
            }, 
            {
                "descr": "Returns the bottom coordinate value of the DOMRect (usually the same as y + height).", 
                "name": "DOMRectReadOnly.bottom Read only"
            }, 
            {
                "descr": "Returns the left coordinate value of the DOMRect (usually the same as x).", 
                "name": "DOMRectReadOnly.left Read only"
            }
        ], 
        "path": "dom/domrectreadonly", 
        "syntax": "DOMRectReadOnly interface specifies the standard properties used by DOMRect to define a rectangle. Constructor  DOMRectReadOnly()", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.bottom": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMRectReadOnly.bottom", 
        "params": [], 
        "path": "dom/domrectreadonly/bottom", 
        "syntax": "bottom read-only property of the DOMRectReadOnly interface returns the bottom coordinate value of the DOMRect. (Has the same value as y + height, or y if height is negative.)", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.height": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMRectReadOnly.height", 
        "params": [], 
        "path": "dom/domrectreadonly/height", 
        "syntax": "height read-only property of the DOMRectReadOnly interface represents the height of the DOMRect. Syntax var recHeight = DOMRect.height; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'height' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.left": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMRectReadOnly.left", 
        "params": [], 
        "path": "dom/domrectreadonly/left", 
        "syntax": "left read-only property of the DOMRectReadOnly interface returns the left coordinate value of the DOMRect. (Has the same value as x, or x + width if width is negative.)", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.right": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMRectReadOnly.right", 
        "params": [], 
        "path": "dom/domrectreadonly/right", 
        "syntax": "right read-only property of the DOMRectReadOnly interface returns the right coordinate value of the DOMRect. (Has the same value as x + width, or x if width is negative.)", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.top": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMRectReadOnly.top", 
        "params": [], 
        "path": "dom/domrectreadonly/top", 
        "syntax": "top read-only property of the DOMRectReadOnly interface returns the top coordinate value of the DOMRect. (Has the same value as y, or y + height if height is negative.)", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.width": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMRectReadOnly.width", 
        "params": [], 
        "path": "dom/domrectreadonly/width", 
        "syntax": "width read-only property of the DOMRectReadOnly interface represents the width of the DOMRect. Syntax var recWidth = DOMRect.width; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'width' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.x": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMRectReadOnly.x", 
        "params": [], 
        "path": "dom/domrectreadonly/x", 
        "syntax": "x read-only property of the DOMRectReadOnly interface represents the x coordinate of the DOMRect's origin. Syntax var recX = DOMRect.x; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'x' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMRectReadOnly.y": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DOMRectReadOnly.y", 
        "params": [], 
        "path": "dom/domrectreadonly/y", 
        "syntax": "y read-only property of the DOMRectReadOnly interface represents the y coordinate of the DOMRect's origin. Syntax var recY = DOMRect.y; Value A double. Specifications    Specification Status Comment   Geometry Interfaces Module Level 1The definition of 'y' in that specification. Candidate Recommendation Latest spec version is an ED.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported   (Yes)  Not supported  Not supported", 
        "type": "DOM"
    }, 
    "DOMTokenList.replace": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMTokenList.replace", 
        "params": [
            {
                "descr": "A DOMString containing the token to replace.", 
                "name": "oldToken"
            }, 
            {
                "descr": "A DOMString containing the new token", 
                "name": "newToken"
            }
        ], 
        "path": "dom/domtokenlist/replace", 
        "syntax": "replace()", 
        "type": "DOM"
    }, 
    "DOMTokenList.supports": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DOMTokenList.supports", 
        "params": [
            {
                "descr": "A DOMString containing the token to query for.", 
                "name": "token"
            }
        ], 
        "path": "dom/domtokenlist/supports", 
        "syntax": "supports()", 
        "type": "DOM"
    }, 
    "DataTransfer": {
        "descr": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.", 
        "name": "DataTransfer", 
        "params": [
            {
                "descr": "Gets the type of drag-and-drop operation currently selected or sets the operation to a new type. ", 
                "name": "DataTransfer.dropEffect"
            }, 
            {
                "descr": "Provides all of the types of operations that are possible. ", 
                "name": "DataTransfer.effectAllowed"
            }, 
            {
                "descr": "Contains a list of all the local files available on the data transfer. ", 
                "name": "DataTransfer.files"
            }, 
            {
                "descr": "Gives a DataTransferItemList object which is a list of all of the drag data.", 
                "name": "DataTransfer.items Read only"
            }, 
            {
                "descr": "An array of string giving the formats that were set in the dragstart event.", 
                "name": "DataTransfer.types Read only"
            }, 
            {
                "descr": "Gives the drag cursor's state. This is primarily used to control the cursor during tab drags.", 
                "name": "DataTransfer.mozCursor"
            }, 
            {
                "descr": "Gives the number of items in the drag operation.", 
                "name": "DataTransfer.mozItemCount Read only"
            }, 
            {
                "descr": "The Node over which the mouse cursor was located when the button was pressed to initiate the drag operation. ", 
                "name": "DataTransfer.mozSourceNode Read only"
            }, 
            {
                "descr": "This property applies only to the dragend event, and is true if the user canceled the drag operation by pressing escape. ", 
                "name": "DataTransfer.mozUserCancelled Read only"
            }, 
            {
                "descr": "Remove the data associated with a given type. ", 
                "name": "DataTransfer.clearData()"
            }, 
            {
                "descr": "Retrieves the data for a given type, or an empty string if data for that type does not exist or the data transfer contains no data.", 
                "name": "DataTransfer.getData()"
            }, 
            {
                "descr": "Set the data for a given type. If data for the type does not exist, it is added at the end, such that the last item in the types list will be the new format. ", 
                "name": "DataTransfer.setData()"
            }, 
            {
                "descr": "Set the image to be used for dragging if a custom one is desired.", 
                "name": "DataTransfer.setDragImage()"
            }, 
            {
                "descr": "Sets the drag source to the given element.", 
                "name": "DataTransfer.addElement()"
            }, 
            {
                "descr": "Removes the data associated with the given format for an item at the specified index. ", 
                "name": "DataTransfer.mozClearDataAt()"
            }, 
            {
                "descr": "Retrieves the data associated with the given format for an item at the specified index, or null if it does not exist. ", 
                "name": "DataTransfer.mozGetDataAt()"
            }, 
            {
                "descr": "A data transfer may store multiple items, each at a given zero-based index. ", 
                "name": "DataTransfer.mozSetDataAt()"
            }, 
            {
                "descr": "Holds a list of the format types of the data that is stored for an item at the specified index. ", 
                "name": "DataTransfer.mozTypesAt()"
            }
        ], 
        "path": "dom/datatransfer", 
        "syntax": "DataTransfer.mozCursor Gives the drag cursor's state. This is primarily used to control the cursor during tab drags. DataTransfer.mozItemCount Read only  Gives the number of items in the drag operation. DataTransfer.mozSourceNode", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.clearData": {
        "descr": "The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing.", 
        "name": "DataTransfer.clearData", 
        "params": [
            {
                "descr": "A string which specifies the type of data to remove. ", 
                "name": "format Optional"
            }
        ], 
        "path": "dom/datatransfer/cleardata", 
        "syntax": "DataTransfer.clearData([format]);", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.dropEffect": {
        "descr": "The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur.", 
        "name": "DataTransfer.dropEffect", 
        "params": [
            {
                "descr": "A copy of the source item is made at the new location.", 
                "name": "copy"
            }, 
            {
                "descr": "An item is moved to a new location.", 
                "name": "move"
            }, 
            {
                "descr": "A link is established to the source at the new location.", 
                "name": "link"
            }, 
            {
                "descr": "The item may not be dropped.", 
                "name": "none"
            }
        ], 
        "path": "dom/datatransfer/dropeffect", 
        "syntax": "dataTransfer.dropEffect; Values A DOMString representing the drag operation effect. The possible values are:  copy A copy of the source item is made at the new location. move An item is moved to a new location. link A link is established to the source at the new location. none The item may not be dropped.  Assigning any other value to dropEffect has no effect and the old value is retained. Example This example shows the use of the dropEffect and effectAllowed properties. HTML Content <div>  <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">    Select this element, drag it to the Drop Zone and then release the selection to move the element.  </p></div><div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div>);", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.effectAllowed": {
        "descr": "The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations.", 
        "name": "DataTransfer.effectAllowed", 
        "params": [
            {
                "descr": "The item may not be dropped.", 
                "name": "none"
            }, 
            {
                "descr": "A copy of the source item may be made at the new location.", 
                "name": "copy"
            }, 
            {
                "descr": "A copy or link operation is permitted.", 
                "name": "copyLink"
            }, 
            {
                "descr": "A copy or move operation is permitted.", 
                "name": "copyMove"
            }, 
            {
                "descr": "A link may be established to the source at the new location.", 
                "name": "link"
            }, 
            {
                "descr": "A link or move operation is permitted.", 
                "name": "linkMove"
            }, 
            {
                "descr": "An item may be moved to a new location.", 
                "name": "move"
            }, 
            {
                "descr": "All operations are permitted.", 
                "name": "all"
            }, 
            {
                "descr": "The default value when the effect has not been set, equivalent to all.", 
                "name": "uninitialized"
            }
        ], 
        "path": "dom/datatransfer/effectallowed", 
        "syntax": "dataTransfer.effectAllowed; Values A DOMString representing the drag operation that is allowed. The possible values are:  none The item may not be dropped. copy A copy of the source item may be made at the new location. copyLink A copy or link operation is permitted. copyMove A copy or move operation is permitted. link A link may be established to the source at the new location. linkMove A link or move operation is permitted. move An item may be moved to a new location. all All operations are permitted. uninitialized The default value when the effect has not been set, equivalent to all.  Assigning any other value to effectAllowed has no effect and the old value is retained. Internet Explorer will change the value to be lowercased; thus, linkMove will become linkmove, and so on. Example This example shows the use of the effectAllowed and dropEffect", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.files": {
        "descr": "The DataTransfer.files property is a list of the files in the drag operation. If the operation includes no files, the list is empty.", 
        "name": "DataTransfer.files", 
        "params": [], 
        "path": "dom/datatransfer/files", 
        "syntax": "dataTransfer.files; Return value A list of the files in a drag operation, one list item for each file in the operation. If the drag operation had no files, the list is empty. Example There are two live examples of this interface:  Firefox only: http://jsfiddle.net/9C2EF/ All browsers: https://jsbin.com/hiqasek/  Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'files' in that specification. Living Standard     HTML5.1The definition of 'files' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 4 3.5 10 12 3.1         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported Not supported Not supported Not supported 10 Not supported Not supported          Edit this page on MDN", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.getData": {
        "descr": "The DataTransfer.getData() method retrieves drag data (as a DOMString) for the specified type. If the drag operation does not include data, this method returns an empty string.", 
        "name": "DataTransfer.getData", 
        "params": [
            {
                "descr": "A DOMString representing the type of data to retrieve.", 
                "name": "format"
            }, 
            {
                "descr": "A DOMString representing the drag data for the specified format. ", 
                "name": "DOMString"
            }
        ], 
        "path": "dom/datatransfer/getdata", 
        "syntax": "DOMString dataTransfer.getData(format);", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.items": {
        "descr": "The DataTransfer.items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty.", 
        "name": "DataTransfer.items", 
        "params": [], 
        "path": "dom/datatransfer/items", 
        "syntax": "dataTransfer.items; Return value A list of DataTransferItem objects for a drag operation, one list item for each object in the operation. If the drag operation had no data, the list is empty. Example This example shows the use of the items and types properties. <!DOCTYPE html><html lang=en><title>Examples of DataTransfer.{types,items} properties</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #target {    border: 1px solid black;  }</style><script>function dragstart_handler(ev) { console.log(\"dragStart: target.id = \" + ev.target.id);\n or  // Add this element's id to the drag payload so the drop handler will // know which element to add to its tree ev.dataTransfer.setData(\"text/plain\", ev.target.id);\n or  ev.dataTransfer.effectAllowed = \"move\";}function drop_handler(ev) { console.log(\"drop: target.id = \" + ev.target.id);\n or  ev.preventDefault();\n or  // Get the id of the target and add the moved element to the target's DOM var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  // Print each format type if (ev.dataTransfer.types != null) {   for (var i=0; i < ev.dataTransfer.types.length; i++) {     console.log(\"... types[\" + i + \"] = \" + ev.dataTransfer.types[i]);\n or    } } // Print each item's \"kind\" and \"type\" if (ev.dataTransfer.items != null) {   for (var i=0; i < ev.dataTransfer.items.length; i++) {     console.log(\"... items[\" + i + \"].kind = \" + ev.dataTransfer.items[i].kind + \" ; type = \" + ev.dataTransfer.items[i].type);\n or    } }}function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  // Set the dropEffect to move ev.dataTransfer.dropEffect = \"move\"}</script><body><h1>Examples of <code>DataTransfer</code>.{<code>types</code>, <code>items</code>} properties</h1> <ul>   <li id=\"i1\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 1 to the Drop Zone</li>   <li id=\"i2\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 2 to the Drop Zone</li> </ul> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.setData": {
        "descr": "The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type.", 
        "name": "DataTransfer.setData", 
        "params": [
            {
                "descr": "A DOMString representing the type of the drag data to add to the drag object.", 
                "name": "format"
            }, 
            {
                "descr": "A DOMString representing the data to add to the drag object.", 
                "name": "data"
            }
        ], 
        "path": "dom/datatransfer/setdata", 
        "syntax": "void dataTransfer.setData(format, data);", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.setDragImage": {
        "descr": "When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used.", 
        "name": "DataTransfer.setDragImage", 
        "params": [
            {
                "descr": "An image Element element to use for the drag feedback image.", 
                "name": "img"
            }, 
            {
                "descr": "A long indicating the horizontal offset within the image.", 
                "name": "xOffset"
            }, 
            {
                "descr": "A long indicating the vertical offset within the image.", 
                "name": "yOffset"
            }
        ], 
        "path": "dom/datatransfer/setdragimage", 
        "syntax": "void dataTransfer.setDragImage(img, xOffset, yOffset);", 
        "type": "Drag & Drop"
    }, 
    "DataTransfer.types": {
        "descr": "The DataTransfer.types read-only property is an array of the drag data formats (as strings) that were set in the dragstart event. The order of the formats is the same order as the data included in the drag operation.", 
        "name": "DataTransfer.types", 
        "params": [], 
        "path": "dom/datatransfer/types", 
        "syntax": "dataTransfer.types; Return value An array of the data formats used in the drag operation. Each format is string. If the drag operation included no data, this list will be empty. If any files are included in the drag operation, then one of the types will be the string Files. Example This example shows the use of the types and items properties. <!DOCTYPE html><html lang=en><title>Examples of DataTransfer.{types,items} properties</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #target {    border: 1px solid black;  }</style><script>function dragstart_handler(ev) { console.log(\"dragStart: target.id = \" + ev.target.id);\n or  // Add this element's id to the drag payload so the drop handler will // know which element to add to its tree ev.dataTransfer.setData(\"text/plain\", ev.target.id);\n or  ev.dataTransfer.effectAllowed = \"move\";}function drop_handler(ev) { console.log(\"drop: target.id = \" + ev.target.id);\n or  ev.preventDefault();\n or  // Get the id of the target and add the moved element to the target's DOM var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or  // Print each format type if (ev.dataTransfer.types != null) {   for (var i=0; i < ev.dataTransfer.types.length; i++) {     console.log(\"... types[\" + i + \"] = \" + ev.dataTransfer.types[i]);\n or    } } // Print each item's \"kind\" and \"type\" if (ev.dataTransfer.items != null) {   for (var i=0; i < ev.dataTransfer.items.length; i++) {     console.log(\"... items[\" + i + \"].kind = \" + ev.dataTransfer.items[i].kind + \" ; type = \" + ev.dataTransfer.items[i].type);\n or    } }}function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or  // Set the dropEffect to move ev.dataTransfer.dropEffect = \"move\"}</script><body><h1>Examples of <code>DataTransfer</code>.{<code>types</code>, <code>items</code>} properties</h1> <ul>   <li id=\"i1\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 1 to the Drop Zone</li>   <li id=\"i2\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">Drag Item 2 to the Drop Zone</li> </ul> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItem.getAsFile": {
        "descr": "The DataTransferItem.getAsFile() method returns the drag data item's File object if the item is a file. If the item is not a file, this method returns null.", 
        "name": "DataTransferItem.getAsFile", 
        "params": [
            {
                "descr": "If the drag data item is a file, a File object is returned; otherwise null is returned.", 
                "name": "File"
            }
        ], 
        "path": "dom/datatransferitem/getasfile", 
        "syntax": "File dataTransferItem.getAsFile();", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItem.getAsString": {
        "descr": "The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).", 
        "name": "DataTransferItem.getAsString", 
        "params": [
            {
                "descr": "A callback function that has access to the data transfer item's string data.", 
                "name": "FunctionStringCallback"
            }, 
            {
                "descr": "The drag data item's string data.", 
                "name": "void   FunctionStringCallback FunctionStringCallback is a callback function with the following argument:  DOMString"
            }
        ], 
        "path": "dom/datatransferitem/getasstring", 
        "syntax": "void dataTransferItem.getAsString(callback);", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItem.kind": {
        "descr": "The DataTransferItem.kind property returns the drag data item kind. It must be one of the following:", 
        "name": "DataTransferItem.kind", 
        "params": [
            {
                "descr": "If the drag data item is a file.", 
                "name": "file"
            }, 
            {
                "descr": "If the kind of drag data item is a plain Unicode string.", 
                "name": "string"
            }
        ], 
        "path": "dom/datatransferitem/kind", 
        "syntax": "dataItem.kind; Return value A DOMString representing the drag data item's kind. It must be one of the values listed above. Example This example shows the use of the kind property. function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = event.dataTransfer.items; for (var i = 0; i < data.length; i += 1) {   if ((data[i].kind == 'string') && (data[i].type.match('^text/plain'))) {     // This item is the target node     data[i].getAsString(function (s){       ev.target.appendChild(document.getElementById(s));\n or       });\n or    } else if ((data[i].kind == 'string') && (data[i].type.match('^text/html'))) {     // Drag data item is HTML     console.log(\"... Drop: HTML\");\n or    } else if ((data[i].kind == 'string') && (data[i].type.match('^text/uri-list'))) {     // Drag data item is URI     console.log(\"... Drop: URI\");\n or    } else if ((data[i].kind == 'file') && (data[i].type.match('^image/'))) {     // Drag data item is an image file     var f = data[i].getAsFile();\n or      console.log(\"... Drop: File \");\n or    } }});", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItem.type": {
        "descr": "The DataTransferItem.type property returns the type (format) of the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.", 
        "name": "DataTransferItem.type", 
        "params": [], 
        "path": "dom/datatransferitem/type", 
        "syntax": "dataItem.type; Return value A DOMString representing the drag data item's type. Example This example shows the use of the type property. function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = event.dataTransfer.items; for (var i = 0; i < data.length; i += 1) {   if ((data[i].kind == 'string') && (data[i].type.match('^text/plain'))) {     // This item is the target node     data[i].getAsString(function (s){       ev.target.appendChild(document.getElementById(s));\n or       });\n or    } else if ((data[i].kind == 'string') && (data[i].type.match('^text/html'))) {     // Drag data item is HTML     console.log(\"... Drop: HTML\");\n or    } else if ((data[i].kind == 'string') && (data[i].type.match('^text/uri-list'))) {     // Drag data item is URI     console.log(\"... Drop: URI\");\n or    } else if ((data[i].kind == 'file') && (data[i].type.match('^image/'))) {     // Drag data item is an image file     var f = data[i].getAsFile();\n or      console.log(\"... Drop: File \");\n or    } }});", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItemList.DataTransferItem": {
        "descr": "The DataTransferItemList() getter method allows the data transfer items in the list to be accessed with an array operator (i.e. [].)", 
        "name": "DataTransferItemList.DataTransferItem", 
        "params": [
            {
                "descr": "An unsigned long representing the index of the item in the drag data list to access.", 
                "name": "index"
            }, 
            {
                "descr": "The DataTransferItem object at the specified index. ", 
                "name": "dataItem"
            }
        ], 
        "path": "dom/datatransferitemlist/datatransferitem", 
        "syntax": "var dataItem = dataTransferItemList[index]; Arguments  index An unsigned long representing the index of the item in the drag data list to access.  Return value  dataItem The DataTransferItem object at the specified index. If the index is less than zero or greater than or equal to the list's length, undefined will be returned.  Example This example shows the use of the remove()", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItemList.add": {
        "descr": "The DataTransferItemList.add() method adds a new drag data item to the drag data list. The item may be a File or a string of a specific type. If the item is successfully added to the list, a new DataTransferItem object will be returned.", 
        "name": "DataTransferItemList.add", 
        "params": [
            {
                "descr": "A string representing the drag item's data.", 
                "name": "data"
            }, 
            {
                "descr": "A string of the drag item's type. ", 
                "name": "type"
            }, 
            {
                "descr": "A File object.", 
                "name": "file"
            }, 
            {
                "descr": "If the drag data item is successfully added to the drag item list, a new DataTransferItem object is returned; otherwise null is returned.", 
                "name": "DataTransferItem"
            }
        ], 
        "path": "dom/datatransferitemlist/add", 
        "syntax": "DataTransferItem dataTransferItemList.add(data, type);\n or DataTransferItem dataTransferItemList.add(file);", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItemList.clear": {
        "descr": "The DataTransferItemList.clear() method removes all drag data items from the list.", 
        "name": "DataTransferItemList.clear", 
        "params": [], 
        "path": "dom/datatransferitemlist/clear", 
        "syntax": "void dataTransferItemList.clear();", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItemList.length": {
        "descr": "The DataTransferItemList.length property returns the number of drag data items in the list. If the list has no items, this property returns zero.", 
        "name": "DataTransferItemList.length", 
        "params": [], 
        "path": "dom/datatransferitemlist/length", 
        "syntax": "dataItemList.length; Return value An unsigned long representing the number of drag data items in the list. Example This example shows the use of the length property. <!DOCTYPE html><html lang=en><title>Examples of DataTransferItemList methods and property</title><meta name=\"viewport\" content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style><script>function dragstart_handler(ev) {  console.log(\"dragStart\");\n or   // Add this element's id to the drag payload so the drop handler will  // know which element to add to its tree  var dataList = ev.dataTransfer.items;  dataList.add(ev.target.id, \"text/plain\");\n or   // Add some other items to the drag payload   dataList.add(\"<p>... paragraph ...</p>\", \"text/html\");\n or   dataList.add(\"http://www.example.org\",\"text/uri-list\");\n or }function drop_handler(ev) {  console.log(\"Drop\");\n or   ev.preventDefault();\n or   var data = event.dataTransfer.items;  // Loop through the dropped items and log their data  for (var i = 0; i < data.length; i++) {    if ((data[i].kind == 'string') && (data[i].type.match('^text/plain'))) {      // This item is the target node      data[i].getAsString(function (s){        ev.target.appendChild(document.getElementById(s));\n or        });\n or     } else if ((data[i].kind == 'string') && (data[i].type.match('^text/html'))) {      // Drag data item is HTML      data[i].getAsString(function (s){        console.log(\"... Drop: HTML = \" + s);\n or       });\n or     } else if ((data[i].kind == 'string') && (data[i].type.match('^text/uri-list'))) {      // Drag data item is URI      data[i].getAsString(function (s){        console.log(\"... Drop: URI = \" + s);\n or       });\n or     }  }}function dragover_handler(ev) {  console.log(\"dragOver\");\n or   ev.preventDefault();\n or   // Set the dropEffect to move  ev.dataTransfer.dropEffect = \"move\"}function dragend_handler(ev) {  console.log(\"dragEnd\");\n or   var dataList = ev.dataTransfer.items;  for (var i = 0; i < dataList.length; i++) {    dataList.remove(i);\n or   }  // Clear any remaining drag data  dataList.clear();\n or }</script><body><h1>Example uses of <code>DataTransferItemList</code> methods and property</h1> <div>   <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" ondragend=\"dragend_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "Drag & Drop"
    }, 
    "DataTransferItemList.remove": {
        "descr": "The DataTransferItemList.remove() method removes the drag data item at the specified index from the list. If the index is less than zero or greater than one less than the length of the list, the list will not be changed.", 
        "name": "DataTransferItemList.remove", 
        "params": [
            {
                "descr": "An unsigned long representing the index of the item in the drag data list to remove.", 
                "name": "index"
            }
        ], 
        "path": "dom/datatransferitemlist/remove", 
        "syntax": "void dataTransferItemList.remove(index);", 
        "type": "Drag & Drop"
    }, 
    "DataView": {
        "descr": "The DataView view provides a low-level interface for reading and writing multiple number types in an ArrayBuffer irrespective of the platform's endianness.", 
        "name": "DataView", 
        "params": [
            {
                "descr": "An existing ArrayBuffer to use as the storage for the new DataView object.", 
                "name": "buffer"
            }, 
            {
                "descr": "The offset, in bytes, to the first byte in the specified buffer for the new view to reference. ", 
                "name": "byteOffset Optional"
            }, 
            {
                "descr": "The number of elements in the byte array. ", 
                "name": "byteLength Optional"
            }, 
            {
                "descr": "Thrown if the byteOffset and byteLength result in the specified view extending past the end of the buffer.", 
                "name": "RangeError"
            }, 
            {
                "descr": "The DataView constructor's length property whose value is 3.", 
                "name": "DataView.length"
            }, 
            {
                "descr": "Allows the addition of properties to all DataView objects.", 
                "name": "DataView.prototype"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype. ", 
                "name": "DataView.prototype.constructor"
            }, 
            {
                "descr": "The ArrayBuffer referenced by this view. ", 
                "name": "DataView.prototype.buffer Read only"
            }, 
            {
                "descr": "The length (in bytes) of this view from the start of its ArrayBuffer. ", 
                "name": "DataView.prototype.byteLength Read only"
            }, 
            {
                "descr": "The offset (in bytes) of this view from the start of its ArrayBuffer. ", 
                "name": "DataView.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Gets a signed 8-bit integer (byte) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getInt8()"
            }, 
            {
                "descr": "Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getUint8()"
            }, 
            {
                "descr": "Gets a signed 16-bit integer (short) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getInt16()"
            }, 
            {
                "descr": "Gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getUint16()"
            }, 
            {
                "descr": "Gets a signed 32-bit integer (long) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getInt32()"
            }, 
            {
                "descr": "Gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getUint32()"
            }, 
            {
                "descr": "Gets a signed 32-bit float (float) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getFloat32()"
            }, 
            {
                "descr": "Gets a signed 64-bit float (double) at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.getFloat64()"
            }, 
            {
                "descr": "Stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setInt8()"
            }, 
            {
                "descr": "Stores an unsigned 8-bit integer (unsigned byte) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setUint8()"
            }, 
            {
                "descr": "Stores a signed 16-bit integer (short) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setInt16()"
            }, 
            {
                "descr": "Stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setUint16()"
            }, 
            {
                "descr": "Stores a signed 32-bit integer (long) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setInt32()"
            }, 
            {
                "descr": "Stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setUint32()"
            }, 
            {
                "descr": "Stores a signed 32-bit float (float) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setFloat32()"
            }, 
            {
                "descr": "Stores a signed 64-bit float (double) value at the specified byte offset from the start of the view.", 
                "name": "DataView.prototype.setFloat64()"
            }
        ], 
        "path": "javascript/global_objects/dataview", 
        "syntax": "new DataView(buffer [, byteOffset [, byteLength]])", 
        "type": "DataView"
    }, 
    "Date": {
        "descr": "Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January, 1970 UTC.", 
        "name": "Date", 
        "params": [
            {
                "descr": "Integer value representing the number of milliseconds since 1 January 1970 00:00:00 UTC (Unix Epoch; but consider that most Unix time stamp functions count in seconds).", 
                "name": "value"
            }, 
            {
                "descr": "String value representing a date. ", 
                "name": "dateString"
            }, 
            {
                "descr": "Integer value representing the year. ", 
                "name": "year"
            }, 
            {
                "descr": "Integer value representing the month, beginning with 0 for January to 11 for December.", 
                "name": "month"
            }, 
            {
                "descr": "Optional. Integer value representing the day of the month.", 
                "name": "day"
            }, 
            {
                "descr": "Optional. Integer value representing the hour of the day.", 
                "name": "hour"
            }, 
            {
                "descr": "Optional. Integer value representing the minute segment of a time.", 
                "name": "minute"
            }, 
            {
                "descr": "Optional. Integer value representing the second segment of a time.", 
                "name": "second"
            }, 
            {
                "descr": "Optional. Integer value representing the millisecond segment of a time.", 
                "name": "millisecond"
            }, 
            {
                "descr": "Allows the addition of properties to a JavaScript Date object.", 
                "name": "Date.prototype"
            }, 
            {
                "descr": "The value of Date.length is 7. This is the number of arguments handled by the constructor.", 
                "name": "Date.length"
            }, 
            {
                "descr": "Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.", 
                "name": "Date.now()"
            }, 
            {
                "descr": "Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC. ", 
                "name": "Date.parse()"
            }, 
            {
                "descr": "Accepts the same parameters as the longest form of the constructor (i.e. ", 
                "name": "Date.UTC()"
            }, 
            {
                "descr": "Returns the day of the month (1-31) for the specified date according to local time.", 
                "name": "Date.prototype.getDate()"
            }, 
            {
                "descr": "Returns the day of the week (0-6) for the specified date according to local time.", 
                "name": "Date.prototype.getDay()"
            }, 
            {
                "descr": "Returns the year (4 digits for 4-digit years) of the specified date according to local time.", 
                "name": "Date.prototype.getFullYear()"
            }, 
            {
                "descr": "Returns the hour (0-23) in the specified date according to local time.", 
                "name": "Date.prototype.getHours()"
            }, 
            {
                "descr": "Returns the milliseconds (0-999) in the specified date according to local time.", 
                "name": "Date.prototype.getMilliseconds()"
            }, 
            {
                "descr": "Returns the minutes (0-59) in the specified date according to local time.", 
                "name": "Date.prototype.getMinutes()"
            }, 
            {
                "descr": "Returns the month (0-11) in the specified date according to local time.", 
                "name": "Date.prototype.getMonth()"
            }, 
            {
                "descr": "Returns the seconds (0-59) in the specified date according to local time.", 
                "name": "Date.prototype.getSeconds()"
            }, 
            {
                "descr": "Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).", 
                "name": "Date.prototype.getTime()"
            }, 
            {
                "descr": "Returns the time-zone offset in minutes for the current locale.", 
                "name": "Date.prototype.getTimezoneOffset()"
            }, 
            {
                "descr": "Returns the day (date) of the month (1-31) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCDate()"
            }, 
            {
                "descr": "Returns the day of the week (0-6) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCDay()"
            }, 
            {
                "descr": "Returns the year (4 digits for 4-digit years) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCFullYear()"
            }, 
            {
                "descr": "Returns the hours (0-23) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCHours()"
            }, 
            {
                "descr": "Returns the milliseconds (0-999) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCMilliseconds()"
            }, 
            {
                "descr": "Returns the minutes (0-59) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCMinutes()"
            }, 
            {
                "descr": "Returns the month (0-11) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCMonth()"
            }, 
            {
                "descr": "Returns the seconds (0-59) in the specified date according to universal time.", 
                "name": "Date.prototype.getUTCSeconds()"
            }, 
            {
                "descr": "Returns the year (usually 2-3 digits) in the specified date according to local time. ", 
                "name": "Date.prototype.getYear()"
            }, 
            {
                "descr": "Sets the day of the month for a specified date according to local time.", 
                "name": "Date.prototype.setDate()"
            }, 
            {
                "descr": "Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.", 
                "name": "Date.prototype.setFullYear()"
            }, 
            {
                "descr": "Sets the hours for a specified date according to local time.", 
                "name": "Date.prototype.setHours()"
            }, 
            {
                "descr": "Sets the milliseconds for a specified date according to local time.", 
                "name": "Date.prototype.setMilliseconds()"
            }, 
            {
                "descr": "Sets the minutes for a specified date according to local time.", 
                "name": "Date.prototype.setMinutes()"
            }, 
            {
                "descr": "Sets the month for a specified date according to local time.", 
                "name": "Date.prototype.setMonth()"
            }, 
            {
                "descr": "Sets the seconds for a specified date according to local time.", 
                "name": "Date.prototype.setSeconds()"
            }, 
            {
                "descr": "Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.", 
                "name": "Date.prototype.setTime()"
            }, 
            {
                "descr": "Sets the day of the month for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCDate()"
            }, 
            {
                "descr": "Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCFullYear()"
            }, 
            {
                "descr": "Sets the hour for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCHours()"
            }, 
            {
                "descr": "Sets the milliseconds for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCMilliseconds()"
            }, 
            {
                "descr": "Sets the minutes for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCMinutes()"
            }, 
            {
                "descr": "Sets the month for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCMonth()"
            }, 
            {
                "descr": "Sets the seconds for a specified date according to universal time.", 
                "name": "Date.prototype.setUTCSeconds()"
            }, 
            {
                "descr": "Sets the year (usually 2-3 digits) for a specified date according to local time. ", 
                "name": "Date.prototype.setYear()"
            }, 
            {
                "descr": "Returns the \"date\" portion of the Date as a human-readable string.", 
                "name": "Date.prototype.toDateString()"
            }, 
            {
                "descr": "Converts a date to a string following the ISO 8601 Extended Format.", 
                "name": "Date.prototype.toISOString()"
            }, 
            {
                "descr": "Returns a string representing the Date using toISOString(). ", 
                "name": "Date.prototype.toJSON()"
            }, 
            {
                "descr": "Returns a string representing the Date based on the GMT (UT) time zone. ", 
                "name": "Date.prototype.toGMTString()"
            }, 
            {
                "descr": "Returns a string with a locality sensitive representation of the date portion of this date based on system settings.", 
                "name": "Date.prototype.toLocaleDateString()"
            }, 
            {
                "descr": "Converts a date to a string, using a format string.", 
                "name": "Date.prototype.toLocaleFormat()"
            }, 
            {
                "descr": "Returns a string with a locality sensitive representation of this date. ", 
                "name": "Date.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string with a locality sensitive representation of the time portion of this date based on system settings.", 
                "name": "Date.prototype.toLocaleTimeString()"
            }, 
            {
                "descr": "Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. ", 
                "name": "Date.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified Date object. ", 
                "name": "Date.prototype.toString()"
            }, 
            {
                "descr": "Returns the \"time\" portion of the Date as a human-readable string.", 
                "name": "Date.prototype.toTimeString()"
            }, 
            {
                "descr": "Converts a date to a string using the UTC timezone.", 
                "name": "Date.prototype.toUTCString()"
            }, 
            {
                "descr": "Returns the primitive value of a Date object. ", 
                "name": "Date.prototype.valueOf()"
            }
        ], 
        "path": "javascript/global_objects/date", 
        "syntax": "new Date();\n or new Date(value);\n or new Date(dateString);\n or new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);", 
        "type": "Date"
    }, 
    "Date.UTC": {
        "descr": "The Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.", 
        "name": "Date.UTC", 
        "params": [
            {
                "descr": "A year after 1900.", 
                "name": "year"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the month.", 
                "name": "month"
            }, 
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month.", 
                "name": "day"
            }, 
            {
                "descr": "Optional. An integer between 0 and 23 representing the hours.", 
                "name": "hour"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59 representing the minutes.", 
                "name": "minute"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59 representing the seconds.", 
                "name": "second"
            }, 
            {
                "descr": "Optional. An integer between 0 and 999 representing the milliseconds.", 
                "name": "millisecond"
            }
        ], 
        "path": "javascript/global_objects/date/utc", 
        "syntax": "Date.UTC(year, month[, day[, hour[, minute[, second[, millisecond]]]]])", 
        "type": "Date"
    }, 
    "Date.now": {
        "descr": "The Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.", 
        "name": "Date.now", 
        "params": [], 
        "path": "javascript/global_objects/date/now", 
        "syntax": "var timeInMs = Date.now();", 
        "type": "Date"
    }, 
    "Date.parse": {
        "descr": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognised or, in some cases, contains illegal date values (e.g. 2015-02-31).", 
        "name": "Date.parse", 
        "params": [
            {
                "descr": "A string representing an RFC2822 or ISO 8601 date (other formats may be used, but results may be unexpected).", 
                "name": "dateString"
            }
        ], 
        "path": "javascript/global_objects/date/parse", 
        "syntax": "Date.parse(dateString)", 
        "type": "Date"
    }, 
    "DedicatedWorkerGlobalScope.onmessage": {
        "descr": "The onmessage property of the DedicatedWorkerGlobalScope interface represents an EventHandler to be called when the message event occurs and bubbles through the Worker \u2014 i.e. when a message is sent to the worker using the Worker.postMessage method.", 
        "name": "DedicatedWorkerGlobalScope.onmessage", 
        "params": [], 
        "path": "dom/dedicatedworkerglobalscope/onmessage", 
        "syntax": "self.onmessage = function() { ... };", 
        "type": "Web Workers"
    }, 
    "DedicatedWorkerGlobalScope.postMessage": {
        "descr": "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.", 
        "name": "DedicatedWorkerGlobalScope.postMessage", 
        "params": [
            {
                "descr": "The object to deliver to the main thread; this will be in the data field in the event delivered to the Worker.onmessage handler. ", 
                "name": "aMessage"
            }, 
            {
                "descr": "An optional array of Transferable objects to transfer ownership of. ", 
                "name": "transferList Optional"
            }
        ], 
        "path": "dom/dedicatedworkerglobalscope/postmessage", 
        "syntax": "postMessage(aMessage, transferList);", 
        "type": "Web Workers"
    }, 
    "Default parameters": {
        "descr": "Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.", 
        "name": "Default parameters", 
        "params": [], 
        "path": "javascript/functions/default_parameters", 
        "syntax": "function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) {   statements}", 
        "type": "Function"
    }, 
    "DelayNode.delayTime": {
        "descr": "The delayTime property of the DelayNode interface is an a-rate AudioParam representing the amount of delay to apply.", 
        "name": "DelayNode.delayTime", 
        "params": [], 
        "path": "dom/delaynode/delaytime", 
        "syntax": "var audioCtx = new AudioContext();\n or var myDelay = audioCtx.createDelay(5.0);\n or myDelay.delayTime.value = 3.0;);", 
        "type": "Web Audio"
    }, 
    "Descendant selector (\"ancestor descendant\"": {
        "descr": "A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.", 
        "name": "Descendant selector (\"ancestor descendant\"", 
        "params": [], 
        "path": "jquery/descendant-selector", 
        "syntax": "descendant selector  Description: Selects all elements that are descendants of a given ancestor.   version added: 1.0jQuery( \"ancestor descendant\" ) ancestor: Any valid selector.", 
        "type": "Selectors"
    }, 
    "Destructuring assignment": {
        "descr": "The destructuring assignment syntax is a JavaScript expression that makes it possible to extract data from arrays or objects into distinct variables.", 
        "name": "Destructuring assignment", 
        "params": [], 
        "path": "javascript/operators/destructuring_assignment", 
        "syntax": "var a, b, rest;[a, b] = [1, 2];console.log(a);\n or  // 1console.log(b);\n or  // 2[a, b, ...rest] = [1, 2, 3, 4, 5]console.log(a);\n or  // 1console.log(b);\n or  // 2console.log(rest);\n or  // [3, 4, 5]({a, b} = {a:1, b:2})console.log(a);\n or  // 1console.log(b);\n or  // 2({a, b, ...rest} = {a:1, b:2, c:3, d:4});\n or  // ES7 - not implemented in Firefox 47a01);", 
        "type": "Operators"
    }, 
    "DeviceLightEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceLightEvent", 
        "params": [
            {
                "descr": "The level of the ambient light in lux.", 
                "name": "DeviceLightEvent.value"
            }
        ], 
        "path": "dom/devicelightevent", 
        "syntax": "DeviceLightEvent provides web developers with information from photo sensors or similiar detectors about ambient light levels near the device. For example this may be useful to adjust the screen's brightness based on the current ambient light level in order to save energy or provide better readability. Properties  DeviceLightEvent.value The level of the ambient light in lux.  Example window.addEventListener('devicelight', function(event) {  console.log(event.value);\n or });", 
        "type": "Events"
    }, 
    "DeviceLightEvent.value": {
        "descr": "The value property provides the current level of the ambient light.", 
        "name": "DeviceLightEvent.value", 
        "params": [], 
        "path": "dom/devicelightevent/value", 
        "syntax": "var light = instanceOfDeviceLightEvent.value; Value A positive number representing a light intensity expressed in lux. Specifications    Specification Status Comment     Ambient Light EventsThe definition of 'Ambient Light Events' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 22.0 (22.0)[1] Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0)[1] Not supported Not supported Not supported     [1] The devicelight", 
        "type": "Events"
    }, 
    "DeviceMotionEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceMotionEvent", 
        "params": [
            {
                "descr": "An object giving the acceleration of the device on the three axis X, Y and Z. ", 
                "name": "DeviceMotionEvent.acceleration Read only"
            }, 
            {
                "descr": "An object giving the acceleration of the device on the three axis X, Y and Z with the effect of gravity. ", 
                "name": "DeviceMotionEvent.accelerationIncludingGravity Read only"
            }, 
            {
                "descr": "An object giving the rate of change of the device's orientation on the three orientation axis alpha, beta and gamma. ", 
                "name": "DeviceMotionEvent.rotationRate Read only"
            }, 
            {
                "descr": "A number representing the interval of time, in milliseconds, at which data is obtained from the device.", 
                "name": "DeviceMotionEvent.interval Read only"
            }
        ], 
        "path": "dom/devicemotionevent", 
        "syntax": "DeviceMotionEvent provides web developers with information about the speed of changes for the device's position and orientation.  Warning: Currently, Firefox and Chrome does not handle the coordinates the same way. Take care about this while using them.  Properties  DeviceMotionEvent.acceleration", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.acceleration": {
        "descr": "The acceleration property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2).", 
        "name": "DeviceMotionEvent.acceleration", 
        "params": [
            {
                "descr": "Represents the acceleration upon the x axis which is the west to east axis", 
                "name": "x"
            }, 
            {
                "descr": "Represents the acceleration upon the y axis which is the south to north axis", 
                "name": "y"
            }, 
            {
                "descr": "Represents the acceleration upon the z axis which is the down to up axis", 
                "name": "z"
            }
        ], 
        "path": "dom/devicemotionevent/acceleration", 
        "syntax": "var acceleration = instanceOfDeviceMotionEvent.acceleration; Value The acceleration property is an object providing information about acceleration on three axis. Each axis is represented with its own property:  x Represents the acceleration upon the x axis which is the west to east axis y Represents the acceleration upon the y axis which is the south to north axis z Represents the acceleration upon the z axis which is the down to up axis  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) 6 (6) ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 6.0 (6) Not supported Not supported 4.2     See also", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.accelerationIncludingGravity": {
        "descr": "The accelerationIncludingGravity property returns the amount of acceleration recorded by the device, in meters per second squared (m/s2). Unlike DeviceMotionEvent.acceleration which compensates for the influence of gravity, its value is the sum of the acceleration of the device as induced by the user and the acceleration caused by gravity.", 
        "name": "DeviceMotionEvent.accelerationIncludingGravity", 
        "params": [
            {
                "descr": "Represents the acceleration upon the x axis which is the west to east axis", 
                "name": "x"
            }, 
            {
                "descr": "Represents the acceleration upon the y axis which is the south to north axis", 
                "name": "y"
            }, 
            {
                "descr": "Represents the acceleration upon the z axis which is the down to up axis", 
                "name": "z"
            }
        ], 
        "path": "dom/devicemotionevent/accelerationincludinggravity", 
        "syntax": "var acceleration = instanceOfDeviceMotionEvent.accelerationIncludingGravity; Value The accelerationIncludingGravity property is an object providing information about acceleration on three axis. Each axis is represented with its own property:  x Represents the acceleration upon the x axis which is the west to east axis y Represents the acceleration upon the y axis which is the south to north axis z Represents the acceleration upon the z axis which is the down to up axis  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) 6 (6) ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 6.0 (6) Not supported Not supported 4.2     See also", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.interval": {
        "descr": "Returns the interval, in milliseconds, at which data is obtained from the underlaying hardware. You can use this to determine the granularity of motion events.", 
        "name": "DeviceMotionEvent.interval", 
        "params": [], 
        "path": "dom/devicemotionevent/interval", 
        "syntax": "var interval = instanceOfDeviceMotionEvent.interval; Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) 6 (6) ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 6.0 (6) Not supported Not supported 4.2     See also", 
        "type": "Device Orientation"
    }, 
    "DeviceMotionEvent.rotationRate": {
        "descr": "Returns the rate at which the device is rotating around each of its axes in degrees per second.", 
        "name": "DeviceMotionEvent.rotationRate", 
        "params": [
            {
                "descr": "The rate at which the device is rotating about its Z axis; that is, being twisted about a line perpendicular to the screen.", 
                "name": "alpha"
            }, 
            {
                "descr": "The rate at which the device is rotating about its X axis; that is, front to back.", 
                "name": "beta"
            }, 
            {
                "descr": "The rate at which the device is rotating about its Y axis; that is, side to side.", 
                "name": "gamma"
            }
        ], 
        "path": "dom/devicemotionevent/rotationrate", 
        "syntax": "var rates = instanceOfDeviceMotionEvent.rotationRate; Value The rotationRates property is a read only object describing the rotation rates of the device around each of its axes:  alpha The rate at which the device is rotating about its Z axis; that is, being twisted about a line perpendicular to the screen. beta The rate at which the device is rotating about its X axis; that is, front to back. gamma The rate at which the device is rotating about its Y axis; that is, side to side.  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) 6 (6) ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 6.0 (6) Not supported Not supported 4.2     See also", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DeviceOrientationEvent", 
        "params": [
            {
                "descr": "A boolean that indicates whether or not the device is providing orientation data absolutely.", 
                "name": "DeviceOrientationEvent.absolute Read only"
            }, 
            {
                "descr": "A number representing the motion of the device around the z axis, express in degrees with values ranging from 0 to 360", 
                "name": "DeviceOrientationEvent.alpha Read only"
            }, 
            {
                "descr": "A number representing the motion of the device around the x axis, express in degrees with values ranging from -180 to 180. ", 
                "name": "DeviceOrientationEvent.beta Read only"
            }, 
            {
                "descr": "A number representing the motion of the device around the y axis, express in degrees with values ranging from -90 to 90. ", 
                "name": "DeviceOrientationEvent.gamma Read only"
            }
        ], 
        "path": "dom/deviceorientationevent", 
        "syntax": "DeviceOrientationEvent provides web developers with information from the physical orientation of the device running the web page.  Warning: Currently, Firefox and Chrome does not handle the coordinates the same way. Take care about this while using them.  Properties  DeviceOrientationEvent.absolute", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.absolute": {
        "descr": "Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.absolute", 
        "params": [], 
        "path": "dom/deviceorientationevent/absolute", 
        "syntax": "var absolute = instanceOfDeviceOrientationEvent.absolute; On return, absolute is true if the orientation data in instanceOfDeviceOrientationEvent is provided as the difference between the Earth's coordinate frame and the device's coordinate frame, or false if the orientation data is being provided in reference to some arbitrary, device-determined coordinate frame. Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 7.0 6 [1] ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3.0 6 [1] Not supported Not supported 4.2     [1] Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.alpha": {
        "descr": "Returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.alpha", 
        "params": [], 
        "path": "dom/deviceorientationevent/alpha", 
        "syntax": "var alpha = instanceOfDeviceOrientationEvent.alpha; Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 7.0 6 [1] ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3.0 6 [1] Not supported Not supported 4.2     [1] Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.beta": {
        "descr": "Returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180, by which the device is tipped forward or backward. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.beta", 
        "params": [], 
        "path": "dom/deviceorientationevent/beta", 
        "syntax": "var beta = instanceOfDeviceOrientationEvent.beta; Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 7.0 6 [1] ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3.0 6 [1] Not supported Not supported 4.2     [1] Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceOrientationEvent.gamma": {
        "descr": "Returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between -90 and 90, by which the device is turned left or right. See Orientation and motion data explained for details.", 
        "name": "DeviceOrientationEvent.gamma", 
        "params": [], 
        "path": "dom/deviceorientationevent/gamma", 
        "syntax": "var gamma = orientationEvent.gamma; Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 7.0 6 [1] ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3.0 6 [1] Not supported Not supported 4.2     [1] Firefox 3.6, 4, and 5 supported mozOrientation instead of the standard DeviceOrientationEvent", 
        "type": "Device Orientation"
    }, 
    "DeviceProximityEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceProximityEvent", 
        "params": [
            {
                "descr": "The maximum sensing distance the sensor is able to report, in centimeters.", 
                "name": "DeviceProximityEvent.max Read only"
            }, 
            {
                "descr": "The minimum sensing distance the sensor is able to report, in centimeters. ", 
                "name": "DeviceProximityEvent.min Read only"
            }, 
            {
                "descr": "The current device proximity, in centimeters.", 
                "name": "DeviceProximityEvent.value Read only"
            }
        ], 
        "path": "dom/deviceproximityevent", 
        "syntax": "DeviceProximityEvent interface provides information about the distance of a nearby physical object using the proximity sensor of a device. Properties  DeviceProximityEvent.max Read only  The maximum sensing distance the sensor is able to report, in centimeters. DeviceProximityEvent.min Read only  The minimum sensing distance the sensor is able to report, in centimeters. Ususally zero. DeviceProximityEvent.value Read only  The current device proximity, in centimeters.  Examples window.addEventListener('deviceproximity', function(event) {\u00a0 console.log(\"value: \" + event.value, \"max: \" + event.max, \"min: \" + event.min);\n or });", 
        "type": "Events"
    }, 
    "DeviceProximityEvent.max": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceProximityEvent.max", 
        "params": [], 
        "path": "dom/deviceproximityevent/max", 
        "syntax": "max property provides the maximum sensing distance the sensor is able to report, in centimeters. Syntax var value = instanceOfDeviceProximityEvent.max; Value A positive number indicating the maximum distance, in centimeters (cm), that the device's proximity sensor is able to detect and report.", 
        "type": "Events"
    }, 
    "DeviceProximityEvent.min": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceProximityEvent.min", 
        "params": [], 
        "path": "dom/deviceproximityevent/min", 
        "syntax": "min property provides the minimum distance the sensor can report, in centimeters. Syntax var value = instanceOfDeviceProximityEvent.min; Value A positive number indicating the minimum distance, in centimeters (cm), the device's proximity sensor can report.", 
        "type": "Events"
    }, 
    "DeviceProximityEvent.value": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceProximityEvent.value", 
        "params": [], 
        "path": "dom/deviceproximityevent/value", 
        "syntax": "value property of DeviceProximityEvent objects provides the current distance between the device and the detected object, in centimeters. Syntax var distance = instanceOfDeviceProximityEvent.value; Value A positive number representing a distance in centimeters (cm) between the device's proximity sensor and the detected object.", 
        "type": "Events"
    }, 
    "DeviceRotationRate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DeviceRotationRate", 
        "params": [
            {
                "descr": "The amount of rotation around the Z axis, in degrees per second.", 
                "name": "DeviceRotationRate.alpha Read only"
            }, 
            {
                "descr": "The amount of rotation around the X axis, in degrees per second.", 
                "name": "DeviceRotationRate.beta Read only"
            }, 
            {
                "descr": "The amount of rotation around the Y axis, in degrees per second.", 
                "name": "DeviceRotationRate.gamma Read only"
            }
        ], 
        "path": "dom/devicerotationrate", 
        "syntax": "DeviceRotationRate object provides information about the rate at which the device is rotating around all three axes. Properties  DeviceRotationRate.alpha Read only  The amount of rotation around the Z axis, in degrees per second. DeviceRotationRate.beta Read only  The amount of rotation around the X axis, in degrees per second. DeviceRotationRate.gamma Read only  The amount of rotation around the Y axis, in degrees per second.  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?          Edit this page on MDN", 
        "type": "Device Orientation"
    }, 
    "DeviceRotationRate.alpha": {
        "descr": "This property indicates the rate of rotation around the Z axis -- in degrees per second -- in a DeviceRotationRate object.", 
        "name": "DeviceRotationRate.alpha", 
        "params": [
            {
                "descr": "A double indicating the rate of rotation around the Z axis, in degrees per second. ", 
                "name": "alpha"
            }
        ], 
        "path": "dom/devicerotationrate/alpha", 
        "syntax": "var alpha = deviceRotationRate.alpha; This property is read-only. Return value  alpha A double indicating the rate of rotation around the Z axis, in degrees per second. See Accelerometer values explained for details.  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?          Edit this page on MDN", 
        "type": "Device Orientation"
    }, 
    "DeviceRotationRate.beta": {
        "descr": "This property indicates the rate of rotation around the X axis -- in degrees per second -- in a DeviceRotationRate object.", 
        "name": "DeviceRotationRate.beta", 
        "params": [
            {
                "descr": "A double indicating the rate of rotation around the X axis, in degrees per second. ", 
                "name": "beta"
            }
        ], 
        "path": "dom/devicerotationrate/beta", 
        "syntax": "var beta = deviceRotationRate.beta; This property is read-only. Return value  beta A double indicating the rate of rotation around the X axis, in degrees per second. See Accelerometer values explained for details.  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?          Edit this page on MDN", 
        "type": "Device Orientation"
    }, 
    "DeviceRotationRate.gamma": {
        "descr": "This property indicates the rate of rotation around the Y axis -- in degrees per second -- in a DeviceRotationRate object.", 
        "name": "DeviceRotationRate.gamma", 
        "params": [
            {
                "descr": "A double indicating the rate of rotation around the Y axis, in degrees per second. ", 
                "name": "gamma"
            }
        ], 
        "path": "dom/devicerotationrate/gamma", 
        "syntax": "var gamma = deviceRotationRate.gamma; This property is read-only. Return value  gamma A double indicating the rate of rotation around the Y axis, in degrees per second. See Accelerometer values explained for details.  Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? ? ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?          Edit this page on MDN", 
        "type": "Device Orientation"
    }, 
    "Document": {
        "descr": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. The DOM tree includes elements such as <body> and <table>, among many others. It provides functionality global to the document, like how to obtain the page's URL and create new elements in the document.", 
        "name": "Document", 
        "params": [
            {
                "descr": "Provides access to all elements with an id. ", 
                "name": "Document.all"
            }, 
            {
                "descr": "Used with Document.load to indicate an asynchronous request.", 
                "name": "Document.async"
            }, 
            {
                "descr": "Returns the character set being used by the document.", 
                "name": "Document.characterSet Read only"
            }, 
            {
                "descr": "Alias of Document.characterSet. ", 
                "name": "Document.charset Read only"
            }, 
            {
                "descr": "Indicates whether the document is rendered in quirks or strict mode.", 
                "name": "Document.compatMode Read only"
            }, 
            {
                "descr": "Returns the Content-Type from the MIME Header of the current document.", 
                "name": "Document.contentType Read only"
            }, 
            {
                "descr": "Returns the Document Type Definition (DTD) of the current document.", 
                "name": "Document.doctype Read only"
            }, 
            {
                "descr": "Returns the Element that is a direct child of the document. ", 
                "name": "Document.documentElement Read only"
            }, 
            {
                "descr": "Returns the document location as a string.", 
                "name": "Document.documentURI Read only"
            }, 
            {
                "descr": "Should return a DOMConfiguration object.", 
                "name": "Document.domConfig"
            }, 
            {
                "descr": "true when the document is in full-screen mode.", 
                "name": "Document.fullscreen"
            }, 
            {
                "descr": "\u2026", 
                "name": "Document.hidden Read only"
            }, 
            {
                "descr": "Returns the DOM implementation associated with the current document.", 
                "name": "Document.implementation Read only"
            }, 
            {
                "descr": "Alias of Document.characterSet. ", 
                "name": "Document.inputEncoding Read only"
            }, 
            {
                "descr": "Returns the name of the style sheet set that was last enabled. ", 
                "name": "Document.lastStyleSheetSet Read only"
            }, 
            {
                "descr": "Returns a Boolean that is true only if this document is synthetic, such as a standalone image, video, audio file, or the like.", 
                "name": "Document.mozSyntheticDocument"
            }, 
            {
                "descr": "The element that's currently in full screen mode for this document.", 
                "name": "Document.mozFullScreenElement Read only"
            }, 
            {
                "descr": "true if calling Element.mozRequestFullscreen() would succeed in the curent document.", 
                "name": "Document.mozFullScreenEnabled Read only"
            }, 
            {
                "descr": "Returns the element set as the target for mouse events while the pointer is locked. ", 
                "name": "Document.pointerLockElement Read only"
            }, 
            {
                "descr": "Returns the preferred style sheet set as specified by the page author.", 
                "name": "Document.preferredStyleSheetSet Read only"
            }, 
            {
                "descr": "Returns a reference to the Element that scrolls the document.", 
                "name": "Document.scrollingElement  Read only"
            }, 
            {
                "descr": "Returns which style sheet set is currently in use.", 
                "name": "Document.selectedStyleSheetSet"
            }, 
            {
                "descr": "Returns a list of the style sheet objects on the current document.", 
                "name": "Document.styleSheets Read only"
            }, 
            {
                "descr": "Returns a list of the style sheet sets available on the document.", 
                "name": "Document.styleSheetSets Read only"
            }, 
            {
                "descr": "\u2026", 
                "name": "Document.timeline Read only"
            }, 
            {
                "descr": "\u2026", 
                "name": "Document.undoManager Read only"
            }, 
            {
                "descr": "Returns ...", 
                "name": "Document.URL Read only"
            }, 
            {
                "descr": "Returns a string denoting the visibility state of the document. ", 
                "name": "Document.visibilityState Read only"
            }, 
            {
                "descr": "Returns the encoding as determined by the XML declaration.", 
                "name": "Document.xmlEncoding"
            }, 
            {
                "descr": "Returns true if the XML declaration specifies the document to be standalone (e.g., An external part of the DTD affects the document's content), else false.", 
                "name": "Document.xmlStandalone Obsolete since Gecko 10.0"
            }, 
            {
                "descr": "Returns the version number as specified in the XML declaration or \"1.0\" if the declaration is absent.", 
                "name": "Document.xmlVersion Obsolete since Gecko 10.0"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all objects of type Element that are children of this ParentNode.", 
                "name": "ParentNode.children  Read only"
            }, 
            {
                "descr": "Returns the Element that is the first child of this ParentNode, or null if there is none.", 
                "name": "ParentNode.firstElementChild  Read only"
            }, 
            {
                "descr": "Returns the Element that is the last child of this ParentNode, or null if there is none.", 
                "name": "ParentNode.lastElementChild  Read only"
            }, 
            {
                "descr": "Returns an unsigned long giving the amount of children that the object has.", 
                "name": "ParentNode.childElementCount  Read only"
            }, 
            {
                "descr": "Returns the currently focused element.", 
                "name": "Document.activeElement Read only"
            }, 
            {
                "descr": "Returns or sets the color of active links in the document body.", 
                "name": "Document.alinkColor"
            }, 
            {
                "descr": "Returns a list of all of the anchors in the document.", 
                "name": "Document.anchors"
            }, 
            {
                "descr": "Returns an ordered list of the applets within a document.", 
                "name": "Document.applets"
            }, 
            {
                "descr": "Gets/sets the background color of the current document.", 
                "name": "Document.bgColor"
            }, 
            {
                "descr": "Returns the <body> element of the current document.", 
                "name": "Document.body"
            }, 
            {
                "descr": "Returns a semicolon-separated list of the cookies for that document or sets a single cookie.", 
                "name": "Document.cookie"
            }, 
            {
                "descr": "Returns a reference to the window object.", 
                "name": "Document.defaultView Read only"
            }, 
            {
                "descr": "Gets/sets the ability to edit the whole document.", 
                "name": "Document.designMode"
            }, 
            {
                "descr": "Gets/sets directionality (rtl/ltr) of the document.", 
                "name": "Document.dir Read only"
            }, 
            {
                "descr": "Returns the domain of the current document.", 
                "name": "Document.domain Read only"
            }, 
            {
                "descr": "Returns a list of the embedded <embed> elements within the current document.", 
                "name": "Document.embeds Read only"
            }, 
            {
                "descr": "Gets/sets the foreground color, or text color, of the current document.", 
                "name": "document.fgColor"
            }, 
            {
                "descr": "Returns a list of the <form> elements within the current document.", 
                "name": "Document.forms Read only"
            }, 
            {
                "descr": "Returns the <head> element of the current document.", 
                "name": "Document.head Read only"
            }, 
            {
                "descr": "Gets/sets the height of the current document.", 
                "name": "Document.height"
            }, 
            {
                "descr": "Returns a list of the images in the current document.", 
                "name": "Document.images Read only"
            }, 
            {
                "descr": "Returns the date on which the document was last modified.", 
                "name": "Document.lastModified Read only"
            }, 
            {
                "descr": "Gets/sets the color of hyperlinks in the document.", 
                "name": "Document.linkColor"
            }, 
            {
                "descr": "Returns a list of all the hyperlinks in the document.", 
                "name": "Document.links Read only"
            }, 
            {
                "descr": "Returns the URI of the current document.", 
                "name": "Document.location Read only"
            }, 
            {
                "descr": "Returns a list of the available plugins.", 
                "name": "Document.plugins Read only"
            }, 
            {
                "descr": "Returns loading status of the document.", 
                "name": "Document.readyState Read only"
            }, 
            {
                "descr": "Returns the URI of the page that linked to this page.", 
                "name": "Document.referrer Read only"
            }, 
            {
                "descr": "Returns all the <script> elements on the document.", 
                "name": "Document.scripts Read only"
            }, 
            {
                "descr": "Sets or gets title of the current document.", 
                "name": "Document.title"
            }, 
            {
                "descr": "Returns the document location as a string.", 
                "name": "Document.URL Read only"
            }, 
            {
                "descr": "Gets/sets the color of visited hyperlinks.", 
                "name": "Document.vlinkColor"
            }, 
            {
                "descr": "Returns the width of the current document.", 
                "name": "Document.width"
            }, 
            {
                "descr": "Represents the event handling code for the afterscriptexecute event.", 
                "name": "Document.onafterscriptexecute"
            }, 
            {
                "descr": "Represents the event handling code for the beforescriptexecute event.", 
                "name": "Document.onbeforescriptexecute"
            }, 
            {
                "descr": "Represents the event handling code for the copy event.", 
                "name": "Document.oncopy"
            }, 
            {
                "descr": "Represents the event handling code for the cut event.", 
                "name": "Document.oncut"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the fullscreenchange event is raised.", 
                "name": "Document.onfullscreenchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the fullscreenerror event is raised.", 
                "name": "Document.onfullscreenerror"
            }, 
            {
                "descr": "Represents the event handling code for the paste event.", 
                "name": "Document.onpaste"
            }, 
            {
                "descr": "Represents the event handling code for the pointerlockchange event.", 
                "name": "Document.onpointerlockchange"
            }, 
            {
                "descr": "Represetnts the event handling code for the pointerlockerror event.", 
                "name": "Document.onpointerlockerror"
            }, 
            {
                "descr": "Represents the event handling code for the readystatechange event.", 
                "name": "Document.onreadystatechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised.", 
                "name": "Document.onselectionchange"
            }, 
            {
                "descr": "Represents the event handling code for the wheel event.", 
                "name": "Document.onwheel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the abort event is raised.", 
                "name": "GlobalEventHandlers.onabort"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the blur event is raised.", 
                "name": "GlobalEventHandlers.onblur"
            }, 
            {
                "descr": "Is an OnErrorEventHandler representing the code to be called when the error event is raised.", 
                "name": "GlobalEventHandlers.onerror"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the focus event is raised.", 
                "name": "GlobalEventHandlers.onfocus"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the cancel event is raised.", 
                "name": "GlobalEventHandlers.oncancel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the canplay event is raised.", 
                "name": "GlobalEventHandlers.oncanplay"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the canplaythrough event is raised.", 
                "name": "GlobalEventHandlers.oncanplaythrough"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the change event is raised.", 
                "name": "GlobalEventHandlers.onchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the click event is raised.", 
                "name": "GlobalEventHandlers.onclick"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the close event is raised.", 
                "name": "GlobalEventHandlers.onclose"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the contextmenu event is raised.", 
                "name": "GlobalEventHandlers.oncontextmenu"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the cuechange event is raised.", 
                "name": "GlobalEventHandlers.oncuechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dblclick event is raised.", 
                "name": "GlobalEventHandlers.ondblclick"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the drag event is raised.", 
                "name": "GlobalEventHandlers.ondrag"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragend event is raised.", 
                "name": "GlobalEventHandlers.ondragend"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragenter event is raised.", 
                "name": "GlobalEventHandlers.ondragenter"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragexit event is raised.", 
                "name": "GlobalEventHandlers.ondragexit"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragleave event is raised.", 
                "name": "GlobalEventHandlers.ondragleave"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragover event is raised.", 
                "name": "GlobalEventHandlers.ondragover"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the dragstart event is raised.", 
                "name": "GlobalEventHandlers.ondragstart"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the drop event is raised.", 
                "name": "GlobalEventHandlers.ondrop"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the durationchange event is raised.", 
                "name": "GlobalEventHandlers.ondurationchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the emptied event is raised.", 
                "name": "GlobalEventHandlers.onemptied"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the ended event is raised.", 
                "name": "GlobalEventHandlers.onended"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the input event is raised.", 
                "name": "GlobalEventHandlers.oninput"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the invalid event is raised.", 
                "name": "GlobalEventHandlers.oninvalid"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the keydown event is raised.", 
                "name": "GlobalEventHandlers.onkeydown"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the keypress event is raised.", 
                "name": "GlobalEventHandlers.onkeypress"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the keyup event is raised.", 
                "name": "GlobalEventHandlers.onkeyup"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the load event is raised.", 
                "name": "GlobalEventHandlers.onload"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the loadeddata event is raised.", 
                "name": "GlobalEventHandlers.onloadeddata"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the loadedmetadata event is raised.", 
                "name": "GlobalEventHandlers.onloadedmetadata"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the loadstart event is raised.", 
                "name": "GlobalEventHandlers.onloadstart"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mousedown event is raised.", 
                "name": "GlobalEventHandlers.onmousedown"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseenter event is raised.", 
                "name": "GlobalEventHandlers.onmouseenter"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseleave event is raised.", 
                "name": "GlobalEventHandlers.onmouseleave"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mousemove event is raised.", 
                "name": "GlobalEventHandlers.onmousemove"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseout event is raised.", 
                "name": "GlobalEventHandlers.onmouseout"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseover event is raised.", 
                "name": "GlobalEventHandlers.onmouseover"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mouseup event is raised.", 
                "name": "GlobalEventHandlers.onmouseup"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the mousewheel event is raised.", 
                "name": "GlobalEventHandlers.onmousewheel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pause event is raised.", 
                "name": "GlobalEventHandlers.onpause"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the play event is raised.", 
                "name": "GlobalEventHandlers.onplay"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the playing event is raised.", 
                "name": "GlobalEventHandlers.onplaying"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerdown event is raised.", 
                "name": "GlobalEventHandlers.onpointerdown"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointermove event is raised.", 
                "name": "GlobalEventHandlers.onpointermove"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerup event is raised.", 
                "name": "GlobalEventHandlers.onpointerup"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointercancel event is raised.", 
                "name": "GlobalEventHandlers.onpointercancel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerover event is raised.", 
                "name": "GlobalEventHandlers.onpointerover"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerout event is raised.", 
                "name": "GlobalEventHandlers.onpointerout"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerevent event is raised.", 
                "name": "GlobalEventHandlers.onpointerenter"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerleave event is raised.", 
                "name": "GlobalEventHandlers.onpointerleave"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerlockchange event is raised.", 
                "name": "GlobalEventHandlers.onpointerlockchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pointerlockerror event is raised.", 
                "name": "GlobalEventHandlers.onpointerlockerror"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the progress event is raised.", 
                "name": "GlobalEventHandlers.onprogress"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the ratechange event is raised.", 
                "name": "GlobalEventHandlers.onratechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the reset event is raised.", 
                "name": "GlobalEventHandlers.onreset"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the scroll event is raised.", 
                "name": "GlobalEventHandlers.onscroll"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the seeked event is raised.", 
                "name": "GlobalEventHandlers.onseeked"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the seeking event is raised.", 
                "name": "GlobalEventHandlers.onseeking"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the select event is raised.", 
                "name": "GlobalEventHandlers.onselect"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised.", 
                "name": "GlobalEventHandlers.onselectionchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the show event is raised.", 
                "name": "GlobalEventHandlers.onshow"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the sort event is raised.", 
                "name": "GlobalEventHandlers.onsort"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the stalled event is raised.", 
                "name": "GlobalEventHandlers.onstalled"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the submit event is raised.", 
                "name": "GlobalEventHandlers.onsubmit"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the suspend event is raised.", 
                "name": "GlobalEventHandlers.onsuspend"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the timeupdate event is raised.", 
                "name": "GlobalEventHandlers.ontimeupdate"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the volumechange event is raised.", 
                "name": "GlobalEventHandlers.onvolumechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the touchcancel event is raised.", 
                "name": "GlobalEventHandlers.ontouchcancel"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the touchend event is raised.", 
                "name": "GlobalEventHandlers.ontouchend"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the touchmove event is raised.", 
                "name": "GlobalEventHandlers.ontouchmove"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the touchstart event is raised.", 
                "name": "GlobalEventHandlers.ontouchstart"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the waiting event is raised.", 
                "name": "GlobalEventHandlers.onwaiting"
            }, 
            {
                "descr": "Adopt node from an external document.", 
                "name": "Document.adoptNode()"
            }, 
            {
                "descr": "See Window.captureEvents.", 
                "name": "Document.captureEvents()"
            }, 
            {
                "descr": "Gets the CaretPosition at or near the specified coordinates.", 
                "name": "Document.caretPositionFromPoint()"
            }, 
            {
                "descr": "Gets a Range object for the document fragment under the specified coordinates.", 
                "name": "Document.caretRangeFromPoint()"
            }, 
            {
                "descr": "Creates a new Attr object and returns it.", 
                "name": "Document.createAttribute()"
            }, 
            {
                "descr": "Creates a new attribute node in a given namespace and returns it.", 
                "name": "Document.createAttributeNS()"
            }, 
            {
                "descr": "Creates a new CDATA node and returns it.", 
                "name": "Document.createCDATASection()"
            }, 
            {
                "descr": "Creates a new comment node and returns it.", 
                "name": "Document.createComment()"
            }, 
            {
                "descr": "Creates a new document fragment.", 
                "name": "Document.createDocumentFragment()"
            }, 
            {
                "descr": "Creates a new element with the given tag name.", 
                "name": "Document.createElement()"
            }, 
            {
                "descr": "Creates a new element with the given tag name and namespace URI.", 
                "name": "Document.createElementNS()"
            }, 
            {
                "descr": "Creates a new entity reference object and returns it.", 
                "name": "Document.createEntityReference()"
            }, 
            {
                "descr": "Creates an event object.", 
                "name": "Document.createEvent()"
            }, 
            {
                "descr": "Creates a NodeIterator object.", 
                "name": "Document.createNodeIterator()"
            }, 
            {
                "descr": "Creates a new ProcessingInstruction object.", 
                "name": "Document.createProcessingInstruction()"
            }, 
            {
                "descr": "Creates a Range object.", 
                "name": "Document.createRange()"
            }, 
            {
                "descr": "Creates a text node.", 
                "name": "Document.createTextNode()"
            }, 
            {
                "descr": "Creates a Touch object.", 
                "name": "Document.createTouch()"
            }, 
            {
                "descr": "Creates a TouchList object.", 
                "name": "Document.createTouchList()"
            }, 
            {
                "descr": "Creates a TreeWalker object.", 
                "name": "Document.createTreeWalker()"
            }, 
            {
                "descr": "Returns the topmost element at the specified coordinates.", 
                "name": "Document.elementFromPoint()"
            }, 
            {
                "descr": "Returns an array of all elements at the specified coordinates.", 
                "name": "Document.elementsFromPoint()"
            }, 
            {
                "descr": "Enables the style sheets for the specified style sheet set.", 
                "name": "Document.enableStyleSheetsForSet()"
            }, 
            {
                "descr": "Release the pointer lock.", 
                "name": "Document.exitPointerLock()"
            }, 
            {
                "descr": "Returns an array of all Animation objects currently in effect whose target elements are descendants of the document.", 
                "name": "Document.getAnimations()"
            }, 
            {
                "descr": "Returns a list of elements with the given class name.", 
                "name": "Document.getElementsByClassName()"
            }, 
            {
                "descr": "Returns a list of elements with the given tag name.", 
                "name": "Document.getElementsByTagName()"
            }, 
            {
                "descr": "Returns a list of elements with the given tag name and namespace.", 
                "name": "Document.getElementsByTagNameNS()"
            }, 
            {
                "descr": "Returns a clone of a node from an external document.", 
                "name": "Document.importNode()"
            }, 
            {
                "descr": "Replaces entities, normalizes text nodes, etc.", 
                "name": "Document.normalizeDocument()"
            }, 
            {
                "descr": "Registers a web component.", 
                "name": "Document.registerElement()"
            }, 
            {
                "descr": "Releases the current mouse capture if it's on an element in this document.", 
                "name": "Document.releaseCapture()"
            }, 
            {
                "descr": "See Window.releaseEvents().", 
                "name": "Document.releaseEvents()"
            }, 
            {
                "descr": "See Window.routeEvent().", 
                "name": "Document.routeEvent()  Obsolete since Gecko 24"
            }, 
            {
                "descr": "Allows you to change the element being used as the background image for a specified element ID.", 
                "name": "Document.mozSetImageElement()"
            }, 
            {
                "descr": "Returns an object reference to the identified element.", 
                "name": "document.getElementById(String id)"
            }, 
            {
                "descr": "Returns the first Element node within the document, in document order, that matches the specified selectors.", 
                "name": "document.querySelector(String selector)"
            }, 
            {
                "descr": "Returns a list of all the Element nodes within the document that match the specified selectors.", 
                "name": "document.querySelectorAll(String selector)"
            }, 
            {
                "descr": "Compiles an XPathExpression which can then be used for (repeated) evaluations.", 
                "name": "document.createExpression(String expression, XPathNSResolver resolver)"
            }, 
            {
                "descr": "Creates an XPathNSResolver object.", 
                "name": "document.createNSResolver(Node resolver)"
            }, 
            {
                "descr": "Evaluates an XPath expression.", 
                "name": "document.evaluate(String expression, Node contextNode, XPathNSResolver resolver, Number type, Object result)"
            }, 
            {
                "descr": "In majority of modern browsers, including recent versions of Firefox and Internet Explorer, this method does nothing.", 
                "name": "document.clear()"
            }, 
            {
                "descr": "Closes a document stream for writing.", 
                "name": "document.close()"
            }, 
            {
                "descr": "On an editable document, executes a formating command.", 
                "name": "document.execCommand(String command[, Boolean showUI[, String value]])"
            }, 
            {
                "descr": "Returns a list of elements with the given name.", 
                "name": "document.getElementsByName(String name)"
            }, 
            {
                "descr": "Returns a Selection object related to text selected in the document.", 
                "name": "document.getSelection()"
            }, 
            {
                "descr": "Returns true if the focus is currently located anywhere inside the specified document.", 
                "name": "document.hasFocus()"
            }, 
            {
                "descr": "Opens a document stream for writing.", 
                "name": "document.open()"
            }, 
            {
                "descr": "Returns true if the formating command can be executed on the current range.", 
                "name": "document.queryCommandEnabled(String command)"
            }, 
            {
                "descr": "Returns true if the formating command is in an indeterminate state on the current range.", 
                "name": "document.queryCommandIndeterm(String command)"
            }, 
            {
                "descr": "Returns true if the formating command has been executed on the current range.", 
                "name": "document.queryCommandState(String command)"
            }, 
            {
                "descr": "Returns true if the formating command is supported on the current range.", 
                "name": "document.queryCommandSupported(String command)"
            }, 
            {
                "descr": "Returns the current value of the current range for a formating command.", 
                "name": "document.queryCommandValue(String command)"
            }, 
            {
                "descr": "Writes text in a document.", 
                "name": "document.write(String text)"
            }, 
            {
                "descr": "Writes a line of text in a document.", 
                "name": "document.writeln(String text)"
            }, 
            {
                "descr": "Returns the <script> element that is currently executing.", 
                "name": "document.currentScript"
            }, 
            {
                "descr": "(Mozilla add-ons only!) Returns the nsIURI object representing the URI of the document. ", 
                "name": "document.documentURIObject"
            }, 
            {
                "descr": "Returns the node upon which a popup was invoked.", 
                "name": "document.popupNode"
            }, 
            {
                "descr": "Returns the node which is the target of the current tooltip.", 
                "name": "document.tooltipNode"
            }, 
            {
                "descr": "This method never did anything and always threw an exception, so it was removed in Gecko 14.0 (Firefox 14.0 / Thunderbird 14.0 / SeaMonkey 2.11).", 
                "name": "document.execCommandShowHelp Obsolete since Gecko 14.0"
            }, 
            {
                "descr": "Use the Element.getBoundingClientRect() method instead.", 
                "name": "document.getBoxObjectFor"
            }, 
            {
                "descr": "Loads a XUL overlay dynamically. ", 
                "name": "document.loadOverlay"
            }, 
            {
                "descr": "This method never did anything but throw an exception, and was removed in Gecko 14.0 (Firefox 14.0 / Thunderbird 14.0 / SeaMonkey 2.11).", 
                "name": "document.queryCommandText Obsolete since Gecko 14.0"
            }, 
            {
                "descr": "Returns size in bytes of the document. ", 
                "name": "document.fileSize*"
            }, 
            {
                "descr": "As a work-around, document.body.contains() can be used.", 
                "name": "Internet Explorer does not support all methods from the Node interface in the Document interface:   document.contains"
            }
        ], 
        "path": "dom/document", 
        "syntax": "DOMConfiguration object. Document.fullscreen  true when the document is in full-screen mode. Document.hidden Read only  \u2026 Document.implementation Read only  Returns the DOM implementation associated with the current document. Document.inputEncoding", 
        "type": "CSS"
    }, 
    "DocumentFragment.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "DocumentFragment.constructor", 
        "params": [], 
        "path": "dom/documentfragment/documentfragment", 
        "syntax": "DocumentFragment()", 
        "type": "DocumentFragment"
    }, 
    "DocumentFragment.querySelector": {
        "descr": "The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.", 
        "name": "DocumentFragment.querySelector", 
        "params": [
            {
                "descr": "Is a DOMString containing one or more CSS selectors separated by commas.", 
                "name": "selectors"
            }
        ], 
        "path": "dom/documentfragment/queryselector", 
        "syntax": "element = documentfragment.querySelector(selectors);", 
        "type": "DocumentFragment"
    }, 
    "DocumentFragment.querySelectorAll": {
        "descr": "The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.", 
        "name": "DocumentFragment.querySelectorAll", 
        "params": [
            {
                "descr": "Is a DOMString containing one or more CSS selectors separated by commas.", 
                "name": "selectors"
            }
        ], 
        "path": "dom/documentfragment/queryselectorall", 
        "syntax": "elementList = documentframgment.querySelectorAll(selectors);", 
        "type": "DocumentFragment"
    }, 
    "DocumentTimeline": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DocumentTimeline", 
        "params": [
            {
                "descr": "Creates a new DocumentTimeline object associated with the active document of the current browsing context.", 
                "name": "DocumentTimeline.DocumentTimeline()"
            }, 
            {
                "descr": "Returns the time value in milliseconds for this timeline or null if it is inactive.", 
                "name": "AnimationTimeline.currentTime"
            }
        ], 
        "path": "dom/documenttimeline", 
        "syntax": "DocumentTimeline interface of the the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).", 
        "type": "Animation"
    }, 
    "DocumentTimeline.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "DocumentTimeline.constructor", 
        "params": [
            {
                "descr": "The zero time for the documentTimeline specified as a real number of milliseconds relative to the navigationStart moment of the active document for the current browsing context.", 
                "name": "originTime"
            }
        ], 
        "path": "dom/documenttimeline/documenttimeline", 
        "syntax": "DocumentTimeline()", 
        "type": "Animation"
    }, 
    "DragEvent.constructor": {
        "descr": "This constructor is used to create a synthetic DragEvent object.", 
        "name": "DragEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event (see DragEvent event types).", 
                "name": "type"
            }, 
            {
                "descr": "Is a DragEventInit dictionary, having the following fields:  \"dataTransfer\", optional and defaults to \"null\". ", 
                "name": "DragEventInitOptional"
            }
        ], 
        "path": "dom/dragevent/dragevent", 
        "syntax": "event = new DragEvent(type, DragEventInit);", 
        "type": "Drag & Drop"
    }, 
    "DragEvent.dataTransfer": {
        "descr": "The DataEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).", 
        "name": "DragEvent.dataTransfer", 
        "params": [
            {
                "descr": "A DataTransfer object which contains the drag event's data.", 
                "name": "data"
            }
        ], 
        "path": "dom/dragevent/datatransfer", 
        "syntax": "var data = dragEvent.dataTransfer; Return value  data A DataTransfer object which contains the drag event's data", 
        "type": "Drag & Drop"
    }, 
    "DynamicsCompressorNode": {
        "descr": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode that has exactly one input and one output; it is created using the AudioContext.createDynamicsCompressor method.", 
        "name": "DynamicsCompressorNode", 
        "params": [
            {
                "descr": "Is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.", 
                "name": "DynamicsCompressorNode.threshold Read only"
            }, 
            {
                "descr": "Is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.", 
                "name": "DynamicsCompressorNode.knee Read only"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.", 
                "name": "DynamicsCompressorNode.ratio Read only"
            }, 
            {
                "descr": "Is a float representing the amount of gain reduction currently applied by the compressor to the signal.", 
                "name": "DynamicsCompressorNode.reduction Read only"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB.", 
                "name": "DynamicsCompressorNode.attack Read only"
            }, 
            {
                "descr": "Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB.", 
                "name": "DynamicsCompressorNode.release Read only"
            }
        ], 
        "path": "dom/dynamicscompressornode", 
        "syntax": "Working Draft      Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 10.0webkit 25.0 (25.0)  No support 15.0webkit 22 (unprefixed) 6.0webkit         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? (Yes) 26.0 1.2 ? ? ? 33.0     See also", 
        "type": "Web Audio"
    }, 
    "DynamicsCompressorNode.attack": {
        "descr": "The attack property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB. It defines how quickly the signal is adapted when its volume is increased.", 
        "name": "DynamicsCompressorNode.attack", 
        "params": [], 
        "path": "dom/dynamicscompressornode/attack", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();\n or compressor.attack.value = 0;);", 
        "type": "Web Audio"
    }, 
    "DynamicsCompressorNode.knee": {
        "descr": "The knee property of the DynamicCompressorNode interface is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.", 
        "name": "DynamicsCompressorNode.knee", 
        "params": [], 
        "path": "dom/dynamicscompressornode/knee", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();\n or compressor.knee.value = 40;);", 
        "type": "Web Audio"
    }, 
    "DynamicsCompressorNode.ratio": {
        "descr": "The ratio property of the DynamicCompressorNode interface Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.", 
        "name": "DynamicsCompressorNode.ratio", 
        "params": [], 
        "path": "dom/dynamicscompressornode/ratio", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();\n or compressor.ratio.value = 12;);", 
        "type": "Web Audio"
    }, 
    "DynamicsCompressorNode.reduction": {
        "descr": "The reduction property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of gain reduction currently applied by the compressor to the signal.", 
        "name": "DynamicsCompressorNode.reduction", 
        "params": [], 
        "path": "dom/dynamicscompressornode/reduction", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();\n or compressor.reduction.value = -20;);", 
        "type": "Web Audio"
    }, 
    "DynamicsCompressorNode.release": {
        "descr": "The release property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB. It defines how quick the signal is adapted when its volume is reduced.", 
        "name": "DynamicsCompressorNode.release", 
        "params": [], 
        "path": "dom/dynamicscompressornode/release", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();\n or compressor.release.value = 0.25;);", 
        "type": "Web Audio"
    }, 
    "DynamicsCompressorNode.threshold": {
        "descr": "The threshold property of the DynamicCompressorNode interface is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.", 
        "name": "DynamicsCompressorNode.threshold", 
        "params": [], 
        "path": "dom/dynamicscompressornode/threshold", 
        "syntax": "var audioCtx = new AudioContext();\n or var compressor = audioCtx.createDynamicsCompressor();\n or compressor.threshold.value = -50;);", 
        "type": "Web Audio"
    }, 
    "Element selector (\"element\"": {
        "descr": "JavaScript's getElementsByTagName() function is called to return the appropriate elements when this expression is used.", 
        "name": "Element selector (\"element\"", 
        "params": [], 
        "path": "jquery/element-selector", 
        "syntax": "element selector  Description: Selects all elements with the given tag name.   version added: 1.0jQuery( \"element\" ) element: An element to search for. Refers to the tagName of DOM nodes.", 
        "type": "Selectors"
    }, 
    "Empty": {
        "descr": "An empty statement is used to provide no statement, although the JavaScript syntax would expect one.", 
        "name": "Empty", 
        "params": [], 
        "path": "javascript/statements/empty", 
        "syntax": "; Description The empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. The opposite behavior, where you want multiple statements, but JavaScript only allows a single one, is possible using a block statement; it combines several statements into a single one.", 
        "type": "Statements"
    }, 
    "Encrypted Media Extensions API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Encrypted Media Extensions API", 
        "params": [
            {
                "descr": "Contains the content and related data when the content decryption module (CDM) generates a message for the session.", 
                "name": "MediaKeyMessageEvent"
            }, 
            {
                "descr": "Represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.", 
                "name": "MediaKeys"
            }, 
            {
                "descr": "Represents a context for message exchange with a content decryption module (CDM).", 
                "name": "MediaKeySession"
            }, 
            {
                "descr": "Is a read-only map of media key statuses by key IDs.", 
                "name": "MediaKeyStatusMap"
            }, 
            {
                "descr": "Provides access to a Key System for decryption and/or a content protection provider.", 
                "name": "MediaKeySystemAccess"
            }, 
            {
                "descr": "Provides configuration information about the media key system.", 
                "name": "MediaKeySystemConfiguration"
            }
        ], 
        "path": "dom/encrypted_media_extensions_api", 
        "syntax": "MediaKeyMessageEvent Contains the content and related data when the content decryption module (CDM) generates a message for the session. MediaKeys", 
        "type": "Encrypted Media"
    }, 
    "Error": {
        "descr": "The Error constructor creates an error object. Instances of Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.", 
        "name": "Error", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error.", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The value for the fileName property on the created Error object. ", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The value for the lineNumber property on the created Error object. ", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs regarding the global function eval().", 
                "name": "EvalError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when an internal error in the JavaScript engine is thrown. ", 
                "name": "InternalError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when a numeric variable or parameter is outside of its valid range.", 
                "name": "RangeError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when de-referencing an invalid reference.", 
                "name": "ReferenceError"
            }, 
            {
                "descr": "Creates an instance representing a syntax error that occurs while parsing code in eval().", 
                "name": "SyntaxError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when a variable or parameter is not of a valid type.", 
                "name": "TypeError"
            }, 
            {
                "descr": "Creates an instance representing an error that occurs when encodeURI() or decodeURI() are passed invalid parameters.", 
                "name": "URIError"
            }, 
            {
                "descr": "Allows the addition of properties to Error instances.", 
                "name": "Error.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "Error.prototype.constructor"
            }, 
            {
                "descr": "Error message.", 
                "name": "Error.prototype.message"
            }, 
            {
                "descr": "Error name.", 
                "name": "Error.prototype.name"
            }, 
            {
                "descr": "Error description. Similar to message.", 
                "name": "Error.prototype.description"
            }, 
            {
                "descr": "Error number.", 
                "name": "Error.prototype.number"
            }, 
            {
                "descr": "Path to file that raised this error.", 
                "name": "Error.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error.", 
                "name": "Error.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error.", 
                "name": "Error.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace.", 
                "name": "Error.prototype.stack"
            }, 
            {
                "descr": "Returns a string containing the source of the specified Error object; you can use this value to create a new object. ", 
                "name": "Error.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "Error.prototype.toString()"
            }
        ], 
        "path": "javascript/global_objects/error", 
        "syntax": "new Error([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "Errors: Array sort argument": {
        "descr": "TypeError", 
        "name": "Errors: Array sort argument", 
        "params": [], 
        "path": "javascript/errors/array_sort_argument", 
        "syntax": "TypeError What went wrong? The argument of Array.prototype.sort()", 
        "type": "Errors"
    }, 
    "Errors: Bad octal": {
        "descr": "SyntaxError warning in strict mode only.", 
        "name": "Errors: Bad octal", 
        "params": [], 
        "path": "javascript/errors/bad_octal", 
        "syntax": "SyntaxError warning in strict mode only. What went wrong? Decimal literals can start with a zero (0) followed by another decimal digit, but If all digits after the leading 0", 
        "type": "Errors"
    }, 
    "Errors: Bad radix": {
        "descr": "RangeError", 
        "name": "Errors: Bad radix", 
        "params": [], 
        "path": "javascript/errors/bad_radix", 
        "syntax": "RangeError What went wrong? The optional radix parameter with the Number.prototype.toString()", 
        "type": "Errors"
    }, 
    "Errors: Bad return or yield": {
        "descr": "SyntaxError.", 
        "name": "Errors: Bad return or yield", 
        "params": [], 
        "path": "javascript/errors/bad_return_or_yield", 
        "syntax": "SyntaxError. What went wrong? A return or yield statement is called outside of a function. Maybe there are missing curly brackets somewhere? The return and yield statements must be in a function, because they end (or pause and resume) function execution and specify a value to be returned to the function caller.", 
        "type": "Errors"
    }, 
    "Errors: Cant delete": {
        "descr": "TypeError in strict mode only.", 
        "name": "Errors: Cant delete", 
        "params": [], 
        "path": "javascript/errors/cant_delete", 
        "syntax": "TypeError in strict mode only. What went wrong? It was attempted to delete a property, but that property is non-configurable. The configurable attribute controls whether the property can be deleted from the object and whether its attributes (other than writable) can be changed.", 
        "type": "Errors"
    }, 
    "Errors: Deprecated caller or arguments usage": {
        "descr": "A strict-mode-only warning that a ReferenceError occurred. JavaScript execution won't be halted.", 
        "name": "Errors: Deprecated caller or arguments usage", 
        "params": [], 
        "path": "javascript/errors/deprecated_caller_or_arguments_usage", 
        "syntax": "ReferenceError occurred. JavaScript execution won't be halted. What went wrong? In strict mode, the Function.caller or Function.arguments properties are used and shouldn't be. They are deprecated, because they leak the function caller, are non-standard, hard to optimize and potentially a performance-harmful feature. Examples Deprecated function.caller or arguments.callee.caller Function.caller and arguments.callee.caller are deprecated (see the reference articles for more information).", 
        "type": "Errors"
    }, 
    "Errors: Deprecated source map pragma": {
        "descr": "A warning that a SyntaxError occurred. JavaScript execution won't be halted.", 
        "name": "Errors: Deprecated source map pragma", 
        "params": [], 
        "path": "javascript/errors/deprecated_source_map_pragma", 
        "syntax": "SyntaxError occurred. JavaScript execution won't be halted. What went wrong? There is a deprecated source map syntax in a JavaScript source. JavaScript sources are often combined and minified to make delivering them from the server more efficient. With source maps, the debugger can map the code being executed to the original source files. The source map specification changed the syntax due to a conflict with IE whenever it was found in the page after //@cc_on was interpreted to turn on conditional compilation in the IE JScript engine. The conditional compilation comment in IE is a little known feature, but it broke source maps with jQuery and other libraries. Examples Deprecated syntax Syntax with the \"@\" sign is deprecated. //@ sourceMappingURL=http://example.com/path/to/your/sourcemap.map Standard syntax Use the \"#\" sign instead. //# sourceMappingURL=http://example.com/path/to/your/sourcemap.map Or, alternatively, you can set a header to your JavaScript file to avoid having a comment at all: X-SourceMap: /path/to/file.js.map Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   New syntax (Yes) 24 (24) ? (Yes) (Yes)         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   New syntax ? ? 24.0 (24) ? ? ?     See also", 
        "type": "Errors"
    }, 
    "Errors: Equal as assign": {
        "descr": "SyntaxError warning in strict mode only.", 
        "name": "Errors: Equal as assign", 
        "params": [], 
        "path": "javascript/errors/equal_as_assign", 
        "syntax": "SyntaxError warning in strict mode only. What went wrong? There was an assignment (=) when you would normally expect a test for equality (==", 
        "type": "Errors"
    }, 
    "Errors: Invalid array length": {
        "descr": "RangeError", 
        "name": "Errors: Invalid array length", 
        "params": [], 
        "path": "javascript/errors/invalid_array_length", 
        "syntax": "RangeError What went wrong? An invalid array length might appear in these situations:  When creating an Array or an ArrayBuffer which has a length which is either negative or larger or equal to 232, or when setting the Array.length property to a value which is either negative or larger or equal to 232.  Why are Array and ArrayBuffer length limited? The length property of an Array or an ArrayBuffer is represented with an unsigned 32-bit integer, that can only store values which are in the range from 0 to 232-1. If you are creating an Array, using the constructor, you probably want to use the literal notation instead, as the first argument is interpreted as the length of the Array. Otherwise, you might want to clamp the length before setting the length property, or using it as argument of the constructor. Examples Invalid cases new Array(Math.pow(2, 40))new Array(-1)new ArrayBuffer(Math.pow(2, 32))new ArrayBuffer(-1)let a = [];a.length = a.length - 1;         // set -1 to the length propertylet b = new Array(Math.pow(2, 32) - 1);\n or b.length = b.length + 1;         // set 2^32 to the length property);", 
        "type": "Errors"
    }, 
    "Errors: Invalid assignment left-hand side": {
        "descr": "ReferenceError.", 
        "name": "Errors: Invalid assignment left-hand side", 
        "params": [], 
        "path": "javascript/errors/invalid_assignment_left-hand_side", 
        "syntax": "ReferenceError. What went wrong? There was an unexpected assignment somewhere. This might be due to a mismatch of a assignment operator and a comparison operator, for example. While a single \"=\" sign assigns a value to a variable, the \"==\" or \"===\" operators compare a value. Examples if (Math.PI = 3 || Math.PI = 4) {   console.log('no way!');\n or }// ReferenceError: invalid assignment left-hand sidevar str = 'Hello, '+= 'is it me '+= 'you\\'re looking for?';// ReferenceError: invalid assignment left-hand side);", 
        "type": "Errors"
    }, 
    "Errors: JSON bad parse": {
        "descr": "SyntaxError", 
        "name": "Errors: JSON bad parse", 
        "params": [], 
        "path": "javascript/errors/json_bad_parse", 
        "syntax": "SyntaxError What went wrong? JSON.parse()", 
        "type": "Errors"
    }, 
    "Errors: Malformed formal parameter": {
        "descr": "SyntaxError", 
        "name": "Errors: Malformed formal parameter", 
        "params": [], 
        "path": "javascript/errors/malformed_formal_parameter", 
        "syntax": "SyntaxError What went wrong? There is a Function()", 
        "type": "Errors"
    }, 
    "Errors: Missing bracket after list": {
        "descr": "SyntaxError.", 
        "name": "Errors: Missing bracket after list", 
        "params": [], 
        "path": "javascript/errors/missing_bracket_after_list", 
        "syntax": "SyntaxError. What went wrong? There is an error with the array initializer syntax somewhere. Likely there is a closing bracket (\"]\") or a comma (\",", 
        "type": "Errors"
    }, 
    "Errors: Missing parenthesis after argument list": {
        "descr": "SyntaxError.", 
        "name": "Errors: Missing parenthesis after argument list", 
        "params": [], 
        "path": "javascript/errors/missing_parenthesis_after_argument_list", 
        "syntax": "SyntaxError. What went wrong? There is an error with how a function is called. This might be a typo, a missing operator, or an unescaped string, for example. Examples Because there is no \"+\" operator to concatenate the string, JavaScript expects the argument for the log function to be just \"PI: \". In that case, it should be terminated by a closing parenthesis. console.log(\"PI: \" Math.PI);\n or // SyntaxError: missing ) after argument list);", 
        "type": "Errors"
    }, 
    "Errors: Missing semicolon before statement": {
        "descr": "SyntaxError.", 
        "name": "Errors: Missing semicolon before statement", 
        "params": [], 
        "path": "javascript/errors/missing_semicolon_before_statement", 
        "syntax": "SyntaxError. What went wrong? There is a semicolon (;) missing somewhere. JavaScript statements must be terminated with semicolons. Some of them are affected by automatic semicolon insertion (ASI), but in this case you need to provide a semicolon, so that JavaScript can parse the source code correctly.", 
        "type": "Errors"
    }, 
    "Errors: More arguments needed": {
        "descr": "TypeError.", 
        "name": "Errors: More arguments needed", 
        "params": [], 
        "path": "javascript/errors/more_arguments_needed", 
        "syntax": "TypeError. What went wrong? There is an error with how a function is called. More arguments need to be provided. Examples The Object.create()", 
        "type": "Errors"
    }, 
    "Errors: Negative repetition count": {
        "descr": "RangeError", 
        "name": "Errors: Negative repetition count", 
        "params": [], 
        "path": "javascript/errors/negative_repetition_count", 
        "syntax": "RangeError What went wrong? The String.prototype.repeat()", 
        "type": "Errors"
    }, 
    "Errors: Not a codepoint": {
        "descr": "RangeError", 
        "name": "Errors: Not a codepoint", 
        "params": [], 
        "path": "javascript/errors/not_a_codepoint", 
        "syntax": "RangeError What went wrong? The String.fromCodePoint()", 
        "type": "Errors"
    }, 
    "Errors: Not a constructor": {
        "descr": "TypeError", 
        "name": "Errors: Not a constructor", 
        "params": [], 
        "path": "javascript/errors/not_a_constructor", 
        "syntax": "TypeError What went wrong? There was an attempt to use an object or a variable as a constructor, but that object or variable is not a constructor. See constructor or the new operator for more information on what a constructor is. There are many global objects, like String or Array, which are constructable using new. However, some global objects are not and their properties and methods are static. The following JavaScript standard built-in objects are not a constructor: Math, JSON", 
        "type": "Errors"
    }, 
    "Errors: Not a function": {
        "descr": "TypeError.", 
        "name": "Errors: Not a function", 
        "params": [], 
        "path": "javascript/errors/not_a_function", 
        "syntax": "TypeError. What went wrong? It was attempted to call a value like a function, but the value is not actually a function. Some code expects you to provide a function, but that didn't happen. Maybe there is a typo in the function name? Maybe the object you are calling the method on does not have this function? For example, JavaScript objects have no map function, but JavaScript Array object do. There are many built-in functions in need of a (callback) function. You will have to provide a function in order to have these methods working properly:", 
        "type": "Errors"
    }, 
    "Errors: Not defined": {
        "descr": "ReferenceError.", 
        "name": "Errors: Not defined", 
        "params": [], 
        "path": "javascript/errors/not_defined", 
        "syntax": "ReferenceError. What went wrong? There is a non-existent variable referenced somewhere. This variable needs to be declared, or you need make sure it is available in your current script or scope.  Note: When loading a library (such as jQuery), make sure it is loaded before you access library variables, such as \"$\". Put the <script>", 
        "type": "Errors"
    }, 
    "Errors: Precision range": {
        "descr": "RangeError", 
        "name": "Errors: Precision range", 
        "params": [], 
        "path": "javascript/errors/precision_range", 
        "syntax": "RangeError What went wrong? There was an out of range precision argument in one of these methods:  Number.prototype.toExponential()", 
        "type": "Errors"
    }, 
    "Errors: Property access denied": {
        "descr": "Error.", 
        "name": "Errors: Property access denied", 
        "params": [], 
        "path": "javascript/errors/property_access_denied", 
        "syntax": "Error. What went wrong? There was attempt to access an object for which you have no permission. This is likely an <iframe>", 
        "type": "Errors"
    }, 
    "Errors: Read-only": {
        "descr": "TypeError", 
        "name": "Errors: Read-only", 
        "params": [], 
        "path": "javascript/errors/read-only", 
        "syntax": "TypeError What went wrong? The global variable or object property that was assigned to is a read-only property. (Technically, it is a non-writable data property.)", 
        "type": "Errors"
    }, 
    "Errors: Redeclared parameter": {
        "descr": "SyntaxError", 
        "name": "Errors: Redeclared parameter", 
        "params": [], 
        "path": "javascript/errors/redeclared_parameter", 
        "syntax": "SyntaxError What went wrong? The same variable name occurs as a function parameter and is then redeclared using a let assignment in a function body again. Redeclaring the same variable within the same function or block scope using let is not allowed in JavaScript. Examples In this case, the variable \"arg\" redeclares the argument. function f(arg) {   let arg = \"foo\"; }// SyntaxError: redeclaration of formal parameter \"arg\"", 
        "type": "Errors"
    }, 
    "Errors: Resulting string too large": {
        "descr": "RangeError", 
        "name": "Errors: Resulting string too large", 
        "params": [], 
        "path": "javascript/errors/resulting_string_too_large", 
        "syntax": "RangeError What went wrong? The String.prototype.repeat()", 
        "type": "Errors"
    }, 
    "Errors: Stmt after return": {
        "descr": "Warning", 
        "name": "Errors: Stmt after return", 
        "params": [], 
        "path": "javascript/errors/stmt_after_return", 
        "syntax": "return statement, or when using a semicolon-less return statement but including an expression directly after.  When an expression exists after a valid return statement, a warning is given to indicate that the code after the return statement is unreachable, meaning it can never be run. Why should I have semicolons after return statements? In the case of semicolon-less return statements, it can be unclear whether the developer intended to return the statement on the following line, or to stop execution and return. The warning indicates that there is ambiguity in the way the return statement is written. Warnings will not be shown for semicolon-less returns if these statements follow it:  throw", 
        "type": "Errors"
    }, 
    "Errors: Too much recursion": {
        "descr": "InternalError.", 
        "name": "Errors: Too much recursion", 
        "params": [], 
        "path": "javascript/errors/too_much_recursion", 
        "syntax": "InternalError. What went wrong? A function that calls itself is called a recursive function. In some ways, recursion is analogous to a loop. Both execute the same code multiple times, and both require a condition (to avoid an infinite loop, or rather, infinite recursion in this case). When there is too much or infinite recursion, JavaScript will throw this error.", 
        "type": "Errors"
    }, 
    "Errors: Undeclared var": {
        "descr": "ReferenceError warning in strict mode only.", 
        "name": "Errors: Undeclared var", 
        "params": [], 
        "path": "javascript/errors/undeclared_var", 
        "syntax": "ReferenceError warning in strict mode only. What went wrong? A value has been assigned to an undeclared variable. In other words, there was an assignment without the var keyword. There are some differences between declared and undeclared variables, which might lead to unexpected results and that's why JavaScript presents an error in strict mode. Three things to note about declared and undeclared variables:  Declared variables are constrained in the execution context in which they are declared. Undeclared variables are always global. Declared variables are created before any code is executed. Undeclared variables do not exist until the code assigning to them is executed. Declared variables are a non-configurable property of their execution context (function or global). Undeclared variables are configurable (e.g. can be deleted).  For more details and examples, see the var", 
        "type": "Errors"
    }, 
    "Errors: Undefined prop": {
        "descr": "ReferenceError warning in strict mode only.", 
        "name": "Errors: Undefined prop", 
        "params": [], 
        "path": "javascript/errors/undefined_prop", 
        "syntax": "ReferenceError warning in strict mode only. What went wrong? The script attempted to access an object property which doesn't exist. There are two ways to access properties; see the property accessors reference page to learn more about them. Errors about references to undefined properties occur in strict mode code only. In non-strict code, accesses to properties that don't exist are silently ignored. Examples Invalid cases In this case, the property bar is an undefined property, so a ReferenceError will occur. \"use strict\"; var foo = {};foo.bar; // ReferenceError: reference to undefined property \"bar\" Valid cases To avoid the error, you need to either add a definition for bar to the object or check for the existence of the bar property before trying to access it; one way to do that is to use the Object.prototype.hasOwnProperty()", 
        "type": "Errors"
    }, 
    "Errors: Unexpected token": {
        "descr": "SyntaxError", 
        "name": "Errors: Unexpected token", 
        "params": [], 
        "path": "javascript/errors/unexpected_token", 
        "syntax": "SyntaxError What went wrong? A specific language construct was expected, but something else was provided. This might be a simple typo. Examples Expression expected For example, when calling functions, trailing commas are not allowed. JavaScript will expect another argument, which can in fact be any expression. Math.max(2, 42,);\n or // SyntaxError: expected expression, got ')');", 
        "type": "Errors"
    }, 
    "Errors: Unexpected type": {
        "descr": "TypeError.", 
        "name": "Errors: Unexpected type", 
        "params": [], 
        "path": "javascript/errors/unexpected_type", 
        "syntax": "TypeError. What went wrong? There was an unexpected type. This occurs oftentimes with undefined or null values. Also, certain methods, such as Object.create()", 
        "type": "Errors"
    }, 
    "Errors: Unterminated string literal": {
        "descr": "SyntaxError", 
        "name": "Errors: Unterminated string literal", 
        "params": [], 
        "path": "javascript/errors/unterminated_string_literal", 
        "syntax": "SyntaxError What went wrong? There is an unterminated String somewhere. String literals must be enclosed by single (') or double (\"", 
        "type": "Errors"
    }, 
    "Errors: Var hides argument": {
        "descr": "TypeError warning in strict mode only.", 
        "name": "Errors: Var hides argument", 
        "params": [], 
        "path": "javascript/errors/var_hides_argument", 
        "syntax": "TypeError warning in strict mode only. What went wrong? The same variable name occurs as a function parameter and is then redeclared using a var assignment in a function body again. This might be a naming conflict and thus JavaScript warns about it. This error occurs as a warning in strict mode code only. In non-strict code, the redeclaration is silently ignored. Examples Invalid cases In this case, the variable \"arg\" redeclares the argument. \"use strict\";function f(arg) {   var arg = \"foo\"; }", 
        "type": "Errors"
    }, 
    "EvalError": {
        "descr": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.", 
        "name": "EvalError", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an EvalError object.", 
                "name": "EvalError.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "EvalError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that EvalError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "EvalError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "EvalError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "EvalError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "EvalError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "EvalError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "EvalError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/evalerror", 
        "syntax": "new EvalError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "Event": {
        "descr": "The Event interface represents any event of the DOM. It contains common properties and methods to any event.", 
        "name": "Event", 
        "params": [
            {
                "descr": "Creates an Event object.", 
                "name": "Event()"
            }, 
            {
                "descr": "A boolean indicating whether the event bubbles up through the DOM or not.", 
                "name": "Event.bubbles Read only"
            }, 
            {
                "descr": "A nonstandard alternative to Event.stopPropagation().", 
                "name": "Event.cancelBubble"
            }, 
            {
                "descr": "A boolean indicating whether the event is cancelable.", 
                "name": "Event.cancelable Read only"
            }, 
            {
                "descr": "A reference to the currently registered target for the event.", 
                "name": "Event.currentTarget Read only"
            }, 
            {
                "descr": "Indicates whether or not event.preventDefault() has been called on the event.", 
                "name": "Event.defaultPrevented Read only"
            }, 
            {
                "descr": "Indicates which phase of the event flow is being processed.", 
                "name": "Event.eventPhase Read only"
            }, 
            {
                "descr": "The explicit original target of the event (Mozilla-specific).", 
                "name": "Event.explicitOriginalTarget  Read only"
            }, 
            {
                "descr": "The original target of the event, before any retargetings (Mozilla-specific).", 
                "name": "Event.originalTarget  Read only"
            }, 
            {
                "descr": "A nonstandard alternative to Event.preventDefault() and Event.defaultPrevented. ", 
                "name": "Event.returnValue"
            }, 
            {
                "descr": "A nonstandard alias for Event.target. ", 
                "name": "Event.srcElement"
            }, 
            {
                "descr": "A reference to the target to which the event was originally dispatched.", 
                "name": "Event.target Read only"
            }, 
            {
                "descr": "The time that the event was created.", 
                "name": "Event.timeStamp Read only"
            }, 
            {
                "descr": "The name of the event (case-insensitive).", 
                "name": "Event.type Read only"
            }, 
            {
                "descr": "Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like event.initEvent)", 
                "name": "Event.isTrusted Read only"
            }, 
            {
                "descr": "Initializes the value of an Event created. ", 
                "name": "Event.initEvent()"
            }, 
            {
                "descr": "Prevents the event from bubbling. ", 
                "name": "Event.preventBubble()  Obsolete since Gecko 24"
            }, 
            {
                "descr": "Obsolete, use event.stopPropagation instead.", 
                "name": "Event.preventCapture()  Obsolete since Gecko 24"
            }, 
            {
                "descr": "Cancels the event (if it is cancelable).", 
                "name": "Event.preventDefault()"
            }, 
            {
                "descr": "For this particular event, no other listener will be called. ", 
                "name": "Event.stopImmediatePropagation()"
            }, 
            {
                "descr": "Stops the propagation of events further along in the DOM.", 
                "name": "Event.stopPropagation()"
            }, 
            {
                "descr": "Non-standard. Returns the value of Event.defaultPrevented. ", 
                "name": "Event.getPreventDefault()"
            }
        ], 
        "path": "dom/event", 
        "syntax": "SVGEvent SVGZoomEvent TimeEvent TouchEvent TrackEvent TransitionEvent UIEvent UserProximityEvent WebGLContextEvent WheelEvent   Constructor  Event()", 
        "type": "Event"
    }, 
    "Event.bubbles": {
        "descr": "Indicates whether the given event bubbles up through the DOM or not.", 
        "name": "Event.bubbles", 
        "params": [], 
        "path": "dom/event/bubbles", 
        "syntax": "event.bubbles Returns a Boolean value, which is true if the event bubbles up through the DOM. Example var bool = event.bubbles; bool contains true or false, depending on whether the event can bubble or not. Notes Only certain events can bubble. Events that do bubble have this property set to true. You can use this property to check if an event is allowed to bubble or not. Example  function goInput(e) {  // checks bubbles and  if (!e.bubbles) {     // passes event along if it's not     passItOn(e);\n or    }  // already bubbling  doOutput(e)});", 
        "type": "Event"
    }, 
    "Event.cancelable": {
        "descr": "Indicates whether the event is cancelable or not.", 
        "name": "Event.cancelable", 
        "params": [], 
        "path": "dom/event/cancelable", 
        "syntax": "bool = event.cancelable  The result is a Boolean, which is true if the event can be canceled.  Example var bool = event.cancelable; bool contains true or false, depending on whether the event can have its default action prevented. Notes Whether an event can be canceled or not is something that's determined when that event is initialized. To cancel an event, call the preventDefault()", 
        "type": "Event"
    }, 
    "Event.constructor": {
        "descr": "The Event() constructor creates a new Event.", 
        "name": "Event.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is an EventInit dictionary, having the following fields:  \"bubbles\", optional and defaulting to false, of type Boolean, indicating if the event bubbles or not. ", 
                "name": "eventInitOptional"
            }
        ], 
        "path": "dom/event/event", 
        "syntax": "event = new Event(typeArg, eventInit);", 
        "type": "Event"
    }, 
    "Event.createEvent": {
        "descr": "Creates a new event, which must then be initialized by calling its init() method.", 
        "name": "Event.createEvent", 
        "params": [
            {
                "descr": "A string indicating the event type to create.", 
                "name": "type"
            }
        ], 
        "path": "dom/event/createevent", 
        "syntax": "document.createEvent(type)", 
        "type": "Event"
    }, 
    "Event.defaultPrevented": {
        "descr": "Returns a boolean indicating whether or not event.preventDefault() was called on the event.", 
        "name": "Event.defaultPrevented", 
        "params": [], 
        "path": "dom/event/defaultprevented", 
        "syntax": "bool = event.defaultPrevented  Example  if (e.defaultPrevented) {   /* the default was prevented */ }", 
        "type": "Event"
    }, 
    "Event.eventPhase": {
        "descr": "Indicates which phase of the event flow is currently being evaluated.", 
        "name": "Event.eventPhase", 
        "params": [], 
        "path": "dom/event/eventphase", 
        "syntax": "var phase = event.eventPhase; Returns an integer value which specifies the current evaluation phase of the event flow; possible values are listed in Event phase constants. Constants Event phase constants These values describe which phase the event flow is currently being evaluated.    Constant Value Description     Event.NONE 0 No event is being processed at this time.   Event.CAPTURING_PHASE 1 The event is being propagated through the target's ancestor objects. This process starts with the Window, then Document, then the HTMLHtmlElement, and so on through the elements until the target's parent is reached. Event listeners registered for capture mode when EventTarget.addEventListener()", 
        "type": "Event"
    }, 
    "Event.isTrusted": {
        "descr": "The isTrusted read-only property of the Event interface is a boolean that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via dispatchEvent.", 
        "name": "Event.isTrusted", 
        "params": [], 
        "path": "dom/event/istrusted", 
        "syntax": "var bool = event.isTrusted; Example  if (e.isTrusted) {     /* The event is trusted. */ } else {     /* The event is not trusted. */ }", 
        "type": "Event"
    }, 
    "Event.preventDefault": {
        "descr": "Cancels the event if it is cancelable, without stopping further propagation of the event.", 
        "name": "Event.preventDefault", 
        "params": [], 
        "path": "dom/event/preventdefault", 
        "syntax": "event.preventDefault();", 
        "type": "Event"
    }, 
    "Event.stopImmediatePropagation": {
        "descr": "Prevents other listeners of the same event from being called.", 
        "name": "Event.stopImmediatePropagation", 
        "params": [], 
        "path": "dom/event/stopimmediatepropagation", 
        "syntax": "event.stopImmediatePropagation();", 
        "type": "Event"
    }, 
    "Event.stopPropagation": {
        "descr": "Prevents further propagation of the current event in the capturing and bubbling phases.", 
        "name": "Event.stopPropagation", 
        "params": [], 
        "path": "dom/event/stoppropagation", 
        "syntax": "event.stopPropagation();", 
        "type": "Event"
    }, 
    "Event.target": {
        "descr": "A reference to the object that dispatched the event. It is different from event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.", 
        "name": "Event.target", 
        "params": [], 
        "path": "dom/event/target", 
        "syntax": "theTarget = event.target Example The event.target property can be used in order to implement event delegation. // Assuming there is a 'list' variable containing an instance of an HTML ul element.function hide(e) {  // Unless list items are separated by a margin, e.target should be different than e.currentTarget  e.target.style.visibility = 'hidden';}list.addEventListener('click', hide, false);\n or // If some element (<li> element or a link within an <li> element for instance) is clicked, it will disappear.// It only requires a single listener to do that);", 
        "type": "Event"
    }, 
    "Event.timeStamp": {
        "descr": "Returns the time (in milliseconds) at which the event was created. Starting with Chrome 49, returns a high-resolution monotonic time instead of epoch time.", 
        "name": "Event.timeStamp", 
        "params": [], 
        "path": "dom/event/timestamp", 
        "syntax": "event.timeStamp Examples var number = event.timeStamp; The following is a more complete example: <html><head><title>timeStamp example</title><script type=\"text/javascript\">function getTime(event) {  document.getElementById(\"time\").firstChild.nodeValue = event.timeStamp;}</script></head><body onkeypress=\"getTime(event)\"><p>Press any key to get the current timestampfor the onkeypress event.</p><p>timeStamp: <span id=\"time\">-</span></p></body></html>", 
        "type": "Event"
    }, 
    "Event.type": {
        "descr": "The Event.type read-only property returns a string containing the type of event. It is set when the event is constructed and is the name commonly used to refer to the specific event.", 
        "name": "Event.type", 
        "params": [], 
        "path": "dom/event/type", 
        "syntax": "event.type Examples var string = event.type; <!DOCTYPE html><html lang=\"en\"><head>    <meta charset=\"utf-8\">    <title>Event.type Example</title>    <script>        var currEvent = null;        function getEvtType(evt) {            console.log(\"//Start------------getEvtType(evt)------------ \");\n or             currEvent = evt.type;            console.log(currEvent);\n or             //document.getElementById(\"Etype\").firstChild.nodeValue = currEvent;            document.getElementById(\"Etype\").innerHTML = currEvent;            console.log(\"//End--------------getEvtType(evt)------------ \");\n or         }        //Keyboard events        document.addEventListener(\"keypress\", getEvtType, false);\n or  //[second]          document.addEventListener(\"keydown\", getEvtType, false);\n or  //first        document.addEventListener(\"keyup\", getEvtType, false);\n or  //third        //Mouse events        document.addEventListener(\"click\", getEvtType, false);\n or  // third        document.addEventListener(\"mousedown\", getEvtType, false);\n or  //first        document.addEventListener(\"mouseup\", getEvtType, false);\n or  //second    </script></head><body>    <p>Press any key or click the mouse to get the event type.</p>    <p>Event type: <span id=\"Etype\" style=\"color:red\">-</span></p></body></html>);", 
        "type": "Event"
    }, 
    "EventTarget.addEventListener": {
        "descr": "The EventTarget.addEventListener() method registers the specified listener on the EventTarget it's called on. The event target may be an Element in a document, the Document itself, a Window, or any other object that supports events (such as XMLHttpRequest).", 
        "name": "EventTarget.addEventListener", 
        "params": [
            {
                "descr": "A string representing the event type to listen for.", 
                "name": "type"
            }, 
            {
                "descr": "The object that receives a notification (an object that implements the Event interface) when an event of the specified type occurs. ", 
                "name": "listener"
            }, 
            {
                "descr": "An options object that specifies characteristics about the event listener. ", 
                "name": "options Optional"
            }, 
            {
                "descr": "A Boolean that indicates that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. ", 
                "name": "useCapture Optional"
            }, 
            {
                "descr": "If true, the listener receives synthetic events dispatched by web content (the default is false for chrome and true for regular web pages). ", 
                "name": "wantsUntrusted"
            }
        ], 
        "path": "dom/eventtarget/addeventlistener", 
        "syntax": "target.addEventListener(type, listener[, options]);\n or target.addEventListener(type, listener[, useCapture]);\n or target.addEventListener(type, listener[, useCapture, wantsUntrusted ]);\n or  // Gecko/Mozilla only);", 
        "type": "Event"
    }, 
    "EventTarget.dispatchEvent": {
        "descr": "Dispatches an Event at the specified EventTarget, invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) apply to events dispatched manually with dispatchEvent().", 
        "name": "EventTarget.dispatchEvent", 
        "params": [], 
        "path": "dom/eventtarget/dispatchevent", 
        "syntax": "cancelled = !target.dispatchEvent(event)", 
        "type": "Event"
    }, 
    "EventTarget.removeEventListener": {
        "descr": "The EventTarget.removeEventListener() method removes the event listener previously registered with EventTarget.addEventListener().", 
        "name": "EventTarget.removeEventListener", 
        "params": [
            {
                "descr": "A string representing the event type to remove.", 
                "name": "type"
            }, 
            {
                "descr": "The EventListener function to remove from the event target.", 
                "name": "listener"
            }, 
            {
                "descr": "An options object that specifies characteristics about the event listener. ", 
                "name": "options Optional"
            }, 
            {
                "descr": "Specifies whether the EventListener to be removed is registered as a capturing listener or not. ", 
                "name": "useCapture Optional"
            }
        ], 
        "path": "dom/eventtarget/removeeventlistener", 
        "syntax": "target.removeEventListener(type, listener[, options]);\n or target.removeEventListener(type, listener[, useCapture]);", 
        "type": "Event"
    }, 
    "Expression closures": {
        "descr": "Expression closures are a shorthand function syntax for writing simple functions.", 
        "name": "Expression closures", 
        "params": [
            {
                "descr": "The function name. Can be omitted, in which case the function is anonymous. ", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "paramN"
            }, 
            {
                "descr": "The expression which comprise the body of the function.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/operators/expression_closures", 
        "syntax": "function [name]([param1[, param2[, ..., paramN]]])   expression", 
        "type": "Operators"
    }, 
    "ExtendableEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableEvent", 
        "params": [
            {
                "descr": "Creates a new ExtendableEvent object.", 
                "name": "ExtendableEvent()"
            }, 
            {
                "descr": "Extends the lifetime of the event. ", 
                "name": "ExtendableEvent.waitUntil()"
            }
        ], 
        "path": "dom/extendableevent", 
        "syntax": "ExtendableEvent interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent", 
        "type": "Service Workers"
    }, 
    "ExtendableEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableEvent.constructor", 
        "params": [
            {
                "descr": "The type of the ExtendableEvent, for example install, activate.", 
                "name": "type"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/extendableevent/extendableevent", 
        "syntax": "ExtendableEvent()", 
        "type": "Service Workers"
    }, 
    "ExtendableEvent.waitUntil": {
        "descr": "The ExtendableEvent.waitUntil() method extends the lifetime of the event. When called in an EventHandler associated to the install event, it delays treating the installing worker as installed until the passed Promise resolves successfully. This is primarily used to ensure that a service worker is not considered installed until all of the core caches it depends on are populated.", 
        "name": "ExtendableEvent.waitUntil", 
        "params": [], 
        "path": "dom/extendableevent/waituntil", 
        "syntax": "event.waitUntil(function)", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent", 
        "params": [
            {
                "descr": "Creates a new ExtendableMessageEvent object instance.", 
                "name": "ExtendableMessageEvent.ExtendableMessageEvent()"
            }, 
            {
                "descr": "Returns the event's data. It can be any data type.", 
                "name": "ExtendableMessageEvent.data Read only"
            }, 
            {
                "descr": "Returns the origin of the ServiceWorkerClient that sent the message", 
                "name": "ExtendableMessageEvent.origin Read only"
            }, 
            {
                "descr": "Represents, in server-sent events, the last event ID of the event source.", 
                "name": "ExtendableMessageEvent.lastEventId Read only"
            }, 
            {
                "descr": "Returns a reference to the service worker that sent the message.", 
                "name": "ExtendableMessageEvent.source Read only"
            }, 
            {
                "descr": "Returns the array containing the MessagePort objects representing the ports of the associated message channel.", 
                "name": "ExtendableMessageEvent.ports Read only"
            }
        ], 
        "path": "dom/extendablemessageevent", 
        "syntax": "ExtendableMessageEvent interface of the ServiceWorker API represents the event object of a message", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent.constructor", 
        "params": [
            {
                "descr": "A DOMString that defines the type of the message event being created.", 
                "name": "type"
            }, 
            {
                "descr": "An initialisation object, which should contain the following parameters:  data: The event's data \u2014 this can be any type. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/extendablemessageevent/extendablemessageevent", 
        "syntax": "ExtendableMessageEvent()", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent.data": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent.data", 
        "params": [], 
        "path": "dom/extendablemessageevent/data", 
        "syntax": "data read-only property of the ExtendableMessageEvent", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent.lastEventId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent.lastEventId", 
        "params": [], 
        "path": "dom/extendablemessageevent/lasteventid", 
        "syntax": "lastEventID read-only property of the ExtendableMessageEvent", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent.origin": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent.origin", 
        "params": [], 
        "path": "dom/extendablemessageevent/origin", 
        "syntax": "ExtendableMessageEvent interface returns the origin of the ServiceWorkerClient that sent the message. Syntax var myOrigin = ExtendableMessageEventInstance.origin; Value A DOMString. Examples When the following code is used inside a service worker to respond to a push messages by sending the data received via PushMessageData to the main context via a channel message, the event object of onmessage will be a ExtendableMessageEvent. var port;self.addEventListener('push', function(e) {  var obj = e.data.json();\n or   if(obj.action === 'subscribe' || obj.action === 'unsubscribe') {    port.postMessage(obj);\n or   } else if(obj.action === 'init' || obj.action === 'chatMsg') {    port.postMessage(obj);\n or   }});\n or self.onmessage = function(e) {  console.log(e.origin);\n or   port = e.ports[0];});", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent.ports": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent.ports", 
        "params": [], 
        "path": "dom/extendablemessageevent/ports", 
        "syntax": "ExtendableMessageEvent interface returns the array containing the MessagePort objects representing the ports of the associated message channel (the channel the message is being sent through.)", 
        "type": "Service Workers"
    }, 
    "ExtendableMessageEvent.source": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ExtendableMessageEvent.source", 
        "params": [], 
        "path": "dom/extendablemessageevent/source", 
        "syntax": "ExtendableMessageEvent returns a reference to the Client object from which the message was sent. Syntax var mySource = ExtendableMessageEventInstance.source; Value A Client, ServiceWorker", 
        "type": "Service Workers"
    }, 
    "FederatedCredential": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FederatedCredential", 
        "params": [
            {
                "descr": "Creates a new FederatedCredential object.", 
                "name": "FederatedCredential.FederatedCredential()"
            }, 
            {
                "descr": "Returns a USVString containing a credential's federated identity provider.", 
                "name": "FederatedCredential.provider Read only"
            }
        ], 
        "path": "dom/federatedcredential", 
        "syntax": "FederatedCredential interface of the the Credential Management API provides information about credentials from a federated identity provider, which is an entity that a website trusts to correctly authenticate a user, and which provides an API for that purpose. OpenID Connect is an example of such a framework. In supporting browsers an instance of this class may be passed in the credential member of the init object for global fetch", 
        "type": "Credential Management"
    }, 
    "FederatedCredential.provider": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FederatedCredential.provider", 
        "params": [], 
        "path": "dom/federatedcredential/provider", 
        "syntax": "provider property of the FederatedCredential interface returns a USVString containing a credential's federated identity provider. Syntax var provider = FederatedCredential.provider Value A USVString containing a credential's federated identity provider. Example // TBD Specifications    Specification Status Comment   Credential Management Level 1 Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 51.0 ? ? ? ? ? 51.0          Edit this page on MDN", 
        "type": "Credential Management"
    }, 
    "Fetch API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Fetch API", 
        "params": [
            {
                "descr": "Contains the fetch() method used to fetch a resource.", 
                "name": "GlobalFetch"
            }, 
            {
                "descr": "Represents response/request headers, allowing you to query them and take different actions depending on the results.", 
                "name": "Headers"
            }, 
            {
                "descr": "Represents a resource request.", 
                "name": "Request"
            }, 
            {
                "descr": "Represents the response to a request.", 
                "name": "Response"
            }, 
            {
                "descr": "Provides methods relating to the body of the response/request, allowing you to declare what its content type is and how it should be handled.", 
                "name": "Body"
            }
        ], 
        "path": "dom/fetch_api", 
        "syntax": "XMLHttpRequest, but the new API provides a more powerful and flexible feature set. Concepts and usage Fetch provides a generic definition of Request and Response objects (and other things involved with network requests). This will allow them to be used wherever they are needed in the future, whether it\u2019s for service workers, Cache API and other similar things that handle or modify requests and responses, or any kind of use case that might require you to generate your own responses programmatically.", 
        "type": "Fetch"
    }, 
    "Fetch API: Using Fetch": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Fetch API: Using Fetch", 
        "params": [], 
        "path": "dom/fetch_api/using_fetch", 
        "syntax": "fetch()", 
        "type": "Fetch"
    }, 
    "FetchEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FetchEvent", 
        "params": [
            {
                "descr": "Creates a new FetchEvent object.", 
                "name": "FetchEvent.FetchEvent()"
            }, 
            {
                "descr": "Returns a Boolean that is true if the event was dispatched with the user's intention for the page to reload, and false otherwise. ", 
                "name": "FetchEvent.isReload Read only"
            }, 
            {
                "descr": "Returns the Request that triggered the event handler.", 
                "name": "FetchEvent.request Read only"
            }, 
            {
                "descr": "Returns the id of the client that the current service worker is controlling.", 
                "name": "FetchEvent.clientId Read only"
            }, 
            {
                "descr": "Returns the Client that the current service worker is controlling.", 
                "name": "FetchEvent.client Read only"
            }, 
            {
                "descr": "Resolves by returning a Response or a network error to Fetch.", 
                "name": "FetchEvent.respondWith()"
            }, 
            {
                "descr": "Extends the lifetime of the event. ", 
                "name": "ExtendableEvent.waitUntil()"
            }
        ], 
        "path": "dom/fetchevent", 
        "syntax": "ServiceWorkerGlobalScope.onfetch handler, FetchEvent represents a fetch action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker", 
        "type": "Fetch"
    }, 
    "FetchEvent clone": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FetchEvent clone", 
        "params": [], 
        "path": "dom/fetchevent_clone", 
        "syntax": "InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker", 
        "type": "Fetch"
    }, 
    "FetchEvent.clientId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FetchEvent.clientId", 
        "params": [], 
        "path": "dom/fetchevent/clientid", 
        "syntax": "clientId read-only property of the FetchEvent", 
        "type": "Fetch"
    }, 
    "FetchEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FetchEvent.constructor", 
        "params": [
            {
                "descr": "The type of the Event.", 
                "name": "type"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/fetchevent/fetchevent", 
        "syntax": "FetchEvent()", 
        "type": "Fetch"
    }, 
    "FetchEvent.isReload": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FetchEvent.isReload", 
        "params": [], 
        "path": "dom/fetchevent/isreload", 
        "syntax": "isReload read-only property of the FetchEvent", 
        "type": "Fetch"
    }, 
    "FetchEvent.request": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FetchEvent.request", 
        "params": [], 
        "path": "dom/fetchevent/request", 
        "syntax": "request read-only property of the FetchEvent", 
        "type": "Fetch"
    }, 
    "FetchEvent.respondWith": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FetchEvent.respondWith", 
        "params": [], 
        "path": "dom/fetchevent/respondwith", 
        "syntax": "respondWith()", 
        "type": "Fetch"
    }, 
    "File": {
        "descr": "The File interface provides information about files and allows JavaScript in a web page to access their content.", 
        "name": "File", 
        "params": [
            {
                "descr": "Returns the last modified time of the file, in millisecond since the UNIX epoch (January 1st, 1970 at Midnight).", 
                "name": "File.lastModified Read only"
            }, 
            {
                "descr": "Returns the last modified Date of the file referenced by the File object.", 
                "name": "File.lastModifiedDate Read only"
            }, 
            {
                "descr": "Returns the name of the file referenced by the File object.", 
                "name": "File.name Read only"
            }, 
            {
                "descr": "Returns the path the URL of the File is relative to.", 
                "name": "File.webkitRelativePath Read only"
            }
        ], 
        "path": "dom/file", 
        "syntax": "File.fileName, File.fileSize, File.getAsBinary()", 
        "type": "File"
    }, 
    "File System API: Introduction": {
        "descr": "The File System API simulates a local file system that web apps can navigate around. You can develop apps that can read, write, and create files and directories in a sandboxed, virtual file system.", 
        "name": "File System API: Introduction", 
        "params": [
            {
                "descr": "Stands for binary large object. ", 
                "name": "blob"
            }, 
            {
                "descr": "Blob\u2014with a capital B\u2014is a data structure that is immutable, which means that binary data referenced by a Blob cannot be modified directly. ", 
                "name": "Blob"
            }, 
            {
                "descr": "Persistent storage is storage that stays in the browser unless the user expunges it or the app deletes it.", 
                "name": "persistent storage"
            }, 
            {
                "descr": "Transient storage is available to any web app. ", 
                "name": "temporary storage"
            }
        ], 
        "path": "dom/file_system_api/introduction", 
        "syntax": "requestFileSystem()", 
        "type": "File"
    }, 
    "File.name": {
        "descr": "Returns the name of the file represented by a File object. For security reasons, the path is excluded from this property.", 
        "name": "File.name", 
        "params": [], 
        "path": "dom/file/name", 
        "syntax": "var name = file.name; Value A string, containing the name of the file without path, such as \"My Resume.rtf\". Example <input type=\"file\" multiple onchange=\"processSelectedFiles(this)\">", 
        "type": "File"
    }, 
    "FileReader.abort": {
        "descr": "The abort method aborts the read operation. Upon return, the readyState will be DONE.", 
        "name": "FileReader.abort", 
        "params": [
            {
                "descr": "Thrown when abort is called while no read operation is in progress (that is, the state isn't LOADING).", 
                "name": "DOM_FILE_ABORT_ERR"
            }
        ], 
        "path": "dom/filereader/abort", 
        "syntax": "instanceOfFileReader.abort();", 
        "type": "File"
    }, 
    "FileReader.error": {
        "descr": "Returns the error that occurred while reading the file.", 
        "name": "FileReader.error", 
        "params": [], 
        "path": "dom/filereader/error", 
        "syntax": "var error = instanceOfFileReader.error Value A DOMError Specifications    Specification Status Comment   File APIThe definition of 'FileReader' in that specification. Working Draft Initial definition    Browser compatibility      Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.6 (1.9.2)[1] 7 10[2] 12.02[3] 6.0.2         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support 32 3 10 11.5 6.1     [1] Prior to Gecko 2.0 beta 7 (Firefox 4.0 beta 7), all Blob", 
        "type": "File"
    }, 
    "FileReader.readAsArrayBuffer": {
        "descr": "The FileReader interface's readAsArrayBuffer() method is used to start reading the contents of a specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains an ArrayBuffer representing the file's data.", 
        "name": "FileReader.readAsArrayBuffer", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }
        ], 
        "path": "dom/filereader/readasarraybuffer", 
        "syntax": "instanceOfFileReader.readAsArrayBuffer(blob);", 
        "type": "File"
    }, 
    "FileReader.readAsDataURL": {
        "descr": "The readAsDataURL method is used to read the contents of the specified Blob or File. When the read operation is finished, the readyState becomes DONE, and the loadend is triggered. At that time, the result attribute contains the data as a URL representing the file's data as a base64 encoded string.", 
        "name": "FileReader.readAsDataURL", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }
        ], 
        "path": "dom/filereader/readasdataurl", 
        "syntax": "instanceOfFileReader.readAsDataURL(blob);", 
        "type": "File"
    }, 
    "FileReader.readAsText": {
        "descr": "The readAsText method is used to read the contents of the specified Blob or File. When the read operation is complete, the readyState is changed to DONE, the loadend is triggered, and the result attribute contains the contents of the file as a text string.", 
        "name": "FileReader.readAsText", 
        "params": [
            {
                "descr": "The Blob or File from which to read.", 
                "name": "blob"
            }, 
            {
                "descr": "A string specifying the encoding to use for the returned data. ", 
                "name": "encoding Optional"
            }
        ], 
        "path": "dom/filereader/readastext", 
        "syntax": "instanceOfFileReader.readAsText(blob[, encoding]);", 
        "type": "File"
    }, 
    "FileReader.readyState": {
        "descr": "Provides the current state of the reading operation.", 
        "name": "FileReader.readyState", 
        "params": [], 
        "path": "dom/filereader/readystate", 
        "syntax": "var state = instanceOfFileReader.readyState Value A number which is one of the three possible state constants define for the FileReader", 
        "type": "File"
    }, 
    "FileReader.result": {
        "descr": "Returns the file's contents. This property is only valid after the read operation is complete, and the format of the data depends on which of the methods was used to initiate the read operation.", 
        "name": "FileReader.result", 
        "params": [], 
        "path": "dom/filereader/result", 
        "syntax": "var file = instanceOfFileReader.result Value A string or an ArrayBuffer which depends on the method used to initiate the read operation. Specifications    Specification Status Comment   File APIThe definition of 'FileReader' in that specification. Working Draft Initial definition    Browser compatibility      Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 3.6 (1.9.2)[1] 7 10[2] 12.02[3] 6.0.2         Feature Firefox Mobile (Gecko) Android IE Mobile Opera Mobile Safari Mobile   Basic support 32 3 10 11.5 6.1     [1] Prior to Gecko 2.0 beta 7 (Firefox 4.0 beta 7), all Blob", 
        "type": "File"
    }, 
    "FileReaderSync": {
        "descr": "The FileReaderSync interface allows to read File or Blob objects in a synchronous way.", 
        "name": "FileReaderSync", 
        "params": [
            {
                "descr": "The DOM Blob or File to read into the ArrayBuffer.", 
                "name": "blob"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected:  the resource has been modified by a third party; too many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "is raised when the resource is a data URL and exceed the limit length defined by each browser.", 
                "name": "EncodingError"
            }, 
            {
                "descr": "The DOM Blob or File to read into the DOMString.", 
                "name": "blob"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected:  the resource has been modified by a third party; two many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "is raised when the resource is a data URL and exceed the limit length defined by each browser.", 
                "name": "EncodingError"
            }, 
            {
                "descr": "The DOM Blob or File to read into the DOMString.", 
                "name": "blob"
            }, 
            {
                "descr": "Optional. A string representing the encoding to be used, like iso-8859-1 or UTF-8.", 
                "name": "encoding"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected:  the resource has been modified by a third party; two many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "The DOM Blob or File to read.", 
                "name": "blob"
            }, 
            {
                "descr": "is raised when the resource represented by the DOM Blob or File cannot be found, e. ", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "is raised when one of the following problematic situation is detected:  the resource has been modified by a third party; too many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).", 
                "name": "SecurityError"
            }, 
            {
                "descr": "is raised when the resource cannot be read due to a permission problem, like a concurrent lock.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "is raised when the resource is a data URL and exceed the limit length defined by each browser.", 
                "name": "EncodingError"
            }
        ], 
        "path": "dom/filereadersync", 
        "syntax": "Parameters  blob The DOM Blob or File to read.    Return value An DOMString representing the file's data as a data URL.  Exceptions The following exceptions can be raised by this method:  NotFoundError is raised when the resource represented by the DOM Blob or File cannot be found, e. g. because it has been erased. SecurityError is raised when one of the following problematic situation is detected:  the resource has been modified by a third party; too many read are performed simultaneously; the file pointed by the resource is unsafe for a use from the Web (like it is a system file).   NotReadableError", 
        "type": "File"
    }, 
    "Float32Array": {
        "descr": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Float32Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Float32Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Float32Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Float32Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Float32Array.prototype"
            }, 
            {
                "descr": "Creates a new Float32Array from an array-like or iterable object. ", 
                "name": "Float32Array.from()"
            }, 
            {
                "descr": "Creates a new Float32Array with a variable number of arguments. ", 
                "name": "Float32Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Float32Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Float32Array Fixed at construction time and thus read only.", 
                "name": "Float32Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Float32Array from the start of its ArrayBuffer. ", 
                "name": "Float32Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Float32Array from the start of its ArrayBuffer. ", 
                "name": "Float32Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Float32Array. ", 
                "name": "Float32Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Float32Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Float32Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Float32Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Float32Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Float32Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Float32Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Float32Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Float32Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Float32Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Float32Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Float32Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Float32Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Float32Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Float32Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Float32Array.prototype.copyWithin().", 
                "name": "Float32Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Float32Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Float32Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Float32Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Float32Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Float32Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Float32Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Float32Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Float32Array from the given start and end element index.", 
                "name": "Float32Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Float32Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Float32Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Float32Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Float32Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/float32array", 
        "syntax": "new Float32Array(length);\n or new Float32Array(typedArray);\n or new Float32Array(object);\n or new Float32Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Float64Array": {
        "descr": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Float64Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Float64Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Float64Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Float64Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Float64Array.prototype"
            }, 
            {
                "descr": "Creates a new Float64Array from an array-like or iterable object. ", 
                "name": "Float64Array.from()"
            }, 
            {
                "descr": "Creates a new Float64Array with a variable number of arguments. ", 
                "name": "Float64Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Float64Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Float64Array Fixed at construction time and thus read only.", 
                "name": "Float64Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Float64Array from the start of its ArrayBuffer. ", 
                "name": "Float64Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Float64Array from the start of its ArrayBuffer. ", 
                "name": "Float64Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Float64Array. ", 
                "name": "Float64Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Float64Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Float64Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Float64Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Float64Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Float64Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Float64Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Float64Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Float64Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Float64Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Float64Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Float64Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Float64Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Float64Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Float64Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Float64Array.prototype.copyWithin().", 
                "name": "Float64Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Float64Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Float64Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Float64Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Float64Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Float64Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Float64Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Float64Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Float64Array from the given start and end element index.", 
                "name": "Float64Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Float64Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Float64Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Float64Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Float64Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/float64array", 
        "syntax": "new Float64Array(length);\n or new Float64Array(typedArray);\n or new Float64Array(object);\n or new Float64Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "FocusEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FocusEvent", 
        "params": [
            {
                "descr": "Creates a FocusEvent event with the given parameters.", 
                "name": "FocusEvent()"
            }, 
            {
                "descr": "Is an EventTarget representing a secondary target for this event. ", 
                "name": "FocusEvent.relatedTarget Read only"
            }
        ], 
        "path": "dom/focusevent", 
        "syntax": "FocusEvent interface represents focus-related events like focus, blur, focusin, or focusout. Constructor  FocusEvent()", 
        "type": "Events"
    }, 
    "FocusEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FocusEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a FocusEventInit dictionary, having the following fields:  \"relatedTarget\", optional and defaulting to null, is an EventTarget representing the secondary target of a FocusEvent. ", 
                "name": "focusEventInitOptional"
            }
        ], 
        "path": "dom/focusevent/focusevent", 
        "syntax": "FocusEvent()", 
        "type": "Events"
    }, 
    "FocusEvent.relatedTarget": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FocusEvent.relatedTarget", 
        "params": [], 
        "path": "dom/focusevent/relatedtarget", 
        "syntax": "FocusEvent.relatedTarget read-only property represents a secondary target for this event, which will depend on the event itself. In some cases (like when tabbing in or out a page), this property may be set to null", 
        "type": "Events"
    }, 
    "FontFace": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FontFace", 
        "params": [
            {
                "descr": "Constructs and returns a new FontFace object, built from an external resource described by an URL or from an ArrayBuffer.", 
                "name": "FontFace()"
            }, 
            {
                "descr": "Is a DOMString that contains the family of the font. ", 
                "name": "FontFace.family"
            }, 
            {
                "descr": "Is a DOMString that contains the style of the font. ", 
                "name": "FontFace.style"
            }, 
            {
                "descr": "Is a DOMString that contains the weight of the font. ", 
                "name": "FontFace.weight"
            }, 
            {
                "descr": "Is a DOMString that contains how the font stretches. ", 
                "name": "FontFace.stretch"
            }, 
            {
                "descr": "Is a DOMString that contains the range of code encompassed the font. ", 
                "name": "FontFace.unicodeRange"
            }, 
            {
                "descr": "Is a DOMString that contains the variant of the font. ", 
                "name": "FontFace.variant"
            }, 
            {
                "descr": "Is a DOMString that contains the features of the font. ", 
                "name": "FontFace.featureSettings"
            }, 
            {
                "descr": "Returns an enumerated value indicating the status of the font. ", 
                "name": "FontFace.status Read only"
            }, 
            {
                "descr": "Returns a Promise to a FontFace that fulfills when the font is completely loaded and rejects when an error happens.", 
                "name": "FontFace.loaded Read only"
            }, 
            {
                "descr": "Loads the font, returning a Promise to a FontFace that fulfills when the font is completely loaded and rejects when an error happens.", 
                "name": "FontFace.load()"
            }
        ], 
        "path": "dom/fontface", 
        "syntax": "FontFace interface represents a single usable font face. It allows control of the source of the font face, being a URL to an external resource, or a buffer; it also allows control of when the font face is loaded and its current status. Constructor  FontFace()", 
        "type": "CSS"
    }, 
    "FontFaceSet": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "FontFaceSet", 
        "params": [
            {
                "descr": "Indicates the font face's loading status. ", 
                "name": "FontFaceSet.status Read only"
            }, 
            {
                "descr": "An EventListener property called whenever an event of type loading is fired, indicating that a font face set has started to load.", 
                "name": "FontFaceSet.onloading"
            }, 
            {
                "descr": "An EventListener property called whenever an event of type loadingdone is fired, indicating that a font face set has finished loading.", 
                "name": "FontFaceSet.onloadingdone"
            }, 
            {
                "descr": "An EventListener property called whenever an event of type loadingerror is fired, indicating that an error occurred during the loading of a font face set.", 
                "name": "FontFaceSet.onloadingerror"
            }, 
            {
                "descr": "Adds a font to the the font set.", 
                "name": "FontFaceSet.add()"
            }, 
            {
                "descr": "A boolean that indicates wether a font is loaded but does not initiate a load when it is not.", 
                "name": "FontFaceSet.check()"
            }, 
            {
                "descr": "Removes all fonts from the font set.", 
                "name": "FontFaceSet.clear()"
            }, 
            {
                "descr": "Removes a font from the font set.", 
                "name": "FontFaceSet.delete()"
            }, 
            {
                "descr": "Returns a Promise resolving to a list of font faces for a requested font.", 
                "name": "FontFaceSet.load()"
            }, 
            {
                "descr": "Returns a Promise indicating that font loading and layout operations are done", 
                "name": "FontFaceSet.ready()"
            }
        ], 
        "path": "dom/fontfaceset", 
        "syntax": "FontFaceSet interface of the CSS Font Loading API is an interface for loading font faces and checking their download statuses. Properties  FontFaceSet.status Read only  Indicates the font face's loading status. It will be one of 'loading' or 'loaded'.  Events  FontFaceSet.onloading An EventListener property called whenever an event of type loading is fired, indicating that a font face set has started to load. FontFaceSet.onloadingdone An EventListener property called whenever an event of type loadingdone is fired, indicating that a font face set has finished loading. FontFaceSet.onloadingerror An EventListener property called whenever an event of type loadingerror is fired, indicating that an error occurred during the loading of a font face set.  Methods  FontFaceSet.add()", 
        "type": "CSS"
    }, 
    "FontFaceSet.check": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FontFaceSet.check", 
        "params": [], 
        "path": "dom/fontfaceset/check", 
        "syntax": "check()", 
        "type": "CSS"
    }, 
    "FontFaceSet.load": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FontFaceSet.load", 
        "params": [], 
        "path": "dom/fontfaceset/load", 
        "syntax": "load()", 
        "type": "CSS"
    }, 
    "FontFaceSet.ready": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "FontFaceSet.ready", 
        "params": [], 
        "path": "dom/fontfaceset/ready", 
        "syntax": "ready()", 
        "type": "CSS"
    }, 
    "FormData": {
        "descr": "The FormData interface provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using the XMLHttpRequest.send() method. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\".", 
        "name": "FormData", 
        "params": [
            {
                "descr": "Creates a new FormData object.", 
                "name": "FormData()"
            }, 
            {
                "descr": "Appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.", 
                "name": "FormData.append()"
            }, 
            {
                "descr": "Deletes a key/value pair from a FormData object.", 
                "name": "FormData.delete()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all key/value pairs contained in this object.", 
                "name": "FormData.entries()"
            }, 
            {
                "descr": "Returns the first value associated with a given key from within a FormData object.", 
                "name": "FormData.get()"
            }, 
            {
                "descr": "Returns an array of all the values associated with a given key from within a FormData.", 
                "name": "FormData.getAll()"
            }, 
            {
                "descr": "Returns a boolean stating whether a FormData object contains a certain key/value pair.", 
                "name": "FormData.has()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.", 
                "name": "FormData.keys()"
            }, 
            {
                "descr": "Sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.", 
                "name": "FormData.set()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all values of the key/value pairs contained in this object.", 
                "name": "FormData.values()"
            }
        ], 
        "path": "dom/formdata", 
        "syntax": "iterator allowing to go through all key/value pairs contained in this object. FormData.get()", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.Using FormData Objects": {
        "descr": "You can build a FormData object yourself, instantiating it then appending fields to it by calling its append() method, like this:", 
        "name": "FormData.Using FormData Objects", 
        "params": [], 
        "path": "dom/formdata/using_formdata_objects", 
        "syntax": "<form>, specify that form element when creating the FormData object: var formData = new FormData(someFormElement);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.append": {
        "descr": "The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.", 
        "name": "FormData.append", 
        "params": [
            {
                "descr": "The name of the field whose data is contained in value.", 
                "name": "name"
            }, 
            {
                "descr": "The field's value. This can be a USVString or Blob (including subclasses such as File).", 
                "name": "value"
            }, 
            {
                "descr": "The filename reported to the server (a USVString), when a Blob or File is passed as the second parameter. ", 
                "name": "filename Optional"
            }
        ], 
        "path": "dom/formdata/append", 
        "syntax": "formData.append(name, value);\n or formData.append(name, value, filename);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.constructor": {
        "descr": "The FormData() constructor creates a new FormData object.", 
        "name": "FormData.constructor", 
        "params": [
            {
                "descr": "An HTML <form> element \u2014 when specified, the FormData object will be populated with the form's current keys/values using the name property of each element for the keys and their submitted value for the values. It will also encode file input content.", 
                "name": "form Optional"
            }
        ], 
        "path": "dom/formdata/formdata", 
        "syntax": "var formData = new FormData(form)", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.delete": {
        "descr": "The delete() method of the FormData interface deletes a key and its value(s) from a FormData object.", 
        "name": "FormData.delete", 
        "params": [
            {
                "descr": "The name of the key you want to delete.", 
                "name": "name"
            }
        ], 
        "path": "dom/formdata/delete", 
        "syntax": "formData.delete(name);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.entries": {
        "descr": "The FormData.entries() method returns an iterator allowing to go through all key/value pairs contained in this object. The key of each pair is a USVString object; the value either a USVString, or a Blob.", 
        "name": "FormData.entries", 
        "params": [], 
        "path": "dom/formdata/entries", 
        "syntax": "iterator allowing to go through all key/value pairs contained in this object. The key of each pair is a USVString object; the value either a USVString, or a Blob.  Note: This method is available in Web Workers.  Syntax formData.entries();", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.get": {
        "descr": "The get() method of the FormData interface returns the first value associated with a given key from within a FormData object. If you expect multiple values and want all of them, use the getAll() method instead.", 
        "name": "FormData.get", 
        "params": [
            {
                "descr": "A USVString representing the name of the key you want to retrieve.", 
                "name": "name"
            }
        ], 
        "path": "dom/formdata/get", 
        "syntax": "formData.get(name);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.getAll": {
        "descr": "The getAll() method of the FormData interface returns all the values associated with a given key from within a FormData object.", 
        "name": "FormData.getAll", 
        "params": [
            {
                "descr": "A USVString representing the name of the key you want to retrieve.", 
                "name": "name"
            }
        ], 
        "path": "dom/formdata/getall", 
        "syntax": "formData.getAll(name);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.has": {
        "descr": "The has() method of the FormData interface returns a boolean stating whether a FormData object contains a certain key.", 
        "name": "FormData.has", 
        "params": [
            {
                "descr": "A USVString representing the name of the key you want to test for.", 
                "name": "name"
            }
        ], 
        "path": "dom/formdata/has", 
        "syntax": "formData.has(name);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.keys": {
        "descr": "The FormData.keys() method returns an iterator allowing to go through all keys contained in this object. The keys are USVString objects.", 
        "name": "FormData.keys", 
        "params": [], 
        "path": "dom/formdata/keys", 
        "syntax": "iterator allowing to go through all keys contained in this object. The keys are USVString objects.  Note: This method is available in Web Workers.  Syntax formData.keys();", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.set": {
        "descr": "The set() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.", 
        "name": "FormData.set", 
        "params": [
            {
                "descr": "The name of the field whose data is contained in value.", 
                "name": "name"
            }, 
            {
                "descr": "The field's value. In the two parameter version this is a USVString, or if it is not, it is converted to a string. ", 
                "name": "value"
            }, 
            {
                "descr": "The filename reported to the server (a USVString), when a Blob or File is passed as the second parameter. ", 
                "name": "filename Optional"
            }
        ], 
        "path": "dom/formdata/set", 
        "syntax": "formData.set(name, value);\n or formData.set(name, value, filename);", 
        "type": "XMLHTTPRequest"
    }, 
    "FormData.values": {
        "descr": "The FormData.values() method returns an iterator allowing to go through all values contained in this object. The values are USVString or Blob objects.", 
        "name": "FormData.values", 
        "params": [], 
        "path": "dom/formdata/values", 
        "syntax": "iterator allowing to go through all values contained in this object. The values are USVString or Blob objects.  Note: This method is available in Web Workers.  Syntax formData.values();", 
        "type": "XMLHTTPRequest"
    }, 
    "Frame Timing API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Frame Timing API", 
        "params": [
            {
                "descr": "Set to \"frame\".", 
                "name": "PerformanceEntry.entryType"
            }, 
            {
                "descr": "Set to the document's address.", 
                "name": "PerformanceEntry.name"
            }, 
            {
                "descr": "Set to the DOMHighResTimeStamp when the frame was started.", 
                "name": "PerformanceEntry.startTime"
            }, 
            {
                "descr": "Set to a timestamp indicating the difference between the startTimes of two successive frames.", 
                "name": "PerformanceEntry.duration"
            }
        ], 
        "path": "dom/frame_timing_api", 
        "syntax": "PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop iteration such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60 fps (frames per second) for a 60 Hz refresh rate is a common target for a good responsive user experience. This means the browser should process a frame in about 16.7 ms.", 
        "type": "Web Performance"
    }, 
    "Frame Timing API: Using the Frame Timing API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Frame Timing API: Using the Frame Timing API", 
        "params": [
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects based on the list of entry types given to PerformanceObserver.observe().", 
                "name": "PerformanceObserverEntryList.getEntries()"
            }, 
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects of the given entry type.", 
                "name": "PerformanceObserverEntryList.getEntriesByType()"
            }, 
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects based on the given name and entry type.", 
                "name": "PerformanceObserverEntryList.getEntriesByName()"
            }
        ], 
        "path": "dom/frame_timing_api/using_the_frame_timing_api", 
        "syntax": "PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop iteration such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60 fps (frames per second) for a 60 Hz refresh rate is a common target for a good responsive user experience. This means the browser should process a frame in about 16.7ms.", 
        "type": "Web Performance"
    }, 
    "Function": {
        "descr": "The Function constructor creates a new Function object. In JavaScript every function is actually a Function object.", 
        "name": "Function", 
        "params": [
            {
                "descr": "Names to be used by the function as formal argument names. ", 
                "name": "arg1, arg2, ... argN"
            }, 
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.", 
                "name": "functionBody"
            }, 
            {
                "descr": "An array corresponding to the arguments passed to a function. ", 
                "name": "Function.arguments"
            }, 
            {
                "descr": "Used to specifiy the number of arguments expected by the function, but has been removed. ", 
                "name": "Function.arity"
            }, 
            {
                "descr": "Specifies the function that invoked the currently executing function.", 
                "name": "Function.caller"
            }, 
            {
                "descr": "Specifies the number of arguments expected by the function.", 
                "name": "Function.length"
            }, 
            {
                "descr": "The name of the function.", 
                "name": "Function.name"
            }, 
            {
                "descr": "The display name of the function.", 
                "name": "Function.displayName"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype. ", 
                "name": "Function.prototype.constructor"
            }, 
            {
                "descr": "Calls a function and sets its this to the provided value, arguments can be passed as an Array object.", 
                "name": "Function.prototype.apply()"
            }, 
            {
                "descr": "Creates a new function which, when called, has its this set to the provided value, with a given sequence of arguments preceding any provided when the new function was called.", 
                "name": "Function.prototype.bind()"
            }, 
            {
                "descr": "Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.", 
                "name": "Function.prototype.call()"
            }, 
            {
                "descr": "Returns true if the function is a generator; otherwise returns false.", 
                "name": "Function.prototype.isGenerator()"
            }, 
            {
                "descr": "Returns a string representing the source code of the function. ", 
                "name": "Function.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the source code of the function. ", 
                "name": "Function.prototype.toString()"
            }
        ], 
        "path": "javascript/global_objects/function", 
        "syntax": "new Function ([arg1[, arg2[, ...argN]],] functionBody)", 
        "type": "Function"
    }, 
    "Functions": {
        "descr": "Generally speaking, a function is a \"subprogram\" that can be called by code external (or internal in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function, and the function will return a value.", 
        "name": "Functions", 
        "params": [
            {
                "descr": "The function name.", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "param"
            }, 
            {
                "descr": "The statements comprising the body of the function.", 
                "name": "statements"
            }, 
            {
                "descr": "The function name. Can be omitted, in which case the function becomes known as an anonymous function.", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "param"
            }, 
            {
                "descr": "The statements comprising the body of the function.", 
                "name": "statements"
            }, 
            {
                "descr": "The function name.", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "param"
            }, 
            {
                "descr": "The statements comprising the body of the function.", 
                "name": "statements"
            }, 
            {
                "descr": "The function name. Can be omitted, in which case the function becomes known as an anonymous function.", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "param"
            }, 
            {
                "descr": "The statements comprising the body of the function.", 
                "name": "statements"
            }, 
            {
                "descr": "The name of an argument. Zero arguments need to be indicated with (). ", 
                "name": "param"
            }, 
            {
                "descr": "Multiple statements need to be enclosed in brackets. ", 
                "name": "statements or expression"
            }, 
            {
                "descr": "Zero or more names to be used by the function as formal parameters. ", 
                "name": "arg1, arg2, ... argN"
            }, 
            {
                "descr": "A string containing the JavaScript statements comprising the function body.", 
                "name": "functionBody"
            }, 
            {
                "descr": "Zero or more names to be used by the function as formal argument names. ", 
                "name": "arg1, arg2, ... argN"
            }, 
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.", 
                "name": "functionBody"
            }, 
            {
                "descr": "Binds an object property to a function that will be called when that property is looked up.", 
                "name": "get"
            }, 
            {
                "descr": "Binds an object property to a function to be called when there is an attempt to set that property.", 
                "name": "set"
            }
        ], 
        "path": "javascript/functions", 
        "syntax": "function name([param[, param[, ... param]]]) {   statements}", 
        "type": "Function"
    }, 
    "GainNode.gain": {
        "descr": "The gain property of the GainNode interface is an a-rate AudioParam representing the amount of gain to apply.", 
        "name": "GainNode.gain", 
        "params": [], 
        "path": "dom/gainnode/gain", 
        "syntax": "var audioCtx = new AudioContext();\n or var gainNode = audioCtx.createGain();\n or gainNode.gain.value = 0.5;);", 
        "type": "Web Audio"
    }, 
    "Generator": {
        "descr": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.", 
        "name": "Generator", 
        "params": [
            {
                "descr": "Returns a value yielded by the yield expression.", 
                "name": "Generator.prototype.next()"
            }, 
            {
                "descr": "Returns the given value and finishes the generator.", 
                "name": "Generator.prototype.return()"
            }, 
            {
                "descr": "Throws an error to a generator.", 
                "name": "Generator.prototype.throw()"
            }, 
            {
                "descr": "Returns a value yielded by the yield expression. ", 
                "name": "Generator.prototype.next()"
            }, 
            {
                "descr": "Closes the generator, so that when calling next() an StopIteration error will be thrown. ", 
                "name": "Generator.prototype.close()"
            }, 
            {
                "descr": "Used to send a value to a generator. ", 
                "name": "Generator.prototype.send()"
            }, 
            {
                "descr": "Throws an error to a generator. ", 
                "name": "Generator.prototype.throw()"
            }
        ], 
        "path": "javascript/global_objects/generator", 
        "syntax": "function* gen() {   yield 1;  yield 2;  yield 3;}var g = gen();\n or  // \"Generator { }\");", 
        "type": "Generator"
    }, 
    "Generator comprehensions": {
        "descr": "The generator comprehension syntax is a JavaScript expression which allows you to quickly assemble a new generator function based on an existing iterable object. Comprehensions exist in many programming languages.", 
        "name": "Generator comprehensions", 
        "params": [], 
        "path": "javascript/operators/generator_comprehensions", 
        "syntax": "(for (x of iterable) x)(for (x of iterable) if (condition) x)(for (x of iterable) for (y of iterable) x + y)", 
        "type": "Operators"
    }, 
    "GeneratorFunction": {
        "descr": "The GeneratorFunction constructor creates a new generator function object. In JavaScript every generator function is actually a GeneratorFunction object.", 
        "name": "GeneratorFunction", 
        "params": [
            {
                "descr": "Names to be used by the function as formal argument names. ", 
                "name": "arg1, arg2, ... argN"
            }, 
            {
                "descr": "A string containing the JavaScript statements comprising the function definition.", 
                "name": "functionBody"
            }, 
            {
                "descr": "The GeneratorFunction constructor's length property whose value is 1.", 
                "name": "GeneratorFunction.length"
            }, 
            {
                "descr": "Allows the addition of properties to all generator function objects.", 
                "name": "GeneratorFunction.prototype"
            }, 
            {
                "descr": "The initial value is GeneratorFunction.", 
                "name": "GeneratorFunction.constructor"
            }, 
            {
                "descr": "The value is %GeneratorPrototype%.", 
                "name": "GeneratorFunction.prototype.prototype"
            }
        ], 
        "path": "javascript/global_objects/generatorfunction", 
        "syntax": "new GeneratorFunction ([arg1[, arg2[, ...argN]],] functionBody)", 
        "type": "Function"
    }, 
    "Geolocation.clearWatch": {
        "descr": "The Geolocation.clearWatch() method is used to unregister location/error monitoring handlers previously installed using Geolocation.watchPosition().", 
        "name": "Geolocation.clearWatch", 
        "params": [
            {
                "descr": "The ID number returned by the Geolocation.watchPosition() method when installing the handler you wish to remove.", 
                "name": "id"
            }
        ], 
        "path": "dom/geolocation/clearwatch", 
        "syntax": "navigator.geolocation.clearWatch(id);", 
        "type": "Geolocation"
    }, 
    "Geolocation.getCurrentPosition": {
        "descr": "The Geolocation.getCurrentPosition() method is used to get the current position of the device.", 
        "name": "Geolocation.getCurrentPosition", 
        "params": [
            {
                "descr": "A callback function that takes a Position object as its sole input parameter.", 
                "name": "success"
            }, 
            {
                "descr": "An optional callback function that takes a PositionError object as its sole input parameter.", 
                "name": "error Optional"
            }, 
            {
                "descr": "An optional PositionOptions object.", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/geolocation/getcurrentposition", 
        "syntax": "navigator.geolocation.getCurrentPosition(success[, error[, options]])", 
        "type": "Geolocation"
    }, 
    "Geolocation.watchPosition": {
        "descr": "The Geolocation.watchPosition() method is used to register a handler function that will be called automatically each time the position of the device changes. You can also, optionally, specify an error handling callback function.", 
        "name": "Geolocation.watchPosition", 
        "params": [
            {
                "descr": "A callback function that takes a Position object as an input parameter.", 
                "name": "success"
            }, 
            {
                "descr": "An optional callback function that takes a PositionError object as an input parameter.", 
                "name": "error Optional"
            }, 
            {
                "descr": "An optional PositionOptions object.", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/geolocation/watchposition", 
        "syntax": "id = navigator.geolocation.watchPosition(success[, error[, options]])", 
        "type": "Geolocation"
    }, 
    "GlobalEventHandlers.GlobalEventHanders.ontouchmove": {
        "descr": "A global event handler for the touchmove event.", 
        "name": "GlobalEventHandlers.GlobalEventHanders.ontouchmove", 
        "params": [
            {
                "descr": "The touchmove event handler for element someElement.", 
                "name": "moveHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/globaleventhanders.ontouchmove", 
        "syntax": "var moveHandler = someElement.ontouchmove; Return value  moveHandler The touchmove event handler for element someElement.  Example This example shows two ways to use ontouchmove to set an element's touchmove event handler. <html><script>function moveTouch(ev) { // Process the event}function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchmove = moveTouch;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" ontouchmove=\"moveTouch(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onabort": {
        "descr": "An event handler for abort events sent to the window. (Not available with Firefox 2 or Safari)", 
        "name": "GlobalEventHandlers.onabort", 
        "params": [], 
        "path": "dom/globaleventhandlers/onabort", 
        "syntax": "window.onabort =funcRef  funcRef: Reference to a function  Example window.onabort = function() {  alert(\"Load aborted.\");\n or });", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onblur": {
        "descr": "The onblur property returns the onBlur event handler code, if any, that exists on the current element.", 
        "name": "GlobalEventHandlers.onblur", 
        "params": [], 
        "path": "dom/globaleventhandlers/onblur", 
        "syntax": "element.onblur = function;  function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as  element.onblur = function() { console.log(\"onblur event detected!\");\n or  };);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onclick": {
        "descr": "The onclick property returns the click event handler code on the current element.", 
        "name": "GlobalEventHandlers.onclick", 
        "params": [], 
        "path": "dom/globaleventhandlers/onclick", 
        "syntax": "element.onclick = functionRef; where functionRef is a function - often a name of a function declared elsewhere or a function expression. See \"JavaScript Guide:Functions\" for details. The event object passed to the specified event handler function is a MouseEvent", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.oncontextmenu": {
        "descr": "An event handler property for right-click events on the window. Unless the default behavior is prevented (see examples below on how to do this), the browser context menu will activate (though IE8 has a bug with this and will not activate the context menu if a contextmenu event handler is defined). Note that this event will occur with any non-disabled right-click event and does not depend on an element possessing the \"contextmenu\" attribute.", 
        "name": "GlobalEventHandlers.oncontextmenu", 
        "params": [], 
        "path": "dom/globaleventhandlers/oncontextmenu", 
        "syntax": "window.oncontextmenu = funcRef;//funcRef refers to the function to be called Example These examples will disable right click on the page: document.oncontextmenu = function () { // Use document as opposed to window for IE8 compatibility   return false;};window.addEventListener('contextmenu', function (e) { // Not compatible with IE < 9 \u00a0\u00a0 e.preventDefault();\n or }, false);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondblclick": {
        "descr": "The ondblclick property returns the onDblClick event handler code on the current element.", 
        "name": "GlobalEventHandlers.ondblclick", 
        "params": [], 
        "path": "dom/globaleventhandlers/ondblclick", 
        "syntax": "element.ondblclick = function;  function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration, such as  element.ondblclick = function() { console.log(\"ondblclick event detected!\");\n or  };);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondrag": {
        "descr": "A global event handler for the drag event.", 
        "name": "GlobalEventHandlers.ondrag", 
        "params": [
            {
                "descr": "The drag event handler for element targetElement.", 
                "name": "dragHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondrag", 
        "syntax": "var dragHandler = targetElement.ondrag; Return value  dragHandler The drag event handler for element targetElement.  Example This example includes the use of the ondrag attribute handler to set an element's drag event handler. <!DOCTYPE html><html lang=en><title>Examples of using the ondrag Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function drag_handler(ev) { console.log(\"Drag\");\n or }function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or }</script><body><h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div class=\"source\">   <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondragend": {
        "descr": "A global event handler for the dragend event.", 
        "name": "GlobalEventHandlers.ondragend", 
        "params": [
            {
                "descr": "The dragend event handler for element targetElement.", 
                "name": "dragendHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondragend", 
        "syntax": "var dragendHandler = targetElement.ondragend; Return value  dragendHandler The dragend event handler for element targetElement.  Example This example shows two ways to use the ondragend attribute handler to set an element's dragend event handler. <!DOCTYPE html><html lang=en><title>Examples of using the Drag and Drop Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events  ev.currentTarget.style.background = \"yellow\";}function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\";}function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate  // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\";}function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\";}function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler;}</script><body onload=\"init();\n or \"><h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div>   <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondragenter": {
        "descr": "A global event handler for the dragenter event.", 
        "name": "GlobalEventHandlers.ondragenter", 
        "params": [
            {
                "descr": "The dragenter event handler for element targetElement.", 
                "name": "dragenterHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondragenter", 
        "syntax": "var dragenterHandler = targetElement.ondragenter; Return value  dragenterHandler The dragenter event handler for element targetElement.  Example This example demonstrates using the ondragenter attribute handler to set an element's dragenter event handler. <!DOCTYPE html><html lang=en><title>Examples of using the Drag and Drop Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events  ev.currentTarget.style.background = \"yellow\";}function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\";}function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate  // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\";}function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\";}function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler;}</script><body onload=\"init();\n or \"><h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div>   <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondragexit": {
        "descr": "The GlobalEventHandler.ondragexit property is an event handler for the dragexit event.", 
        "name": "GlobalEventHandlers.ondragexit", 
        "params": [
            {
                "descr": "The dragexit event handler for element targetElement.", 
                "name": "dragexitHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondragexit", 
        "syntax": "var dragexitHandler = targetElement.ondragexit; Return value  dragexitHandler The dragexit event handler for element targetElement.  Example This example demonstrates using the ondragexit attribute handler to set an element's dragexit event handler. <!DOCTYPE html><html lang=en><title>Examples of using the Drag and Drop Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events  ev.currentTarget.style.background = \"yellow\";}function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\";}function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate  // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\";}function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\";}function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler;}</script><body onload=\"init();\n or \"><h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div>   <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondragleave": {
        "descr": "A global event handler for the dragleave event.", 
        "name": "GlobalEventHandlers.ondragleave", 
        "params": [
            {
                "descr": "The dragleave event handler for element targetElement.", 
                "name": "dragleaveHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondragleave", 
        "syntax": "var dragleaveHandler = targetElement.ondragleave; Return value  dragleaveHandler The dragleave event handler for element targetElement.  Example This example demonstrates using the ondragleave attribute handler to set an element's dragleave event handler. <!DOCTYPE html><html lang=en><title>Examples of using the Drag and Drop Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Change the source element's background color to signify drag has started ev.currentTarget.style.border = \"dashed\"; ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  // Change the target element's border to signify a drag over event // has occurred ev.currentTarget.style.background = \"lightblue\"; ev.preventDefault();\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragenter_handler(ev) { console.log(\"dragEnter\");\n or  // Change the source element's background color for enter events  ev.currentTarget.style.background = \"yellow\";}function dragleave_handler(ev) { console.log(\"dragLeave\");\n or  // Change the source element's border back to white ev.currentTarget.style.background = \"white\";}function dragend_handler(ev) { console.log(\"dragEnd\");\n or  // Change the target element's background color to visually indicate  // the drag ended. var el=document.getElementById(\"target\");\n or  el.style.background = \"pink\";}function dragexit_handler(ev) { console.log(\"dragExit\");\n or  // Change the source element's border back to green to signify a dragexit event ev.currentTarget.style.background = \"green\";}function init() { // Set handlers for the source's enter/leave/end/exit events var el=document.getElementById(\"source\");\n or  el.ondragenter = dragenter_handler; el.ondragleave = dragleave_handler; el.ondragend = dragend_handler; el.ondragexit = dragexit_handler;}</script><body onload=\"init();\n or \"><h1>Examples of <code>ondragenter</code>, <code>ondragleave</code>, <code>ondragend</code>, <code>ondragexit</code></h1> <div>   <p id=\"source\" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondragover": {
        "descr": "A global event handler for the dragover event.", 
        "name": "GlobalEventHandlers.ondragover", 
        "params": [
            {
                "descr": "The dragover event handler for element targetElement.", 
                "name": "dragoverHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondragover", 
        "syntax": "var dragoverHandler = targetElement.ondragover; Return value  dragoverHandler The dragover event handler for element targetElement.  Example This example demonstrates using the ondragover attribute handler to set an element's dragover event handler. <!DOCTYPE html><html lang=en><title>Examples of using the ondrag Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function drag_handler(ev) { console.log(\"Drag\");\n or }function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or }</script><body><h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div>   <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondragstart": {
        "descr": "A global event handler for the dragstart event.", 
        "name": "GlobalEventHandlers.ondragstart", 
        "params": [
            {
                "descr": "The dragstart event handler for element targetElement.", 
                "name": "dragstartHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondragstart", 
        "syntax": "var dragstartHandler = targetElement.ondragstart; Return value  dragstartHandler The dragstart event handler for element targetElement.  Example This example demonstrates using the ondragstart attribute handler to set an element's dragstart event handler. <!DOCTYPE html><html lang=en><title>Examples of using the ondrag Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function drag_handler(ev) { console.log(\"Drag\");\n or }function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or }</script><body><h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div>   <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ondrop": {
        "descr": "A global event handler for the drop event.", 
        "name": "GlobalEventHandlers.ondrop", 
        "params": [
            {
                "descr": "The drop event handler for element targetElement.", 
                "name": "dropHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ondrop", 
        "syntax": "var dropHandler = targetElement.ondrop; Return value  dropHandler The drop event handler for element targetElement.  Example This example demonstrates the use of the ondrop attribute to define an element's drop event handler. <!DOCTYPE html><html lang=en><title>Examples of using the ondrag Global Event Attribute</title><meta content=\"width=device-width\"><style>  div {    margin: 0em;    padding: 2em;  }  #source {    color: blue;    border: 1px solid black;  }  #target {    border: 1px solid black;  }</style></head><script>function drag_handler(ev) { console.log(\"Drag\");\n or }function dragstart_handler(ev) { console.log(\"dragStart\");\n or  ev.dataTransfer.setData(\"text\", ev.target.id);\n or }function drop_handler(ev) { console.log(\"Drop\");\n or  ev.currentTarget.style.background = \"lightyellow\"; ev.preventDefault();\n or  var data = ev.dataTransfer.getData(\"text\");\n or  ev.target.appendChild(document.getElementById(data));\n or }function dragover_handler(ev) { console.log(\"dragOver\");\n or  ev.preventDefault();\n or }</script><body><h1>Examples of <code>ondrag</code>, <code>ondrop</code>, <code>ondragstart</code>, <code>ondragover</code></h1> <div class=\"source\">   <p id=\"source\" ondrag=\"drag_handler(event);\n or \" ondragstart=\"dragstart_handler(event);\n or \" draggable=\"true\">     Select this element, drag it to the Drop Zone and then release the selection to move the element.</p> </div> <div id=\"target\" ondrop=\"drop_handler(event);\n or \" ondragover=\"dragover_handler(event);\n or \">Drop Zone</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onerror": {
        "descr": "An event handler for the error event. Error events are fired at various targets for different kinds of errors:", 
        "name": "GlobalEventHandlers.onerror", 
        "params": [
            {
                "descr": "(including syntax errors) occurs, an error event using interface ErrorEvent is fired at window and window.onerror() is invoked.", 
                "name": "JavaScript runtime error"
            }
        ], 
        "path": "dom/globaleventhandlers/onerror", 
        "syntax": "error event using interface ErrorEvent is fired at window and window.onerror()", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onkeypress": {
        "descr": "The onkeypress property sets and returns the onKeyPress event handler code for the current element.", 
        "name": "GlobalEventHandlers.onkeypress", 
        "params": [], 
        "path": "dom/globaleventhandlers/onkeypress", 
        "syntax": "element.onkeypress = event handling code Notes The keypress event should be raised when the user presses a key on the keyboard. However, not all browsers fire keypress events for certain keys. Browser Incompatibilities Webkit-based browsers (Google Chrome and Safari, for example) do not fire keypress events on the arrow keys", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onkeyup": {
        "descr": "The onkeyup property returns the onKeyUp event handler code for the current element.", 
        "name": "GlobalEventHandlers.onkeyup", 
        "params": [], 
        "path": "dom/globaleventhandlers/onkeyup", 
        "syntax": "element.onkeyup = event handling code Example  <input type=\"text\" onKeyUp=\"keyWasPressed(event)\"> <script>function keyWasPressed(evt){ console.log(evt.keyCode) }</script>", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onload": {
        "descr": "An event handler for the load event of a window.", 
        "name": "GlobalEventHandlers.onload", 
        "params": [], 
        "path": "dom/globaleventhandlers/onload", 
        "syntax": "window.onload = funcRef;  funcRef is the handler function to be called when the window's load event fires.  Examples window.onload = function() {  init();\n or   doSomethingElse();\n or };);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onmousemove": {
        "descr": "The onmousemove property returns the mousemove event handler code on the current element.", 
        "name": "GlobalEventHandlers.onmousemove", 
        "params": [], 
        "path": "dom/globaleventhandlers/onmousemove", 
        "syntax": "element.onmousemove = event handling code Notes The mousemove event is raised when the user moves the mouse. Examples Example #1: tooltips The following example shows the use of the onmousemove event with a javaScript tooltip. <!doctype html><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>Tooltip Example</title><script type=\"text/javascript\">var oTooltip = new (function() {  var nOverX, nOverY, nLeftPos, nTopPos, oNode, bOff = true;  this.follow = function (oMsEvnt1) {    if (bOff) { return; }    var nMoveX =  oMsEvnt1.clientX, nMoveY =  oMsEvnt1.clientY;    nLeftPos += nMoveX - nOverX; nTopPos += nMoveY - nOverY;    oNode.style.left = nLeftPos + \"px\";    oNode.style.top = nTopPos + \"px\";    nOverX = nMoveX; nOverY = nMoveY;  };  this.remove = function () {    if (bOff) { return; }    bOff = true; document.body.removeChild(oNode);\n or   };  this.append = function (oMsEvnt2, sTxtContent) {    oNode.innerHTML = sTxtContent;    if (bOff) { document.body.appendChild(oNode);\n or  bOff = false; }    var nScrollX = document.documentElement.scrollLeft || document.body.scrollLeft, nScrollY = document.documentElement.scrollTop || document.body.scrollTop, nWidth = oNode.offsetWidth, nHeight = oNode.offsetHeight;    nOverX = oMsEvnt2.clientX; nOverY = oMsEvnt2.clientY;    nLeftPos = document.body.offsetWidth - nOverX - nScrollX > nWidth ? nOverX + nScrollX + 10 : document.body.offsetWidth - nWidth + 16;    nTopPos = nOverY - nHeight > 6 ? nOverY + nScrollY - nHeight - 7 : nOverY + nScrollY + 20;    oNode.style.left = nLeftPos + \"px\";    oNode.style.top = nTopPos + \"px\";  };  this.init = function() {    oNode = document.createElement(\"div\");\n or     oNode.className = \"tooltip\";    oNode.style.position = \"absolute\";  };})();\n or </script><style type=\"text/css\">div.tooltip {  padding: 6px;  background: #ffffff;  border: 1px #76808C solid;  border-radius: 5px;  -moz-border-radius: 5px;  -webkit-border-radius: 5px;  z-index: 9999;}</style></head><body onload=\"oTooltip.init();\n or \"><p><a href=\"http://developer.mozilla.org/\" onmouseover=\"oTooltip.append(event,'Example text 1');\n or \" onmousemove=\"oTooltip.follow(event);\n or \" onmouseout=\"oTooltip.remove();\n or \">Move your mouse here&hellip;</a></p><p><a href=\"http://developer.mozilla.org/\" onmouseover=\"oTooltip.append(event,'Example text 2');\n or \" onmousemove=\"oTooltip.follow(event);\n or \" onmouseout=\"oTooltip.remove();\n or \">&hellip;or here!!</a></p></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onmouseout": {
        "descr": "The onmouseout property returns the onMouseOut event handler code on the current element.", 
        "name": "GlobalEventHandlers.onmouseout", 
        "params": [], 
        "path": "dom/globaleventhandlers/onmouseout", 
        "syntax": "element.onmouseout = event handling code Example <!doctype html> \u00a0<html> \u00a0<head> \u00a0<title>onmouseover/onmouseout event example</title> \u00a0<script type=\"text/javascript\"> \u00a0\u00a0\u00a0\u00a0 function initElement() \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var p = document.getElementById(\"foo\");\n or  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 p.onmouseover = showMouseOver;\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 p.onmouseout = showMouseOut;\u00a0\u00a0\u00a0 }; \u00a0\u00a0\u00a0\u00a0 function showMouseOver() \u00a0\u00a0\u00a0\u00a0 { \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var notice = document.getElementById(\"notice\");\n or \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notice.innerHTML = 'mouse over detected';\u00a0\u00a0\u00a0 }\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0 function showMouseOut()\u00a0\u00a0\u00a0 {\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 var notice = document.getElementById(\"notice\");\n or \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 notice.innerHTML = 'mouse out detected';\u00a0\u00a0\u00a0 }</script> \u00a0<style type=\"text/css\"> \u00a0\u00a0\u00a0\u00a0 #foo { \u00a0\u00a0\u00a0\u00a0 border: solid blue 2px; \u00a0\u00a0\u00a0\u00a0 } \u00a0</style> \u00a0</head> \u00a0<body onload=\"initElement()\";>  \u00a0 <span id=\"foo\">My Event Element</span>  \u00a0 <p>mouve your mouse over and out the above element.</p> \u00a0  \u00a0 <div id=\"notice\"></div></body> \u00a0</html>\u00a0);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onmouseover": {
        "descr": "The onmouseover property returns the onMouseOver event handler code on the current element.", 
        "name": "GlobalEventHandlers.onmouseover", 
        "params": [], 
        "path": "dom/globaleventhandlers/onmouseover", 
        "syntax": "element.onmouseover = event handling code Example <!doctype html>  <html>  <head>  <title>onmouseover/onmouseout event example</title>  <script type=\"text/javascript\">      function initElement()      {          var p = document.getElementById(\"foo\");\n or           p.onmouseover = showMouseOver;        p.onmouseout = showMouseOut;    };      function showMouseOver()      {          var notice = document.getElementById(\"notice\");\n or         notice.innerHTML = 'mouse over detected';    }        function showMouseOut()    {        var notice = document.getElementById(\"notice\");\n or         notice.innerHTML = 'mouse out detected';    }</script>  <style type=\"text/css\">      #foo {      border: solid blue 2px;      }  </style>  </head>  <body onload=\"initElement();\n or \">      <span id=\"foo\">My Event Element</span>    <p>move your mouse over and out the above element.</p>      <div id=\"notice\"></div></body>  </html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointercancel": {
        "descr": "A global event handler for the pointercancel event.", 
        "name": "GlobalEventHandlers.onpointercancel", 
        "params": [
            {
                "descr": "The pointercancel event handler for element targetElement.", 
                "name": "cancelHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointercancel", 
        "syntax": "var cancelHandler = targetElement.onpointercancel; Return value  cancelHandler The pointercancel event handler for element targetElement.  Example This example shows two ways to use onpointercancel to set an element's pointercancel event handler. <html><script>function cancelHandler(ev) { // Process the pointercancel event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointercancel = cancelHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointercancel=\"cancelHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointerdown": {
        "descr": "A global event handler for the pointerdown event.", 
        "name": "GlobalEventHandlers.onpointerdown", 
        "params": [
            {
                "descr": "The pointerdown event handler for element targetElement.", 
                "name": "downHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointerdown", 
        "syntax": "var downHandler = targetElement.onpointerdown; Return value  downHandler The pointerdown event handler for element targetElement.  Example This example shows two ways to use onpointerdown to set an element's pointerdown event handler. <html><script>function downHandler(ev) { // Process the pointerdown event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerdown = downHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointerdown=\"downHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointerenter": {
        "descr": "A global event handler for the pointerenter event.", 
        "name": "GlobalEventHandlers.onpointerenter", 
        "params": [
            {
                "descr": "The pointerenter event handler for element targetElement.", 
                "name": "enterHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointerenter", 
        "syntax": "var enterHandler = targetElement.onpointerenter; Return value  enterHandler The pointerenter event handler for element targetElement.  Example This example shows two ways to use onpointerenter to set an element's pointerenter event handler. <html><script>function enterHandler(ev) { // Process the pointerenter event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerenter = enterHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointerenter=\"enterHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointerleave": {
        "descr": "A global event handler for the pointerleave event.", 
        "name": "GlobalEventHandlers.onpointerleave", 
        "params": [
            {
                "descr": "The pointerleave event handler for element targetElement.", 
                "name": "leaveHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointerleave", 
        "syntax": "var leaveHandler = targetElement.onpointerleave; Return value  leaveHandler The pointerleave event handler for element targetElement.  Example This example shows two ways to use onpointerleave to set an element's pointerleave event handler. <html><script>function leaveHandler(ev) { // Process the pointerleave event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerleave = leaveHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointerleave=\"leaveHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointermove": {
        "descr": "A global event handler for the pointermove event.", 
        "name": "GlobalEventHandlers.onpointermove", 
        "params": [
            {
                "descr": "The pointermove event handler for element targetElement.", 
                "name": "moveHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointermove", 
        "syntax": "var moveHandler = targetElement.onpointermove; Return value  moveHandler The pointermove event handler for element targetElement.  Example This example shows two ways to use onpointermove to set an element's pointermove event handler. <html><script>function moveHandler(ev) { // Process the pointermove event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointermove = moveHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointermove=\"moveHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointerout": {
        "descr": "A global event handler for the pointerout event.", 
        "name": "GlobalEventHandlers.onpointerout", 
        "params": [
            {
                "descr": "The pointerout event handler for element targetElement.", 
                "name": "outHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointerout", 
        "syntax": "var outHandler = targetElement.onpointerout; Return value  outHandler The pointerout event handler for element targetElement.  Example This example shows two ways to use onpointerout to set an element's pointerout event handler. <html><script>function outHandler(ev) { // Process the pointerout event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerout = outHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointerout=\"outHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointerover": {
        "descr": "A global event handler for the pointerover event.", 
        "name": "GlobalEventHandlers.onpointerover", 
        "params": [
            {
                "descr": "The pointerover event handler for element targetElement.", 
                "name": "overHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointerover", 
        "syntax": "var overHandler = targetElement.onpointerover; Return value  overHandler The pointerover event handler for element targetElement.  Example This example shows two ways to use onpointerover to set an element's pointerover event handler. <html><script>function overHandler(ev) { // Process the pointerover event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerover = overHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointerover=\"overHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onpointerup": {
        "descr": "A global event handler for the pointerup event.", 
        "name": "GlobalEventHandlers.onpointerup", 
        "params": [
            {
                "descr": "The pointerup event handler for element targetElement.", 
                "name": "upHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/onpointerup", 
        "syntax": "var upHandler = targetElement.onpointerup; Return value  upHandler The pointerup event handler for element targetElement.  Example This example shows two ways to use onpointerup to set an element's pointerup event handler. <html><script>function upHandler(ev) { // Process the pointerup event}function init() { var el=document.getElementById(\"target1\");\n or  el.onpointerup = upHandler;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" onpointerup=\"upHandler(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onreset": {
        "descr": "The GlobalEventHandlers.onreset property contains an EventHandler triggered when a reset event is received.", 
        "name": "GlobalEventHandlers.onreset", 
        "params": [], 
        "path": "dom/globaleventhandlers/onreset", 
        "syntax": "window.onreset = funcRef; Parameters  funcRef is a reference to a function.  Example <html><script>function reg() {  window.captureEvents(Event.RESET);\n or   window.onreset = hit;} function hit() { alert('hit');\n or }</script><body onload=\"reg();\n or \"> <form>   <input type=\"reset\" value=\"reset\" /> </form> <div id=\"d\">\u00a0</div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onresize": {
        "descr": "The GlobalEventHandlers.onresize property contains an EventHandler triggered when a resize event is received.", 
        "name": "GlobalEventHandlers.onresize", 
        "params": [], 
        "path": "dom/globaleventhandlers/onresize", 
        "syntax": "window.onresize = funcRef; Parameters  funcRef is a reference to a function.  Example window.onresize = doFunc; <html><head><title>onresize test</title></head><body><p>Resize the browser window to fire the resize event.</p><p>Window height: <span id=\"height\"></span></p><p>Window width: <span id=\"width\"></span></p><script type=\"text/javascript\">\u00a0 var heightOutput = document.querySelector('#height');\n or \u00a0 var widthOutput = document.querySelector('#width');\n or \u00a0 function resize() {     heightOutput.textContent = window.innerHeight;\u00a0   widthOutput.textContent = window.innerWidth;\u00a0 }  window.onresize = resize;</script></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onscroll": {
        "descr": "An event handler for scroll events on element.", 
        "name": "GlobalEventHandlers.onscroll", 
        "params": [], 
        "path": "dom/globaleventhandlers/onscroll", 
        "syntax": "element.onscroll = functionReference Parameters functionReference is a reference to a function to be executed when element is scrolled. Example <!DOCTYPE html><html lang=\"en\">  <head>  <meta charset=\"UTF-8\" />  <style>  #container {    position: absolute;    height: auto;    top: 0;    bottom: 0;    width: auto;    left: 0;    right: 0;    overflow: auto;  }  #foo {    height:1000px;    width:1000px;    background-color: #777;    display: block;  }  </style>  </head>  <body>    <div id=\"container\">      <div id=\"foo\"></div>    </div>    <script type=\"text/javascript\">      document.getElementById('container').onscroll = function() {        console.log(\"scrolling\");\n or       };    </script>  </body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onselect": {
        "descr": "An event handler for the select event on the window.", 
        "name": "GlobalEventHandlers.onselect", 
        "params": [], 
        "path": "dom/globaleventhandlers/onselect", 
        "syntax": "window.onselect = funcRef;  funcRef is a function.  Example <html><head><title>onselect test</title><style type=\"text/css\">.text1 { border: 2px solid red; }</style><script type=\"text/javascript\">window.onselect = selectText;function selectText(){ alert(\"select event detected!\");\n or }</script></head><body><textarea class=\"text1\" cols=\"30\" rows=\"3\">Highlight some of this textwith the mouse pointerto fire the onselect event.</textarea></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onselectstart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "GlobalEventHandlers.onselectstart", 
        "params": [], 
        "path": "dom/globaleventhandlers/onselectstart", 
        "syntax": "GlobalEventHandlers.onselectstart property represents the event handler that is called when a selectstart event reaches this object. Syntax obj.onselectstart = function;  function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration.  Example", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.onsubmit": {
        "descr": "An event handler for the submit event on the window.", 
        "name": "GlobalEventHandlers.onsubmit", 
        "params": [], 
        "path": "dom/globaleventhandlers/onsubmit", 
        "syntax": "window.onsubmit = funcRef; Parameters  funcRef is a reference to a function.  Example <html><script>function reg() {  window.captureEvents(Event.SUBMIT);\n or   window.onsubmit = hit;} function hit() {  console.log('hit');\n or }</script><body onload=\"reg();\n or \"><form>  <input type=\"submit\" value=\"submit\" /></form><div id=\"d\"> </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ontouchcancel": {
        "descr": "A global event handler for the touchcancel event.", 
        "name": "GlobalEventHandlers.ontouchcancel", 
        "params": [
            {
                "descr": "The touchcancel event handler for element someElement.", 
                "name": "cancelHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ontouchcancel", 
        "syntax": "Editor's Draft specification and not in Touch Events Recommendation. This attribute is not widely implemented.  Syntax var cancelHandler = someElement.ontouchcancel; Return value  cancelHandler The touchcancel event handler for element someElement.  Example This example shows two ways to use ontouchcancel to set an element's touchcancel event handler. <html><script>function cancelTouch(ev) { // Process the event}function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchcancel = cancelTouch;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" ontouchcancel=\"cancelTouch(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ontouchend": {
        "descr": "A global event handler for the touchend event.", 
        "name": "GlobalEventHandlers.ontouchend", 
        "params": [
            {
                "descr": "The touchend event handler for element targetElement.", 
                "name": "endHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ontouchend", 
        "syntax": "Editor's Draft specification and not in Touch Events Recommendation. This attribute is not widely implemented.  Syntax var endHandler = targetElement.ontouchend; Return value  endHandler The touchend event handler for element targetElement.  Example This example shows two ways to use ontouchend to set an element's touchend event handler. <html><script>function endTouch(ev) { // Process the event}function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchend = endTouch;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" ontouchend=\"endTouch(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ontouchmove": {
        "descr": "A global event handler for the touchmove event.", 
        "name": "GlobalEventHandlers.ontouchmove", 
        "params": [
            {
                "descr": "The touchmove event handler for element someElement.", 
                "name": "moveHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ontouchmove", 
        "syntax": "Editor's Draft specification and not in Touch Events Recommendation. This attribute is not widely implemented.  Syntax var moveHandler = someElement.ontouchmove; Return value  moveHandler The touchmove event handler for element someElement.  Example This example shows two ways to use ontouchmove to set an element's touchmove event handler. <html><script>function moveTouch(ev) { // Process the event}function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchmove = moveTouch;}<body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" ontouchmove=\"moveTouch(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalEventHandlers.ontouchstart": {
        "descr": "A global event handler for the touchstart event.", 
        "name": "GlobalEventHandlers.ontouchstart", 
        "params": [
            {
                "descr": "The touchstart event handler for element someElement.", 
                "name": "startHandler"
            }
        ], 
        "path": "dom/globaleventhandlers/ontouchstart", 
        "syntax": "Editor's Draft specification and not in Touch Events Recommendation. This attribute is not widely implemented.  Syntax var startHandler = someElement.ontouchstart; Return value  startHandler The touchstart event handler for element someElement.  Example This example shows two ways to use ontouchstart to set an element's touchstart event handler. <html><script>function startTouch(ev) { // Process the event}function init() { var el=document.getElementById(\"target1\");\n or  el.ontouchstart = startTouch;}</script><body onload=\"init();\n or \"><div id=\"target1\"> Touch me ... </div><div id=\"target2\" ontouchstart=\"startTouch(event)\"> Touch me ... </div></body></html>);", 
        "type": "GlobalEventHandlers"
    }, 
    "GlobalFetch": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "GlobalFetch", 
        "params": [
            {
                "descr": "Starts the process of fetching a resource.", 
                "name": "GlobalFetch.fetch()"
            }
        ], 
        "path": "dom/globalfetch", 
        "syntax": "GlobalFetch mixin of the Fetch API contains the GlobalFetch.fetch()", 
        "type": "Fetch"
    }, 
    "Globalfetch.fetch": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Globalfetch.fetch", 
        "params": [
            {
                "descr": "This defines the resource that you wish to fetch. ", 
                "name": "input"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the request. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/globalfetch/fetch", 
        "syntax": "fetch()", 
        "type": "Credential Management"
    }, 
    "Grouping": {
        "descr": "The grouping operator ( ) controls the precedence of evaluation in expressions.", 
        "name": "Grouping", 
        "params": [], 
        "path": "javascript/operators/grouping", 
        "syntax": "( )", 
        "type": "Operators"
    }, 
    "HMDVRDevice": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "HMDVRDevice", 
        "params": [
            {
                "descr": "Returns current parameters for the eye specified as its argument (\"left\" or \"right\") \u2014 such as field of view information \u2014 stored in a VREyeParameters object.", 
                "name": "HMDVRDevice.getEyeParameters()"
            }, 
            {
                "descr": "Sets the field of view for both eyes.", 
                "name": "HMDVRDevice.setFieldOfView()"
            }, 
            {
                "descr": "Returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. ", 
                "name": "VRDevice.hardwareUnitId Read only"
            }, 
            {
                "descr": "Returns the ID for this specific VRDevice. ", 
                "name": "VRDevice.deviceId Read only"
            }, 
            {
                "descr": "A human-readable name to identify the VRDevice.", 
                "name": "VRDevice.deviceName Read only"
            }
        ], 
        "path": "dom/hmdvrdevice", 
        "syntax": "HMDVRDevice interface of the WebVR API represents a head mounted display, providing access to information about each eye, and allowing us to modify the current field of view. Methods  HMDVRDevice.getEyeParameters()", 
        "type": "WebVR"
    }, 
    "HMDVRDevice.getEyeParameters": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "HMDVRDevice.getEyeParameters", 
        "params": [
            {
                "descr": "A DOMString representing the eye you want to return information about. ", 
                "name": "whichEye"
            }
        ], 
        "path": "dom/hmdvrdevice/geteyeparameters", 
        "syntax": "getEyeParameters()", 
        "type": "WebVR"
    }, 
    "HMDVRDevice.setFieldOfView": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "HMDVRDevice.setFieldOfView", 
        "params": [
            {
                "descr": "A VRFieldOfView object that defines the new field of view for the left eye. ", 
                "name": "leftFOV Optional"
            }, 
            {
                "descr": "A VRFieldOfView object that defines the new field of view for the right eye. ", 
                "name": "rightFOV Optional"
            }, 
            {
                "descr": "The distance from the eyes of the nearest point of the view. ", 
                "name": "zNear Optional"
            }, 
            {
                "descr": "The distance from the eyes of the farthest point of the view. ", 
                "name": "zFar Optional"
            }
        ], 
        "path": "dom/hmdvrdevice/setfieldofview", 
        "syntax": "setFieldOfView()", 
        "type": "WebVR"
    }, 
    "HTML Drag and Drop API": {
        "descr": "HTML Drag and Drop interfaces enable applications to use drag and drop features in Firefox and other browsers. For example, with these features, the user can select draggable elements with a mouse, drag the elements to a droppable element, and drop those elements by releasing the mouse button. A translucent representation of the draggable elements follows the mouse pointer during the drag operation.", 
        "name": "HTML Drag and Drop API", 
        "params": [], 
        "path": "dom/html_drag_and_drop_api", 
        "syntax": "draggable attribute plus the ondragstart global event handler, as shown in the following code sample function dragstart_handler(ev) { console.log(\"dragStart\");\n or  // Add the target element's id to the data transfer object ev.dataTransfer.setData(\"text/plain\", ev.target.id);\n or }<body> <p id=\"p1\" draggable=\"true\" ondragstart=\"dragstart_handler(event);\n or \">This element is draggable.</p></body>);", 
        "type": "Drag & Drop"
    }, 
    "HTMLAnchorElement.referrerPolicy": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLAnchorElement.referrerPolicy", 
        "params": [], 
        "path": "dom/htmlanchorelement/referrerpolicy", 
        "syntax": "HTMLAnchorElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the <a>", 
        "type": "Elements"
    }, 
    "HTMLAnchorElement.rel": {
        "descr": "The HTMLAnchorElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document.", 
        "name": "HTMLAnchorElement.rel", 
        "params": [], 
        "path": "dom/htmlanchorelement/rel", 
        "syntax": "var relstr = anchorElt.rel;anchorElt.rel = relstr; Example var anchors = document.getElementsByTagName(\"a\");\n or var length = anchors.length;for (var i = 0; i < length; i++) {  alert(anchors[i]);\n or });", 
        "type": "Elements"
    }, 
    "HTMLAnchorElement.relList": {
        "descr": "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <a> element and the current document.", 
        "name": "HTMLAnchorElement.relList", 
        "params": [], 
        "path": "dom/htmlanchorelement/rellist", 
        "syntax": "var relstr = anchorElt.relList; Example var anchors = document.getElementsByTagName(\"a\");\n or var length = anchors.length;for (var i = 0; i < length; i++) {  var list = anchors[i].relList;  var listLength = list.length;  console.log(\"New area found.\");\n or   for (var j = 0; j < listLength; j++) {    console.log(list[j]);\n or   }});", 
        "type": "Elements"
    }, 
    "HTMLAreaElement.referrerPolicy": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLAreaElement.referrerPolicy", 
        "params": [], 
        "path": "dom/htmlareaelement/referrerpolicy", 
        "syntax": "HTMLAreaElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the <area> element defining which referrer is sent when fetching the resource. Syntax refStr = areaElt.referrerPolicy;areaElt.referrerPolicy = refStr; Values    \"no-referrer\" meaning that the Referer: HTTP header will not be sent. \"origin\" meaning that the referrer will be the origin of the page, that is roughly the scheme, the host and the port. \"unsafe-url\" meaning that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe as it can leak path information that has been concealed to third-party by using TLS.    Examples", 
        "type": "Elements"
    }, 
    "HTMLAreaElement.rel": {
        "descr": "The HTMLAreaElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document.", 
        "name": "HTMLAreaElement.rel", 
        "params": [], 
        "path": "dom/htmlareaelement/rel", 
        "syntax": "var relstr = areaElt.rel;areaElt.rel = relstr; Example var areas = document.getElementsByTagName(\"area\");\n or var length = areas.length;for (var i = 0; i < length; i++) {  alert(areas[i]);\n or });", 
        "type": "Elements"
    }, 
    "HTMLAreaElement.relList": {
        "descr": "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <area> element and the current document.", 
        "name": "HTMLAreaElement.relList", 
        "params": [], 
        "path": "dom/htmlareaelement/rellist", 
        "syntax": "var relstr = areaElt.relList; Example var areas = document.getElementsByTagName(\"area\");\n or var length = areas.length;for (var i = 0; i < length; i++) {  var list = areas[i].relList;  var listLength = list.length;  console.log(\"New area found.\");\n or   for (var j = 0; j < listLength; j++) {    console.log(list[j]);\n or   }});", 
        "type": "Elements"
    }, 
    "HTMLAudioElement": {
        "descr": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them. It derives from the HTMLMediaElement interface.", 
        "name": "HTMLAudioElement", 
        "params": [
            {
                "descr": "The src property of the constructed HTMLAudioElement.", 
                "name": "URLString (expected type: DOMString; optional)"
            }
        ], 
        "path": "dom/htmlaudioelement", 
        "syntax": "mySound = new Audio([URLString]);", 
        "type": "Elements"
    }, 
    "HTMLBodyElement": {
        "descr": "The HTMLBodyElement interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating body elements.", 
        "name": "HTMLBodyElement", 
        "params": [
            {
                "descr": "Is a DOMString that represents the color of active hyperlinks.", 
                "name": "HTMLBodyElement.aLink"
            }, 
            {
                "descr": "Is a DOMString that represents the description of the location of the background image resource. ", 
                "name": "HTMLBodyElement.background"
            }, 
            {
                "descr": "Is a DOMString that represents the background color for the document.", 
                "name": "HTMLBodyElement.bgColor"
            }, 
            {
                "descr": "Is a DOMString that represents the color of unvisited links.", 
                "name": "HTMLBodyElement.link"
            }, 
            {
                "descr": "Is a DOMString that represents the foreground color of text.", 
                "name": "HTMLBodyElement.text"
            }, 
            {
                "descr": "Is a DOMString that represents the color of visited links.", 
                "name": "HTMLBodyElement.vLink"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the afterprint event is raised.", 
                "name": "WindowEventHandlers.onafterprint"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the beforeprint event is raised.", 
                "name": "WindowEventHandlers.onbeforeprint"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the beforeunload event is raised.", 
                "name": "WindowEventHandlers.onbeforeunload"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the hashchange event is raised.", 
                "name": "WindowEventHandlers.onhashchange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the languagechange event is raised.", 
                "name": "WindowEventHandlers.onlanguagechange"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the message event is raised.", 
                "name": "WindowEventHandlers.onmessage"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the offline event is raised.", 
                "name": "WindowEventHandlers.onoffline"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the online event is raised.", 
                "name": "WindowEventHandlers.ononline"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pagehide event is raised.", 
                "name": "WindowEventHandlers.onpagehide"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pageshow event is raised.", 
                "name": "WindowEventHandlers.onpageshow"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the popstate event is raised.", 
                "name": "WindowEventHandlers.onpopstate"
            }, 
            {
                "descr": "An EventHandler representing the code executed when the rejectionhandled event is raised, indicating that a Promise was rejected and the rejection has been handled.", 
                "name": "WindowEventHandlers.onrejectionhandled"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the resize event is raised.", 
                "name": "WindowEventHandlers.onresize"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the storage event is raised.", 
                "name": "WindowEventHandlers.onstorage"
            }, 
            {
                "descr": "An EventHandler representing the code executed when the unhandledrejection event is raised, indicating that a Promise was rejected but the rejection was not handled.", 
                "name": "WindowEventHandlers.onunhandledrejection"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the unload event is raised.", 
                "name": "WindowEventHandlers.onunload"
            }
        ], 
        "path": "dom/htmlbodyelement", 
        "syntax": "Living Standard Technically, the event-related properties onafterprint, onbeforeprint, onbeforeunload, onblur, onerror, onfocus, onhashchange, onlanguagechange, onload, onmessage, onoffline, ononline, onpopstate, onresize, onstorage, and onunload, have been moved to WindowEventHandlers. HTMLBodyElement implements this interface.   HTML5.1The definition of 'HTMLBodyElement' in that specification. Working Draft     HTML5The definition of 'HTMLBodyElement' in that specification. Recommendation The following properties are now obsolete: aLink, bgColor, background, link, text, and vLink. The following properties have been added: onafterprint, onbeforeprint, onbeforeunload, onblur, onerror, onfocus, onhashchange, onload, onmessage, onoffline, ononline, onpopstate, onresize, onstorage, and onunload.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'HTMLBodyElement' in that specification. Recommendation No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'HTMLBodyElement' in that specification. Recommendation Initial definition.    Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLButtonElement": {
        "descr": "The HTMLButtonElement interface provides properties and methods (beyond the <button> object interface it also has available to them by inheritance) for manipulating the layout and presentation of button elements.", 
        "name": "HTMLButtonElement", 
        "params": [], 
        "path": "dom/htmlbuttonelement", 
        "syntax": "<form> element that owns this element.   formEncType DOMString The type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element.   formMethod DOMString The HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element.   formNoValidate Boolean Indicates that the form is not to be validated when it is submitted. If specified, this attribute overrides the novalidate attribute of the <form> element that owns this element.   formTarget DOMString A name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element.   labels Read only  NodeList A list of <label>", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.captureStream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "HTMLCanvasElement.captureStream", 
        "params": [
            {
                "descr": "A double that indicates the rate of capture of each frame. ", 
                "name": "framerate Optional"
            }
        ], 
        "path": "dom/htmlcanvaselement/capturestream", 
        "syntax": "HTMLCanvasElement.captureStream()", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.getContext": {
        "descr": "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported.", 
        "name": "HTMLCanvasElement.getContext", 
        "params": [
            {
                "descr": "Is a DOMString containing the context identifier defining the drawing context associated to the canvas. ", 
                "name": "contextType"
            }, 
            {
                "descr": "You can use several context attributes when creating your rendering context, for example: canvas.getContext(\"webgl\",                  { antialias: false,                   depth: false }); 2d context attributes:  alpha: Boolean that indicates if the canvas contains an alpha channel. If set to false, the browser now knows that the backdrop is always opaque, which can speed up drawing of transparent content and images then.  (Gecko only) willReadFrequently: Boolean that indicates whether or not a lot of read-back operations are planned. This will force the use of a software (instead of hardware accelerated) 2D canvas and can save memory when calling getImageData() frequently. This option is only available, if the flag gfx.canvas.willReadFrequently.enable is set to true (which, by default, is only the case for B2G/Firefox OS).  (Blink only) storage: String that indicates which storage is used (\"persistent\" by default).  WebGL context attributes:  alpha: Boolean that indicates if the canvas contains an alpha buffer. depth: Boolean that indicates that the drawing buffer has a depth buffer of at least 16 bits. stencil: Boolean that indicates that the drawing buffer has a stencil buffer of at least 8 bits. antialias: Boolean that indicates whether or not to perform anti-aliasing. premultipliedAlpha: Boolean that indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha. preserveDrawingBuffer: If the value is true the buffers will not be cleared and will preserve their values until cleared or overwritten by the author.  failIfMajorPerformanceCaveat: Boolean that indicates if a context will be created if the system performance is low.", 
                "name": "contextAttributes"
            }
        ], 
        "path": "dom/htmlcanvaselement/getcontext", 
        "syntax": "canvas.getContext(contextType, contextAttributes);", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.height": {
        "descr": "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.", 
        "name": "HTMLCanvasElement.height", 
        "params": [], 
        "path": "dom/htmlcanvaselement/height", 
        "syntax": "var pxl = canvas.height;canvas.height = pxl; Examples Given this <canvas>", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.toBlob": {
        "descr": "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas; this file may be cached on the disk or stored in memory at the discretion of the user agent. If type is not specified, the image type is image/png. The created image is in a resolution of 96dpi. The third argument is used with image/jpeg images to specify the quality of the output.", 
        "name": "HTMLCanvasElement.toBlob", 
        "params": [
            {
                "descr": "A callback function with the resulting Blob object as a single argument.", 
                "name": "callback"
            }, 
            {
                "descr": "A DOMString indicating the image format. ", 
                "name": "mimeType Optional"
            }, 
            {
                "descr": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. ", 
                "name": "qualityArgument Optional"
            }
        ], 
        "path": "dom/htmlcanvaselement/toblob", 
        "syntax": "void canvas.toBlob(callback, mimeType, qualityArgument);", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.toDataURL": {
        "descr": "The HTMLCanvasElement.toDataURL() method returns a data URI containing a representation of the image in the format specified by the type parameter (defaults to PNG). The returned image is in a resolution of 96 dpi.", 
        "name": "HTMLCanvasElement.toDataURL", 
        "params": [
            {
                "descr": "A DOMString indicating the image format. ", 
                "name": "type Optional"
            }, 
            {
                "descr": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. ", 
                "name": "encoderOptions Optional"
            }
        ], 
        "path": "dom/htmlcanvaselement/todataurl", 
        "syntax": "canvas.toDataURL(type, encoderOptions);", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.transferControlToOffscreen": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLCanvasElement.transferControlToOffscreen", 
        "params": [], 
        "path": "dom/htmlcanvaselement/transfercontroltooffscreen", 
        "syntax": "HTMLCanvasElement.transferControlToOffscreen()", 
        "type": "Elements"
    }, 
    "HTMLCanvasElement.width": {
        "descr": "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.", 
        "name": "HTMLCanvasElement.width", 
        "params": [], 
        "path": "dom/htmlcanvaselement/width", 
        "syntax": "var pxl = canvas.width;canvas.width = pxl; Examples Given this <canvas>", 
        "type": "Elements"
    }, 
    "HTMLContentElement.getDistributedNodes": {
        "descr": "The HTMLContentElement.getDistributedNodes() method returns a static NodeList of the distributed nodes associated with this <content> element.", 
        "name": "HTMLContentElement.getDistributedNodes", 
        "params": [], 
        "path": "dom/htmlcontentelement/getdistributednodes", 
        "syntax": "var nodeList = object.getDistributedNodes()", 
        "type": "Elements"
    }, 
    "HTMLContentElement.select": {
        "descr": "The HTMLContentElement.select property reflects the select attribute. It is a DOMString containing a space-separated list of CSS selectors that select the content to insert in place of the <content> element.", 
        "name": "HTMLContentElement.select", 
        "params": [], 
        "path": "dom/htmlcontentelement/select", 
        "syntax": "object.select = \"CSSselector CSSselector ...\"; Example // Select <h1> elements and elements with class=\"error\"myContentObject.select = \"h1 .error\"; Specifications    Specification Status Comment   Shadow DOMThe definition of 'content' in that specification. Working Draft      Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 35 28 (28) [1] Not supported 26 Not supported         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 37 28.0 (28) [1] Not supported ? ?     [1] If Shadow DOM is not enabled in Firefox, <content> elements will behave like HTMLUnknownElement", 
        "type": "Elements"
    }, 
    "HTMLDialogElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLDialogElement", 
        "params": [], 
        "path": "dom/htmldialogelement", 
        "syntax": "HTMLDialogElement interface provides methods to manipulate <dialog> elements. It inherits properties and methods from the HTMLElement interface. Properties Inherits properties from its parent, HTMLElement.    Name Type Description     open Boolean Reflects the open HTML attribute, indicating that the dialog is available for interaction.   returnValue DOMString Gets/sets the return value for the dialog.    Methods Inherits methods from its parent, HTMLElement.    Name & Arguments Return Description     close()", 
        "type": "Elements"
    }, 
    "HTMLElement.blur": {
        "descr": "The HTMLElement.blur() method removes keyboard focus from the current element.", 
        "name": "HTMLElement.blur", 
        "params": [], 
        "path": "dom/htmlelement/blur", 
        "syntax": "elt.blur()", 
        "type": "Elements"
    }, 
    "HTMLElement.click": {
        "descr": "The HTMLElement.click() method simulates a mouse-click on an element.", 
        "name": "HTMLElement.click", 
        "params": [], 
        "path": "dom/htmlelement/click", 
        "syntax": "elt.click()", 
        "type": "Elements"
    }, 
    "HTMLElement.contentEditable": {
        "descr": "The HTMLElement.contentEditable property is used to indicate whether or not the element is editable. This enumerated attribute can have the following values:", 
        "name": "HTMLElement.contentEditable", 
        "params": [], 
        "path": "dom/htmlelement/contenteditable", 
        "syntax": "editable = element.contentEditableelement.contentEditable = \"true\" Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'contenteditable' in that specification. Living Standard Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 11 3.0 (1.9) 6[1] 10.6 3.2         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support 3 1.0 (1.9) 6[1] Not supported 5     [1] Internet Explorer has a bunch of bugs regarding the implementation of this feature. IE10 crashes in some cases when editing lists (bug 796187). IE11+ uses invalid positioning for caret when an element is floated (bug 858749). In IE9-10 the window freezes when using mousewheel while dragging (bug 809254). IE10-11 does not fire the input", 
        "type": "Elements"
    }, 
    "HTMLElement.dataset": {
        "descr": "The HTMLElement.dataset property allows access, both in reading and writing mode, to all the custom data attributes (data-*) set on the element. It is a map of DOMString, one entry for each custom data attribute.", 
        "name": "HTMLElement.dataset", 
        "params": [], 
        "path": "dom/htmlelement/dataset", 
        "syntax": "string = element.dataset.camelCasedName;element.dataset.camelCasedName = string; Examples <div id=\"user\" data-id=\"1234567890\" data-user=\"johndoe\" data-date-of-birth>John Doe</div>var el = document.querySelector('#user');\n or // el.id == 'user'// el.dataset.id === '1234567890'// el.dataset.user === 'johndoe'// el.dataset.dateOfBirth === ''el.dataset.dateOfBirth = '1960-10-03'; // set the DOB.// 'someDataAttr' in el.dataset === falseel.dataset.someDataAttr = 'mydata';// 'someDataAttr' in el.dataset === true);", 
        "type": "Elements"
    }, 
    "HTMLElement.dir": {
        "descr": "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.", 
        "name": "HTMLElement.dir", 
        "params": [], 
        "path": "dom/htmlelement/dir", 
        "syntax": "var currentWritingDirection = elementNodeReference.dir;elementNodeReference.dir = newWritingDirection;  currentWritingDirection is a string variable representing the text writing direction of the current element. newWritingDirection is a string variable representing the text writing direction value.  Possible values for dir are ltr, for left-to-right, rtl, for right-to-left, and auto for specifying that the direction of the element must be determined based on the contents of the element. Example var parg = document.getElementById(\"para1\");\n or  parg.dir = \"rtl\"; // change the text direction on a paragraph identified as \"para1\");", 
        "type": "Elements"
    }, 
    "HTMLElement.focus": {
        "descr": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused.", 
        "name": "HTMLElement.focus", 
        "params": [], 
        "path": "dom/htmlelement/focus", 
        "syntax": "element.focus()", 
        "type": "Elements"
    }, 
    "HTMLElement.forceSpellCheck": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLElement.forceSpellCheck", 
        "params": [], 
        "path": "dom/htmlelement/forcespellcheck", 
        "syntax": "element.forceSpellCheck()", 
        "type": "Elements"
    }, 
    "HTMLElement.isContentEditable": {
        "descr": "The HTMLElement.isContentEditable read-only property returns a Boolean that is true if the contents of the element are editable; otherwise it returns false.", 
        "name": "HTMLElement.isContentEditable", 
        "params": [], 
        "path": "dom/htmlelement/iscontenteditable", 
        "syntax": "editable = element.isContentEditable Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'HTMLElement.contenteditable' in that specification. Living Standard No change from latest snapshot, HTML5.1   HTML5.1The definition of 'HTMLElement.contenteditable' in that specification. Working Draft Snapshot of WHATWG HTML Living Standard, no change from HTML5   HTML5The definition of 'HTMLElement.contenteditable' in that specification. Recommendation Snapshot of WHATWG HTML Living Standard, initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 4.0 (2) (Yes) (Yes) (Yes)         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 4.0 (2) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "Elements"
    }, 
    "HTMLElement.lang": {
        "descr": "The HTMLElement.lang property gets or sets the base language of an element's attribute values and text content.", 
        "name": "HTMLElement.lang", 
        "params": [], 
        "path": "dom/htmlelement/lang", 
        "syntax": "var languageUsed = elementNodeReference.lang; // Get the value of langelementNodeReference.lang = NewLanguage; // Set new value for lang languageUsed is a string variable that gets the language in which the text of the current element is written. NewLanguage is a string variable with its value setting the language in which the text of the current element is written. Example // this snippet compares the base language and // redirects to another url based on languageif (document.documentElement.lang === \"en\") {  window.location.href = \"Some_document.html.en\";} else if (document.documentElement.lang === \"ru\") {  window.location.href = \"Some_document.html.ru\";}", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetHeight": {
        "descr": "The HTMLElement.offsetHeight read-only property is the height of the element including vertical padding and borders, in pixels, as an integer.", 
        "name": "HTMLElement.offsetHeight", 
        "params": [], 
        "path": "dom/htmlelement/offsetheight", 
        "syntax": "var intElemOffsetHeight = document.getElementById(id_attribute_value).offsetHeight;", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetLeft": {
        "descr": "The HTMLElement.offsetLeft read-only method returns the number of pixels that the upper left corner of the current element is offset to the left within the HTMLElement.offsetParent node.", 
        "name": "HTMLElement.offsetLeft", 
        "params": [], 
        "path": "dom/htmlelement/offsetleft", 
        "syntax": "left = element.offsetLeft; left is an integer representing the offset to the left in pixels from the closest relatively positioned parent element. Example var colorTable = document.getElementById(\"t1\");\n or var tOLeft = colorTable.offsetLeft; if (tOLeft > 5) {  // large left offset: do something here});", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetParent": {
        "descr": "The HTMLElement.offsetParent read-only property returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. If the element is non-positioned, the nearest table cell or root element (html in standards compliant mode; body in quirks rendering mode) is the offsetParent. offsetParent returns null when the element has style.display set to \"none\". The offsetParent is useful because offsetTop and offsetLeft are relative to its padding edge.", 
        "name": "HTMLElement.offsetParent", 
        "params": [], 
        "path": "dom/htmlelement/offsetparent", 
        "syntax": "parentObj = element.offsetParent;  parentObj is an object reference to the element in which the current element is offset.  Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'offsetParent' in that specification. Working Draft      Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetTop": {
        "descr": "The HTMLElement.offsetTop read-only property returns the distance of the current element relative to the top of the offsetParent node.", 
        "name": "HTMLElement.offsetTop", 
        "params": [], 
        "path": "dom/htmlelement/offsettop", 
        "syntax": "topPos = element.offsetTop; Parameters  topPos is the number of pixels from the top of the closest relatively positioned parent element.  Example var d = document.getElementById(\"div1\");\n or var topPos = d.offsetTop; if (topPos > 10) {  // object is offset more  // than 10 pixels from its parent});", 
        "type": "Elements"
    }, 
    "HTMLElement.offsetWidth": {
        "descr": "The HTMLElement.offsetWidth read-only property returns the layout width of an element. Typically, an element's offsetWidth is a measurement which includes the element borders, the element horizontal padding, the element vertical scrollbar (if present, if rendered) and the element CSS width.", 
        "name": "HTMLElement.offsetWidth", 
        "params": [], 
        "path": "dom/htmlelement/offsetwidth", 
        "syntax": "var offsetWidth =element.offsetWidth; offsetWidth is a read-only property.  Example    Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'offsetWidth' in that specification. Working Draft      Notes offsetWidth", 
        "type": "Elements"
    }, 
    "HTMLElement.style": {
        "descr": "The HTMLElement.style property returns a CSSStyleDeclaration object that represents only the element's inline style attribute, ignoring any applied style rules. See the CSS Properties Reference for a list of the CSS properties accessible via style.", 
        "name": "HTMLElement.style", 
        "params": [], 
        "path": "dom/htmlelement/style", 
        "syntax": "window.getComputedStyle()", 
        "type": "Elements"
    }, 
    "HTMLElement.tabIndex": {
        "descr": "The HTMLElement.tabIndex property represents the tab order of the current element.", 
        "name": "HTMLElement.tabIndex", 
        "params": [], 
        "path": "dom/htmlelement/tabindex", 
        "syntax": "elt.tabIndex = index;var index = elt.tabIndex;  index is an integer  Example var b1 = document.getElementById(\"button1\");\n or  b1.tabIndex = 1;);", 
        "type": "Elements"
    }, 
    "HTMLElement.title": {
        "descr": "The HTMLElement.title property represents the title of the element, the text usually displayed in a 'tool tip' popup when the mouse is over the displayed node.", 
        "name": "HTMLElement.title", 
        "params": [], 
        "path": "dom/htmlelement/title", 
        "syntax": "var str = element.title;element.title = str; Example  button1.title = \"click to refresh\"; Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'title' in that specification. Living Standard No change from Document Object Model (DOM) Level 2 HTML Specification.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'title' in that specification. Recommendation No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'title' in that specification. Recommendation Initial definition.    Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLFormControlsCollection": {
        "descr": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements. It replaces one method of HTMLCollection.", 
        "name": "HTMLFormControlsCollection", 
        "params": [
            {
                "descr": "Returns the RadioNodeList or the Element in the collection whose name or id match the specified name, or null if no nodes match. ", 
                "name": "HTMLFormControlsCollection.namedItem()"
            }
        ], 
        "path": "dom/htmlformcontrolscollection", 
        "syntax": "HTMLFormControlsCollection.namedItem()", 
        "type": "Elements"
    }, 
    "HTMLFormControlsCollection.namedItem": {
        "descr": "Note that this version of namedItem() hide the one inherited from HTMLCollection. Like that one, in JavaScript, using the array bracket syntax with a String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\").", 
        "name": "HTMLFormControlsCollection.namedItem", 
        "params": [], 
        "path": "dom/htmlformcontrolscollection/nameditem", 
        "syntax": "String, like collection[\"value\"] is equivalent to collection.namedItem(\"value\")", 
        "type": "Elements"
    }, 
    "HTMLFormElement": {
        "descr": "The HTMLFormElement interface provides methods to create and modify <form> elements; it inherits from properties and methods of the HTMLElement interface.", 
        "name": "HTMLFormElement", 
        "params": [
            {
                "descr": "Is a DOMString that reflects the accept-charset HTML attribute, containing a list of character encodings that the server accepts.", 
                "name": "HTMLFormElement.acceptCharset"
            }, 
            {
                "descr": "Is a DOMString that reflects the action HTML attribute, containing the URI of a program that processes the information submitted by the form.", 
                "name": "HTMLFormElement.action"
            }, 
            {
                "descr": "Is a DOMString that reflects the autocomplete HTML attribute, containing a string that indicates whether the controls in this form can have their values automatically populated by the browser.", 
                "name": "HTMLFormElement.autocomplete"
            }, 
            {
                "descr": "Returns a live HTMLFormControlsCollection containing all the form controls belonging to this form element.", 
                "name": "HTMLFormElement.elementsRead only"
            }, 
            {
                "descr": "Is a synonym for enctype.", 
                "name": "HTMLFormElement.encoding"
            }, 
            {
                "descr": "Is a DOMString reflects the enctype HTML attribute, indicating the type of content that is used to transmit the form to the server. ", 
                "name": "HTMLFormElement.enctype"
            }, 
            {
                "descr": "Returns a long that represents the number of controls in the form.", 
                "name": "HTMLFormElement.length Read only"
            }, 
            {
                "descr": "Is a DOMString that reflects the method HTML attribute, indicating the HTTP method used to submit the form. ", 
                "name": "HTMLFormElement.method"
            }, 
            {
                "descr": "Is a DOMString that reflects the name HTML attribute, containing the name of the form.", 
                "name": "HTMLFormElement.name"
            }, 
            {
                "descr": "Is a Boolean that reflects the novalidate HTML attribute, indicating that the form should not be validated.", 
                "name": "HTMLFormElement.noValidate"
            }, 
            {
                "descr": "Is a DOMString that reflects the target HTML attribute, indicating where to display the results received from submitting the form.", 
                "name": "HTMLFormElement.target"
            }, 
            {
                "descr": "Gets the item in the elements collection at the specified index, or null if there is no item at that index. ", 
                "name": "HTMLFormElement.operator[index]"
            }, 
            {
                "descr": "Gets the item or list of items in elements collection whose name or id match the specified string, or null if no items match. ", 
                "name": "HTMLFormElement.operator[string]"
            }, 
            {
                "descr": "Returns a Boolean that is true if the element's child controls are subject to constraint validation and satify those contraints, or false if some controls do not satisfy their constraints. ", 
                "name": "HTMLFormElement.checkValidity()"
            }, 
            {
                "descr": "Submits the form to the server.", 
                "name": "HTMLFormElement.submit()"
            }, 
            {
                "descr": "Resets the forms to its initial state.", 
                "name": "HTMLFormElement.reset()"
            }, 
            {
                "descr": "Returnstrue if the element's child controls satisfy their validation constraints. ", 
                "name": "HTMLFormElement.reportValidity()"
            }, 
            {
                "descr": "Triggers a native browser interface to assist the user in completing the fields which have an autofill field name value that is not off or on.", 
                "name": "HTMLFormElement.requestAutocomplete()"
            }
        ], 
        "path": "dom/htmlformelement", 
        "syntax": "<form> elements; it inherits from properties and methods of the HTMLElement interface. Properties Inherits properties from its parent, HTMLElement.  HTMLFormElement.acceptCharset Is a DOMString that reflects the accept-charset HTML attribute, containing a list of character encodings that the server accepts. HTMLFormElement.action Is a DOMString that reflects the action HTML attribute, containing the URI of a program that processes the information submitted by the form. HTMLFormElement.autocomplete Is a DOMString that reflects the autocomplete HTML attribute, containing a string that indicates whether the controls in this form can have their values automatically populated by the browser. HTMLFormElement.elements", 
        "type": "Elements"
    }, 
    "HTMLFormElement.elements": {
        "descr": "The HTMLFormElement.elements property returns an HTMLFormControlsCollection (HTML 4 HTMLCollection) of all the form controls contained in the FORM element, with the exception of input elements which have a type attribute of image.", 
        "name": "HTMLFormElement.elements", 
        "params": [], 
        "path": "dom/htmlformelement/elements", 
        "syntax": "nodeList = HTMLFormElement.elements Example var inputs = document.getElementById(\"form1\").elements;var inputByIndex = inputs[2];var inputByName = inputs[\"login\"];", 
        "type": "Elements"
    }, 
    "HTMLFormElement.length": {
        "descr": "The HTMLFormElement.length read-only property returns the number of controls in the <form> element.", 
        "name": "HTMLFormElement.length", 
        "params": [], 
        "path": "dom/htmlformelement/length", 
        "syntax": "<form> element. Syntax integer = form.length Example if (document.getElementById(\"form1\").length > 1) {  // more than one form control here}", 
        "type": "Elements"
    }, 
    "HTMLFormElement.name": {
        "descr": "The HTMLFormElement.name property represents the name of the current form element as a string.", 
        "name": "HTMLFormElement.name", 
        "params": [], 
        "path": "dom/htmlformelement/name", 
        "syntax": "<form> elment contains an element named name then that element overrides the form.name property, so that you can't access it. Internet Explorer (IE) does not allow the name attribute of an element created using createElement()", 
        "type": "Elements"
    }, 
    "HTMLFormElement.reportValidity": {
        "descr": "The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. Whenfalse is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.", 
        "name": "HTMLFormElement.reportValidity", 
        "params": [], 
        "path": "dom/htmlformelement/reportvalidity", 
        "syntax": "HTMLFormElement.reportValidity()", 
        "type": "Elements"
    }, 
    "HTMLFormElement.reset": {
        "descr": "The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's reset button.", 
        "name": "HTMLFormElement.reset", 
        "params": [], 
        "path": "dom/htmlformelement/reset", 
        "syntax": "HTMLFormElement.reset()", 
        "type": "Elements"
    }, 
    "HTMLFormElement.submit": {
        "descr": "The HTMLFormElement.submit() method submits the form. This method does something similar to activating a submit button of the form.", 
        "name": "HTMLFormElement.submit", 
        "params": [], 
        "path": "dom/htmlformelement/submit", 
        "syntax": "HTMLFormElement.submit()", 
        "type": "Elements"
    }, 
    "HTMLHRElement": {
        "descr": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.", 
        "name": "HTMLHRElement", 
        "params": [], 
        "path": "dom/htmlhrelement", 
        "syntax": "<hr> elements. Properties Inherits properties from its parent, HTMLElement.    Name Type Description   align  DOMString Enumerated attribute indicating alignment of the rule with respect to the surrounding context.   color  DOMString The name of the color of the rule.   noshade  Boolean Sets the rule to have no shading.   size  DOMString The height of the rule.   width  DOMString The width of the rule on the page.    Methods No specific method; inherits methods from its parent, HTMLElement. Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'HTMLHRElement' in that specification. Living Standard The color property has been added, as an obsolete property, to increase compatibility with the existing web.   HTML5The definition of 'HTMLAnchorElement' in that specification. Recommendation Following properties are now obsolete: align, noshade, size, and width.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'HTMLHRElement' in that specification. Recommendation No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'HTMLHRElement' in that specification. Recommendation Initial definition.    Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLHeadingElement": {
        "descr": "The HTMLHeadingElement interface represents the different heading elements. It inherits methods and properties from the HTMLElement interface.", 
        "name": "HTMLHeadingElement", 
        "params": [], 
        "path": "dom/htmlheadingelement", 
        "syntax": "Living Standard No change from HTML5.   HTML5The definition of 'HTMLHeadingElement' in that specification. Recommendation The align property is now obsolete.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'HTMLHeadingElement' in that specification. Recommendation No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'HTMLHeadingElement' in that specification. Recommendation Initial definition.    Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLHyperlinkElementUtils", 
        "params": [
            {
                "descr": "Is a USVString containing the whole URL.", 
                "name": "HTMLHyperlinkElementUtils.href"
            }, 
            {
                "descr": "Is a USVString containing the protocol scheme of the URL, including the final ':'.", 
                "name": "HTMLHyperlinkElementUtils.protocol"
            }, 
            {
                "descr": "Is a USVString containing the host, that is the hostname, and then, if the port of the URL is not empty (which can happen because it was not specified or because it was specified to be the default port of the URL's scheme), a ':', and the port of the URL.", 
                "name": "HTMLHyperlinkElementUtils.host"
            }, 
            {
                "descr": "Is a USVString containing the domain of the URL.", 
                "name": "HTMLHyperlinkElementUtils.hostname"
            }, 
            {
                "descr": "Is a USVString containing the port number of the URL.", 
                "name": "HTMLHyperlinkElementUtils.port"
            }, 
            {
                "descr": "Is a USVString containing an initial '/' followed by the path of the URL.", 
                "name": "HTMLHyperlinkElementUtils.pathname"
            }, 
            {
                "descr": "Is a USVString containing a '?' followed by the parameters of the URL.", 
                "name": "HTMLHyperlinkElementUtils.search"
            }, 
            {
                "descr": "Is a USVString containing a '#' followed by the fragment identifier of the URL.", 
                "name": "HTMLHyperlinkElementUtils.hash"
            }, 
            {
                "descr": "Is a USVString containing the username specified before the domain name.", 
                "name": "HTMLHyperlinkElementUtils.username"
            }, 
            {
                "descr": "Is a USVString containing the password specified before the domain name.", 
                "name": "HTMLHyperlinkElementUtils.password"
            }, 
            {
                "descr": "Returns a USVString containing the origin of the URL, that is its scheme, its domain and its port.", 
                "name": "HTMLHyperlinkElementUtils.origin Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the whole URL. ", 
                "name": "HTMLHyperlinkElementUtils.toString()"
            }
        ], 
        "path": "dom/htmlhyperlinkelementutils", 
        "syntax": "HTMLHyperlinkElementUtils mixin defines utility methods and properties to work with HTMLAnchorElement", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.hash": {
        "descr": "The HTMLHyperlinkElementUtils.hash property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The fragment is not percent-decoded.", 
        "name": "HTMLHyperlinkElementUtils.hash", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/hash", 
        "syntax": "string = object.hash;object.hash = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.href#youhou\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.hash; // Returns:'#youhou');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.host": {
        "descr": "The HTMLHyperlinkElementUtils.host property is a USVString containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.", 
        "name": "HTMLHyperlinkElementUtils.host", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/host", 
        "syntax": "string = object.host;object.host = string; Examples var anchor = document.createElement(\"a\");\n or anchor.href = \"https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils.host\"anchor.host == \"developer.mozilla.org\"anchor.href = \"https://developer.mozilla.org:443/en-US/HTMLHyperlinkElementUtils.host\"anchor.host == \"developer.mozilla.org\"// The port number is not included because 443 is the scheme's default portanchor.href = \"https://developer.mozilla.org:4097/en-US/HTMLHyperlinkElementUtils.host\"anchor.host == \"developer.mozilla.org:4097\");", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.hostname": {
        "descr": "The HTMLHyperlinkElementUtils.hostname property is a USVString containing the domain of the URL.", 
        "name": "HTMLHyperlinkElementUtils.hostname", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/hostname", 
        "syntax": "string = object.hostname;object.hostname = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.hostname\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.hostname; // Returns:'developer.mozilla.org');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.href": {
        "descr": "The HTMLHyperlinkElementUtils.href property is a USVString containing the whole URL.", 
        "name": "HTMLHyperlinkElementUtils.href", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/href", 
        "syntax": "string = object.href;object.href = string; Examples // Lets an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils.href\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.href; // Returns:'https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils.href');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.origin": {
        "descr": "The HTMLHyperlinkElementUtils.origin read-only property is a USVString containing the Unicode serialization of the origin of the represented URL, that is:", 
        "name": "HTMLHyperlinkElementUtils.origin", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/origin", 
        "syntax": "string = object.origin; Examples // On this page, returns the originvar result = window.location.origin; // Returns:'https://developer.mozilla.org' Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'HTMLHyperlinkElementUtils.origin' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 26.0 (26.0) [2][3] No support [1] No support [1] No support [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support No support [1] No support [1] 26.0 (26.0) [2][3] No support [1] No support [1] No support [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.password": {
        "descr": "The HTMLHyperlinkElementUtils.password property is a USVString containing the password specified before the domain name.", 
        "name": "HTMLHyperlinkElementUtils.password", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/password", 
        "syntax": "string = object.password;object.password = string; Examples // Let's <a id=\"myAnchor\" href=\"https://anonymous:flabada@developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.username\"> be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.password; // Returns:'flabada');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.pathname": {
        "descr": "The HTMLHyperlinkElementUtils.pathname property is a USVString containing an initial '/' followed by the path of the URL.", 
        "name": "HTMLHyperlinkElementUtils.pathname", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/pathname", 
        "syntax": "string = object.pathname;object.pathname = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.pathname\"> element be in the documentvar anchor = document.getElementById(\"myAnchor\");\n or var result = anchor.pathname; // Returns:'/en-US/docs/HTMLHyperlinkElementUtils.pathname');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.port": {
        "descr": "The HTMLHyperlinkElementUtils.port property is a USVString containing the port number of the URL.", 
        "name": "HTMLHyperlinkElementUtils.port", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/port", 
        "syntax": "string = object.port;object.port = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.port\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.port; // Returns:'80');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.protocol": {
        "descr": "The HTMLHyperlinkElementUtils.protocol property is a USVString representing the protocol scheme of the URL, including the final ':'.", 
        "name": "HTMLHyperlinkElementUtils.protocol", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/protocol", 
        "syntax": "string = object.protocol;object.protocol = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/HTMLHyperlinkElementUtils.protocol\"> element be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.protocol; // Returns:'https:');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.search": {
        "descr": "The HTMLHyperlinkElementUtils.search property, is a search string, also called a query string, that is USVString containing a '?' followed by the parameters of the URL.", 
        "name": "HTMLHyperlinkElementUtils.search", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/search", 
        "syntax": "string = object.search;object.search = string; Examples // Let's an <a id=\"myAnchor\" href=\"https://developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.search?q=123\"> element be in the documentvar anchor = document.getElementById(\"myAnchor\");\n or var result = anchor.search; // Returns:'?q=123');", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.searchParams": {
        "descr": "The URLUtils.searchParams property is a URLSearchParams containing the query/search parameters of the URL.", 
        "name": "HTMLHyperlinkElementUtils.searchParams", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/searchparams", 
        "syntax": "object2 = object.searchParams;object.searchParams = object2; Examples var anchor = document.createElement(\"a\");\n or anchor.href = \"https://developer.mozilla.org/en-US/search?q=URLUtils.searchParams&topic=api\"var searchParams = anchor.searchParams;searchParams.has(\"topic\") === true; // truesearchParams.get(\"topic\") === \"api\"; // truesearchParams.getAll(\"topic\");\n or  // [\"api\"]searchParams.get(\"foo\") === \"\"; // truesearchParams.append(\"topic\", \"webdev\");\n or searchParams.toString();\n or  // \"q=URLUtils.searchParams&topic=api&topic=webdev\"searchParams.delete(\"topic\");\n or searchParams.toString();\n or  // \"q=URLUtils.searchParams\"anchor.href; // \"https://developer.mozilla.org/en-US/search?q=URLUtils.searchParams\");", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.toString": {
        "descr": "The HTMLHyperlinkElementUtils.toString() stringifier method returns a USVString containing the whole URL. It is a read-only version of HTMLHyperlinkElementUtils.href.", 
        "name": "HTMLHyperlinkElementUtils.toString", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/tostring", 
        "syntax": "string = object.toString();", 
        "type": "Elements"
    }, 
    "HTMLHyperlinkElementUtils.username": {
        "descr": "The HTMLHyperlinkElementUtils.username property is a USVString containing the username specified before the domain name.", 
        "name": "HTMLHyperlinkElementUtils.username", 
        "params": [], 
        "path": "dom/htmlhyperlinkelementutils/username", 
        "syntax": "string = object.username;object.username = string; Examples // Let's <a id=\"myAnchor\" href=\"https://anonymous:flabada@developer.mozilla.org/en-US/docs/HTMLHyperlinkElementUtils.username\"> be in the documentvar anchor = document.getElementByID(\"myAnchor\");\n or var result = anchor.username; // Returns:'anonymous');", 
        "type": "Elements"
    }, 
    "HTMLIFrameElement.referrerPolicy": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLIFrameElement.referrerPolicy", 
        "params": [], 
        "path": "dom/htmliframeelement/referrerpolicy", 
        "syntax": "HTMLIFrameElement.referrerPolicy property reflect the HTML referrer attribute of the <iframe>", 
        "type": "Elements"
    }, 
    "HTMLImageElement.referrerPolicy": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLImageElement.referrerPolicy", 
        "params": [], 
        "path": "dom/htmlimageelement/referrerpolicy", 
        "syntax": "HTMLImageElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the <img>", 
        "type": "Elements"
    }, 
    "HTMLInputElement": {
        "descr": "The HTMLInputElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of input elements.", 
        "name": "HTMLInputElement", 
        "params": [
            {
                "descr": "Is a DOMString that reflects the accept HTML attribute, containing comma-separated list of file types accepted by the server when type is file.", 
                "name": "HTMLInputElement.accept"
            }, 
            {
                "descr": "Is a DOMString containing a single character that switches input focus to the control when pressed.", 
                "name": "HTMLInputElement.accessKey"
            }, 
            {
                "descr": "Is a DOMString representing the alignment of the element. ", 
                "name": "HTMLInputElement.align"
            }, 
            {
                "descr": "Is a DOMString that reflects the alt HTML attribute, containing alternative text to use when type is image.", 
                "name": "HTMLInputElement.alt"
            }, 
            {
                "descr": "Is a DOMString that defines the capitalization behavior for user input. ", 
                "name": "HTMLInputElement.autocapitalize"
            }, 
            {
                "descr": "Is a DOMString that reflects the autocomplete HTML attribute, indicating whether the value of the control can be automatically completed by the browser. ", 
                "name": "HTMLInputElement.autocomplete"
            }, 
            {
                "descr": "Is a Boolean that reflects the autofocus HTML attribute, which specifies that a form control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form element in a document can have the autofocus attribute. It cannot be applied if the type attribute is set to hidden (that is, you cannot automatically set focus to a hidden control).", 
                "name": "HTMLInputElement.autofocus"
            }, 
            {
                "descr": "Is a Boolean representing the current state of the element when type is checkbox or radio.", 
                "name": "HTMLInputElement.checked"
            }, 
            {
                "descr": "Is a Boolean representing the default state of a radio button or checkbox as originally specified in HTML that created this object.", 
                "name": "HTMLInputElement.defaultChecked"
            }, 
            {
                "descr": "Is a DOMString representing the default value as originally specified in HTML that created this object.", 
                "name": "HTMLInputElement.defaultValue"
            }, 
            {
                "descr": "Is a", 
                "name": "HTMLInputElement.dirName"
            }, 
            {
                "descr": "Is a Boolean that reflects the disabled HTML attribute, indicating that the control is not available for interaction. ", 
                "name": "HTMLInputElement.disabled"
            }, 
            {
                "descr": "Returns a FileList containing the list of selected files.", 
                "name": "HTMLInputElement.files Read only"
            }, 
            {
                "descr": "Is a HTMLFormElement representing the containing form element, if this element is in a form. ", 
                "name": "HTMLInputElement.form"
            }, 
            {
                "descr": "Is a DOMString that reflects the formaction HTML attribute, containing the URI of a program that processes information submitted by the element. ", 
                "name": "HTMLInputElement.formAction"
            }, 
            {
                "descr": "Is a DOMString that reflects the formenctype HTML attribute, containing the type of content that is used to submit the form to the server. ", 
                "name": "HTMLInputElement.formEncType"
            }, 
            {
                "descr": "Is a DOMString that reflects the formmethod HTML attribute, containing the HTTP method that the browser uses to submit the form. ", 
                "name": "HTMLInputElement.formMethod"
            }, 
            {
                "descr": "Is a Boolean that reflects the formnovalidate HTML attribute, indicating that the form is not to be validated when it is submitted. ", 
                "name": "HTMLInputElement.formNoValidate"
            }, 
            {
                "descr": "Is a DOMString that reflects the formtarget HTML attribute, containing a name or keyword indicating where to display the response that is received after submitting the form. ", 
                "name": "HTMLInputElement.formTarget"
            }, 
            {
                "descr": "Is aDOMString that reflects the height HTML attribute, which defines the height of the image displayed for the button, if the value of type is image.", 
                "name": "HTMLInputElement.height"
            }, 
            {
                "descr": "Is a Boolean that indicates that the checkbox is neither on nor off.", 
                "name": "HTMLInputElement.indeterminate"
            }, 
            {
                "descr": "Returns a live NodeList of <label> elements that are labels for this element.", 
                "name": "HTMLInputElement.labels Read only"
            }, 
            {
                "descr": "Is a HTMLElement that identifies a list of pre-defined options to suggest to the user. ", 
                "name": "HTMLInputElement.list"
            }, 
            {
                "descr": "Is a DOMString that reflects the max HTML attribute, containing the maximum (numeric or date-time) value for this item, which must not be less than its minimum (min attribute) value.", 
                "name": "HTMLInputElement.max"
            }, 
            {
                "descr": "Is a long integer that reflects the maxlength HTML attribute, containing the maximum length of text (in Unicode code points) that the value can be changed to. ", 
                "name": "HTMLInputElement.maxLength"
            }, 
            {
                "descr": "Is a DOMString that reflects the min HTML attribute, containing the minimum (numeric or date-time) value for this item, which must not be greater than its maximum (max attribute) value.", 
                "name": "HTMLInputElement.min"
            }, 
            {
                "descr": "Is a Boolean that reflects the multiple HTML attribute, indicating whether more than one value is possible (e.g., multiple files).", 
                "name": "HTMLInputElement.multiple"
            }, 
            {
                "descr": "Is a DOMString that reflects the name HTML attribute, containing a name that identifies the element when submitting the form.", 
                "name": "HTMLInputElement.name"
            }, 
            {
                "descr": "Is a DOMString that reflects the pattern HTML attribute, containing a regular expression that the control's value is checked against. ", 
                "name": "HTMLInputElement.pattern"
            }, 
            {
                "descr": "Is a DOMString that reflects the placeholder HTML attribute, containing a hint to the user of what can be entered in the control. ", 
                "name": "HTMLInputElement.placeholder"
            }, 
            {
                "descr": "Is a Boolean that reflects the readonly HTML attribute, indicating that the user cannot modify the value of the control. ", 
                "name": "HTMLInputElement.readOnly"
            }, 
            {
                "descr": "Is a Boolean that reflects the required HTML attribute, indicating that the user must fill in a value before submitting a form.", 
                "name": "HTMLInputElement.required"
            }, 
            {
                "descr": "Is a DOMString representing the direction in which selection occurred. ", 
                "name": "HTMLInputElement.selectionDirection"
            }, 
            {
                "descr": "Is an unsigned long value that represents the index of the end of selected text.", 
                "name": "HTMLInputElement.selectionEnd"
            }, 
            {
                "descr": "Is an unsigned long value that represents the index of the beginning of selected text. ", 
                "name": "HTMLInputElement.selectionStart"
            }, 
            {
                "descr": "Is an unsigned long value that reflects the size HTML attribute, containing size of the control. ", 
                "name": "HTMLInputElement.size"
            }, 
            {
                "descr": "Is a DOMString that reflects the src HTML attribute, which specifies a URI for the location of an image to display on the graphical submit button, if the value of type is image; otherwise it is ignored.", 
                "name": "HTMLInputElement.src"
            }, 
            {
                "descr": "Is a DOMString that reflects the step HTML attribute, which works withmin and max to limit the increments at which a numeric or date-time value can be set. ", 
                "name": "HTMLInputElement.step"
            }, 
            {
                "descr": "Is a DOMString that reflects the type HTML attribute, indicating the type of control to display. ", 
                "name": "HTMLInputElement.type"
            }, 
            {
                "descr": "Is a DOMString representing a client-side image map.", 
                "name": "HTMLInputElement.useMap"
            }, 
            {
                "descr": "Returns a DOMString that represents a localized message that describes the validation constraints that the control does not satisfy (if any). ", 
                "name": "HTMLInputElement.validationMessage Read only"
            }, 
            {
                "descr": "Returns a ValidityState that represents the validity stat that this element is in.", 
                "name": "HTMLInputElement.validity Read only"
            }, 
            {
                "descr": "Is a DOMString representing the current value of the control. ", 
                "name": "HTMLInputElement.value"
            }, 
            {
                "descr": "Is a Date containing the value of the element, interpreted as a date, or null if conversion is not possible.", 
                "name": "HTMLInputElement.valueAsDate"
            }, 
            {
                "descr": "Is a double value containing the value of the element, interpreted as one of the following in order:  a time value, a number, NaN if the conversion is not possible.", 
                "name": "HTMLInputElement.valueAsNumber"
            }, 
            {
                "descr": "Is a Boolean that reflects the webkitdirectory HTML attribute, which indicates if the input selects only directories and should display a specific file picker if possible.", 
                "name": "HTMLInputElement.webkitDirectory"
            }, 
            {
                "descr": "Is a DOMString that reflects the width HTML attribute, which defines the width of the image displayed for the button, if the value of type is image.", 
                "name": "HTMLInputElement.width"
            }, 
            {
                "descr": "Is a Boolean that indicates whether the element is a candidate for constraint validation. ", 
                "name": "HTMLInputElement.willValidate"
            }, 
            {
                "descr": "Removes focus from input; keystrokes will subsequently go nowhere.", 
                "name": "HTMLInputElement.blur()"
            }, 
            {
                "descr": "Returns a Boolean that is false if the element is a candidate for constraint validation, and it does not satisfy its constraints. ", 
                "name": "HTMLInputElement.checkValidity()"
            }, 
            {
                "descr": "Simulates a click on the element.", 
                "name": "HTMLInputElement.click()"
            }, 
            {
                "descr": "Focus on the input element; keystrokes will subsequently go to this element.", 
                "name": "HTMLInputElement.focus()"
            }, 
            {
                "descr": "Sets the files selected on the input to the given array of File objects. ", 
                "name": "HTMLInputElement.mozSetFileArray()"
            }, 
            {
                "descr": "Returns an array of all the file names from the input.", 
                "name": "HTMLInputElement.mozGetFileNameArray()"
            }, 
            {
                "descr": "Sets the filenames for the files selected on the input. ", 
                "name": "HTMLInputElement.mozSetFileNameArray()"
            }, 
            {
                "descr": "Selects the input text in the element, and focuses it so the user can subsequently replace the whole entry.", 
                "name": "HTMLInputElement.select()"
            }, 
            {
                "descr": "Sets a custom validity message for the element. ", 
                "name": "HTMLInputElement.setCustomValidity()"
            }, 
            {
                "descr": "Selects a range of text in the element (but does not focus it). ", 
                "name": "HTMLInputElement.setSelectionRange()"
            }, 
            {
                "descr": "Selects a range of text in the element (but does not focus it). ", 
                "name": "HTMLInputElement.setRangeText()"
            }, 
            {
                "descr": "Decrements the value by (step * n), where n defaults to 1 if not specified. ", 
                "name": "HTMLInputElement.setRangeText()"
            }, 
            {
                "descr": "Increments the value by (step * n), where n defaults to 1 if not specified. ", 
                "name": "HTMLInputElement.setRangeText()"
            }
        ], 
        "path": "dom/htmlinputelement", 
        "syntax": "<form> element in the same document. Even if the attribute is set on <input>, this property will be null, if it isn't the id of a <form> element. HTMLInputElement.formAction Is a DOMString that reflects the formaction HTML attribute, containing the URI of a program that processes information submitted by the element. If specified, this attribute overrides the action attribute of the <form> element that owns this element. HTMLInputElement.formEncType Is a DOMString that reflects the formenctype HTML attribute, containing the type of content that is used to submit the form to the server. If specified, this attribute overrides the enctype attribute of the <form> element that owns this element. HTMLInputElement.formMethod Is a DOMString that reflects the formmethod HTML attribute, containing the HTTP method that the browser uses to submit the form. If specified, this attribute overrides the method attribute of the <form> element that owns this element. HTMLInputElement.formNoValidate Is a Boolean that reflects the formnovalidate HTML attribute, indicating that the form is not to be validated when it is submitted. If specified, this attribute overrides the novalidate attribute of the <form> element that owns this element. HTMLInputElement.formTarget Is a DOMString that reflects the formtarget HTML attribute, containing a name or keyword indicating where to display the response that is received after submitting the form. If specified, this attribute overrides the target attribute of the <form> element that owns this element. HTMLInputElement.height Is aDOMString that reflects the height HTML attribute, which defines the height of the image displayed for the button, if the value of type is image. HTMLInputElement.indeterminate Is a Boolean that indicates that the checkbox is neither on nor off. HTMLInputElement.labels Read only  Returns a live NodeList of <label>", 
        "type": "Elements"
    }, 
    "HTMLInputElement.select": {
        "descr": "The HTMLInputElement.select() method selects all the text in a <textarea> element or an <input> element with a text field.", 
        "name": "HTMLInputElement.select", 
        "params": [], 
        "path": "dom/htmlinputelement/select", 
        "syntax": "element.select()", 
        "type": "Elements"
    }, 
    "HTMLInputElement.setSelectionRange": {
        "descr": "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an <input> element.", 
        "name": "HTMLInputElement.setSelectionRange", 
        "params": [
            {
                "descr": "The index of the first selected character.", 
                "name": "selectionStart"
            }, 
            {
                "descr": "The index of the character after the last selected character.", 
                "name": "selectionEnd"
            }, 
            {
                "descr": "A string indicating the direction in which the selection is performed. ", 
                "name": "selectionDirection Optional"
            }
        ], 
        "path": "dom/htmlinputelement/setselectionrange", 
        "syntax": "inputElement.setSelectionRange(selectionStart, selectionEnd, [optional] selectionDirection);", 
        "type": "Elements"
    }, 
    "HTMLIsIndexElement": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "HTMLIsIndexElement", 
        "params": [
            {
                "descr": "Is a HTMLFormElement representing the <form> element it belongs too. ", 
                "name": "HTMLIsIndexElement.form Read only"
            }, 
            {
                "descr": "Is a DOMString representing a text to be prompted for the field.", 
                "name": "HTMLIsIndexElement.prompt"
            }
        ], 
        "path": "dom/htmlisindexelement", 
        "syntax": "<form> element it belongs too. It can have the null value, if <isindex> isn't part of any form. HTMLIsIndexElement.prompt Is a DOMString representing a text to be prompted for the field.  Methods No specific method; inherits methods from its parent, HTMLElement. Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'HTMLIsIndexElement' in that specification. Living Standard No change from HTML5.   HTML5The definition of 'HTMLIsIndexElement' in that specification. Recommendation Removed. <isindex> must now implement HTMLUnknownElement.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'HTMLIsIndexElement' in that specification. Recommendation No change from Document Object Model (DOM) Level 1 Specification   Document Object Model (DOM) Level 1 SpecificationThe definition of 'HTMLIsIndexElement' in that specification. Recommendation Initial definition.    Browser compatibility", 
        "type": "Elements"
    }, 
    "HTMLLabelElement.control": {
        "descr": "The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the <label> element is associated, or null if the label isn't associated with a control.", 
        "name": "HTMLLabelElement.control", 
        "params": [], 
        "path": "dom/htmllabelelement/control", 
        "syntax": "control = HTMLLabelElement.control Value An HTMLElement derived object representing the control with which the <label>", 
        "type": "Elements"
    }, 
    "HTMLLabelElement.form": {
        "descr": "The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.", 
        "name": "HTMLLabelElement.form", 
        "params": [], 
        "path": "dom/htmllabelelement/form", 
        "syntax": "form = HTMLLabelElement.form Value An HTMLFormElement which represents the form with which the label's control", 
        "type": "Elements"
    }, 
    "HTMLLabelElement.htmlFor": {
        "descr": "The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element.", 
        "name": "HTMLLabelElement.htmlFor", 
        "params": [], 
        "path": "dom/htmllabelelement/htmlfor", 
        "syntax": "controlId = HTMLLabelElement.htmlForHTMLLabelElement.htmlFor = newId Value A DOMString which contains the ID string of the element which is associated with the control.  If this property has a value, the HTMLLabelElement.control", 
        "type": "Elements"
    }, 
    "HTMLLinkElement.rel": {
        "descr": "The HTMLLinkElement.rel property reflects the rel attribute. It is a DOMString containing a space-separated list of link types indicating the relationship between the resource represented by the <link> element and the current document.", 
        "name": "HTMLLinkElement.rel", 
        "params": [], 
        "path": "dom/htmllinkelement/rel", 
        "syntax": "var relstr = linkElt.rel;linkElt.rel = relstr; Example var links = document.getElementsByTagName(\"link\");\n or var length = links.length;for (var i = 0; i < length; i++) {  alert(links[i]);\n or });", 
        "type": "Elements"
    }, 
    "HTMLLinkElement.relList": {
        "descr": "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <link> element and the current document.", 
        "name": "HTMLLinkElement.relList", 
        "params": [], 
        "path": "dom/htmllinkelement/rellist", 
        "syntax": "var relstr = linkElt.relList; Example var links = document.getElementsByTagName(\"link\");\n or var length = links.length;for (var i = 0; i < length; i++) {  var list = links[i].relList;  var listLength = list.length;  console.log(\"New link found.\");\n or   for (var j = 0; j < listLength; j++) {    console.log(list[j]);\n or   }});", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.audioTracks": {
        "descr": "The HTMLMediaElement.audioTracks property is an AudioTrackList that represents the list of AudioTrack objects contained in the element.", 
        "name": "HTMLMediaElement.audioTracks", 
        "params": [], 
        "path": "dom/htmlmediaelement/audiotracks", 
        "syntax": "xxxxxx Examples xxxxx <xxxx></xxxx> xxxxx xxx.xxx()", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.autoplay": {
        "descr": "The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.", 
        "name": "HTMLMediaElement.autoplay", 
        "params": [], 
        "path": "dom/htmlmediaelement/autoplay", 
        "syntax": "... Value A Boolean. Examples ... <...></...> ... Xxx.xxx()", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.buffered": {
        "descr": "The HTMLMediaElement.buffered read-only property returns a new TimeRanges object that indicates the ranges of the media source that the browser has buffered (if any) at the moment the buffered property is accessed.", 
        "name": "HTMLMediaElement.buffered", 
        "params": [], 
        "path": "dom/htmlmediaelement/buffered", 
        "syntax": "var timeRange = audioObject.buffered Value A TimeRanges object. This object is normalized, which means that ranges are ordered, don't overlap, aren't empty, and don't touch (adjacent ranges are folded into one bigger range).", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.canPlayType": {
        "descr": "The HTMLMediaElement.canPlayType() method determines whether the specified media type can be played back.", 
        "name": "HTMLMediaElement.canPlayType", 
        "params": [
            {
                "descr": "A DOMString containing the MIME type of the media.", 
                "name": "mediaType"
            }
        ], 
        "path": "dom/htmlmediaelement/canplaytype", 
        "syntax": "str = audioOrVideo.canPlayType(mediaType);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.controller": {
        "descr": "The HTMLMediaElement.controller property represents the media controller assigned to the element.", 
        "name": "HTMLMediaElement.controller", 
        "params": [], 
        "path": "dom/htmlmediaelement/controller", 
        "syntax": "... Value A MediaController object or null if no media controller is assigned to the element. The default is null. Example ... Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'HTMLMediaElement.controller' in that specification. Living Standard No change from HTML5   HTML5The definition of 'HTMLMediaElement.controller' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   controller", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.controls": {
        "descr": "The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.", 
        "name": "HTMLMediaElement.controls", 
        "params": [], 
        "path": "dom/htmlmediaelement/controls", 
        "syntax": "var ctrls = video.controls;audio.controls = true; Value A Boolean. A value of true means controls will be displayed. Example var obj = document.createElement('video');\n or obj.controls = true;);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.currentSrc": {
        "descr": "The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.", 
        "name": "HTMLMediaElement.currentSrc", 
        "params": [], 
        "path": "dom/htmlmediaelement/currentsrc", 
        "syntax": "var mediaUrl = audioObject.currentSrc Value A DOMString object. Example var obj = document.createElement('video');\n or console.log(obj.currentSrc);\n or  // \"\");", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.currentTime": {
        "descr": "The HTMLMediaElement.currentTime property gives the current playback time in seconds. Setting this value seeks the media to the new time.", 
        "name": "HTMLMediaElement.currentTime", 
        "params": [], 
        "path": "dom/htmlmediaelement/currenttime", 
        "syntax": "var cTime = video.currentTime;audio.currentTime = 35; Value A double. Example var obj = document.createElement('video');\n or console.log(obj.currentTime);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.defaultMuted": {
        "descr": "The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.", 
        "name": "HTMLMediaElement.defaultMuted", 
        "params": [], 
        "path": "dom/htmlmediaelement/defaultmuted", 
        "syntax": "var dMuted = video.defaultMuted;audio.defaultMuted = true; Value A Boolean. A value of true means that the audio output will be muted by default. Example var obj = document.createElement('video');\n or console.log(obj.defaultMuted);\n or  // false);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.defaultPlaybackRate": {
        "descr": "The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.", 
        "name": "HTMLMediaElement.defaultPlaybackRate", 
        "params": [], 
        "path": "dom/htmlmediaelement/defaultplaybackrate", 
        "syntax": "var dSpeed = video.defaultPlaybackRate;audio.defaultPlaybackRate = 1.0; Value A double. 1.0 is \"normal speed,\" values lower than 1.0 make the media play slower than normal, higher values make it play faster. The value 0.0 is invalid and throws a NOT_SUPPORTED_ERR exception. Example var obj = document.createElement('video');\n or console.log(obj.defaultPlaybackRate);\n or  // 1);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.disableRemotePlayback": {
        "descr": "The HTMLMediaElement.disableRemotePlayback property determines whether the media element is allowed to have a remote playback UI.", 
        "name": "HTMLMediaElement.disableRemotePlayback", 
        "params": [], 
        "path": "dom/htmlmediaelement/disableremoteplayback", 
        "syntax": "var remotePlaybackState \u200b= element.disableRemotePlayback();", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.duration": {
        "descr": "The HTMLMediaElement.duration property gives the length of the media in seconds, or zero if no media data is available.", 
        "name": "HTMLMediaElement.duration", 
        "params": [], 
        "path": "dom/htmlmediaelement/duration", 
        "syntax": "var myDuration = audioOrVideo.duration Value A double. If the media data is available but the length is unknown, this value is NaN. If the media is streamed and has no predefined length, the value is Inf. Example var obj = document.createElement('video');\n or console.log(obj.duration);\n or  // NaN);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.ended": {
        "descr": "The HTMLMediaElement.ended indicates whether the media element has ended playback.", 
        "name": "HTMLMediaElement.ended", 
        "params": [], 
        "path": "dom/htmlmediaelement/ended", 
        "syntax": "var isEnded = audioOrVideo.ended Value A Boolean. Example var obj = document.createElement('video');\n or console.log(obj.ended);\n or  // false);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.error": {
        "descr": "The HTMLMediaElement.error is the MediaError object for the most recent error, or null if there has not been an error.", 
        "name": "HTMLMediaElement.error", 
        "params": [], 
        "path": "dom/htmlmediaelement/error", 
        "syntax": "var myError = audioOrVideo.error Value A MediaError object or null. Example var obj = document.createElement('video');\n or console.log(obj.error);\n or  // null);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.loop": {
        "descr": "The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.", 
        "name": "HTMLMediaElement.loop", 
        "params": [], 
        "path": "dom/htmlmediaelement/loop", 
        "syntax": "var loop = video.loop;audio.loop = true; Value A Boolean. Example var obj = document.createElement('video');\n or obj.loop = true; // true);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.mediaGroup": {
        "descr": "The HTMLMediaElement.mediaGroup property reflects the mediagroup HTML attribute, which indicates the name of the group of elements it belongs to. A group of media elements shares a common controller.", 
        "name": "HTMLMediaElement.mediaGroup", 
        "params": [], 
        "path": "dom/htmlmediaelement/mediagroup", 
        "syntax": "... Value A DOMString. Example ... Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'HTMLMediaElement.mediaGroup' in that specification. Living Standard No change from HTML5   HTML5The definition of 'HTMLMediaElement.mediaGroup' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   mediaGroup", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.muted": {
        "descr": "The HTMLMediaElement.muted indicates whether the media element muted.", 
        "name": "HTMLMediaElement.muted", 
        "params": [], 
        "path": "dom/htmlmediaelement/muted", 
        "syntax": "var isMuted = audioOrVideo.mutedaudio.controls = true; Value A Boolean. true means muted and false means not muted. Example var obj = document.createElement('video');\n or console.log(obj.muted);\n or  // false);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.networkState": {
        "descr": "The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.", 
        "name": "HTMLMediaElement.networkState", 
        "params": [], 
        "path": "dom/htmlmediaelement/networkstate", 
        "syntax": "xxxxxx Value An unsigned short. Possible values are:    Constant Value Description     NETWORK_EMPTY 0 There is no data yet. Also, readyState is HAVE_NOTHING.   NETWORK_IDLE 1     NETWORK_LOADING 2 The media is loading.   NETWORK_NO_SOURCE 3      Examples xxxxx <xxxx></xxxx> xxxxx xxx.xxx()", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.paused": {
        "descr": "The read-only HTMLMediaElement.paused property tells whether the media element is paused.", 
        "name": "HTMLMediaElement.paused", 
        "params": [], 
        "path": "dom/htmlmediaelement/paused", 
        "syntax": "var isPaused = audioOrVideo.paused Value A Boolean. true is paused and false is not paused. Example var obj = document.createElement('video');\n or console.log(obj.paused);\n or  // true);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.play": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "HTMLMediaElement.play", 
        "params": [
            {
                "descr": "The user agent (browser) or operating system doesn't allow playback of media in the current context or situation. ", 
                "name": "NotAllowedError"
            }, 
            {
                "descr": "The media source (which may be specified as a MediaStream, MediaSource, Blob, or File, for example) doesn't represent a supported media format.", 
                "name": "NotSupportedError"
            }
        ], 
        "path": "dom/htmlmediaelement/play", 
        "syntax": "HTMLMediaElement.play()", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.playbackRate": {
        "descr": "The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.", 
        "name": "HTMLMediaElement.playbackRate", 
        "params": [], 
        "path": "dom/htmlmediaelement/playbackrate", 
        "syntax": "var dSpeed = video.playbackRate;audio.playbackRate = 1.0; Value A double. 1.0 is \"normal speed,\" values lower than 1.0 make the media play slower than normal, higher values make it play faster. Example var obj = document.createElement('video');\n or console.log(obj.playbackRate);\n or  // 1);", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.readyState": {
        "descr": "The HTMLMediaElement.readyState property indicates the readiness state of the media.", 
        "name": "HTMLMediaElement.readyState", 
        "params": [], 
        "path": "dom/htmlmediaelement/readystate", 
        "syntax": "var readyState = audioOrVideo.readyState; Value An unsigned short. Possible values are:    Constant Value Description     HAVE_NOTHING 0 No information is available about the media resource.   HAVE_METADATA 1 Enough of the media resource has been retrieved that the metadata attributes are initialized. Seeking will no longer raise an exception.   HAVE_CURRENT_DATA 2 Data is available for the current playback position, but not enough to actually play more than one frame.   HAVE_FUTURE_DATA 3 Data for the current playback position as well as for at least a little bit of time into the future is available (in other words, at least two frames of video, for example).   HAVE_ENOUGH_DATA 4 Enough data is available\u2014and the download rate is high enough\u2014that the media can be played through to the end without interruption.    Examples", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.seekable": {
        "descr": "The seekable read-only property of the HTMLMediaElement returns a TimeRanges object that contains the time ranges that the user is able to seek to, if any.", 
        "name": "HTMLMediaElement.seekable", 
        "params": [], 
        "path": "dom/htmlmediaelement/seekable", 
        "syntax": "var seekable = audioOrVideo.seekable; Value A TimeRanges object. Examples This example will listen for audio data to be loaded for the element `example`. It will then check if at least the current playback position has been loaded. If it has, the audio will play. <audio id=\"example\" preload=\"auto\"> <source src=\"sound.ogg\" type=\"audio/ogg\" /></audio> var obj = document.getElementById('example');\n or obj.addEventListener('loadeddata', function() {  if(obj.readyState >= 2) {    obj.play();\n or   }});", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.setSinkId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "HTMLMediaElement.setSinkId", 
        "params": [
            {
                "descr": "The ID of the audio output device.", 
                "name": "sinkId"
            }
        ], 
        "path": "dom/htmlmediaelement/setsinkid", 
        "syntax": "HTMLMediaElement.setSinkId()", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.sinkId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "HTMLMediaElement.sinkId", 
        "params": [], 
        "path": "dom/htmlmediaelement/sinkid", 
        "syntax": "HTMLMediaElement.sinkId read-only property returns a DOMString that is the unique ID of the audio device delivering output. If it is using the user agent default, it returns an empty string. This ID should be one of the MediaDeviceInfo.deviceid values returned fromMediaDevices.enumeratedDevices()", 
        "type": "Elements"
    }, 
    "HTMLMediaElement.volume": {
        "descr": "The HTMLMediaElement.volume property sets the volume at which the media will be played.", 
        "name": "HTMLMediaElement.volume", 
        "params": [], 
        "path": "dom/htmlmediaelement/volume", 
        "syntax": "var volume \u200b= video.volume; //1 Value A double values must fall between 0 and 1, where 0 is effectively muted and 1 is the loudest possible value. Example var obj = document.createElement('audio');\n or console.log(obj.volume);\n or  // 1obj.volume = 0.75;);", 
        "type": "Elements"
    }, 
    "HTMLObjectElement.typeMustMatch": {
        "descr": "The HTMLObjectElement.typeMustMatch property is a Boolean reflects the typemustmatch attribute of the <object> element and indicates if the resouce linked by it must match the MIME type given by HTMLObjectElement.type in order for this resource to be used.", 
        "name": "HTMLObjectElement.typeMustMatch", 
        "params": [], 
        "path": "dom/htmlobjectelement/typemustmatch", 
        "syntax": "var mustMatch = obj.typeMustMatch;obj.typeMustMatch = mustMatch; Example <object id=\"obj\" data=\"move.swf\" type=\"application/x-shockwave-flash\" typemustmatch></object> var obj = document.getElementById(\"obj\");\n or console.log(obj.typeMustMatch);", 
        "type": "Elements"
    }, 
    "HTMLOptionElement": {
        "descr": "The HTMLOptionElement interface represents <option> elements and inherits all classes and methods of the HTMLElement interface.", 
        "name": "HTMLOptionElement", 
        "params": [
            {
                "descr": "Is a constructor creating an HTMLOptionElement object. ", 
                "name": "HTMLOptionElement.Option()"
            }
        ], 
        "path": "dom/htmloptionelement", 
        "syntax": "HTMLOptionElement.Option()", 
        "type": "Elements"
    }, 
    "HTMLOptionElement.Option": {
        "descr": "Constructor for creating an HTMLOptionElement. The Option constructor is from the very early days of DOM scripting and has non\u2013standard syntax, but has ubiquitous support in browsers.", 
        "name": "HTMLOptionElement.Option", 
        "params": [
            {
                "descr": "A reference to the newly created HTMLOptionElement.", 
                "name": "optionElementReference"
            }, 
            {
                "descr": "A string that sets the content of the element, i.e. ", 
                "name": "text"
            }, 
            {
                "descr": "A string that sets the value attribute.", 
                "name": "value"
            }, 
            {
                "descr": "A boolean that sets the selected attribute, the default is false. ", 
                "name": "defaultSelected"
            }, 
            {
                "descr": "A boolean that sets the option's selected state, the default is false (not selected). ", 
                "name": "selected"
            }
        ], 
        "path": "dom/htmloptionelement/option", 
        "syntax": "var optionElementReference = new Option([text, [value, [defaultSelected, [selected]]]]);", 
        "type": "Elements"
    }, 
    "HTMLPictureElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLPictureElement", 
        "params": [], 
        "path": "dom/htmlpictureelement", 
        "syntax": "HTMLPictureElement interface represents a <picture>", 
        "type": "Elements"
    }, 
    "HTMLScriptElement": {
        "descr": "HTML script elements expose the HTMLScriptElement interface, which provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <script> elements.", 
        "name": "HTMLScriptElement", 
        "params": [], 
        "path": "dom/htmlscriptelement", 
        "syntax": "document.write()", 
        "type": "Elements"
    }, 
    "HTMLSelectElement": {
        "descr": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.", 
        "name": "HTMLSelectElement", 
        "params": [
            {
                "descr": "Is a Boolean that reflects the autofocus HTML attribute, which indicates whether the control should have input focus when the page loads, unless the user overrides it, for example by typing in a different control. Only one form-associated element in a document can have this attribute specified.", 
                "name": "HTMLSelectElement.autofocus"
            }, 
            {
                "descr": "Is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. ", 
                "name": "HTMLSelectElement.disabled"
            }, 
            {
                "descr": "Returns a HTMLFormElement representing the form that this element is associated with. ", 
                "name": "HTMLSelectElement.form Read only"
            }, 
            {
                "descr": "Returns a NodeList containing the list of label elements associated with this select element.", 
                "name": "HTMLSelectElement.labels Read only"
            }, 
            {
                "descr": "Is an unsigned long representing the number of <option> elements in this select element.", 
                "name": "HTMLSelectElement.length"
            }, 
            {
                "descr": "Is a Boolean that reflects the multiple HTML attribute, which indicates whether multiple items can be selected.", 
                "name": "HTMLSelectElement.multiple"
            }, 
            {
                "descr": "Is a DOMString that reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions.", 
                "name": "HTMLSelectElement.name"
            }, 
            {
                "descr": "Returns a HTMLOptionsCollection containing the set of <option> elements contained by this element.", 
                "name": "HTMLSelectElement.options Read only"
            }, 
            {
                "descr": "Is a Boolean that reflects the required HTML attribute, which indicates whether the user is required to select a value before submitting the form.", 
                "name": "HTMLSelectElement.required"
            }, 
            {
                "descr": "Is a long that reflects the index of the first selected <option> element. ", 
                "name": "HTMLSelectElement.selectedIndex"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing the set of options that are selected.", 
                "name": "HTMLSelectElement.selectedOptions Read only"
            }, 
            {
                "descr": "Is a long that reflects the size HTML attribute, which contains the number of visible items in the control. ", 
                "name": "HTMLSelectElement.size"
            }, 
            {
                "descr": "Returns a DOMString the form control's type. ", 
                "name": "HTMLSelectElement.type Read only"
            }, 
            {
                "descr": "Returns a DOMString containing a localized message that describes the validation constraints that the control does not satisfy (if any). ", 
                "name": "HTMLSelectElement.validationMessage Read only"
            }, 
            {
                "descr": "Returns a ValidityState representing the validity state that this control is in.", 
                "name": "HTMLSelectElement.validity Read only"
            }, 
            {
                "descr": "Is a DOMString with the value of this form control, that is, of the first selected option.", 
                "name": "HTMLSelectElement.value"
            }, 
            {
                "descr": "Is a Boolean that indicates whether the button is a candidate for constraint validation. ", 
                "name": "HTMLSelectElement.willValidateRead only"
            }, 
            {
                "descr": "Adds an element to the collection of option elements for this select element.", 
                "name": "HTMLSelectElement.add()"
            }, 
            {
                "descr": "Removes input focus from this element. ", 
                "name": "HTMLSelectElement.blur()"
            }, 
            {
                "descr": "Checks whether the element has any constraints and whether it satisfies them. ", 
                "name": "HTMLSelectElement.checkValidity()"
            }, 
            {
                "descr": "Gives input focus to this element. ", 
                "name": "HTMLSelectElement.focus()"
            }, 
            {
                "descr": "Gets an item from the options collection for this <select> element. ", 
                "name": "HTMLSelectElement.item()"
            }, 
            {
                "descr": "Gets the item in the options collection with the specified name. ", 
                "name": "HTMLSelectElement.namedItem()"
            }, 
            {
                "descr": "Removes the element at the specified index from the options collection for this select element.", 
                "name": "HTMLSelectElement.remove()"
            }, 
            {
                "descr": "Sets the custom validity message for the selection element to the specified message. ", 
                "name": "HTMLSelectElement.setCustomValidity()"
            }
        ], 
        "path": "dom/htmlselectelement", 
        "syntax": "<form> element, then it returns null. HTMLSelectElement.labels Read only  Returns a NodeList containing the list of label elements associated with this select element. HTMLSelectElement.length Is an unsigned long representing the number of <option> elements in this select element. HTMLSelectElement.multiple Is a Boolean that reflects the multiple HTML attribute, which indicates whether multiple items can be selected. HTMLSelectElement.name Is a DOMString that reflects the name HTML attribute, containing the name of this control used by servers and DOM search functions. HTMLSelectElement.options Read only  Returns a HTMLOptionsCollection", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.add": {
        "descr": "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.", 
        "name": "HTMLSelectElement.add", 
        "params": [], 
        "path": "dom/htmlselectelement/add", 
        "syntax": "collection.add(item[, before]);", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.autofocus": {
        "descr": "The HTMLSelectElement.autofocus property is a Boolean that reflects the autofocus HTML attribute, which indicates whether the associated <select> element will get input focus when the page loads, unless the user overrides it.", 
        "name": "HTMLSelectElement.autofocus", 
        "params": [], 
        "path": "dom/htmlselectelement/autofocus", 
        "syntax": "aBool = aSelectElement.autofocus; // Get the value of autofocusaSelectElement.autofocus = aBool; // Set the value of autofocus Example HTML <select id=\"mySelect\" autofocus>  <option>Option 1</option>  <option>Option 2</option></select> JavaScript // Check if the autofocus attribute on the <select>var hasAutofocus = document.getElementById('mySelect').autofocus;", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.checkValidity": {
        "descr": "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.", 
        "name": "HTMLSelectElement.checkValidity", 
        "params": [], 
        "path": "dom/htmlselectelement/checkvalidity", 
        "syntax": "var result = selectElt.checkValidity();", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.disabled": {
        "descr": "The HTMLSelectElement.disabled Is a Boolean that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.", 
        "name": "HTMLSelectElement.disabled", 
        "params": [], 
        "path": "dom/htmlselectelement/disabled", 
        "syntax": "aSelectElement.disabled = aBool; Example HTML <form>  <input type=\"text\" size=\"20\" value=\"Can't submit this!\">   <input type=\"Submit\" value=\"Submit\" name=\"B1\" disabled=\"disabled\"> </form> Javascript Here we have a simple function which disables/enables select element when checkbox is checked/unchecked.The disabled property of JavaScript is a Boolean property, meaning it only take two possible values: \"true\", or \"false\". By knowing this, you basically know how to manipulate the disabled attribute- disabling and re-enabling a form element at will. function toggleSelection( element, scope ){    scope = scope ||this;if(scope.checked){        $(element.data).attr('disabled','disabled');\n or }else{        $(element.data).removeAttr('disabled');\n or }});", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.form": {
        "descr": "The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with of a <form> element, then it returns null.", 
        "name": "HTMLSelectElement.form", 
        "params": [], 
        "path": "dom/htmlselectelement/form", 
        "syntax": "<form> element, then it returns null. Syntax  aForm = aSelectElement.form.selectname;  Example HTML <form action=\"http://www.google.com/search\" method=\"get\"> <label>Google: <input type=\"search\" name=\"q\"></label> <input type=\"submit\" value=\"Search...\"></form> Javascript A property available on all form elements, \"type\" returns the type of the calling form element. For SELECT, the two possible values are \"select-one\" or \"select-multiple\", depending on the type of selection list. The below code gives all SELECT elements in a particular form a CSS class of \"selectclass\": <script type=\"text/javascript\">var form_element = document.getElementById('subscribe_form');\n or var vist = from_element.style;if (vist.display=='' || vist.display=='none'){\u00a0 vist.display = 'block';}else{\u00a0 vist.display = 'none';}</script>);", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.item": {
        "descr": "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in parameter, or null if there are none.", 
        "name": "HTMLSelectElement.item", 
        "params": [], 
        "path": "dom/htmlselectelement/item", 
        "syntax": "unsigned long, like selectElt[idx] is equivalent to selectElt.namedItem(idx)", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.labels": {
        "descr": "The HTMLSelectElement.labels is a read only property that returns a NodeList containing the list of label elements associated with this select element.", 
        "name": "HTMLSelectElement.labels", 
        "params": [], 
        "path": "dom/htmlselectelement/labels", 
        "syntax": "aSelectElement.label.selectname= alabel ;  Example HTML The following example shows three form controls each with a label, two of which have small text showing the right format for users to use. <p><label>Full name: <input name=fn> <small>Format: First Last</small></label></p><p><label>Age: <input name=age type=number min=0></label></p><p><label>Post code: <input name=pc> <small>Format: AB12 3CD</small></label></p> Javascript This JavaScript finds the label for a form element, which is helpful for dynamically highlighting or changing a label based on user input. <script type=\"text/javascript\">function luster(inputElem){if(inputElem.parentNode){if(inputElem.parentNode.tagName=='label'){return inputElem.parentNode;}}var labels=document.getElementsByTagName(\"label\"),i;for( i=1; i<labels.length;i++ ){if(labels[i].htmlFor==inputElem.id){return labels[i];}}return false;}</script>", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.namedItem": {
        "descr": "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.", 
        "name": "HTMLSelectElement.namedItem", 
        "params": [], 
        "path": "dom/htmlselectelement/nameditem", 
        "syntax": "String, like selectElt[\"value\"] is equivalent to selectElt.namedItem(\"value\")", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.remove": {
        "descr": "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.", 
        "name": "HTMLSelectElement.remove", 
        "params": [], 
        "path": "dom/htmlselectelement/remove", 
        "syntax": "collection.remove(index);", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.selectedIndex": {
        "descr": "The HTMLSelectElement.selectedIndex is a long that reflects the index of the first selected <option> element. The value -1 indicates that no element is selected.", 
        "name": "HTMLSelectElement.selectedIndex", 
        "params": [], 
        "path": "dom/htmlselectelement/selectedindex", 
        "syntax": "var index = selectElem.selectedIndex;selectElem.selectedIndex = index; Example HTML <p id=\"p\">selectedIndex: 0</p><select id=\"select\">  <option selected>Option A</option>  <option>Option B</option>  <option>Option C</option>  <option>Option D</option>  <option>Option E</option></select> JavaScript var selectElem = document.getElementById('select')var pElem = document.getElementById('p')// When a new <option> is selectedselectElem.addEventListener('change', function() {  var index = selectElem.selectedIndex;  // Add that data to the <p>  pElem.innerHTML = 'selectedIndex: ' + index;})", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.setCustomValidity": {
        "descr": "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.", 
        "name": "HTMLSelectElement.setCustomValidity", 
        "params": [], 
        "path": "dom/htmlselectelement/setcustomvalidity", 
        "syntax": "selectElt.setCustomValidity(string);", 
        "type": "Elements"
    }, 
    "HTMLSelectElement.type": {
        "descr": "The HTMLSelectElement.type read-only property returns the form control's type. The possible values are:", 
        "name": "HTMLSelectElement.type", 
        "params": [], 
        "path": "dom/htmlselectelement/type", 
        "syntax": "var str = selectElt.type; Example switch (select.type) {   case 'select-multiple':      // Multiple values may be selected.      break;   case 'select-one':      // Only one value may be selected.      break;   default:      // non-standard value (or this isn't a SELECT element)}", 
        "type": "Elements"
    }, 
    "HTMLShadowElement.getDistributedNodes": {
        "descr": "The HTMLShadowElement.getDistributedNodes() method returns a static NodeList of the distributed nodes associated with this <shadow> element.", 
        "name": "HTMLShadowElement.getDistributedNodes", 
        "params": [], 
        "path": "dom/htmlshadowelement/getdistributednodes", 
        "syntax": "var nodeList = object.getDistributedNodes()", 
        "type": "Elements"
    }, 
    "HTMLStyleElement.media": {
        "descr": "The HTMLSyleElement.media property specifies the intended destination medium for style information.", 
        "name": "HTMLStyleElement.media", 
        "params": [], 
        "path": "dom/htmlstyleelement/media", 
        "syntax": "medium = style.mediastyle.media = medium Parameters  medium is a string describing a single medium or a comma-separated list.  Example <!DOCTYPE html><head><link id=\"linkScreenStyle\" rel=\"stylesheet\" href=\"document.css\" type=\"text/css\" media=\"screen\" /><style id=\"screenStyle\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\">p {color:blue;}</style><script>alert(document.getElementById('screenStyle').media);\n or  // 'screen'alert(document.getElementById('linkScreenStyle').media);\n or  // 'screen'</script></head><body></body></html>);", 
        "type": "Elements"
    }, 
    "HTMLStyleElement.scoped": {
        "descr": "The HTMLStyleElement.scoped property is a Boolean value indicating if the element applies to the whole document (false) or only to the parent's sub-tree (true).", 
        "name": "HTMLStyleElement.scoped", 
        "params": [], 
        "path": "dom/htmlstyleelement/scoped", 
        "syntax": "value = style.scoped;style.scoped = true; Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'scoped' in that specification. Living Standard No change from HTML5.   HTML5.1The definition of 'scoped' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported [1] 21.0 (21.0) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic suppport ? 21.0 (21.0) Not supported Not supported Not supported     [1] Chrome 19 up to 34 supports it after activating the \u2018Enable <style scoped>", 
        "type": "Elements"
    }, 
    "HTMLStyleElement.type": {
        "descr": "The HTMLStyleElement.type read-only property returns the type of the current style.", 
        "name": "HTMLStyleElement.type", 
        "params": [], 
        "path": "dom/htmlstyleelement/type", 
        "syntax": "string = style.type; Example if (newStyle.type != \"text/css\"){   // not supported!   warnCSS();\n or });", 
        "type": "Elements"
    }, 
    "HTMLTableElement": {
        "descr": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.", 
        "name": "HTMLTableElement", 
        "params": [
            {
                "descr": "Is an HTMLTableCaptionElement representing the first <caption> that is a child of the element, or null if none is found. ", 
                "name": "HTMLTableElement.caption"
            }, 
            {
                "descr": "Is an HTMLTableSectionElement representing the first <thead> that is a child of the element, or null if none is found. ", 
                "name": "HTMLTableElement.tHead"
            }, 
            {
                "descr": "Is an HTMLTableSectionElement representing the first <tfoot> that is a child of the element, or null if none is found. ", 
                "name": "HTMLTableElement.tFoot"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all the rows of the element, that is all <tr> that are a child of the element, or a child or one of its <thead>, <tbody> and <tfoot> children. ", 
                "name": "HTMLTableElement.rows Read only"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all the <tbody> of the element. ", 
                "name": "HTMLTableElement.tBodies Read only"
            }, 
            {
                "descr": "Is a Boolean value indicating if the user agent is allowed to provide sorting mechanism for the table, if it supports such a feature. ", 
                "name": "HTMLTableElement.sortable"
            }, 
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ", 
                "name": "HTMLTableElement.align"
            }, 
            {
                "descr": "Is a DOMString containing the background color of the cells. ", 
                "name": "HTMLTableElement.bgColor"
            }, 
            {
                "descr": "Is a DOMString containing the width in pixels of the border of the table. ", 
                "name": "HTMLTableElement.border"
            }, 
            {
                "descr": "Is a DOMString containing the width in pixels of the horizontal and vertical sapce between cell content and cell borders. ", 
                "name": "HTMLTableElement.cellPadding"
            }, 
            {
                "descr": "Is a DOMString containing the width in pixels of the horizontal and vertical separation between cells. ", 
                "name": "HTMLTableElement.cellSpacing"
            }, 
            {
                "descr": "Is a DOMString containing the type of the external borders of the table. ", 
                "name": "HTMLTableElement.frame"
            }, 
            {
                "descr": "Is a DOMString containing the type of the internal borders of the table. ", 
                "name": "HTMLTableElement.rules"
            }, 
            {
                "descr": "Is a DOMString containing a description of the purpose or the structure of the table. ", 
                "name": "HTMLTableElement.summary"
            }, 
            {
                "descr": "Is a DOMString containing the length in pixels or in percentage of the desired width fo the entire table. ", 
                "name": "HTMLTableElement.width"
            }, 
            {
                "descr": "Returns an HTMLElement representing the first <thead> that is a child of the element. ", 
                "name": "HTMLTableElement.createTHead()"
            }, 
            {
                "descr": "Removes the first <thead> that is a child of the element.", 
                "name": "HTMLTableElement.deleteTHead()"
            }, 
            {
                "descr": "Returns an HTMLElement representing the first <tfoot> that is a child of the element. ", 
                "name": "HTMLTableElement.createTFoot()"
            }, 
            {
                "descr": "Removes the first <tfoot> that is a child of the element.", 
                "name": "HTMLTableElement.deleteTFoot()"
            }, 
            {
                "descr": "Returns an HTMLElement representing the first <caption> that is a child of the element. ", 
                "name": "HTMLTableElement.createCaption()"
            }, 
            {
                "descr": "Removes the first <caption> that is a child of the element.", 
                "name": "HTMLTableElement.deleteCaption()"
            }, 
            {
                "descr": "Returns an HTMLTableRowElement representing a new row of the table. ", 
                "name": "HTMLTableElement.insertRow()"
            }, 
            {
                "descr": "Removes the row corresponding to the index given in parameter. ", 
                "name": "HTMLTableElement.deleteRow()"
            }, 
            {
                "descr": "Removes the sortable attribute to all <th> elements of the table.", 
                "name": "HTMLTableElement.stopSorting()"
            }
        ], 
        "path": "dom/htmltableelement", 
        "syntax": "HTMLTableSectionElement representing the first <thead>", 
        "type": "Elements"
    }, 
    "HTMLTableElement.caption": {
        "descr": "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, it can be null.", 
        "name": "HTMLTableElement.caption", 
        "params": [], 
        "path": "dom/htmltableelement/caption", 
        "syntax": "string = table.caption Example if (table.caption) {    // do something with the caption}", 
        "type": "Elements"
    }, 
    "HTMLTableElement.cellPadding": {
        "descr": "The HTMLTableElement.cellPadding property represents the padding around the individual cells of the table.", 
        "name": "HTMLTableElement.cellPadding", 
        "params": [], 
        "path": "dom/htmltableelement/cellpadding", 
        "syntax": "HTMLTableElement.cellPadding =padding;varpadding =HTMLTableElement.cellPadding;  padding is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\").  Example", 
        "type": "Elements"
    }, 
    "HTMLTableElement.cellSpacing": {
        "descr": "The HTMLTableElement.cellSpacing represents the spacing around the individual cells of the table.", 
        "name": "HTMLTableElement.cellSpacing", 
        "params": [], 
        "path": "dom/htmltableelement/cellspacing", 
        "syntax": "HTMLTableElement.cellSpacing =spacing;varspacing =HTMLTableElement.cellSpacing;  spacing is either a number of pixels (e.g. \"10\") or a percentage value (e.g. \"10%\").  Example", 
        "type": "Elements"
    }, 
    "HTMLTableElement.createCaption": {
        "descr": "The HTMLTableElement.createCaption() method returns the caption for the table. If no caption element exists on the table, this method creates it, then returns it.", 
        "name": "HTMLTableElement.createCaption", 
        "params": [], 
        "path": "dom/htmltableelement/createcaption", 
        "syntax": "HTMLTableElement = table.createCaption()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.createTFoot": {
        "descr": "The HTMLTableElement.createTFoot() method returns the <tfoot> element associated with the table, of type HTMLTableSectionElement. If there is no footer for this table, this methods creates it, then returns it.", 
        "name": "HTMLTableElement.createTFoot", 
        "params": [], 
        "path": "dom/htmltableelement/createtfoot", 
        "syntax": "HTMLTableSectionElement. If there is no footer for this table, this methods creates it, then returns it. Syntax HTMLTableElement = table.createTFoot()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.createTHead": {
        "descr": "The HTMLTableElement.createTHead()method returns the <thead> element association with the table, of type HTMLTableSectionElement. If there is no such element associated to the thable, this method creates it, then returns it.", 
        "name": "HTMLTableElement.createTHead", 
        "params": [], 
        "path": "dom/htmltableelement/createthead", 
        "syntax": "HTMLTableSectionElement. If there is no such element associated to the thable, this method creates it, then returns it. Syntax HTMLElementObject = table.createTHead()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteCaption": {
        "descr": "The HTMLTableElement.deleteCaption() method removes the caption from the table. If there is no caption associated with the table, this method does nothing.", 
        "name": "HTMLTableElement.deleteCaption", 
        "params": [], 
        "path": "dom/htmltableelement/deletecaption", 
        "syntax": "HTMLTableElement.deleteCaption()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteRow": {
        "descr": "The HTMLTableElement.deleteRow() method removes a row from the table. If the amount of rows to delete, specified by the parameter, is greater or equal to the number of available rows, or if it is negative and not equal to the special index -1, representing the last row of the table, the exception INDEX_SIZE_ERR is thrown.", 
        "name": "HTMLTableElement.deleteRow", 
        "params": [
            {
                "descr": "index is an integer representing the row that should be deleted. ", 
                "name": "index"
            }
        ], 
        "path": "dom/htmltableelement/deleterow", 
        "syntax": "HTMLTableElement.deleteRow(index)", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteTFoot": {
        "descr": "The HTMLTableElement.deleteTFoot() method removes a <tfoot> element from the table.", 
        "name": "HTMLTableElement.deleteTFoot", 
        "params": [], 
        "path": "dom/htmltableelement/deletetfoot", 
        "syntax": "HTMLTableElement.deleteTFoot()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.deleteTHead": {
        "descr": "The HTMLTableElement.deleteTHead() removes a <thead> element from the table.", 
        "name": "HTMLTableElement.deleteTHead", 
        "params": [], 
        "path": "dom/htmltableelement/deletethead", 
        "syntax": "HTMLTableElement.deleteTHead()", 
        "type": "Elements"
    }, 
    "HTMLTableElement.frame": {
        "descr": "The HTMLTableElement.frame property represents which external table borders to render.", 
        "name": "HTMLTableElement.frame", 
        "params": [
            {
                "descr": "no sides. this is the default.", 
                "name": "void"
            }, 
            {
                "descr": "top side", 
                "name": "above"
            }, 
            {
                "descr": "bottom side", 
                "name": "below"
            }, 
            {
                "descr": "top and bottom only", 
                "name": "hsides"
            }, 
            {
                "descr": "right and left sides only", 
                "name": "vsides"
            }, 
            {
                "descr": "left-hand side only", 
                "name": "lhs"
            }, 
            {
                "descr": "right-hand side only", 
                "name": "rhs"
            }, 
            {
                "descr": "all four sides", 
                "name": "box"
            }, 
            {
                "descr": "all four sides", 
                "name": "border"
            }
        ], 
        "path": "dom/htmltableelement/frame", 
        "syntax": "HTMLTableElement.frame =side;varside =HTMLTableElement.frame; Parameters  side is a string with one of the following values:  void no sides. this is the default. above top side below bottom side hsides top and bottom only vsides right and left sides only lhs left-hand side only rhs right-hand side only box all four sides border all four sides    Example // Set the frame of TableA to 'border'var t = document.getElementById('TableA');\n or t.frame  = \"border\";t.border = \"2px\";);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.insertRow": {
        "descr": "The HTMLTableElement.insertRow() method inserts a new row in the table.", 
        "name": "HTMLTableElement.insertRow", 
        "params": [], 
        "path": "dom/htmltableelement/insertrow", 
        "syntax": "var row = HTMLTableElement.insertRow(optional index = -1);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.rules": {
        "descr": "The HTMLTableElement.rules property represents which cell borders to render in the table.", 
        "name": "HTMLTableElement.rules", 
        "params": [
            {
                "descr": "no rules", 
                "name": "none"
            }, 
            {
                "descr": "lines between groups only", 
                "name": "groups"
            }, 
            {
                "descr": "lines between rows", 
                "name": "rows"
            }, 
            {
                "descr": "lines between cols", 
                "name": "cols"
            }, 
            {
                "descr": "lines between all cells", 
                "name": "all"
            }
        ], 
        "path": "dom/htmltableelement/rules", 
        "syntax": "HTMLTableElement.rules =rules;varrules =HTMLTableElement.rules; Parameters  rules is a string with one of the following values:  none no rules groups lines between groups only rows lines between rows cols lines between cols all lines between all cells    Example // Turn on all the internal borders of a tablevar t = document.getElementById(\"TableID\");\n or t.rules = \"all\";);", 
        "type": "Elements"
    }, 
    "HTMLTableElement.tBodies": {
        "descr": "The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the table bodies.", 
        "name": "HTMLTableElement.tBodies", 
        "params": [], 
        "path": "dom/htmltableelement/tbodies", 
        "syntax": "<tbody> elements. E.g. <table>  <tr>    <td>cell one</td>  </tr></table> The HTML DOM generated from the above HTML will have a <tbody>", 
        "type": "Elements"
    }, 
    "HTMLTableElement.tFoot": {
        "descr": "The HTMLTableElement.tFoot property represents the table's <tfoot> element. Its value can be null if there is no such element.", 
        "name": "HTMLTableElement.tFoot", 
        "params": [], 
        "path": "dom/htmltableelement/tfoot", 
        "syntax": "HTMLTableSectionElementObject = table.tFootteble.tFoot = HTMLTableSectionElementObject Example if (table.tFoot == my_foot) {     // ...}", 
        "type": "Elements"
    }, 
    "HTMLTableElement.tHead": {
        "descr": "The HTMLTableElement.tHead represents the table's <thead> element. Its value can be null if there is no such element.", 
        "name": "HTMLTableElement.tHead", 
        "params": [], 
        "path": "dom/htmltableelement/thead", 
        "syntax": "thead_element = table.tHead;table.tHead = thead_element; Parameters  th_el is a HTMLTableSectionElement", 
        "type": "Elements"
    }, 
    "HTMLTableRowElement": {
        "descr": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.", 
        "name": "HTMLTableRowElement", 
        "params": [
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ", 
                "name": "HTMLTableRowElement.align"
            }, 
            {
                "descr": "Is a DOMString containing the background color of the cells. ", 
                "name": "HTMLTableRowElement.bgColor"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing the cells in the row. ", 
                "name": "HTMLTableRowElement.cells Read only"
            }, 
            {
                "descr": "Is a DOMString containing one single character. ", 
                "name": "HTMLTableRowElement.ch"
            }, 
            {
                "descr": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.", 
                "name": "HTMLTableRowElement.chOff"
            }, 
            {
                "descr": "Returns a long value which gives the logical position of the row within the entire table. ", 
                "name": "HTMLTableRowElement.rowIndex Read only"
            }, 
            {
                "descr": "Returns a long value which gives the logical position of the row within the table section it belongs to. ", 
                "name": "HTMLTableRowElement.sectionRowIndex Read only"
            }, 
            {
                "descr": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. ", 
                "name": "HTMLTableRowElement.vAlign"
            }, 
            {
                "descr": "Removes the cell at the given position in the row. ", 
                "name": "HTMLTableRowElement.deleteCell()"
            }, 
            {
                "descr": "Inserts a new cell just before the given position in the row. ", 
                "name": "HTMLTableRowElement.insertCell()"
            }
        ], 
        "path": "dom/htmltablerowelement", 
        "syntax": "HTMLTableRowElement.sectionRowIndex Read only  Returns a long value which gives the logical position of the row within the table section it belongs to. If the row is not part of a section, returns -1. HTMLTableRowElement.vAlign  Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. It reflects the valign attribute and can have one of the following values: \"top\", \"middle\", \"bottom\", or \"baseline\".  Methods Inherits methods from its parent, HTMLElement.  HTMLTableRowElement.deleteCell()", 
        "type": "Elements"
    }, 
    "HTMLTableRowElement.insertCell": {
        "descr": "The HTMLTableRowElement.insertCell() method inserts a new cell into a table row and returns a reference to the cell.", 
        "name": "HTMLTableRowElement.insertCell", 
        "params": [], 
        "path": "dom/htmltablerowelement/insertcell", 
        "syntax": "var cell = HTMLTableRowElement.insertCell(optionalindex = -1);", 
        "type": "Elements"
    }, 
    "HTMLTableSectionElement": {
        "descr": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies, in an HTML table.", 
        "name": "HTMLTableSectionElement", 
        "params": [
            {
                "descr": "Is a DOMString containing an enumerated value reflecting the align attribute. ", 
                "name": "HTMLTableSectionElement.align"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing the rows in the section. ", 
                "name": "HTMLTableSectionElement.rows Read only"
            }, 
            {
                "descr": "Is a DOMString containing one single chararcter. ", 
                "name": "HTMLTableSectionElement.ch"
            }, 
            {
                "descr": "Is a DOMString containing a integer indicating how many characters must be left at the right (for left-to-right scripts; or at the left for right-to-left scripts) of the character defined by HTMLTableRowElement.ch. This property was optional and was not very well supported.", 
                "name": "HTMLTableSectionElement.chOff"
            }, 
            {
                "descr": "Is a DOMString representing an enumerated value indicating how the content of the cell must be vertically aligned. ", 
                "name": "HTMLTableSectionElement.vAlign"
            }, 
            {
                "descr": "Removes the cell at the given position in the section. ", 
                "name": "HTMLTableSectionElement.deleteRow()"
            }, 
            {
                "descr": "Inserts a new row just before the given position in the section. ", 
                "name": "HTMLTableSectionElement.insertRow()"
            }
        ], 
        "path": "dom/htmltablesectionelement", 
        "syntax": "HTMLElement.  HTMLTableSectionElement.align  Is a DOMString containing an enumerated value reflecting the align attribute. It indicates the alignment of the element's contents with respect to the surrounding context. The possible values are \"left\", \"right\", and \"center\". HTMLTableSectionElement.rows Read only  Returns a live HTMLCollection", 
        "type": "Elements"
    }, 
    "HTMLTextAreaElement": {
        "descr": "The HTMLTextAreaElement interface, which provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <textarea> elements.", 
        "name": "HTMLTextAreaElement", 
        "params": [], 
        "path": "dom/htmltextareaelement", 
        "syntax": "<form> element in the same document or the value null.    inputMode        labels Read only  Unimplemented (see bug 556743) NodeList", 
        "type": "Elements"
    }, 
    "HTMLTimeElement.dateTime": {
        "descr": "The HTMLTimeElement.dateTime property is a DOMString that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.", 
        "name": "HTMLTimeElement.dateTime", 
        "params": [], 
        "path": "dom/htmltimeelement/datetime", 
        "syntax": "-MM 2011-11, 2013-05   Valid date string YYYY-MM-DD 1887-12-01   Valid yearless date string MM-DD 11-12   Valid time string HH:MM HH:MM:SS HH:MM:SS.mmm 23:59 12:15:47 12:15:52.998   Valid local date and time string YYYY-MM-DD HH:MM YYYY-MM-DD HH:MM:SS YYYY-MM-DD HH:MM:SS.mmm YYYY-MM-DDTHH:MM YYYY-MM-DDTHH:MM:SS YYYY-MM-DDTHH:MM:SS.mmm 2013-12-25 11:12    1972-07-25 13:43:07    1941-03-15 07:06:23.678    2013-12-25T11:12    1972-07-25T13:43:07    1941-03-15T07:06:23.678   Valid time-zone offset string Z +HHMM +HH:MM -HHMM -HH:MM Z    +0200    +04:30    -0300    -08:00   Valid global date and time string Any combination of a valid local date and time string followed by a valid time-zone offset string 2013-12-25 11:12+0200    1972-07-25 13:43:07+04:30    1941-03-15 07:06:23.678Z    2013-12-25T11:12-08:00   Valid week string YYYY-WWW 2013-W46   Four or more ASCII digits YYYY 2013, 0001   Valid duration string PdDThHmMsS PdDThHmMs.XS PdDThHmMs.XXS PdDThHmMs.XXXS PThHmMsS PThHmMs.XS PThHmMs.XXS PThHmMs.XXXS ww dd hh mm ss P12DT7H12M13S    P12DT7H12M13.3S    P12DT7H12M13.45S    P12DT7H12M13.455S    PT7H12M13S    PT7H12M13.2S    PT7H12M13.56S    PT7H12M13.999S    7d 5h 24m 13s    Syntax dateTimeString = timeElt.dateTime;timeElt.dateTime = dateTimeString Examples // Assumes there is <time id=\"t\"> element in the HTMLvar t = document.getElementByID(\"t\");\n or t.dateTime = \"6w 5h 34m 5s\";);", 
        "type": "Elements"
    }, 
    "HTMLVideoElement.getVideoPlaybackQuality": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "HTMLVideoElement.getVideoPlaybackQuality", 
        "params": [], 
        "path": "dom/htmlvideoelement/getvideoplaybackquality", 
        "syntax": "HTMLVideoElement.getVideoPlaybackQuality()", 
        "type": "Elements"
    }, 
    "Has attribute selector [name]": {
        "descr": "Bind a single click to divs with an id that adds the id to the div's text.", 
        "name": "Has attribute selector [name]", 
        "params": [], 
        "path": "jquery/has-attribute-selector", 
        "syntax": "attributeHas selector  Description: Selects elements that have the specified attribute, with any value.    version added: 1.0jQuery( \"[attribute]\" ) attribute: An attribute name.", 
        "type": "Selectors"
    }, 
    "HashChangeEvent": {
        "descr": "The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL that follows the # symbol, including the # symbol).", 
        "name": "HashChangeEvent", 
        "params": [
            {
                "descr": "A reference to a function.", 
                "name": "funcRef"
            }
        ], 
        "path": "dom/hashchangeevent", 
        "syntax": "window.onhashchange = funcRef; or <body onhashchange=\"funcRef();\n or \">);", 
        "type": "Events"
    }, 
    "Headers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Headers", 
        "params": [
            {
                "descr": "Creates a new Headers object.", 
                "name": "Headers.Headers()"
            }, 
            {
                "descr": "Appends a new value onto an existing header inside a Headers object, or adds the header if it does not already exist.", 
                "name": "Headers.append()"
            }, 
            {
                "descr": "Deletes a header from a Headers object.", 
                "name": "Headers.delete()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all key/value pairs contained in this object.", 
                "name": "Headers.entries()"
            }, 
            {
                "descr": "Returns the first value of a given header from within a Headers object.", 
                "name": "Headers.get()"
            }, 
            {
                "descr": "Returns an array of all the values of a header within a Headers object with a given name.", 
                "name": "Headers.getAll()"
            }, 
            {
                "descr": "Returns a boolean stating whether a Headers object contains a certain header.", 
                "name": "Headers.has()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all keys f the key/value pairs contained in this object.", 
                "name": "Headers.keys()"
            }, 
            {
                "descr": "Sets a new value for an existing header inside a Headers object, or adds the header if it does not already exist.", 
                "name": "Headers.set()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all values of the key/value pairs contained in this object.", 
                "name": "FormData.values()"
            }
        ], 
        "path": "dom/headers", 
        "syntax": "Headers interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing. A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs. You can add to this using methods like append()", 
        "type": "Fetch"
    }, 
    "Headers.append": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.append", 
        "params": [
            {
                "descr": "The name of the HTTP header you want to add to the Headers object.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the HTTP header you want to add.", 
                "name": "value"
            }
        ], 
        "path": "dom/headers/append", 
        "syntax": "append()", 
        "type": "Fetch"
    }, 
    "Headers.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Headers.constructor", 
        "params": [
            {
                "descr": "An object containing any HTTP headers that you want to pre-populate your Headers object with. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/headers/headers", 
        "syntax": "Headers()", 
        "type": "Fetch"
    }, 
    "Headers.delete": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.delete", 
        "params": [
            {
                "descr": "The name of the HTTP header you want to delete from the Headers object.", 
                "name": "name"
            }
        ], 
        "path": "dom/headers/delete", 
        "syntax": "delete()", 
        "type": "Fetch"
    }, 
    "Headers.entries": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.entries", 
        "params": [], 
        "path": "dom/headers/entries", 
        "syntax": "Headers.entries()", 
        "type": "Fetch"
    }, 
    "Headers.get": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.get", 
        "params": [
            {
                "descr": "The name of the HTTP header whose value you want to retrieve from the Headers object. ", 
                "name": "name"
            }
        ], 
        "path": "dom/headers/get", 
        "syntax": "get()", 
        "type": "Fetch"
    }, 
    "Headers.getAll": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.getAll", 
        "params": [
            {
                "descr": "The name of the HTTP header whose values you want to retrieve from the Headers object. ", 
                "name": "name"
            }
        ], 
        "path": "dom/headers/getall", 
        "syntax": "getAll()", 
        "type": "Fetch"
    }, 
    "Headers.has": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.has", 
        "params": [
            {
                "descr": "The name of the HTTP header you want to test for. ", 
                "name": "name"
            }
        ], 
        "path": "dom/headers/has", 
        "syntax": "has()", 
        "type": "Fetch"
    }, 
    "Headers.keys": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.keys", 
        "params": [], 
        "path": "dom/headers/keys", 
        "syntax": "Headers.keys()", 
        "type": "Fetch"
    }, 
    "Headers.set": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.set", 
        "params": [
            {
                "descr": "The name of the HTTP header you want to set to a new value. ", 
                "name": "name"
            }, 
            {
                "descr": "The new value you want to set.", 
                "name": "value"
            }
        ], 
        "path": "dom/headers/set", 
        "syntax": "set()", 
        "type": "Fetch"
    }, 
    "Headers.values": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Headers.values", 
        "params": [], 
        "path": "dom/headers/values", 
        "syntax": "Headers.values()", 
        "type": "Fetch"
    }, 
    "ID selector (\"#id\"": {
        "descr": "For id selectors, jQuery uses the JavaScript function document.getElementById(), which is extremely efficient. When another selector is attached to the id selector, such as h2#pageTitle, jQuery performs an additional check before identifying the element as a match.", 
        "name": "ID selector (\"#id\"", 
        "params": [], 
        "path": "jquery/id-selector", 
        "syntax": "id selector  Description: Selects a single element with the given id attribute.    version added: 1.0jQuery( \"#id\" ) id: An ID to search for, specified via the id attribute of an element.", 
        "type": "Selectors"
    }, 
    "IDBCursor.advance": {
        "descr": "The advance() method of the IDBCursor interface sets the number times a cursor should move its position forward.", 
        "name": "IDBCursor.advance", 
        "params": [
            {
                "descr": "The number of times to move the cursor forward.", 
                "name": "count"
            }
        ], 
        "path": "dom/idbcursor/advance", 
        "syntax": "cursor.advance(count);", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.continue": {
        "descr": "The continue() method of the IDBCursor interface advances the cursor to the next position along its direction, to the item whose key matches the optional key parameter. If no key is specified, the cursor advances to the immediate next position, based on the its direction.", 
        "name": "IDBCursor.continue", 
        "params": [
            {
                "descr": "The key to position the cursor at.", 
                "name": "optionalKey"
            }
        ], 
        "path": "dom/idbcursor/continue", 
        "syntax": "cursor.continue(optionalKey);", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.delete": {
        "descr": "The delete() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, deletes the record at the cursor's position, without changing the cursor's position. Once the record is deleted, the cursor's value is set to null.", 
        "name": "IDBCursor.delete", 
        "params": [], 
        "path": "dom/idbcursor/delete", 
        "syntax": "cursor.delete();", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.direction": {
        "descr": "The direction property of the IDBCursor interface is a DOMString that returns the direction of traversal of the cursor (set using IDBObjectStore.openCursor for example). See the Values section below for possible values.", 
        "name": "IDBCursor.direction", 
        "params": [], 
        "path": "dom/idbcursor/direction", 
        "syntax": "cursor.direction; Value A string (defined by the IDBCursorDirection enum) indicating the direction in which the cursor is traversing the data. Possible values are:", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.key": {
        "descr": "The key property of the IDBCursor interface returns the key for the record at the cursor's position. If the cursor is outside its range, this is set to undefined. The cursor's key can be any data type.", 
        "name": "IDBCursor.key", 
        "params": [], 
        "path": "dom/idbcursor/key", 
        "syntax": "cursor.key; Value The value can be of any type. Example In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the key of the cursor to the console, something like this (its the album title in each case, which is our key).", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.primaryKey": {
        "descr": "The primaryKey property of the IDBCursor interface returns the cursor's current effective key. If the cursor is currently being iterated or has iterated outside its range, this is set to undefined. The cursor's primary key can be any data type.", 
        "name": "IDBCursor.primaryKey", 
        "params": [], 
        "path": "dom/idbcursor/primarykey", 
        "syntax": "cursor.primaryKey; Value A value, of any data type. Example In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the primary key of the cursor to the console, something like this (its the album title in each case, which is our primarykey):", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.source": {
        "descr": "The source property of the IDBCursor interface returns the IDBObjectStore or IDBIndex that the cursor is iterating over. This function never returns null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.", 
        "name": "IDBCursor.source", 
        "params": [], 
        "path": "dom/idbcursor/source", 
        "syntax": "cursor.source; Value The IDBObjectStore", 
        "type": "IndexedDB"
    }, 
    "IDBCursor.update": {
        "descr": "The update() method of the IDBCursor interface returns an IDBRequest object, and, in a separate thread, updates the value at the current position of the cursor in the object store. If the cursor points to a record that has just been deleted, a new record is created.", 
        "name": "IDBCursor.update", 
        "params": [
            {
                "descr": "The new value to be stored at the current position.", 
                "name": "value"
            }
        ], 
        "path": "dom/idbcursor/update", 
        "syntax": "cursor.update(newValue);", 
        "type": "IndexedDB"
    }, 
    "IDBCursorWithValue.value": {
        "descr": "The value property of the IDBCursorWithValue interface returns the value of the current cursor, whatever that is.", 
        "name": "IDBCursorWithValue.value", 
        "params": [], 
        "path": "dom/idbcursorwithvalue/value", 
        "syntax": "cursor.value; Value The value of the current cursor. Example In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the value of the cursor with cursor.value. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using cursor.value.foo. For a complete working example, see our IDBCursor example (view example live.)", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.close": {
        "descr": "The close() method of the IDBDatabase interface returns immediately and closes the connection in a separate thread.", 
        "name": "IDBDatabase.close", 
        "params": [], 
        "path": "dom/idbdatabase/close", 
        "syntax": "db.close();", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.createObjectStore": {
        "descr": "The createObjectStore() method of the IDBDatabase interface creates and returns a new object store or index.", 
        "name": "IDBDatabase.createObjectStore", 
        "params": [
            {
                "descr": "The newly created object store.", 
                "name": "IDBObjectStore"
            }, 
            {
                "descr": "The name of the new object store to be created. ", 
                "name": "name"
            }, 
            {
                "descr": "An options object whose attributes are optional parameters to the method. ", 
                "name": "optionalParameters Optional"
            }
        ], 
        "path": "dom/idbdatabase/createobjectstore", 
        "syntax": "var objectStore = db.createObjectStore(\"toDoList\", { keyPath: \"taskTitle\" });", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.deleteObjectStore": {
        "descr": "The deleteObjectStore() method of the IDBDatabase interface destroys the object store with the given name in the connected database, along with any indexes that reference it.", 
        "name": "IDBDatabase.deleteObjectStore", 
        "params": [
            {
                "descr": "The name of the data store to delete.", 
                "name": "name"
            }
        ], 
        "path": "dom/idbdatabase/deleteobjectstore", 
        "syntax": "db.deleteObjectStore(\"toDoList\");", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.name": {
        "descr": "The name property of the IDBDatabase interface is a DOMString that contains the name of the connected database.", 
        "name": "IDBDatabase.name", 
        "params": [], 
        "path": "dom/idbdatabase/name", 
        "syntax": "db.name Value A DOMString containing the name of the connected database. Example This example shows a database connection being opened, the resulting IDBDatabase object being stored in a db variable, and the name property then being logged. For a full example, see our To-do Notifications app (view example live).", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.objectStoreNames": {
        "descr": "The objectStoreNames property of the IDBDatabase interface is a DOMStringList containing a list of the names of the object stores currently in the connected database.", 
        "name": "IDBDatabase.objectStoreNames", 
        "params": [], 
        "path": "dom/idbdatabase/objectstorenames", 
        "syntax": "db.objectStoreNames Value A DOMStringList", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.onabort": {
        "descr": "The onabort event handler of the IDBDatabase interface handles the abort event, fired when attempted access to the database is aborted.", 
        "name": "IDBDatabase.onabort", 
        "params": [], 
        "path": "dom/idbdatabase/onabort", 
        "syntax": "db.onabort = function() { ... }", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.onerror": {
        "descr": "The onerror event handler of the IDBDatabase interface handles the error event, fired when access to the database fails.", 
        "name": "IDBDatabase.onerror", 
        "params": [], 
        "path": "dom/idbdatabase/onerror", 
        "syntax": "db.onerror = function() { ... }", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.onversionchange": {
        "descr": "The onversionchange event handler of the IDBDatabase interface handles the versionchange event, fired when a database structure change (IDBOpenDBRequest.onupgradeneeded event or IDBFactory.deleteDatabase) was requested elsewhere (most probably in another window/tab on the same computer).", 
        "name": "IDBDatabase.onversionchange", 
        "params": [], 
        "path": "dom/idbdatabase/onversionchange", 
        "syntax": "db.onversionchange = function() { ... }", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.transaction": {
        "descr": "The transaction method of the IDBDatabase interface immediately returns a transaction object (IDBTransaction) containing the IDBTransaction.objectStore method, which you can use to access your object store.", 
        "name": "IDBDatabase.transaction", 
        "params": [
            {
                "descr": "The names of object stores and indexes that are in the scope of the new transaction, declared as an array of strings. ", 
                "name": "storeNames"
            }, 
            {
                "descr": "Optional. The types of access that can be performed in the transaction. ", 
                "name": "mode"
            }
        ], 
        "path": "dom/idbdatabase/transaction", 
        "syntax": "var transaction = db.transaction([\"toDoList\"], \"readwrite\");", 
        "type": "IndexedDB"
    }, 
    "IDBDatabase.version": {
        "descr": "The version property of the IDBDatabase interface is a 64-bit integer that contains the version of the connected database. When a database is first created, this attribute is an empty string.", 
        "name": "IDBDatabase.version", 
        "params": [], 
        "path": "dom/idbdatabase/version", 
        "syntax": "db.version Value An integer containing the version of the connected database. Example // Let us open our databasevar DBOpenRequest = window.indexedDB.open(\"toDoList\", 4);\n or // these two event handlers act on the database being opened successfully, or notDBOpenRequest.onerror = function(event) {  note.innerHTML += '<li>Error loading database.</li>';}; DBOpenRequest.onsuccess = function(event) {  note.innerHTML += '<li>Database initialised.</li>';      // store the result of opening the database in the db variable. This is used a lot below  db = DBOpenRequest.result;  // This line will log the version of the connected database, which should be \"4\"  console.log(db.version);\n or };);", 
        "type": "IndexedDB"
    }, 
    "IDBEnvironment.indexedDB": {
        "descr": "The indexedDB property of the IDBEnvironment interface provides a mechanism for applications to asynchronously access the capabilities of indexed databases.", 
        "name": "IDBEnvironment.indexedDB", 
        "params": [], 
        "path": "dom/idbenvironment/indexeddb", 
        "syntax": "var DBOpenRequest = self.indexedDB.open(\"toDoList\");", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.cmp": {
        "descr": "The cmp() method of the IDBFactory interface compares two values as keys to determine equality and ordering for IndexedDB operations, such as storing and iterating.", 
        "name": "IDBFactory.cmp", 
        "params": [
            {
                "descr": "The first key to compare.", 
                "name": "first"
            }, 
            {
                "descr": "The second key to compare.", 
                "name": "second"
            }
        ], 
        "path": "dom/idbfactory/cmp", 
        "syntax": "var result = window.indexedDB.cmp(a, b);", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.deleteDatabase": {
        "descr": "The deleteDatabase() method of the IDBFactory interface requests the deletion of a database. The method returns an IDBOpenDBRequest object immediately, and performs the deletion operation asynchronously.", 
        "name": "IDBFactory.deleteDatabase", 
        "params": [
            {
                "descr": "The name of the database.", 
                "name": "name"
            }, 
            {
                "descr": "In Gecko, since version 26, you can include a non-standard optional storage parameter that specifies whether you want to delete a permanent (the default value) IndexedDB, or an indexedDB in temporary storage (aka shared pool.)", 
                "name": "options Non-standard"
            }
        ], 
        "path": "dom/idbfactory/deletedatabase", 
        "syntax": "var request = window.indexedDB.deleteDatabase(\"toDoList\");", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.open": {
        "descr": "The open() method of the IDBFactory interface requests opening a connection to a database.", 
        "name": "IDBFactory.open", 
        "params": [
            {
                "descr": "The name of the database.", 
                "name": "name"
            }, 
            {
                "descr": "Optional. The version to open the database with. ", 
                "name": "version"
            }, 
            {
                "descr": "Optional. In Gecko, since version 26, you can include a non-standard options object as a parameter of IDBFactory.open that contains the version number of the database, plus a storage value that specifies whether you want to use persistent or temporary storage.", 
                "name": "options (version and storage)"
            }
        ], 
        "path": "dom/idbfactory/open", 
        "syntax": "request = window.indexedDB.open(name[, version])", 
        "type": "IndexedDB"
    }, 
    "IDBFactory.open-obsolete": {
        "descr": "The original, now obsolete open() method of the IDBFactory object requests opening a connection to a database. The method returns an IDBRequest object immediately, and performs the open operation asynchronously. If the operation is successful, a success event is fired on the request object returned from this method, with its result attribute set to the new IDBDatabase object for the connection.", 
        "name": "IDBFactory.open-obsolete", 
        "params": [
            {
                "descr": "The name of the database.", 
                "name": "name"
            }
        ], 
        "path": "dom/idbfactory/open-obsolete", 
        "syntax": "var request = window.indexedDB.open(\"toDoList\");", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.count": {
        "descr": "The count() method of the IDBIndex interface returns an IDBRequest object, and in a separate thread, returns the number of records within a key range.", 
        "name": "IDBIndex.count", 
        "params": [
            {
                "descr": "The key or key range that identifies the record to be counted.", 
                "name": "key"
            }
        ], 
        "path": "dom/idbindex/count", 
        "syntax": "var myIndex = objectStore.index('index');\n or var request = myIndex.count();", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.get": {
        "descr": "The get() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, finds either the value in the referenced object store that corresponds to the given key or the first corresponding value, if key is set to an IDBKeyRange.", 
        "name": "IDBIndex.get", 
        "params": [
            {
                "descr": "A key or IDBKeyRange that identifies the record to be retrieved. ", 
                "name": "key Optional"
            }
        ], 
        "path": "dom/idbindex/get", 
        "syntax": "var myIndex = objectStore.index('index');\n or var request = myIndex.get(key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.getAll": {
        "descr": "The getAll() method of the IDBIndex interface retrieves all objects inside an IDBIndex.", 
        "name": "IDBIndex.getAll", 
        "params": [
            {
                "descr": "A key or an IDBKeyRange identifying the records to retrieve. ", 
                "name": "query Optional"
            }, 
            {
                "descr": "The number records to return. If this value exceeds the number of records in the query, the browser will only retrieve the first item.", 
                "name": "count Optional"
            }
        ], 
        "path": "dom/idbindex/getall", 
        "syntax": "var getAllKeysRequest = IDBIndex.getAll(query, count);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.getAllKeys": {
        "descr": "The proposed getAllKeys() method of the IDBIndex interface would instantly retrieve the keys of all objects inside an object store, setting them as the result of the request object.", 
        "name": "IDBIndex.getAllKeys", 
        "params": [
            {
                "descr": "A key or an IDBKeyRange identifying the keys to retrieve. ", 
                "name": "query Optional"
            }
        ], 
        "path": "dom/idbindex/getallkeys", 
        "syntax": "var myIndex = objectStore.index('index');\n or var getAllKeysRequest = myIndex.getAllKeys(query);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.getKey": {
        "descr": "The getKey() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, finds either the given key or the primary key, if key is set to an IDBKeyRange.", 
        "name": "IDBIndex.getKey", 
        "params": [
            {
                "descr": "A key or IDBKeyRange that identifies a record to be retrieved. ", 
                "name": "key Optional"
            }
        ], 
        "path": "dom/idbindex/getkey", 
        "syntax": "var myIndex = objectStore.index('index');\n or var request = myIndex.getKey(key);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.isAutoLocale": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "IDBIndex.isAutoLocale", 
        "params": [], 
        "path": "dom/idbindex/isautolocale", 
        "syntax": "isAutoLocale read-only property of the IDBIndex interface returns a Boolean indicating whether the index had a locale value of auto specified upon its creation (see createIndex()", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.keyPath": {
        "descr": "The keyPath property of the IDBIndex interface returns the key path of the current index. If null, this index is not auto-populated.", 
        "name": "IDBIndex.keyPath", 
        "params": [], 
        "path": "dom/idbindex/keypath", 
        "syntax": "var myIndex = objectStore.index('index');\n or console.log(myIndex.keyPath);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.locale": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "IDBIndex.locale", 
        "params": [], 
        "path": "dom/idbindex/locale", 
        "syntax": "locale read-only property of the IDBIndex interface returns the locale of the index (for example en-US, or pl) if it had a locale", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.multiEntry": {
        "descr": "The multiEntry property of the IDBIndex interface returns a boolean value that affects how the index behaves when the result of evaluating the index's key path yields an array.", 
        "name": "IDBIndex.multiEntry", 
        "params": [], 
        "path": "dom/idbindex/multientry", 
        "syntax": "var myIndex = objectStore.index('index');\n or console.log(myIndex.multiEntry);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.name": {
        "descr": "The name property of the IDBIndex interface contains a string which names the index.", 
        "name": "IDBIndex.name", 
        "params": [
            {
                "descr": "The index, or its object store, has been deleted; or the current transaction is not an upgrade transaction. ", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The current transaction is not active.", 
                "name": "TransactionInactiveError"
            }, 
            {
                "descr": "An index is already using the specified name.", 
                "name": "ConstraintError"
            }
        ], 
        "path": "dom/idbindex/name", 
        "syntax": "var indexName = IDBIndex.name;IDBIndex.name = indexName; Value A DOMString specifying a name for the index. Exceptions There are a several exceptions which can occur when you attempt to change an index's name.  InvalidStateError The index, or its object store, has been deleted; or the current transaction is not an upgrade transaction. You can only rename indexes during upgrade transactions; that is, when the mode is \"versionchange\". TransactionInactiveError The current transaction is not active. ConstraintError An index is already using the specified name.  Example In the following example we open a transaction and an object store, then get the index lName from a simple contacts database. We then open a basic cursor on the index using IDBIndex.openCursor()", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.objectStore": {
        "descr": "The objectStore property of the IDBIndex interface returns the name of the object store referenced by the current index.", 
        "name": "IDBIndex.objectStore", 
        "params": [], 
        "path": "dom/idbindex/objectstore", 
        "syntax": "var myIndex = objectStore.index('index');\n or console.log(myIndex.objectStore);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.openCursor": {
        "descr": "The openCursor() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range.", 
        "name": "IDBIndex.openCursor", 
        "params": [
            {
                "descr": "A key or IDBKeyRange to use as the cursor's range. ", 
                "name": "range Optional"
            }, 
            {
                "descr": "The cursor's direction. See IDBCursor Constants for possible values.", 
                "name": "direction Optional"
            }
        ], 
        "path": "dom/idbindex/opencursor", 
        "syntax": "var myIndex = objectStore.index('index');\n or var request = myIndex.openCursor(range,direction);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.openKeyCursor": {
        "descr": "The openKeyCursor() method of the IDBIndex interface returns an IDBRequest object, and, in a separate thread, creates a cursor over the specified key range, as arranged by this index.", 
        "name": "IDBIndex.openKeyCursor", 
        "params": [
            {
                "descr": "A key or IDBKeyRange to use as the cursor's range. ", 
                "name": "range Optional"
            }, 
            {
                "descr": "The cursor's direction. See IDBCursor Constants for possible values.", 
                "name": "direction Optional"
            }
        ], 
        "path": "dom/idbindex/openkeycursor", 
        "syntax": "var myIndex = objectStore.index('index');\n or var request = myIndex.openKeyCursor(range,direction);", 
        "type": "IndexedDB"
    }, 
    "IDBIndex.unique": {
        "descr": "The unique property returns a boolean that states whether the index allows duplicate keys or not.", 
        "name": "IDBIndex.unique", 
        "params": [], 
        "path": "dom/idbindex/unique", 
        "syntax": "var myIndex = objectStore.index('index');\n or console.log(myIndex.unique);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.bound": {
        "descr": "The bound() method of the IDBKeyRange interface creates a new key range with upper and lower bounds.", 
        "name": "IDBKeyRange.bound", 
        "params": [
            {
                "descr": "The lower bound of the key range.", 
                "name": "lower"
            }, 
            {
                "descr": "The upper bound of the key range.", 
                "name": "upper"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the lower bound value of the key range.", 
                "name": "lowerOpen"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the upper bound value of the key range.", 
                "name": "upperOpen"
            }
        ], 
        "path": "dom/idbkeyrange/bound", 
        "syntax": "myKeyRange = IDBKeyRange.bound(\"A\", \"Z\", true, true);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.includes": {
        "descr": "The includes() method of the IDBKeyRange interface returns a boolean indicating whether a specified key is inside the key range.", 
        "name": "IDBKeyRange.includes", 
        "params": [
            {
                "descr": "The key you want to check for in your key range. ", 
                "name": "key"
            }
        ], 
        "path": "dom/idbkeyrange/includes", 
        "syntax": "myIncludesResult = myKeyRange.includes('A');", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.lower": {
        "descr": "The lower property of the IDBKeyRange interface returns the lower bound of the key range.", 
        "name": "IDBKeyRange.lower", 
        "params": [], 
        "path": "dom/idbkeyrange/lower", 
        "syntax": "myKeyRange.lower; Value The lower bound of the key range (can be any type.)", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.lowerBound": {
        "descr": "The lowerBound() method of the IDBKeyRange interface creates a new key range with only a lower bound.", 
        "name": "IDBKeyRange.lowerBound", 
        "params": [
            {
                "descr": "The value of the lower bound.", 
                "name": "bound"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the lower-bound value.", 
                "name": "open"
            }
        ], 
        "path": "dom/idbkeyrange/lowerbound", 
        "syntax": "myKeyRange = IDBKeyRange.lowerBound(\"A\", true);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.lowerOpen": {
        "descr": "The lowerOpen property of the IDBKeyRange interface returns a boolean indicating whether the lower-bound value is included in the key range.", 
        "name": "IDBKeyRange.lowerOpen", 
        "params": [], 
        "path": "dom/idbkeyrange/loweropen", 
        "syntax": "myKeyRange.lowerOpen; Value A boolean:    Value Indication     true The lower-bound value is not included in the key range.   false The lower-bound value is included in the key range.     Example The following example illustrates how you'd use a key range. Here we declare keyRangeValue =\u00a0IDBKeyRange.upperBound(\"F\", \"W\", true, true);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.only": {
        "descr": "The only() method of the IDBKeyRange interface creates a new key range containing a single value.", 
        "name": "IDBKeyRange.only", 
        "params": [
            {
                "descr": "The single value in the key range.", 
                "name": "value"
            }
        ], 
        "path": "dom/idbkeyrange/only", 
        "syntax": "myKeyRange = IDBKeyRange.only(\"A\");", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.upper": {
        "descr": "The upper property of the IDBKeyRange interface returns the upper bound of the key range.", 
        "name": "IDBKeyRange.upper", 
        "params": [], 
        "path": "dom/idbkeyrange/upper", 
        "syntax": "myKeyRange.upper; Value The upper bound of the key range (can be any type.)", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.upperBound": {
        "descr": "The upperBound() method of the IDBKeyRange interface creates a new upper-bound key range.", 
        "name": "IDBKeyRange.upperBound", 
        "params": [
            {
                "descr": "The value of the upper bound of the range.", 
                "name": "bound"
            }, 
            {
                "descr": "Optional. If false (default value), the range includes the lower-bound value.", 
                "name": "open"
            }
        ], 
        "path": "dom/idbkeyrange/upperbound", 
        "syntax": "myKeyRange = IDBKeyRange.upperBound(\"Z\", true);", 
        "type": "IndexedDB"
    }, 
    "IDBKeyRange.upperOpen": {
        "descr": "The upperOpen property of the IDBKeyRange interface returns a boolean indicating whether the upper-bound value is included in the key range.", 
        "name": "IDBKeyRange.upperOpen", 
        "params": [], 
        "path": "dom/idbkeyrange/upperopen", 
        "syntax": "myKeyRange.upperOpen; Value A boolean:    Value Indication     true The upper-bound value is not included in the key range.   false The upper-bound value is included in the key range.     Example The following example illustrates how you'd use a key range. Here we declare keyRangeValue =\u00a0IDBKeyRange.upperBound(\"F\", \"W\", true, true);", 
        "type": "IndexedDB"
    }, 
    "IDBLocaleAwareKeyRange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "IDBLocaleAwareKeyRange", 
        "params": [], 
        "path": "dom/idblocaleawarekeyrange", 
        "syntax": "IDBLocaleAwareKeyRange interface of the IndexedDB API is a Firefox-specific version of IDBKeyRange", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.add": {
        "descr": "The add() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store.", 
        "name": "IDBObjectStore.add", 
        "params": [
            {
                "descr": "The value to be stored.", 
                "name": "value"
            }, 
            {
                "descr": "The key to use to identify the record. ", 
                "name": "key"
            }
        ], 
        "path": "dom/idbobjectstore/add", 
        "syntax": "var request = objectStore.add(myItem, optionalKey);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.autoIncrement": {
        "descr": "The autoIncrement property of the IDBObjectStore interface returns the value of the auto increment flag for this object store.", 
        "name": "IDBObjectStore.autoIncrement", 
        "params": [], 
        "path": "dom/idbobjectstore/autoincrement", 
        "syntax": "var myAutoIncrement = objectStore.autoIncrement; Value A Boolean:    Value Meaning     true The object store auto increments.   false The object store does not auto increment.     Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.clear": {
        "descr": "The clear() method of the IDBObjectStore interface creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all the current data out of an object store.", 
        "name": "IDBObjectStore.clear", 
        "params": [], 
        "path": "dom/idbobjectstore/clear", 
        "syntax": "var request = objectStore.clear();", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.count": {
        "descr": "The count() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store.", 
        "name": "IDBObjectStore.count", 
        "params": [
            {
                "descr": "A key or IDBKeyRange object that specifies a range of records you want to count.", 
                "name": "optionalKeyRange"
            }
        ], 
        "path": "dom/idbobjectstore/count", 
        "syntax": "var request = ObjectStore.count(optionalKeyRange);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.createIndex": {
        "descr": "The createIndex() method of the IDBObjectStore interface creates and returns a new IDBIndex object in the connected database.", 
        "name": "IDBObjectStore.createIndex", 
        "params": [
            {
                "descr": "The name of the index to create. ", 
                "name": "indexName"
            }, 
            {
                "descr": "The key path for the index to use. ", 
                "name": "keyPath"
            }, 
            {
                "descr": "The IDBIndexParameters object \u2014 whose attributes are optional parameters to the method \u2014 can include the following properties:    Attribute Description     unique If true, the index will not allow duplicate values for a single key.   multiEntry If true, the index will add an entry in the index for each array element when the keyPath resolves to an Array. If false, it will add one single entry containing the Array.   locale  Currently Firefox-only (43+), this allows you to specify a locale for the index. Any sorting operations performed on the data via key ranges will then obey sorting rules of that locale (see locale-aware sorting.) You can specify its value in one of three ways:  string: A string containing a specific locale code, e.g. en-US, or pl. auto: The platform default locale will be used (may be changed by user agent settings.) null or undefined: If no locale is specified, normal JavaScript sorting will be used \u2014 not locale-aware.", 
                "name": "optionalParameters"
            }
        ], 
        "path": "dom/idbobjectstore/createindex", 
        "syntax": "objectStore.createIndex(objectIndexName, objectKeypath, optionalObjectParameters);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.delete": {
        "descr": "The delete() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, deletes the specified record. This is for deleting individual records out of an object store.", 
        "name": "IDBObjectStore.delete", 
        "params": [
            {
                "descr": "The key of the object(s) to be deleted.", 
                "name": "Key"
            }
        ], 
        "path": "dom/idbobjectstore/delete", 
        "syntax": "var request = objectStore.delete(recordKey);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.deleteIndex": {
        "descr": "The deleteIndex() method of the IDBObjectStore interface destroys the index with the specified name in the connected database, used during a version upgrade.", 
        "name": "IDBObjectStore.deleteIndex", 
        "params": [
            {
                "descr": "The name of the existing index to remove.", 
                "name": "indexName"
            }
        ], 
        "path": "dom/idbobjectstore/deleteindex", 
        "syntax": "objectStore.deleteIndex(indexName);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.get": {
        "descr": "The get() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns the object store selected by the specified key. This is for retrieving specific records from an object store.", 
        "name": "IDBObjectStore.get", 
        "params": [
            {
                "descr": "The key or key range that identifies the record to be retrieved.", 
                "name": "key"
            }
        ], 
        "path": "dom/idbobjectstore/get", 
        "syntax": "var request = objectStore.get(myItem);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.getAll": {
        "descr": "The getAll() method of the IDBObjectStore interface returns an IDBRequest object containing all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.", 
        "name": "IDBObjectStore.getAll", 
        "params": [
            {
                "descr": "A key or IDBKeyRange to be queried. ", 
                "name": "query Optional"
            }, 
            {
                "descr": "Specifies the number of values to return if more than one is found.", 
                "name": "count Optional"
            }
        ], 
        "path": "dom/idbobjectstore/getall", 
        "syntax": "var request = objectStore.getAll([query, count]);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.getAllKeys": {
        "descr": "The getAllKeys() method of the IDBObjectStore interface returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.", 
        "name": "IDBObjectStore.getAllKeys", 
        "params": [
            {
                "descr": "A value that is or resolves to an IDBKeyRange.", 
                "name": "query Optional"
            }, 
            {
                "descr": "Specifies the number of values to return if more than one is found.", 
                "name": "count Optional"
            }
        ], 
        "path": "dom/idbobjectstore/getallkeys", 
        "syntax": "var request = objectStore.getAllKeys([query, count]);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.index": {
        "descr": "The index() method of the IDBObjectStore interface opens a named index in the current object store, after which it can be used to, for example, return a series of records sorted by that index using a cursor.", 
        "name": "IDBObjectStore.index", 
        "params": [
            {
                "descr": "The name of the index to open.", 
                "name": "name"
            }
        ], 
        "path": "dom/idbobjectstore/index", 
        "syntax": "objectStore.index(indexName);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.indexNames": {
        "descr": "The indexNames property of the IDBObjectStore interface returns a list of the names of indexes on objects in this object store.", 
        "name": "IDBObjectStore.indexNames", 
        "params": [], 
        "path": "dom/idbobjectstore/indexnames", 
        "syntax": "var myindexNames = objectStore.indexNames; Value A DOMStringList", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.keyPath": {
        "descr": "The keyPath property of the IDBObjectStore interface returns the key path of this object store.", 
        "name": "IDBObjectStore.keyPath", 
        "params": [], 
        "path": "dom/idbobjectstore/keypath", 
        "syntax": "var mykeyPath = objectStore.keyPath; Value Any value type. Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.name": {
        "descr": "The name property of the IDBObjectStore interface indicates the name of this object store.", 
        "name": "IDBObjectStore.name", 
        "params": [
            {
                "descr": "Either the object store has been deleted or the current transaction is not an upgrade transaction; you can only rename indexes during upgrade transactions; that is, when the mode is \"versionchange\".", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The current transaction is not active.", 
                "name": "TransactionInactiveError"
            }, 
            {
                "descr": "An object store is already using the specified name.", 
                "name": "ConstraintError"
            }
        ], 
        "path": "dom/idbobjectstore/name", 
        "syntax": "var myObjectStoreName = IDBObjectStore.name;IDBObjectStore.name = myNewName; Value A DOMString containing the object store's name. Exceptions There are a several exceptions which can occur when you attempt to change an object store's name.  InvalidStateError Either the object store has been deleted or the current transaction is not an upgrade transaction; you can only rename indexes during upgrade transactions; that is, when the mode is \"versionchange\". TransactionInactiveError The current transaction is not active. ConstraintError An object store is already using the specified name.  Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store using add()", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.openCursor": {
        "descr": "The openCursor() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store with a cursor.", 
        "name": "IDBObjectStore.openCursor", 
        "params": [
            {
                "descr": "A key or IDBKeyRange to be queried. ", 
                "name": "range Optional"
            }, 
            {
                "descr": "An IDBCursorDirection telling the cursor what direction to travel. ", 
                "name": "direction Optional"
            }
        ], 
        "path": "dom/idbobjectstore/opencursor", 
        "syntax": "var request = ObjectStore.openCursor(optionalKeyRange, optionalDirection);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.openKeyCursor": {
        "descr": "The openKeyCursor() method of the IDBObjectStore interface returns an IDBRequest object whose result will be set to an IDBCursor that can be used to iterate through matching results. Used for iterating through the keys of an object store with a cursor.", 
        "name": "IDBObjectStore.openKeyCursor", 
        "params": [
            {
                "descr": "The key range to be queried. If a single valid key is passed, this will default to a range containing only that key. ", 
                "name": "optionalKeyRange"
            }, 
            {
                "descr": "An IDBCursorDirection telling the cursor what direction to travel. ", 
                "name": "optionalDirection"
            }
        ], 
        "path": "dom/idbobjectstore/openkeycursor", 
        "syntax": "var request = objectStore.openKeyCursor(optionalKeyRange, optionalDirection);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.put": {
        "descr": "The put() method of the IDBObjectStore interface returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value and stores the cloned value in the object store. This is for adding new records, or updating existing records in an object store when the transaction's mode is readwrite.", 
        "name": "IDBObjectStore.put", 
        "params": [
            {
                "descr": "The value to be stored.", 
                "name": "value"
            }, 
            {
                "descr": "The key to use to identify the record. ", 
                "name": "key"
            }
        ], 
        "path": "dom/idbobjectstore/put", 
        "syntax": "var request = objectStore.put(myItem, optionalKey);", 
        "type": "IndexedDB"
    }, 
    "IDBObjectStore.transaction": {
        "descr": "The transaction property of the IDBObjectStore interface returns the transaction object to which this object store belongs.", 
        "name": "IDBObjectStore.transaction", 
        "params": [], 
        "path": "dom/idbobjectstore/transaction", 
        "syntax": "var myTransaction = objectStore.transaction; Value An IDBTransaction", 
        "type": "IndexedDB"
    }, 
    "IDBOpenDBRequest.onblocked": {
        "descr": "The IDBOpenDBRequest.onblocked event handler is the event handler for the blocked event. This event is triggered when the upgradeneeded should be triggered because of a version change but the database is still in use (that is, not closed) somewhere, even after the versionchange event was sent.", 
        "name": "IDBOpenDBRequest.onblocked", 
        "params": [], 
        "path": "dom/idbopendbrequest/onblocked", 
        "syntax": "var request = indexedDB.open(\"toDoList\", 4);\n or request.onblocked = function() { ... };);", 
        "type": "IndexedDB"
    }, 
    "IDBOpenDBRequest.onupgradeneeded": {
        "descr": "The onupgradeneeded property of the IDBOpenDBRequest interface is the event handler for the upgradeneeded event, triggered when a database of a bigger version number than the existing stored database is loaded.", 
        "name": "IDBOpenDBRequest.onupgradeneeded", 
        "params": [], 
        "path": "dom/idbopendbrequest/onupgradeneeded", 
        "syntax": "var request = window.indexedDB.open(\"toDoList\", 4);\n or request.onupgradeneeded = function(event) { ... };);", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.error": {
        "descr": "The error property of the IDBRequest interface returns the error in the event of an unsuccessful request.", 
        "name": "IDBRequest.error", 
        "params": [], 
        "path": "dom/idbrequest/error", 
        "syntax": "var myError = request.error; Value A DOMError containing the relevant error. In Chrome 48 and later this property returns a DOMException because DOMError has been removed from the DOM standard. The following error codes are returned under certain conditions:    Error Explanation     AbortError If you abort the transaction, then all requests still in progress receive this error.   ConstraintError If you insert data that doesn't conform to a constraint. It's an exception type for creating stores and indexes. You get this error, for example, if you try to add a new key that already exists in the record.   QuotaExceededError If you run out of disk quota and the user declined to grant you more space.   UnknownError If the operation failed for reasons unrelated to the database itself. A failure due to disk IO errors is such an example.   NoError If the request succeeds.   VersionError If you try to open a database with a version lower than the one it already has.    In addition to the error codes sent to the IDBRequest object, asynchronous operations can also raise exceptions. The list describes problems that could occur when the request is being executed, but you might also encounter other problems when the request is being made. For example, if the the request failed and the result is not available, the InvalidStateError exception is thrown. Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.onerror": {
        "descr": "The onerror event handler of the IDBRequest interface handles the error event, fired when a request returns an error.", 
        "name": "IDBRequest.onerror", 
        "params": [], 
        "path": "dom/idbrequest/onerror", 
        "syntax": "request.onerror = function( event ) { ... };", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.onsuccess": {
        "descr": "The onsuccess event handler of the IDBRequest interface handles the success event, fired when the result of a request is successfully returned.", 
        "name": "IDBRequest.onsuccess", 
        "params": [], 
        "path": "dom/idbrequest/onsuccess", 
        "syntax": "request.onsuccess = function( event ) { ... };", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.readyState": {
        "descr": "The readyState property of the IDBRequest interface returns the state of the request.", 
        "name": "IDBRequest.readyState", 
        "params": [], 
        "path": "dom/idbrequest/readystate", 
        "syntax": "var currentReadyState = request.readyState; Value The IDBRequestReadyState of the request, which takes one of the following two values:    Value Meaning     pending The request is pending.   done The request is done.     Example The following example requests a given record title, onsuccess gets the associated record from the IDBObjectStore", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.result": {
        "descr": "The result property of the IDBRequest interface returns the result of the request. If the the request failed and the result is not available, an InvalidStateError exception is thrown.", 
        "name": "IDBRequest.result", 
        "params": [], 
        "path": "dom/idbrequest/result", 
        "syntax": "var myResult = request.result; Value An IDBObjectStore", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.source": {
        "descr": "The source property of the IDBRequest interface returns the source of the request, such as an Index or an object store. If no source exists (such as when calling indexedDB.open), it returns null.", 
        "name": "IDBRequest.source", 
        "params": [], 
        "path": "dom/idbrequest/source", 
        "syntax": "var mySource = request.source; Value An object representing the source of the request, such as an IDBIndex, IDBObjectStore", 
        "type": "IndexedDB"
    }, 
    "IDBRequest.transaction": {
        "descr": "The transaction property of the IDBRequest interface returns the transaction for the request, that is, the transaction the request is being made inside.", 
        "name": "IDBRequest.transaction", 
        "params": [], 
        "path": "dom/idbrequest/transaction", 
        "syntax": "var myTransaction = request.transaction; Value An IDBTransaction", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction": {
        "descr": "The IDBTransaction interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You actually use IDBDatabase to start transactions and IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and access an IDBObjectStore to make a request. You can also use it to abort transactions.", 
        "name": "IDBTransaction", 
        "params": [
            {
                "descr": "Rolls back all the changes to objects in the database associated with this transaction. ", 
                "name": "IDBTransaction.abort"
            }, 
            {
                "descr": "Returns an IDBObjectStore object representing an object store that is part of the scope of this transaction.", 
                "name": "IDBTransaction.objectStore"
            }, 
            {
                "descr": "The database connection with which this transaction is associated.", 
                "name": "IDBTransaction.db Read only"
            }, 
            {
                "descr": "The mode for isolating access to data in the object stores that are in the scope of the transaction. ", 
                "name": "IDBTransaction.mode Read only"
            }, 
            {
                "descr": "Returns a DOMStringList of the names of IDBObjectStore objects.", 
                "name": "IDBTransaction.objectStoreNames Read only"
            }, 
            {
                "descr": "Returns one of several types of error when there is an unsuccessful transaction. ", 
                "name": "IDBTransaction.error Read only"
            }, 
            {
                "descr": "The event handler for the abort event, fired when the transaction is aborted.", 
                "name": "IDBTransaction.onabort Read only"
            }, 
            {
                "descr": "The event handler for the complete event, thrown when the transaction completes successfully.", 
                "name": "IDBTransaction.oncomplete Read only"
            }, 
            {
                "descr": "The event handler for the error event, thrown when the transaction fails to complete.", 
                "name": "IDBTransaction.onerror Read only"
            }
        ], 
        "path": "dom/idbtransaction", 
        "syntax": "readonly. IDBTransaction.objectStoreNames Read only  Returns a DOMStringList", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.ObjectStoreNames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "IDBTransaction.ObjectStoreNames", 
        "params": [], 
        "path": "dom/idbtransaction/objectstorenames", 
        "syntax": "objectStoreNames property of the IDBTransaction", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.abort": {
        "descr": "The abort() method of the IDBTransaction interface rolls back all the changes to objects in the database associated with this transaction.", 
        "name": "IDBTransaction.abort", 
        "params": [], 
        "path": "dom/idbtransaction/abort", 
        "syntax": "transaction.abort();", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.db": {
        "descr": "The db property of the IDBTransaction interface returns the database connection with which this transaction is associated.", 
        "name": "IDBTransaction.db", 
        "params": [], 
        "path": "dom/idbtransaction/db", 
        "syntax": "var myDatabase = transaction.db; Value An IDBDatabase object. Example In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we return the associated database connection using db. For a full working example, see our To-do Notifications app (view example live.)", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.error": {
        "descr": "The IDBTransaction.error property of the IDBTransaction interface returns one of several types of error when there is an unsuccessful transaction.", 
        "name": "IDBTransaction.error", 
        "params": [], 
        "path": "dom/idbtransaction/error", 
        "syntax": "var myError = transaction.error; Value A DOMError containing the relevant error. In Chrome 48 and later this property returns a DOMException because DOMError has been removed from the DOM standard. The exact error is one of serveral possibilities. It can be a reference to the same error as the request object that raised it, or a transaction failure (for example QuotaExceededError or UnknownError).", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.mode": {
        "descr": "The mode property of the IDBTransaction interface returns the current mode for accessing the data in the object stores in the scope of the transaction (i.e. is the mode to be read-only, or do you want to write to the object stores?) The default value is readonly.", 
        "name": "IDBTransaction.mode", 
        "params": [], 
        "path": "dom/idbtransaction/mode", 
        "syntax": "var myCurrentMode = IDBTransaction.mode; Value An IDBTransactionMode object defining the mode for isolating access to data in the current object stores:    Value Explanation     readonly Allows data to be read but not changed.   readwrite Allows reading and writing of data in existing data stores to be changed.   versionchange Allows any operation to be performed, including ones that delete and create object stores and indexes. This mode is for updating the version number of transactions that were started using IDBDatabase.setVersion()", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.objectStore": {
        "descr": "The objectStore() method of the IDBTransaction interface returns an object store that has already been added to the scope of this transaction.", 
        "name": "IDBTransaction.objectStore", 
        "params": [
            {
                "descr": "The name of the requested object store.", 
                "name": "name"
            }
        ], 
        "path": "dom/idbtransaction/objectstore", 
        "syntax": "var objectStore = transaction.objectStore(\"toDoList\");", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.onabort": {
        "descr": "The onabort event handler of the IDBTransaction interface handles the abort event, fired, when the current transaction is aborted via the IDBTransaction.abort method.", 
        "name": "IDBTransaction.onabort", 
        "params": [], 
        "path": "dom/idbtransaction/onabort", 
        "syntax": "transaction.onabort = function() { ... };", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.oncomplete": {
        "descr": "The oncomplete event handler of the IDBTransaction interface handles the complete event, fired when the transaction successfully completes.", 
        "name": "IDBTransaction.oncomplete", 
        "params": [], 
        "path": "dom/idbtransaction/oncomplete", 
        "syntax": "transaction.oncomplete = function() { ... };", 
        "type": "IndexedDB"
    }, 
    "IDBTransaction.onerror": {
        "descr": "The onerror event handler of the IDBTransaction interface handles the error event, fired when the transaction returns an error.", 
        "name": "IDBTransaction.onerror", 
        "params": [], 
        "path": "dom/idbtransaction/onerror", 
        "syntax": "transaction.onerror = function() { ... };", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeEvent.newVersion": {
        "descr": "The newVersion property of the IDBVersionChangeEvent interface returns the new version number of the database.", 
        "name": "IDBVersionChangeEvent.newVersion", 
        "params": [], 
        "path": "dom/idbversionchangeevent/newversion", 
        "syntax": "readonly    attribute unsigned long long? newVersion; Example In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom IDBVersionChangeEvent interface. For a full working example, see our To-do Notifications app (view example live.)", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeEvent.oldVersion": {
        "descr": "The oldVersion property of the IDBVersionChangeEvent interface returns the old version number of the database.", 
        "name": "IDBVersionChangeEvent.oldVersion", 
        "params": [], 
        "path": "dom/idbversionchangeevent/oldversion", 
        "syntax": "readonly    attribute unsigned long long  oldVersion; Example In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom IDBVersionChangeEvent interface. For a full working example, see our To-do Notifications app (view example live.)", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeEvent.version": {
        "descr": "The version property of the IDBVersionChangeEvent interface returns The new version of the database in a versionchange transaction.", 
        "name": "IDBVersionChangeEvent.version", 
        "params": [], 
        "path": "dom/idbversionchangeevent/version", 
        "syntax": "readonly    attribute unsigned long long? version; Value A 64-bit integer.", 
        "type": "IndexedDB"
    }, 
    "IDBVersionChangeRequest.setVersion": {
        "descr": "The IDBVersionChangeRequest.setVersion method updates the version of the database, returning immediately and running a versionchange transaction on the connected database in a separate thread.", 
        "name": "IDBVersionChangeRequest.setVersion", 
        "params": [
            {
                "descr": "The version to store in the database.", 
                "name": "version"
            }, 
            {
                "descr": "The request to change the version of a database.", 
                "name": "IDBVersionChangeRequest"
            }
        ], 
        "path": "dom/idbversionchangerequest/setversion", 
        "syntax": "IDBVersionChangeRequest setVersion ([TreatNullAs=EmptyString] in DOMString version);", 
        "type": "IndexedDB"
    }, 
    "IIRFilterNode.getFrequencyResponse": {
        "descr": "The getFrequencyResponse() method of the IIRFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in the frequencyHz array of frequencies.", 
        "name": "IIRFilterNode.getFrequencyResponse", 
        "params": [
            {
                "descr": "An array containing hertz values that you want the frequency response for.", 
                "name": "frequencyHz"
            }, 
            {
                "descr": "An array that will contain the outputted magnitude of the frequency response for each inputted frequency (hertz) value. ", 
                "name": "magResponse"
            }, 
            {
                "descr": "An array that will contain the outputted phase of the frequency response for each inputted frequency (hertz) value, measured in radians.", 
                "name": "phaseResponse"
            }
        ], 
        "path": "dom/iirfilternode/getfrequencyresponse()", 
        "syntax": "var audioCtx = new AudioContext();\n or var iirFilter = audioCtx.createIIRFilter();\n or iirFilter.getFrequencyResponse(myFrequencyArray,magResponseOutput,phaseResponseOutput);", 
        "type": "Web Audio"
    }, 
    "ImageBitmap.close": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ImageBitmap.close", 
        "params": [], 
        "path": "dom/imagebitmap/close", 
        "syntax": "ImageBitmap.close()", 
        "type": "Canvas"
    }, 
    "ImageBitmapFactories.createImageBitmap": {
        "descr": "The createImageBitmap method accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap. Optionally the source is cropped to the rectangle of pixels originating at (sx, sy) with width sw, and height sh.", 
        "name": "ImageBitmapFactories.createImageBitmap", 
        "params": [
            {
                "descr": "An image source, which can be an <img>, <video>, or <canvas> element, a Blob, ImageData or CanvasRenderingContext2D object, or another ImageBitmap object.", 
                "name": "image"
            }, 
            {
                "descr": "The x coordinate of the reference point of the rectangle from which the ImageBitmap will be extracted.", 
                "name": "sx"
            }, 
            {
                "descr": "The y coordinate of the reference point of the rectangle from which the ImageBitmap will be extracted.", 
                "name": "sy"
            }, 
            {
                "descr": "The width of the rectangle from which the ImageBitmap will be extracted. ", 
                "name": "sw"
            }, 
            {
                "descr": "The height of the rectangle from which the ImageBitmap will be extracted. ", 
                "name": "sh"
            }, 
            {
                "descr": "An object that sets options for . ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/imagebitmapfactories/createimagebitmap", 
        "syntax": "createImageBitmap(image[, options]).then(function(response) { ... });\n or createImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });", 
        "type": "Canvas"
    }, 
    "ImageBitmapRenderingContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ImageBitmapRenderingContext", 
        "params": [
            {
                "descr": "Displays the given ImageBitmap in the canvas associated with this rendering context. ", 
                "name": "ImageBitmapRenderingContext.transferImageBitmap()"
            }
        ], 
        "path": "dom/imagebitmaprenderingcontext", 
        "syntax": "ImageBitmapRenderingContext interface is a canvas rendering context which only provides the functionality to replace the canvas's contents with the given ImageBitmap", 
        "type": "Canvas"
    }, 
    "ImageBitmapRenderingContext.transferImageBitmap": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ImageBitmapRenderingContext.transferImageBitmap", 
        "params": [
            {
                "descr": "An ImageBitmap object to transfer.", 
                "name": "bitmap"
            }
        ], 
        "path": "dom/imagebitmaprenderingcontext/transferimagebitmap", 
        "syntax": "ImageBitmapRenderingContext.transferImageBitmap()", 
        "type": "Canvas"
    }, 
    "ImageData": {
        "descr": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element. It is created using the ImageData() constructor or creator methods on the CanvasRenderingContext2D object associated with a canvas: createImageData() and getImageData(). It can also be used to set a part of the canvas by using putImageData().", 
        "name": "ImageData", 
        "params": [
            {
                "descr": "Creates an ImageData object from a given Uint8ClampedArray and the size of the image it contains. ", 
                "name": "ImageData()"
            }, 
            {
                "descr": "Is a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).", 
                "name": "ImageData.data Read only"
            }, 
            {
                "descr": "Is an unsigned long representing the actual height, in pixels, of the ImageData.", 
                "name": "ImageData.height Read only"
            }, 
            {
                "descr": "Is an unsigned long representing the actual width, in pixels, of the ImageData.", 
                "name": "ImageData.width Read only"
            }
        ], 
        "path": "dom/imagedata", 
        "syntax": "Uint8ClampedArray and the size of the image it contains. If no array is given, it creates an image of a black rectangle. Note that this is the most common way to create such an object in workers as createImageData()", 
        "type": "Canvas"
    }, 
    "ImageData.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "ImageData.constructor", 
        "params": [
            {
                "descr": "A Uint8ClampedArray containing the underlying pixel representation of the image. ", 
                "name": "array"
            }, 
            {
                "descr": "An unsigned long representing the width of the represented image.", 
                "name": "width"
            }, 
            {
                "descr": "An unsigned long representing the height of the represented image. ", 
                "name": "height"
            }
        ], 
        "path": "dom/imagedata/imagedata", 
        "syntax": "ImageData()", 
        "type": "Canvas"
    }, 
    "ImageData.data": {
        "descr": "The readonly ImageData.data property returns a Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).", 
        "name": "ImageData.data", 
        "params": [], 
        "path": "dom/imagedata/data", 
        "syntax": "Uint8ClampedArray representing a one-dimensional array containing the data in the RGBA order, with integer values between 0 and 255 (included).", 
        "type": "Canvas"
    }, 
    "ImageData.height": {
        "descr": "The readonly ImageData.height property returns the number of rows in the image data object.", 
        "name": "ImageData.height", 
        "params": [], 
        "path": "dom/imagedata/height", 
        "syntax": "imagedata.height Example var imagedata = new ImageData(100, 100);\n or imagedata.height; // 100);", 
        "type": "Canvas"
    }, 
    "ImageData.width": {
        "descr": "The readonly ImageData.width property returns the number of pixels per row in the image data object.", 
        "name": "ImageData.width", 
        "params": [], 
        "path": "dom/imagedata/width", 
        "syntax": "imagedata.width Example var imagedata = new ImageData(100, 100);\n or imagedata.width // 100);", 
        "type": "Canvas"
    }, 
    "Infinity": {
        "descr": "The global Infinity property is a numeric value representing infinity.", 
        "name": "Infinity", 
        "params": [], 
        "path": "javascript/global_objects/infinity", 
        "syntax": "Infinity  Description Infinity is a property of the global object, i.e. it is a variable in global scope. The initial value of Infinity is Number.POSITIVE_INFINITY. The value Infinity (positive infinity) is greater than any other number. This value behaves mathematically like infinity; for example, any positive number multiplied by Infinity", 
        "type": "Global Objects"
    }, 
    "InputDeviceCapabilities API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "InputDeviceCapabilities API", 
        "params": [
            {
                "descr": "Provides logical information about an input device.", 
                "name": "InputDeviceCapabilities"
            }
        ], 
        "path": "dom/inputdevicecapabilities_api", 
        "syntax": "touchstart and a mousedown event. We can assume that if the touchstart event is triggered that the user's device has a touch interface. What about when the mousedown event is triggered? It would be useful to know if a touchstart event were also triggered so that we don't take the same action twice. We can do this by checking the sourceCapabilities property of the UIEvent. myButton.addEventListener('mousedown', function(e) {  // Touch event case handled above, don't change the style again on tap.  if (!e.sourceCapabilities.firesTouchEvents)    myButton.classList.add(\"pressed\");\n or });", 
        "type": "Miscellaneous"
    }, 
    "InputDeviceCapabilities.constructor": {
        "descr": "The InputDeviceCapabilities() constructor creates a new InputDeviceCapabilities object provides information about the physical device responsible for generating a touch event.", 
        "name": "InputDeviceCapabilities.constructor", 
        "params": [
            {
                "descr": "A dictionary object containing a set of device capabilities. ", 
                "name": "InputDeviceCapabilitiesInit Optional"
            }
        ], 
        "path": "dom/inputdevicecapabilities/inputdevicecapabilities", 
        "syntax": "var inputDeviceCapabilities = new InputDeviceCapabilities([InputDeviceCapabilitiesInit])", 
        "type": "Miscellaneous"
    }, 
    "InputEvent.constructor": {
        "descr": "The InputEvent() constructor creates a new InputEvent.", 
        "name": "InputEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a InputEventInit dictionary, having the following fields:  \"isComposing\", optional and defaulting to false, of type Boolean, that is the if the event is part of a composition session, after the compositionstart event and before compositionend.   The InputEventInit dictionary also accepts fields from UIEventInit and from EventInit dictionaries.", 
                "name": "inputEventInitOptional"
            }
        ], 
        "path": "dom/inputevent/inputevent", 
        "syntax": "event = new InputEvent(typeArg, inputEventInit);", 
        "type": "Events"
    }, 
    "InputEvent.isComposing": {
        "descr": "The InputEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.", 
        "name": "InputEvent.isComposing", 
        "params": [], 
        "path": "dom/inputevent/iscomposing", 
        "syntax": "var bool = event.isComposing; Example var inputEvent = new InputEvent(\"syntheticInput\", false);\n or console.log(inputEvent.isComposing);\n or  // return false);", 
        "type": "Events"
    }, 
    "InstallEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "InstallEvent", 
        "params": [
            {
                "descr": "Creates a new InstallEvent object.", 
                "name": "InstallEvent.InstallEvent()"
            }, 
            {
                "descr": "Returns the ServiceWorker that is currently actively controlling the page.", 
                "name": "InstallEvent.activeWorker Read only"
            }
        ], 
        "path": "dom/installevent", 
        "syntax": "oninstall handler, the InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker", 
        "type": "Service Workers"
    }, 
    "InstallEvent.activeWorker": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "InstallEvent.activeWorker", 
        "params": [], 
        "path": "dom/installevent/activeworker", 
        "syntax": "activeWorker read-only property of the InstallEvent interface returns the ServiceWorker", 
        "type": "Web Workers"
    }, 
    "InstallEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "InstallEvent.constructor", 
        "params": [
            {
                "descr": "The type of the event.", 
                "name": "type"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/installevent/installevent", 
        "syntax": "InstallEvent()", 
        "type": "Service Workers"
    }, 
    "Int16Array": {
        "descr": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Int16Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Int16Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Int16Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Int16Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Int16Array.prototype"
            }, 
            {
                "descr": "Creates a new Int16Array from an array-like or iterable object. ", 
                "name": "Int16Array.from()"
            }, 
            {
                "descr": "Creates a new Int16Array with a variable number of arguments. ", 
                "name": "Int16Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Int16Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Int16Array Fixed at construction time and thus read only.", 
                "name": "Int16Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Int16Array from the start of its ArrayBuffer. ", 
                "name": "Int16Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Int16Array from the start of its ArrayBuffer. ", 
                "name": "Int16Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Int16Array. ", 
                "name": "Int16Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Int16Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Int16Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Int16Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Int16Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Int16Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Int16Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Int16Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Int16Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Int16Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Int16Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Int16Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Int16Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Int16Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Int16Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Int16Array.prototype.copyWithin().", 
                "name": "Int16Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Int16Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Int16Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Int16Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Int16Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Int16Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Int16Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Int16Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Int16Array from the given start and end element index.", 
                "name": "Int16Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Int16Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Int16Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Int16Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Int16Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/int16array", 
        "syntax": "new Int16Array(length);\n or new Int16Array(typedArray);\n or new Int16Array(object);\n or new Int16Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Int32Array": {
        "descr": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Int32Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Int32Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Int32Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Int32Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Int32Array.prototype"
            }, 
            {
                "descr": "Creates a new Int32Array from an array-like or iterable object. ", 
                "name": "Int32Array.from()"
            }, 
            {
                "descr": "Creates a new Int32Array with a variable number of arguments. ", 
                "name": "Int32Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Int32Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Int32Array Fixed at construction time and thus read only.", 
                "name": "Int32Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Int32Array from the start of its ArrayBuffer. ", 
                "name": "Int32Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Int32Array from the start of its ArrayBuffer. ", 
                "name": "Int32Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Int32Array. ", 
                "name": "Int32Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Int32Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Int32Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Int32Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Int32Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Int32Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Int32Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Int32Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Int32Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Int32Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Int32Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Int32Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Int32Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Int32Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Int32Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Int32Array.prototype.copyWithin().", 
                "name": "Int32Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Int32Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Int32Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Int32Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Int32Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Int32Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Int32Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Int32Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Int32Array from the given start and end element index.", 
                "name": "Int32Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Int32Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Int32Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Int32Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Int32Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/int32array", 
        "syntax": "new Int32Array(length);\n or new Int32Array(typedArray);\n or new Int32Array(object);\n or new Int32Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Int8Array": {
        "descr": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Int8Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Int8Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Int8Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Int8Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Int8Array.prototype"
            }, 
            {
                "descr": "Creates a new Int8Array from an array-like or iterable object. ", 
                "name": "Int8Array.from()"
            }, 
            {
                "descr": "Creates a new Int8Array with a variable number of arguments. ", 
                "name": "Int8Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Int8Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Int8Array Fixed at construction time and thus read only.", 
                "name": "Int8Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Int8Array from the start of its ArrayBuffer. ", 
                "name": "Int8Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Int8Array from the start of its ArrayBuffer. ", 
                "name": "Int8Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Int8Array. ", 
                "name": "Int8Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Int8Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Int8Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Int8Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Int8Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Int8Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Int8Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Int8Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Int8Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Int8Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Int8Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Int8Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Int8Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Int8Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Int8Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Int8Array.prototype.copyWithin().", 
                "name": "Int8Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Int8Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Int8Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Int8Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Int8Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Int8Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Int8Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Int8Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Int8Array from the given start and end element index.", 
                "name": "Int8Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Int8Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Int8Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Int8Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Int8Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/int8array", 
        "syntax": "new Int8Array(length);\n or new Int8Array(typedArray);\n or new Int8Array(object);\n or new Int8Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Intersection Observer API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Intersection Observer API", 
        "params": [
            {
                "descr": "Provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. ", 
                "name": "IntersectionObserver"
            }, 
            {
                "descr": "Provides information about the intersection of a particular target with the observers root element at a particular time. ", 
                "name": "IntersectionObserverEntry"
            }
        ], 
        "path": "dom/intersection_observer_api", 
        "syntax": "var callback = function(entries, observer) { /* Content excerpted, show below */ };var scrollArea = document.querySelector('#scrollArea');\n or var options = {root: scrollArea, rootMargin: 0, threshold: 1.0}var observer = new IntersectionObserver(callback, options);", 
        "type": "Intersection Observer"
    }, 
    "IntersectionObserver": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "IntersectionObserver", 
        "params": [
            {
                "descr": "Creates a new IntersectionObserver object.", 
                "name": "IntersectionObserver.IntersectionObserver()"
            }, 
            {
                "descr": "A specific ancestor of the element being observed. ", 
                "name": "IntersectionObserver.root Read only"
            }, 
            {
                "descr": "An offset applied to the root's bounding_box when calculating intersections, effectively shrinking or growing the root for calculation purposes. ", 
                "name": "IntersectionObserver.rootMargin Read only"
            }, 
            {
                "descr": "A list of thresholds, sorted in increasing numeric order, where each threshold is a ratio of intersection area to bounding box area of an observed target. ", 
                "name": "IntersectionObserver.thresholds Read only"
            }, 
            {
                "descr": "Stops the IntersectionObserver object from observing any target.", 
                "name": "IntersectionObserver.disconnect"
            }, 
            {
                "descr": "Tells the IntersectionObserver a target element to observe.", 
                "name": "IntersectionObserver.observe"
            }, 
            {
                "descr": "Returns an array of IntersectionObserverEntry objects for all observed targets and stops observing all of them.", 
                "name": "IntersectionObserver.takeRecords"
            }, 
            {
                "descr": "Tells the IntersectionObserver to stop observing a particular target element.", 
                "name": "IntersectionObserver.unobserve"
            }
        ], 
        "path": "dom/intersectionobserver", 
        "syntax": "IntersectionObserver interface of the the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor or viewport is referred to as the root.", 
        "type": "Intersection Observer"
    }, 
    "IntersectionObserver.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "IntersectionObserver.constructor", 
        "params": [
            {
                "descr": "A reference to a function that takes the following parameters:  entries: A list of references to IntersectionObserverEntry objects. ", 
                "name": "callback"
            }, 
            {
                "descr": "Options are as follows:  root: A specific ancestor of the target being observed. ", 
                "name": "options"
            }
        ], 
        "path": "dom/intersectionobserver/intersectionobserver", 
        "syntax": "IntersectionObserver()", 
        "type": "Intersection Observer"
    }, 
    "IntersectionObserverEntry": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "IntersectionObserverEntry", 
        "params": [
            {
                "descr": "Returns a DOMRectReadOnly for the intersection observer's target.", 
                "name": "IntersectionObserverEntry.boundingClientRect Read only"
            }, 
            {
                "descr": "Returns the ratio of the intersectionRect to the boundingClientRect.", 
                "name": "IntersectionObserverEntry.intersectionRatio Read only"
            }, 
            {
                "descr": "Returns a DOMRectReadOnly for the visible portion of the intersection observer's target.", 
                "name": "IntersectionObserverEntry.intersectionRect Read only"
            }, 
            {
                "descr": "Returns a DOMRectReadOnly for the intersection observer's root.", 
                "name": "IntersectionObserverEntry.rootBounds Read only"
            }, 
            {
                "descr": "Returns a DOMHightResTimeStamp indicating when the intersection occurred.", 
                "name": "IntersectionObserverEntry.time Read only"
            }
        ], 
        "path": "dom/intersectionobserverentry", 
        "syntax": "IntersectionObserverEntry interface of the the Intersection Observer API provides information about the intersection of a particular target with the observers root element at a particular time. Instances of this interface cannot be created, but a list of them is returned by IntersectionObserver.takeRecords()", 
        "type": "Intersection Observer"
    }, 
    "Intl": {
        "descr": "The Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The constructors for Collator, NumberFormat, and DateTimeFormat objects are properties of the Intl object. This page documents these properties as well as functionality common to the internationalization constructors and other language sensitive functions.", 
        "name": "Intl", 
        "params": [
            {
                "descr": "Constructor for collators, objects that enable language sensitive string comparison.", 
                "name": "Intl.Collator"
            }, 
            {
                "descr": "Constructor for objects that enable language sensitive date and time formatting.", 
                "name": "Intl.DateTimeFormat"
            }, 
            {
                "descr": "Constructor for objects that enable language sensitive number formatting.", 
                "name": "Intl.NumberFormat"
            }, 
            {
                "descr": "A method returning the canonical locale names.", 
                "name": "Intl.getCanonicalLocales()"
            }
        ], 
        "path": "javascript/global_objects/intl", 
        "syntax": "\"best fit\" matcher lets the runtime provide a locale that's at least, but possibly more, suited for the request than the result of the Lookup algorithm. If the application doesn't provide a locales argument, or the runtime doesn't have a locale that matches the request, then the runtime's default locale is used. The matcher can be selected using a property of the options argument (see below).", 
        "type": "Intl"
    }, 
    "Intl.Collator": {
        "descr": "The Intl.Collator object is a constructor for collators, objects that enable language sensitive string comparison.", 
        "name": "Intl.Collator", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "kn"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "kf"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ", 
                "name": "usage"
            }, 
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ", 
                "name": "sensitivity"
            }, 
            {
                "descr": "Whether punctuation should be ignored. ", 
                "name": "ignore\u00adPunctua\u00adtion"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "numeric"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "caseFirst"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "Intl.Collator.prototype"
            }, 
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.", 
                "name": "Intl.Collator.supportedLocalesOf()"
            }, 
            {
                "descr": "Getter; returns a function that compares two strings according to the sort order of this Intl.Collator object.", 
                "name": "Intl.Collator.prototype.compare"
            }, 
            {
                "descr": "A reference to Intl.Collator.", 
                "name": "Intl.Collator.prototype.constructor"
            }, 
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.", 
                "name": "Intl.Collator.prototype.resolvedOptions()"
            }
        ], 
        "path": "javascript/global_objects/collator", 
        "syntax": "new Intl.Collator([locales[, options]])Intl.Collator.call(this[, locales[, options]])", 
        "type": "Intl"
    }, 
    "Intl.Collator.supportedLocalesOf": {
        "descr": "The Intl.Collator.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.", 
        "name": "Intl.Collator.supportedLocalesOf", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }
        ], 
        "path": "javascript/global_objects/collator/supportedlocalesof", 
        "syntax": "Intl.Collator.supportedLocalesOf(locales[, options])", 
        "type": "Intl"
    }, 
    "Intl.DateTimeFormat": {
        "descr": "The Intl.DateTimeFormat object is a constructor for objects that enable language sensitive date and time formatting.", 
        "name": "Intl.DateTimeFormat", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "Intl.DateTimeFormat.prototype"
            }, 
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.", 
                "name": "Intl.DateTimeFormat.supportedLocalesOf()"
            }, 
            {
                "descr": "A reference to Intl.DateTimeFormat.", 
                "name": "Intl.DateTimeFormat.prototype.constructor"
            }, 
            {
                "descr": "Getter; returns a function that formats a date according to the locale and formatting options of this DateTimeFormat object.", 
                "name": "Intl.DateTimeFormat.prototype.format"
            }, 
            {
                "descr": "Returns an Array of objects representing the date string in parts that can be used for custom locale-aware formatting.", 
                "name": "Intl.DateTimeFormat.prototype.formatToParts()"
            }, 
            {
                "descr": "Returns a new object with properties reflecting the locale and formatting options computed during initialization of the object.", 
                "name": "Intl.DateTimeFormat.prototype.resolvedOptions()"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat", 
        "syntax": "new Intl.DateTimeFormat([locales[, options]])Intl.DateTimeFormat.call(this[, locales[, options]])", 
        "type": "Intl"
    }, 
    "Intl.DateTimeFormat.supportedLocalesOf": {
        "descr": "The Intl.DateTimeFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.", 
        "name": "Intl.DateTimeFormat.supportedLocalesOf", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/supportedlocalesof", 
        "syntax": "Intl.DateTimeFormat.supportedLocalesOf(locales[, options])", 
        "type": "Intl"
    }, 
    "Intl.NumberFormat": {
        "descr": "The Intl.NumberFormat object is a constructor for objects that enable language sensitive number formatting.", 
        "name": "Intl.NumberFormat", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties:  localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".", 
                "name": "style"
            }, 
            {
                "descr": "The currency to use in currency formatting. ", 
                "name": "currency"
            }, 
            {
                "descr": "How to display the currency in currency formatting. ", 
                "name": "currencyDisplay"
            }, 
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ", 
                "name": "useGrouping"
            }, 
            {
                "descr": "The minimum number of integer digits to use. ", 
                "name": "minimumIntegerDigits"
            }, 
            {
                "descr": "The minimum number of fraction digits to use. ", 
                "name": "minimumFractionDigits"
            }, 
            {
                "descr": "The maximum number of fraction digits to use. ", 
                "name": "maximumFractionDigits"
            }, 
            {
                "descr": "The minimum number of significant digits to use. ", 
                "name": "minimumSignificantDigits"
            }, 
            {
                "descr": "The maximum number of significant digits to use. ", 
                "name": "maximumSignificantDigits"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "Intl.NumberFormat.prototype"
            }, 
            {
                "descr": "Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.", 
                "name": "Intl.NumberFormat.supportedLocalesOf()"
            }, 
            {
                "descr": "A reference to Intl.NumberFormat.", 
                "name": "Intl.NumberFormat.prototype.constructor"
            }, 
            {
                "descr": "Getter; returns a function that formats a number according to the locale and formatting options of this NumberFormat object.", 
                "name": "Intl.NumberFormat.prototype.format"
            }, 
            {
                "descr": "Returns a new object with properties reflecting the locale and collation options computed during initialization of the object.", 
                "name": "Intl.NumberFormat.prototype.resolvedOptions()"
            }
        ], 
        "path": "javascript/global_objects/numberformat", 
        "syntax": "new Intl.NumberFormat([locales[, options]])Intl.NumberFormat.call(this[, locales[, options]])", 
        "type": "Intl"
    }, 
    "Intl.NumberFormat.supportedLocalesOf": {
        "descr": "The Intl.NumberFormat.supportedLocalesOf() method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.", 
        "name": "Intl.NumberFormat.supportedLocalesOf", 
        "params": [
            {
                "descr": "A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Optional. An object that may have the following property:  localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }
        ], 
        "path": "javascript/global_objects/numberformat/supportedlocalesof", 
        "syntax": "Intl.NumberFormat.supportedLocalesOf(locales[, options])", 
        "type": "Intl"
    }, 
    "Intl.collator.compare": {
        "descr": "The Intl.Collator.prototype.compare property returns a getter function that compares two strings according to the sort order of this Collator object.", 
        "name": "Intl.collator.compare", 
        "params": [
            {
                "descr": "The strings to compare against each other.", 
                "name": "string1 string2"
            }
        ], 
        "path": "javascript/global_objects/collator/compare", 
        "syntax": "collator.compare(string1, string2)", 
        "type": "Intl"
    }, 
    "Intl.collator.resolvedOptions": {
        "descr": "The Intl.Collator.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and collation options computed during initialization of this Collator object.", 
        "name": "Intl.collator.resolvedOptions", 
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ", 
                "name": "locale"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults.", 
                "name": "usage sensitivity ignorePunctuation"
            }, 
            {
                "descr": "The value requested using the Unicode extension key \"co\", if it is supported for locale, or \"default\".", 
                "name": "collation"
            }, 
            {
                "descr": "The values requested for these properties in the options argument or using the Unicode extension keys \"kn\" and \"kf\" or filled in as defaults. ", 
                "name": "numeric caseFirst"
            }
        ], 
        "path": "javascript/global_objects/collator/resolvedoptions", 
        "syntax": "collator.resolvedOptions()", 
        "type": "Intl"
    }, 
    "Intl.dateTimeFormat.format": {
        "descr": "The Intl.DateTimeFormat.prototype.format property returns a getter function that formats a date according to the locale and formatting options of this Intl.DateTimeFormat object.", 
        "name": "Intl.dateTimeFormat.format", 
        "params": [
            {
                "descr": "The date to format.", 
                "name": "date"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/format", 
        "syntax": "dateTimeFormat.format(date)", 
        "type": "Intl"
    }, 
    "Intl.dateTimeFormat.formatToParts": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Intl.dateTimeFormat.formatToParts", 
        "params": [
            {
                "descr": "The date to format.", 
                "name": "date Optional"
            }, 
            {
                "descr": "The string used for the day, for example \"17\".", 
                "name": "day"
            }, 
            {
                "descr": "The string used for the day period, for example, \"AM\" or \"PM\".", 
                "name": "dayPeriod"
            }, 
            {
                "descr": "The string used for the era, for example \"BC\" or \"AD\".", 
                "name": "era"
            }, 
            {
                "descr": "The string used for the hour, for example \"3\" or \"03\".", 
                "name": "hour"
            }, 
            {
                "descr": "The string used for separating date and time values, for example one of \" : , / \".", 
                "name": "literal"
            }, 
            {
                "descr": "The string used for the minute, for example \"00\".", 
                "name": "minute"
            }, 
            {
                "descr": "The string used for the month, for example \"12\".", 
                "name": "month"
            }, 
            {
                "descr": "The string used for the second, for example \"07\" or \"42\".", 
                "name": "second"
            }, 
            {
                "descr": "The string used for the name of the time zone, for example \"UTC\".", 
                "name": "timeZoneName"
            }, 
            {
                "descr": "The string used for the weekday, for example \"M\", \"Monday\", or \"Montag\".", 
                "name": "weekday"
            }, 
            {
                "descr": "The string used for the year, for example \"2012\" or \"96\".", 
                "name": "year"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/formattoparts", 
        "syntax": "Intl.DateTimeFormat.prototype.formatToParts()", 
        "type": "Intl"
    }, 
    "Intl.dateTimeFormat.resolvedOptions": {
        "descr": "The Intl.DateTimeFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this DateTimeFormat object.", 
        "name": "Intl.dateTimeFormat.resolvedOptions", 
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ", 
                "name": "locale"
            }, 
            {
                "descr": "The values requested using the Unicode extension keys \"ca\" and \"nu\" or filled in as default values.", 
                "name": "calendar numberingSystem"
            }, 
            {
                "descr": "The value provided for this property in the options argument; undefined (representing the runtime's default time zone) if none was provided. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "The value provided for this property in the options argument or filled in as a default.", 
                "name": "hour12"
            }, 
            {
                "descr": "The values resulting from format matching between the corresponding properties in the options argument and the available combinations and representations for date-time formatting in the selected locale. Some of these properties may not be present, indicating that the corresponding components will not be represented in formatted output.", 
                "name": "weekday era year month day hour minute second timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/datetimeformat/resolvedoptions", 
        "syntax": "dateTimeFormat.resolvedOptions()", 
        "type": "Intl"
    }, 
    "Intl.getCanonicalLocales": {
        "descr": "The Intl.getCanonicalLocales() method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.", 
        "name": "Intl.getCanonicalLocales", 
        "params": [
            {
                "descr": "A list of String values for which to get the canonical locale names.", 
                "name": "locales"
            }
        ], 
        "path": "javascript/global_objects/intl/getcanonicallocales", 
        "syntax": "Intl.getCanonicalLocales(locales)", 
        "type": "Intl"
    }, 
    "Intl.numberFormat.format": {
        "descr": "The Intl.NumberFormat.prototype.format property returns a getter function that formats a number according to the locale and formatting options of this NumberFormat object.", 
        "name": "Intl.numberFormat.format", 
        "params": [
            {
                "descr": "The number to format.", 
                "name": "number"
            }
        ], 
        "path": "javascript/global_objects/numberformat/format", 
        "syntax": "numberFormat.format(number)", 
        "type": "Intl"
    }, 
    "Intl.numberFormat.resolvedOptions": {
        "descr": "The Intl.NumberFormat.prototype.resolvedOptions() method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this NumberFormat object.", 
        "name": "Intl.numberFormat.resolvedOptions", 
        "params": [
            {
                "descr": "The BCP 47 language tag for the locale actually used. ", 
                "name": "locale"
            }, 
            {
                "descr": "The value requested using the Unicode extension key \"nu\" or filled in as a default.", 
                "name": "numberingSystem"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults.", 
                "name": "style useGrouping"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ", 
                "name": "currency currencyDisplay"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ", 
                "name": "minimumIntegerDigits minimumFractionDigits maximumFractionDigits"
            }, 
            {
                "descr": "The values provided for these properties in the options argument or filled in as defaults. ", 
                "name": "minimumSignificantDigits maximumSignificantDigits"
            }
        ], 
        "path": "javascript/global_objects/numberformat/resolvedoptions", 
        "syntax": "numberFormat.resolvedOptions()", 
        "type": "Intl"
    }, 
    "Iteration protocols": {
        "descr": "One addition of ECMAScript 2015 (ES6) is not new syntax or a new built-in, but a protocol. This protocol can be implemented by any object respecting some conventions.", 
        "name": "Iteration protocols", 
        "params": [], 
        "path": "javascript/iteration_protocols", 
        "syntax": "for..of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map", 
        "type": "Miscellaneous"
    }, 
    "Iterator": {
        "descr": "The Iterator function returns an object which implements legacy iterator protocol and iterates over enumerable properties of an object.", 
        "name": "Iterator", 
        "params": [
            {
                "descr": "Object to iterate over properties.", 
                "name": "object"
            }, 
            {
                "descr": "If keyOnly is truthy value, Iterator.prototype.next returns property_name only.", 
                "name": "keyOnly"
            }, 
            {
                "descr": "Returns a function that returns iterator object, that conforms to iterator protocol.", 
                "name": "Iterator.prototype[@@iterator]"
            }, 
            {
                "descr": "Returns next item in the [property_name, property_value] format or property_name only. ", 
                "name": "Iterator.prototype.next"
            }
        ], 
        "path": "javascript/global_objects/iterator", 
        "syntax": "Iterator(object, [keyOnly])", 
        "type": "Global Objects"
    }, 
    "JSON": {
        "descr": "The JSON object contains methods for parsing JavaScript Object Notation (JSON) and converting values to JSON. It can't be called or constructed, and aside from its two method properties it has no interesting functionality of its own.", 
        "name": "JSON", 
        "params": [
            {
                "descr": "Parse a string as JSON, optionally transform the produced value and its properties, and return the value.", 
                "name": "JSON.parse()"
            }, 
            {
                "descr": "Return a JSON string corresponding to the specified value, optionally including only certain properties or replacing property values in a user-defined manner.", 
                "name": "JSON.stringify()"
            }
        ], 
        "path": "javascript/global_objects/json", 
        "syntax": "null. It is based upon JavaScript syntax but is distinct from it: some JavaScript is not JSON, and some JSON is not JavaScript. See also JSON: The JavaScript subset that isn't.  JavaScript and JSON differences   JavaScript type JSON differences     Objects and Arrays Property names must be double-quoted strings; trailing commas are forbidden.   Numbers Leading zeros are prohibited; a decimal point must be followed by at least one digit.   Strings  Only a limited set of characters may be escaped; certain control characters are prohibited; the Unicode line separator (U+2028) and paragraph separator (U+2029) characters are permitted; strings must be double-quoted. See the following example where JSON.parse()", 
        "type": "JSON"
    }, 
    "JSON.parse": {
        "descr": "The JSON.parse() method parses a string as JSON, optionally transforming the value produced by parsing.", 
        "name": "JSON.parse", 
        "params": [
            {
                "descr": "The string to parse as JSON. See the JSON object for a description of JSON syntax.", 
                "name": "text"
            }, 
            {
                "descr": "If a function, prescribes how the value originally produced by parsing is transformed, before being returned.", 
                "name": "reviver Optional"
            }
        ], 
        "path": "javascript/global_objects/json/parse", 
        "syntax": "JSON.parse(text[, reviver])", 
        "type": "JSON"
    }, 
    "JSON.stringify": {
        "descr": "The JSON.stringify() method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified, or optionally including only the specified properties if a replacer array is specified.", 
        "name": "JSON.stringify", 
        "params": [
            {
                "descr": "The value to convert to a JSON string.", 
                "name": "value"
            }, 
            {
                "descr": "A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string.", 
                "name": "replacer Optional"
            }, 
            {
                "descr": "A String or Number object that's used to insert white space into the output JSON string for readability purposes. ", 
                "name": "space Optional"
            }
        ], 
        "path": "javascript/global_objects/json/stringify", 
        "syntax": "JSON.stringify(value[, replacer[, space]])", 
        "type": "JSON"
    }, 
    "KeyboardEvent.altKey": {
        "descr": "The KeyboardEvent.altKey read-only property is a Boolean indicates if the alt key (Option or \u2325 on OS X) was pressed (true) or not (false) when the event occured.", 
        "name": "KeyboardEvent.altKey", 
        "params": [], 
        "path": "dom/keyboardevent/altkey", 
        "syntax": "var altKeyPressed = instanceOfKeyboardEvent.altKey Examples <html><head><title>altKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"ALT key pressed: \" + e.altKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key,with or without holding down the ALT key.<br />You can also use the SHIFT key together with the ALT key.</p></body></html>);", 
        "type": "Events"
    }, 
    "KeyboardEvent.constructor": {
        "descr": "The KeyboardEvent() constructor creates a new KeyboardEvent.", 
        "name": "KeyboardEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a KeyboardEventInit dictionary, having the following fields:  \"key\", optional and defaulting to \"\", of type DOMString, that sets the value of KeyboardEvent.key. ", 
                "name": "KeyboardEventInitOptional"
            }
        ], 
        "path": "dom/keyboardevent/keyboardevent", 
        "syntax": "event = new KeyboardEvent(typeArg, KeyboardEventInit);", 
        "type": "Events"
    }, 
    "KeyboardEvent.ctrlKey": {
        "descr": "The KeyboardEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.", 
        "name": "KeyboardEvent.ctrlKey", 
        "params": [], 
        "path": "dom/keyboardevent/ctrlkey", 
        "syntax": "var ctrlKeyPressed = instanceOfKeyboardEvent.ctrlKey Return value A boolean Example <html><head><title>ctrlKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"CTRL key pressed: \" + e.ctrlKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key, with or without holding down the CTRL key.<br />You can also use the SHIFT key together with the CTRL key.</p></body></html>);", 
        "type": "Events"
    }, 
    "KeyboardEvent.getModifierState": {
        "descr": "The KeyboardEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (that is the modifier key is pressed or locked), otherwise, false.", 
        "name": "KeyboardEvent.getModifierState", 
        "params": [
            {
                "descr": "A modifier key value. The value must be one of the KeyboardEvent.key values which represent modifier keys, or the string \"Accel\" . ", 
                "name": "keyArg"
            }
        ], 
        "path": "dom/keyboardevent/getmodifierstate", 
        "syntax": "var active = event.getModifierState(keyArg);", 
        "type": "Events"
    }, 
    "KeyboardEvent.isComposing": {
        "descr": "The KeyboardEvent.isComposing read-only property returns a Boolean value indicating if the event is fired after compositionstart and before compositionend.", 
        "name": "KeyboardEvent.isComposing", 
        "params": [], 
        "path": "dom/keyboardevent/iscomposing", 
        "syntax": "var bool = event.isComposing; Example var kbdEvent = new KeyboardEvent(\"syntheticKey\", false);\n or console.log(kbdEvent.isComposing);\n or  // return false);", 
        "type": "Events"
    }, 
    "KeyboardEvent.location": {
        "descr": "The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device", 
        "name": "KeyboardEvent.location", 
        "params": [], 
        "path": "dom/keyboardevent/location", 
        "syntax": "var location = event.location; Example function keyEvent(event) {  console.log(\"Location of key pressed: \" + event.location);\n or });", 
        "type": "Events"
    }, 
    "KeyboardEvent.metaKey": {
        "descr": "The KeyboardEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occurred. Some operating systems may intercept the key so it is never detected.", 
        "name": "KeyboardEvent.metaKey", 
        "params": [], 
        "path": "dom/keyboardevent/metakey", 
        "syntax": "var metaKeyPressed = instanceOfKeyboardEvent.metaKey Return value A boolean Example function ismetaKey(e) {  alert(\"metaKey = \" + e.metaKey);\n or });", 
        "type": "Events"
    }, 
    "KeyboardEvent.repeat": {
        "descr": "The KeyboardEvent.repeat read-only property returns a Boolean that is true if the key is being held down such that it is automatically repeating.", 
        "name": "KeyboardEvent.repeat", 
        "params": [], 
        "path": "dom/keyboardevent/repeat", 
        "syntax": "var repeat = event.repeat; Specifications    Specification Status Comment   Document Object Model (DOM) Level 3 Events SpecificationThe definition of 'KeyboardEvent.repeat' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "Events"
    }, 
    "KeyboardEvent.shiftKey": {
        "descr": "The KeyboardEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred.", 
        "name": "KeyboardEvent.shiftKey", 
        "params": [], 
        "path": "dom/keyboardevent/shiftkey", 
        "syntax": "var shiftKeyPressed = instanceOfKeyboardEvent.shiftKey Return value A boolean Example <html><head><title>shiftKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"SHIFT key pressed: \" + e.shiftKey + \"\\n\"    + \"ALT key pressed: \" + e.altKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key, with or without holding down the SHIFT key.<br />You can also use the SHIFT key together with the ALT key.</p></body></html>);", 
        "type": "Events"
    }, 
    "KeyframeEffect": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffect", 
        "params": [
            {
                "descr": "Returns a new KeyframeEffect object instance.", 
                "name": "KeyframeEffect.KeyframeEffect()"
            }, 
            {
                "descr": "Gets and sets the element or pseudo-element being animated by this object. ", 
                "name": "KeyframeEffectReadOnly.target"
            }, 
            {
                "descr": "Gets and sets the iteration composite operation for resolving the property value changes of this keyframe effect.", 
                "name": "KeyframeEffectReadOnly.iterationComposite"
            }, 
            {
                "descr": "Gets and sets the composite operation property for resolving the property value changes between this and other keyframe effects.", 
                "name": "KeyframeEffectReadOnly.composite"
            }, 
            {
                "descr": "Gets and sets the temporal spacing of the keyframe effect's iterations.", 
                "name": "KeyframeEffectReadOnly.spacing"
            }, 
            {
                "descr": "Returns the computed keyframes that make up this effect along with their computed keyframe offsets.", 
                "name": "KeyframeEffectReadOnly.getKeyframes()"
            }, 
            {
                "descr": "Replaces the set of keyframes that make up this effect.", 
                "name": "KeyframeEffect.setKeyframes()"
            }, 
            {
                "descr": "Returns the calculated, current timing values for this keyframe effect.", 
                "name": "AnimationEffectReadOnly.getComputedTiming()"
            }
        ], 
        "path": "dom/keyframeeffect", 
        "syntax": "KeyframeEffect interface of the Web Animations API lets us create sets of animatable properties and values, called keyframes. These can then be played using the Animation.Animation()", 
        "type": "Animation"
    }, 
    "KeyframeEffect.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffect.constructor", 
        "params": [
            {
                "descr": "The DOM element to be animated, or null.", 
                "name": "element"
            }, 
            {
                "descr": "An keyframe object or null.", 
                "name": "keyframeSet"
            }, 
            {
                "descr": "Either an integer representing the animation's duration (in milliseconds), or an Object containing one or more of the following: AnimationEffectTimingProperties.delay Optional The number of milliseconds to delay the start of the animation. Defaults to 0.", 
                "name": "keyframeOptions Optional"
            }, 
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.", 
                "name": "AnimationEffectTimingProperties.direction Optional"
            }, 
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ", 
                "name": "AnimationEffectTimingProperties.duration Optional"
            }, 
            {
                "descr": "The rate of the animation's change over time. ", 
                "name": "AnimationEffectTimingProperties.easing Optional"
            }, 
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ", 
                "name": "AnimationEffectTimingProperties.endDelay Optional"
            }, 
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (backwards), retained after the animation has completed playing (forwards), or both. ", 
                "name": "AnimationEffectTimingProperties.fill Optional"
            }, 
            {
                "descr": "Describes at what point in the iteration the animation should start. ", 
                "name": "AnimationEffectTimingProperties.iterationStart Optional"
            }, 
            {
                "descr": "The number of times the animation should repeat. ", 
                "name": "AnimationEffectTimingProperties.iterations Optional"
            }, 
            {
                "descr": "Determines how values are combined between this animation and the element's underlying values.", 
                "name": "composite"
            }, 
            {
                "descr": "Determines how values build from iteration to iteration in the current animation.", 
                "name": "iterationComposite"
            }, 
            {
                "descr": "Determines how keyframes without temporal offsets should be distributed during the animation's duration.", 
                "name": "spacing"
            }
        ], 
        "path": "dom/keyframeeffect/keyframeeffect", 
        "syntax": "KeyframeEffect()", 
        "type": "Animation"
    }, 
    "KeyframeEffect.setKeyframes": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffect.setKeyframes", 
        "params": [
            {
                "descr": "A keyframe object or null. If set to null, the keyframes are replaced with a sequence of empty keyframes. ", 
                "name": "keyframes"
            }
        ], 
        "path": "dom/keyframeeffect/setkeyframes", 
        "syntax": "setKeyframes()", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly", 
        "params": [
            {
                "descr": "Returns a new KeyframeEffectReadOnly object instance.", 
                "name": "KeyframeEffectReadOnly.KeyframeEffectReadOnly()"
            }, 
            {
                "descr": "The element or pseudo-element being animated by this object. ", 
                "name": "KeyframeEffectReadOnly.target Read only"
            }, 
            {
                "descr": "The AnimationEffectTimingReadOnly object associated with the animation containing all the animation's timing values.", 
                "name": "AnimationEffectReadOnly.timing Read only"
            }, 
            {
                "descr": "The composite operation property for resolving the property value changes between this and other keyframe effects.", 
                "name": "KeyframeEffectReadOnly.composite Read only"
            }, 
            {
                "descr": "The iteration composite operation for resolving the property value changes of this keyframe effect.", 
                "name": "KeyframeEffectReadOnly.iterationComposite Read only"
            }, 
            {
                "descr": "The temporal spacing of the keyframe effect's iterations", 
                "name": "KeyframeEffectReadOnly.spacing Read only"
            }, 
            {
                "descr": "Returns the computed keyframes that make up this effect along with their computed keyframe offsets.", 
                "name": "KeyframeEffectReadOnly.getKeyframes() Read only"
            }, 
            {
                "descr": "Returns the calculated, current timing values for this keyframe effect.", 
                "name": "AnimationEffectReadOnly.getComputedTiming() Read only"
            }
        ], 
        "path": "dom/keyframeeffectreadonly", 
        "syntax": "KeyframeEffectReadOnly interface of the Web Animations API describes sets of animatable properties and values that can be played using the Animation.Animation()", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly.composite": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly.composite", 
        "params": [
            {
                "descr": "The keyframeEffect overrides the underlying value it is combined with: blur(2)\u00a0replaces\u00a0blur(3).", 
                "name": "replace"
            }, 
            {
                "descr": "The keyframeEffect is added to the underlying value with which it is combined (aka additive): blur(2)\u00a0blur(3).", 
                "name": "add"
            }, 
            {
                "descr": "The keyframeEffect is accumulated on to the underlying value: blur(5).", 
                "name": "accumulate"
            }
        ], 
        "path": "dom/keyframeeffectreadonly/composite", 
        "syntax": "composite property of a KeyframeEffectReadOnly", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly.constructor", 
        "params": [
            {
                "descr": "The DOM element to be animated, or null.", 
                "name": "element"
            }, 
            {
                "descr": "A keyframe object or null.", 
                "name": "keyframeSet"
            }, 
            {
                "descr": "Either an integer representing the animation's duration (in milliseconds), or an Object containing one or more of the following: AnimationEffectTimingProperties.delay Optional The number of milliseconds to delay the start of the animation. Defaults to 0.", 
                "name": "keyframeOptions Optional"
            }, 
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.", 
                "name": "AnimationEffectTimingProperties.direction Optional"
            }, 
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ", 
                "name": "AnimationEffectTimingProperties.duration Optional"
            }, 
            {
                "descr": "The rate of the animation's change over time. ", 
                "name": "AnimationEffectTimingProperties.easing Optional"
            }, 
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ", 
                "name": "AnimationEffectTimingProperties.endDelay Optional"
            }, 
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (backwards), retained after the animation has completed playing (forwards), or both. ", 
                "name": "AnimationEffectTimingProperties.fill Optional"
            }, 
            {
                "descr": "Describes at what point in the iteration the animation should start. ", 
                "name": "AnimationEffectTimingProperties.iterationStart Optional"
            }, 
            {
                "descr": "The number of times the animation should repeat. ", 
                "name": "AnimationEffectTimingProperties.iterations Optional"
            }, 
            {
                "descr": "Determines how values are combined between this animation and the element's underlying values.", 
                "name": "composite"
            }, 
            {
                "descr": "Determines how values build from iteration to iteration in the current animation.", 
                "name": "iterationComposite"
            }, 
            {
                "descr": "Determines how keyframes without temporal offsets should be distributed during the animation's duration.", 
                "name": "spacing"
            }
        ], 
        "path": "dom/keyframeeffectreadonly/keyframeeffectreadonly", 
        "syntax": "KeyframeEffectReadOnly()", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly.getKeyframes": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly.getKeyframes", 
        "params": [
            {
                "descr": "As many property value pairs as are contained in each keyframe of the animation.", 
                "name": "property value pairs"
            }, 
            {
                "descr": "The offset of the keyframe specified as a number between 0.0 and 1.0 inclusive or null. ", 
                "name": "offset"
            }, 
            {
                "descr": "The computed offset for this keyframe, calculated when the list of computed keyframes was produced according to KeyframeEffect.spacing. ", 
                "name": "computedOffset"
            }, 
            {
                "descr": "The timing function used from this keyframe until the next keyframe in the series.", 
                "name": "easing"
            }, 
            {
                "descr": "The KeyframeEffectReadOnly.composite operation used to combine the values specified in this keyframe with the underlying value. ", 
                "name": "composite"
            }
        ], 
        "path": "dom/keyframeeffectreadonly/getkeyframes", 
        "syntax": "getKeyframes()", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly.iterationComposite": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly.iterationComposite", 
        "params": [
            {
                "descr": "The keyframeEffect value produced is independent of the current iteration.", 
                "name": "replace"
            }, 
            {
                "descr": "Subsequent iterations of the keyframeEffect build on the final value of the previous iteration.", 
                "name": "accumulate"
            }
        ], 
        "path": "dom/keyframeeffectreadonly/iterationcomposite", 
        "syntax": "iterationComposite property of a KeyframeEffectReadOnly", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly.spacing": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly.spacing", 
        "params": [
            {
                "descr": "Distributes the keyframeEffect's keyframes without offsets so that the difference between subsequent keyframe offsets are equal. ", 
                "name": "distribute"
            }, 
            {
                "descr": "Distributes the keyframeEffect's keyframes without offsets so that the distance between subsequent values of the specified paced property are equal. ", 
                "name": "paced({property})"
            }
        ], 
        "path": "dom/keyframeeffectreadonly/spacing", 
        "syntax": "spacing property of a KeyframeEffectReadOnly", 
        "type": "Animation"
    }, 
    "KeyframeEffectReadOnly.target": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "KeyframeEffectReadOnly.target", 
        "params": [], 
        "path": "dom/keyframeeffectreadonly/target", 
        "syntax": "target property of a KeyframeEffectReadOnly", 
        "type": "Animation"
    }, 
    "Lexical grammar": {
        "descr": "This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.", 
        "name": "Lexical grammar", 
        "params": [], 
        "path": "javascript/lexical_grammar", 
        "syntax": "0b or 0B). Because this syntax is new in ECMAScript 6, see the browser compatibility table, below. If the digits after the 0b", 
        "type": "Miscellaneous"
    }, 
    "LocalMediaStream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "LocalMediaStream", 
        "params": [
            {
                "descr": "Stops the stream. When the source of the stream is a connected device (such as a camera or microphone), stops capture on the device.", 
                "name": "LocalMediaStream.stop()"
            }
        ], 
        "path": "dom/localmediastream", 
        "syntax": "LocalMediaStreaminterface represents a stream of media content fetched from a local data source. This is the interface returned by getUserMedia()", 
        "type": "Stream"
    }, 
    "Logical Operators": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.", 
        "name": "Logical Operators", 
        "params": [], 
        "path": "javascript/operators/logical_operators", 
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "MIDIAccess": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MIDIAccess", 
        "params": [
            {
                "descr": "Returns an instance of MIDIInputMap which provides access to any available MIDI input ports.", 
                "name": "MIDIAccess.inputs Read only"
            }, 
            {
                "descr": "Returns an instance of MIDIOutputMap which provides access to any available MIDI output ports.", 
                "name": "MIDIAccess.outputs Read only"
            }, 
            {
                "descr": "A boolean attribute indicating whether system exclusive support is enabled on the current MIDIAccess instance.", 
                "name": "MIDIAccess.sysexEnabled Read only"
            }, 
            {
                "descr": "Called whenever a new MIDI port is added or an existing port changes state.", 
                "name": "MIDIAccess.onstatechange"
            }
        ], 
        "path": "dom/midiaccess", 
        "syntax": "MIDIAccess interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices. Properties  MIDIAccess.inputs Read only  Returns an instance of MIDIInputMap", 
        "type": "Web MIDI"
    }, 
    "Managing screen orientation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Managing screen orientation", 
        "params": [], 
        "path": "dom/css_object_model/managing_screen_orientation", 
        "syntax": "<ul id=\"toolbar\">  <li>A</li>  <li>B</li>  <li>C</li></ul><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis lacinia nisi nec sem viverra vitae fringilla nulla ultricies. In ac est dolor, quis tincidunt leo. Cras commodo quam non tortor consectetur eget rutrum dolor ultricies. Ut interdum tristique dapibus. Nullam quis malesuada est.</p> CSS relies on the orientation media query to handle specific styles based on the screen orientation /* First let's define some common styles */html, body {  width : 100%;  height: 100%;}body {  border: 1px solid black;  -moz-box-sizing: border-box;  box-sizing: border-box;}p {  font   : 1em sans-serif;  margin : 0;  padding: .5em;}ul {  list-style: none;  font   : 1em monospace;  margin : 0;  padding: .5em;  -moz-box-sizing: border-box;  box-sizing: border-box;  background: black;}li {  display: inline-block;  margin : 0;  padding: 0.5em;  background: white;} Once we have some common styles we can start defining a special case for the orientation /* For portrait, we want the tool bar on top */@media screen and (orientation: portrait) {  #toolbar {    width: 100%;  }}/* For landscape, we want the tool bar stick on the left */@media screen and (orientation: landscape) {  #toolbar {    position: fixed;    width: 2.65em;    height: 100%;  }  p {    margin-left: 2em;  }  li + li {    margin-top: .5em;  }}", 
        "type": "Miscellaneous"
    }, 
    "Map": {
        "descr": "The Map object is a simple key/value map. Any value (both objects and primitive values) may be used as either a key or a value.", 
        "name": "Map", 
        "params": [
            {
                "descr": "Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). ", 
                "name": "iterable"
            }, 
            {
                "descr": "The value of the length property is 0.", 
                "name": "Map.length"
            }, 
            {
                "descr": "The constructor function that is used to create derived objects.", 
                "name": "get Map[@@species]"
            }, 
            {
                "descr": "Represents the prototype for the Map constructor. ", 
                "name": "Map.prototype"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Map.prototype.constructor"
            }, 
            {
                "descr": "Returns the number of key/value pairs in the Map object.", 
                "name": "Map.prototype.size"
            }, 
            {
                "descr": "Removes all key/value pairs from the Map object.", 
                "name": "Map.prototype.clear()"
            }, 
            {
                "descr": "Removes any value associated to the key and returns the value that Map.prototype.has(key) would have previously returned. ", 
                "name": "Map.prototype.delete(key)"
            }, 
            {
                "descr": "Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order.", 
                "name": "Map.prototype.entries()"
            }, 
            {
                "descr": "Calls callbackFn once for each key-value pair present in the Map object, in insertion order. ", 
                "name": "Map.prototype.forEach(callbackFn[, thisArg])"
            }, 
            {
                "descr": "Returns the value associated to the key, or undefined if there is none.", 
                "name": "Map.prototype.get(key)"
            }, 
            {
                "descr": "Returns a boolean asserting whether a value has been associated to the key in the Map object or not.", 
                "name": "Map.prototype.has(key)"
            }, 
            {
                "descr": "Returns a new Iterator object that contains the keys for each element in the Map object in insertion order.", 
                "name": "Map.prototype.keys()"
            }, 
            {
                "descr": "Sets the value for the key in the Map object. ", 
                "name": "Map.prototype.set(key, value)"
            }, 
            {
                "descr": "Returns a new Iterator object that contains the values for each element in the Map object in insertion order.", 
                "name": "Map.prototype.values()"
            }, 
            {
                "descr": "Returns a new Iterator object that contains an array of [key, value] for each element in the Map object in insertion order.", 
                "name": "Map.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/map", 
        "syntax": "new Map([iterable])", 
        "type": "Map"
    }, 
    "Map.@@species": {
        "descr": "The Map[@@species] accessor property returns the Map constructor.", 
        "name": "Map.@@species", 
        "params": [], 
        "path": "javascript/global_objects/map/@@species", 
        "syntax": "Map[Symbol.species] Description The species accessor property returns the default constructor for Map objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the Map constructor for Map objects: Map[Symbol.species]; // function Map()", 
        "type": "Map"
    }, 
    "Math.abs": {
        "descr": "The Math.abs() function returns the absolute value of a number, that is", 
        "name": "Math.abs", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/abs", 
        "syntax": "Math.abs(x)", 
        "type": "Math"
    }, 
    "Math.acos": {
        "descr": "The Math.acos() function returns the arccosine (in radians) of a number, that is", 
        "name": "Math.acos", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/acos", 
        "syntax": "Math.acos(x)", 
        "type": "Math"
    }, 
    "Math.acosh": {
        "descr": "The Math.acosh() function returns the hyperbolic arc-cosine of a number, that is", 
        "name": "Math.acosh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/acosh", 
        "syntax": "Math.acosh(x)", 
        "type": "Math"
    }, 
    "Math.asin": {
        "descr": "The Math.asin() function returns the arcsine (in radians) of a number, that is", 
        "name": "Math.asin", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/asin", 
        "syntax": "Math.asin(x)", 
        "type": "Math"
    }, 
    "Math.asinh": {
        "descr": "The Math.asinh() function returns the hyperbolic arcsine of a number, that is", 
        "name": "Math.asinh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/asinh", 
        "syntax": "Math.asinh(x)", 
        "type": "Math"
    }, 
    "Math.atan": {
        "descr": "The Math.atan() function returns the arctangent (in radians) of a number, that is", 
        "name": "Math.atan", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/atan", 
        "syntax": "Math.atan(x)", 
        "type": "Math"
    }, 
    "Math.atan2": {
        "descr": "The Math.atan2() function returns the arctangent of the quotient of its arguments.", 
        "name": "Math.atan2", 
        "params": [
            {
                "descr": "First number.", 
                "name": "y"
            }, 
            {
                "descr": "Second number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/atan2", 
        "syntax": "Math.atan2(y, x)", 
        "type": "Math"
    }, 
    "Math.atanh": {
        "descr": "The Math.atanh() function returns the hyperbolic arctangent of a number, that is", 
        "name": "Math.atanh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/atanh", 
        "syntax": "Math.atanh(x)", 
        "type": "Math"
    }, 
    "Math.cbrt": {
        "descr": "The Math.cbrt() function returns the cube root of a number, that is", 
        "name": "Math.cbrt", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/cbrt", 
        "syntax": "Math.cbrt(x)", 
        "type": "Math"
    }, 
    "Math.ceil": {
        "descr": "The Math.ceil() function returns the smallest integer greater than or equal to a given number.", 
        "name": "Math.ceil", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/ceil", 
        "syntax": "Math.ceil(x)", 
        "type": "Math"
    }, 
    "Math.clz32": {
        "descr": "The Math.clz32() function returns the number of leading zero bits in the 32-bit binary representation of a number.", 
        "name": "Math.clz32", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/clz32", 
        "syntax": "Math.clz32(x)", 
        "type": "Math"
    }, 
    "Math.cos": {
        "descr": "The Math.cos() function returns the cosine of a number.", 
        "name": "Math.cos", 
        "params": [
            {
                "descr": "A number given in unit of radians.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/cos", 
        "syntax": "Math.cos(x)", 
        "type": "Math"
    }, 
    "Math.cosh": {
        "descr": "The Math.cosh() function returns the hyperbolic cosine of a number, that can be expressed using the constant e:", 
        "name": "Math.cosh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/cosh", 
        "syntax": "Math.cosh(x)", 
        "type": "Math"
    }, 
    "Math.exp": {
        "descr": "The Math.exp() function returns ex, where x is the argument, and e is Euler's number (also known as Napier's constant), the base of the natural logarithms.", 
        "name": "Math.exp", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/exp", 
        "syntax": "Math.exp(x)", 
        "type": "Math"
    }, 
    "Math.expm1": {
        "descr": "The Math.expm1() function returns ex - 1, where x is the argument, and e the base of the natural logarithms.", 
        "name": "Math.expm1", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/expm1", 
        "syntax": "Math.expm1(x)", 
        "type": "Math"
    }, 
    "Math.floor": {
        "descr": "The Math.floor() function returns the largest integer less than or equal to a given number.", 
        "name": "Math.floor", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/floor", 
        "syntax": "Math.floor(x)", 
        "type": "Math"
    }, 
    "Math.fround": {
        "descr": "The Math.fround() function returns the nearest single precision float representation of a number.", 
        "name": "Math.fround", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/fround", 
        "syntax": "Math.fround(x)", 
        "type": "Math"
    }, 
    "Math.hypot": {
        "descr": "The Math.hypot() function returns the square root of the sum of squares of its arguments, that is", 
        "name": "Math.hypot", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "value1, value2, ..."
            }
        ], 
        "path": "javascript/global_objects/math/hypot", 
        "syntax": "Math.hypot([value1[, value2[, ...]]])", 
        "type": "Math"
    }, 
    "Math.imul": {
        "descr": "The Math.imul() function returns the result of the C-like 32-bit multiplication of the two parameters.", 
        "name": "Math.imul", 
        "params": [
            {
                "descr": "First number.", 
                "name": "a"
            }, 
            {
                "descr": "Second number.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/math/imul", 
        "syntax": "Math.imul(a, b)", 
        "type": "Math"
    }, 
    "Math.log": {
        "descr": "The Math.log() function returns the natural logarithm (base e) of a number, that is", 
        "name": "Math.log", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log", 
        "syntax": "Math.log(x)", 
        "type": "Math"
    }, 
    "Math.log10": {
        "descr": "The Math.log10() function returns the base 10 logarithm of a number, that is", 
        "name": "Math.log10", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log10", 
        "syntax": "Math.log10(x)", 
        "type": "Math"
    }, 
    "Math.log1p": {
        "descr": "The Math.log1p() function returns the natural logarithm (base e) of 1 + a number, that is", 
        "name": "Math.log1p", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log1p", 
        "syntax": "Math.log1p(x)", 
        "type": "Math"
    }, 
    "Math.log2": {
        "descr": "The Math.log2() function returns the base 2 logarithm of a number, that is", 
        "name": "Math.log2", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/log2", 
        "syntax": "Math.log2(x)", 
        "type": "Math"
    }, 
    "Math.max": {
        "descr": "The Math.max() function returns the largest of zero or more numbers.", 
        "name": "Math.max", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "value1, value2, ..."
            }
        ], 
        "path": "javascript/global_objects/math/max", 
        "syntax": "Math.max([value1[, value2[, ...]]])", 
        "type": "Math"
    }, 
    "Math.min": {
        "descr": "The Math.min() function returns the smallest of zero or more numbers.", 
        "name": "Math.min", 
        "params": [
            {
                "descr": "Numbers.", 
                "name": "value1, value2, ..."
            }
        ], 
        "path": "javascript/global_objects/math/min", 
        "syntax": "Math.min([value1[, value2[, ...]]])", 
        "type": "Math"
    }, 
    "Math.pow": {
        "descr": "The Math.pow() function returns the base to the exponent power, that is, baseexponent.", 
        "name": "Math.pow", 
        "params": [
            {
                "descr": "The base number.", 
                "name": "base"
            }, 
            {
                "descr": "The exponent used to raise the base.", 
                "name": "exponent"
            }
        ], 
        "path": "javascript/global_objects/math/pow", 
        "syntax": "Math.pow(base, exponent)", 
        "type": "Math"
    }, 
    "Math.random": {
        "descr": "The Math.random() function returns a floating-point, pseudo-random number in the range [0,\u00a01) that is, from 0 (inclusive) up to but not including 1 (exclusive), which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.", 
        "name": "Math.random", 
        "params": [], 
        "path": "javascript/global_objects/math/random", 
        "syntax": "Math.random()", 
        "type": "Math"
    }, 
    "Math.round": {
        "descr": "The Math.round() function returns the value of a number rounded to the nearest integer.", 
        "name": "Math.round", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/round", 
        "syntax": "Math.round(x)", 
        "type": "Math"
    }, 
    "Math.sign": {
        "descr": "The Math.sign() function returns the sign of a number, indicating whether the number is positive, negative or zero.", 
        "name": "Math.sign", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sign", 
        "syntax": "Math.sign(x)", 
        "type": "Math"
    }, 
    "Math.sin": {
        "descr": "The Math.sin() function returns the sine of a number.", 
        "name": "Math.sin", 
        "params": [
            {
                "descr": "A number (given in radians).", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sin", 
        "syntax": "Math.sin(x)", 
        "type": "Math"
    }, 
    "Math.sinh": {
        "descr": "The Math.sinh() function returns the hyperbolic sine of a number, that can be expressed using the constant e:", 
        "name": "Math.sinh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sinh", 
        "syntax": "Math.sinh(x)", 
        "type": "Math"
    }, 
    "Math.sqrt": {
        "descr": "The Math.sqrt() function returns the square root of a number, that is", 
        "name": "Math.sqrt", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/sqrt", 
        "syntax": "Math.sqrt(x)", 
        "type": "Math"
    }, 
    "Math.tan": {
        "descr": "The Math.tan() function returns the tangent of a number.", 
        "name": "Math.tan", 
        "params": [
            {
                "descr": "A number representing an angle in radians.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/tan", 
        "syntax": "Math.tan(x)", 
        "type": "Math"
    }, 
    "Math.tanh": {
        "descr": "The Math.tanh() function returns the hyperbolic tangent of a number, that is", 
        "name": "Math.tanh", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/tanh", 
        "syntax": "Math.tanh(x)", 
        "type": "Math"
    }, 
    "Math.trunc": {
        "descr": "The Math.trunc() function returns the integral part of a number by removing any fractional digits.", 
        "name": "Math.trunc", 
        "params": [
            {
                "descr": "A number.", 
                "name": "x"
            }
        ], 
        "path": "javascript/global_objects/math/trunc", 
        "syntax": "Math.trunc(x)", 
        "type": "Math"
    }, 
    "Media Source Extensions API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Media Source Extensions API", 
        "params": [
            {
                "descr": "Represents a media source to be played via an HTMLMediaElement object.", 
                "name": "MediaSource"
            }, 
            {
                "descr": "Represents a chunk of media to be passed into an HTMLMediaElement via a MediaSource object.", 
                "name": "SourceBuffer"
            }, 
            {
                "descr": "A simple container list for multiple SourceBuffer objects.", 
                "name": "SourceBufferList"
            }, 
            {
                "descr": "Contains information about the quality of video being played by a <video> element, such as number of dropped or corrupted frames. ", 
                "name": "VideoPlaybackQuality"
            }, 
            {
                "descr": "Provides a SourceBuffer with kind, label, and language information for tracks that do not contain this information in the initialization segments of a media chunk.", 
                "name": "TrackDefault"
            }, 
            {
                "descr": "A simple container list for multiple TrackDefault objects.", 
                "name": "TrackDefaultList"
            }, 
            {
                "descr": "Creates an object URL pointing to a MediaSource object that can then be specified as the src value of an HTML media element to play a media stream.", 
                "name": "URL.createObjectURL()"
            }, 
            {
                "descr": "When a MediaSource object is played by an HTML media element, this property will return a TimeRanges object that contains the time ranges that the user is able to seek to.", 
                "name": "HTMLMediaElement.seekable"
            }, 
            {
                "descr": "Returns a VideoPlaybackQuality object for the currently played video.", 
                "name": "HTMLVideoElement.getVideoPlaybackQuality()"
            }, 
            {
                "descr": "Returns the SourceBuffer that created the track in question.", 
                "name": "AudioTrack.sourceBuffer, VideoTrack.sourceBuffer, TextTrack.sourceBuffer"
            }
        ], 
        "path": "dom/media_source_extensions_api", 
        "syntax": "<audio> and <video> elements. Concepts and usage Playing video and audio has been available in web applications without plugins for a few years now, but the basic facilities offered have only really been able to cater for playing single whole tracks at a time \u2014 we can't combine/split arraybuffers. Streaming media has up until recently still been the domain of Flash, with technologies like Flash Media Server serving video streams up using the RTMP protocol. The MSE standard With Media Source Extensions (MSE), this is changing. MSE allows us to replace the usual single track src", 
        "type": "Media"
    }, 
    "Media Source Extensions API: Transcoding assets for MSE": {
        "descr": "Draft This page is not complete.", 
        "name": "Media Source Extensions API: Transcoding assets for MSE", 
        "params": [], 
        "path": "dom/media_source_extensions_api/transcoding_assets_for_mse", 
        "syntax": "MediaSource.isTypeSupported: MediaSource.isTypeSupported('audio/mp3');\n or  // falseMediaSource.isTypeSupported('video/mp4');\n or  // trueMediaSource.isTypeSupported('video/mp4; codecs=\"avc1.4D4028, mp4a.40.2\"');\n or  // true);", 
        "type": "Media"
    }, 
    "Media Streams API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Media Streams API", 
        "params": [], 
        "path": "dom/media_streams_api", 
        "syntax": "MediaStream object representing a flux of audio- or video-related data. Typically a MediaStream object is as a simple URL string which can be used to reference data stored in a DOM File, or a Blob object created with window.URL.createObjectURL()", 
        "type": "Web Audio"
    }, 
    "MediaDeviceInfo": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaDeviceInfo", 
        "params": [
            {
                "descr": "Returns a DOMString that is an identifier for the represented device that is persisted across sessions. ", 
                "name": "MediaDeviceInfo.deviceIdRead only"
            }, 
            {
                "descr": "Returns a DOMString that is a group identifier. ", 
                "name": "MediaDeviceInfo.groupIdRead only"
            }, 
            {
                "descr": "Returns an enumerated value that is either \"videoinput\", \"audioinput\" or \"audiooutput\".", 
                "name": "MediaDeviceInfo.kindRead only"
            }, 
            {
                "descr": "Returns a DOMString that is a label describing this device (for example \"External USB Webcam\"). ", 
                "name": "MediaDeviceInfo.labelRead only"
            }
        ], 
        "path": "dom/mediadeviceinfo", 
        "syntax": "The MediaDevicesInfo interface contains information on the available media input and output devices. Properties  MediaDeviceInfo.deviceIdRead only  Returns a DOMString that is an identifier for the represented device that is persisted across sessions. It is un-guessable by other applications and unique to the origin of the calling application. It is reset when the user clears cookies (for Private Browsing, a different identifier is used that is not persisted across sessions). MediaDeviceInfo.groupId", 
        "type": "Media"
    }, 
    "MediaDevices": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaDevices", 
        "params": [
            {
                "descr": "Returns the event handler for the devicechange event type.", 
                "name": "MediaDevices.ondevicechange"
            }, 
            {
                "descr": "Registers an event handler to a specific event type.", 
                "name": "EventTarget.addEventListener()"
            }, 
            {
                "descr": "Obtains an array of information about the media input and output devices available on the system.", 
                "name": "MediaDevices.enumerateDevices()"
            }, 
            {
                "descr": "With the user's permission through a prompt, turns on a camera or screensharing and/or a microphone on the system and provides a MediaStream containing a video track and/or an audio track with the input.", 
                "name": "MediaDevices.getUserMedia()"
            }, 
            {
                "descr": "Removes an event listener.", 
                "name": "EventTarget.removeEventListener()"
            }
        ], 
        "path": "dom/mediadevices", 
        "syntax": "The MediaDevices interface provides access to connected media input devices like cameras and microphones, as well as screensharing. Properties Inherits properties from its parent EventTarget. Event handlers  MediaDevices.ondevicechange Returns the event handler for the devicechange event type.  Methods Inherits methods from its parent EventTarget.  EventTarget.addEventListener()", 
        "type": "Media"
    }, 
    "MediaDevices.enumerateDevices": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaDevices.enumerateDevices", 
        "params": [], 
        "path": "dom/mediadevices/enumeratedevices", 
        "syntax": "MediaDevices.enumerateDevices()", 
        "type": "Media"
    }, 
    "MediaDevices.getUserMedia": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaDevices.getUserMedia", 
        "params": [
            {
                "descr": "Is a MediaStreamConstraints object specifying the types of media to request, along with any requirements for each type. ", 
                "name": "constraints"
            }, 
            {
                "descr": "Although the user and operating system both granted access to the hardware device, and no hardware issues occurred that would throw the NotReadableError exception, some problem occurred which prevented the device from being used.", 
                "name": "AbortError"
            }, 
            {
                "descr": "The user has specified that the current browsing instance is not permitted access to the device; or the user has denied access for the current session; or the user has denied all access to user media devices globally. Older versions of the specification used SecurityError for this instead; SecurityError has taken on a new meaning.", 
                "name": "NotAllowedError"
            }, 
            {
                "descr": "No media tracks of the type specified were found that satisfy the given constraints.", 
                "name": "NotFoundError"
            }, 
            {
                "descr": "Although the user granted permission to use the matching devices, a hardware error occurred at the operating system, browser, or Web page level which prevented access to the device.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "The specified constraints resulted in no candidate devices which met the criteria requested. ", 
                "name": "OverConstrainedError"
            }, 
            {
                "descr": "User media support is disabled on the Document on which getUserMedia() was called. ", 
                "name": "SecurityError"
            }, 
            {
                "descr": "The list of constraints specified is empty, or has all constraints set to false.", 
                "name": "TypeError"
            }
        ], 
        "path": "dom/mediadevices/getusermedia", 
        "syntax": "MediaDevices.getUserMedia()", 
        "type": "Media"
    }, 
    "MediaError.code": {
        "descr": "The MediaError.code is a read-only unsigned short that represents the error:", 
        "name": "MediaError.code", 
        "params": [], 
        "path": "dom/mediaerror/code", 
        "syntax": "var myError = mediaError.code Value A constant that is one of the following:    Name Value Description     MEDIA_ERR_ABORTED 1 The fetching of the associated resource has been aborted by the user   MEDIA_ERR_NETWORK 2 A network error caused the resource to stop being fetched.   MEDIA_ERR_DECODE 3 A decoding error caused the resource to stop being fetched.   MEDIA_ERR_SRC_NOT_SUPPORTED 4 The associated resource has been detected to be not suitable.    Example var obj = document.createElement('video');\n or obj.onerror = function() {console.log(\"Error with media: \" + obj.error.code);\n or }obj.src=\"https://example.com/blahblah.mp4\";);", 
        "type": "Miscellaneous"
    }, 
    "MediaKeyMessageEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeyMessageEvent", 
        "params": [
            {
                "descr": "Returns an ArrayBuffer with a message from the content decryption module. ", 
                "name": "MediaKeyMessageEvent.message Read only"
            }, 
            {
                "descr": "Indicates the type of message. May be one of license-request, license-renewal, license-renewal, or individualization-request.", 
                "name": "MediaKeyMessageEvent.messageType Read only"
            }
        ], 
        "path": "dom/mediakeymessageevent", 
        "syntax": "MediaKeyMessageEvent interface of the EncryptedMediaExtensions API contains the content and related data when the content decryption module generates a message for the session. Properties Inherits properties from its parent, Event.  MediaKeyMessageEvent.message Read only  Returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system. MediaKeyMessageEvent.messageType Read only  Indicates the type of message. May be one of license-request, license-renewal, license-renewal, or individualization-request.  Methods Inherits methods from its parent, Event. Examples // TBD Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'MediaKeyMessageEvent' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeyMessageEvent.message": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeyMessageEvent.message", 
        "params": [], 
        "path": "dom/mediakeymessageevent/message", 
        "syntax": "MediaKeyMessageEvent.message read-only property returns an ArrayBuffer with a message from the content decryption module. Messages vary by key system. Syntax var messageType = mediaKeyMessageEvent.messageType; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'message' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeyMessageEvent.messageType": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaKeyMessageEvent.messageType", 
        "params": [], 
        "path": "dom/mediakeymessageevent/messagetype", 
        "syntax": "license-request, license-renewal, license-renewal, or individualization-request. Syntax var messageType = mediaKeyMessageEvent.messageType; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'messageType' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession", 
        "params": [
            {
                "descr": "Returns a Promise signaling when a MediaKeySession closes. ", 
                "name": "MediaKeySession.closed Read only"
            }, 
            {
                "descr": "The time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. ", 
                "name": "MediaKeySession.expiration Read only"
            }, 
            {
                "descr": "Contains a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses.", 
                "name": "MediaKeySession.keyStatuses Read only"
            }, 
            {
                "descr": "Contains a unique string generated by the CDM for the current media object and its associated keys or licenses.", 
                "name": "MediaKeySession.sessionId Read only"
            }, 
            {
                "descr": "Returns a Promise after notifying the current media session is no longer needed and that the CDM should release any resources associated with this object and close it.", 
                "name": "MediaKeySession.close()"
            }, 
            {
                "descr": "Returns a Promise after generating a media request based on initialization data.", 
                "name": "MediaKeySession.generateRequest()"
            }, 
            {
                "descr": "Returns a Promise that resolves to a boolean value after loading data for a specified session object.", 
                "name": "MediaKeySession.load()"
            }, 
            {
                "descr": "Returns a Promise after removing any session data associated with the current object.", 
                "name": "MediaKeySession.remove()"
            }, 
            {
                "descr": "Returns a Promise after loading messages and licenses to the CDM.", 
                "name": "MediaKeySession.update()"
            }
        ], 
        "path": "dom/mediakeysession", 
        "syntax": "MediaKeySession interface of the EncryptedMediaExtensions API represents a context for message exchange with a content decryption module (CDM).", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.close": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaKeySession.close", 
        "params": [], 
        "path": "dom/mediakeysession/close", 
        "syntax": "MediaKeySession.close()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.closed": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession.closed", 
        "params": [], 
        "path": "dom/mediakeysession/closed", 
        "syntax": "MediaKeySession.closed read-only property returns a Promise signaling when a MediaKeySession", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.expiration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession.expiration", 
        "params": [], 
        "path": "dom/mediakeysession/expiration", 
        "syntax": "MediaKeySession.expiration read-only property returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists. This value is determined by the CDM and measured in milliseconds since January 1, 1970, UTC. This value may change during a session lifetime, such as when an action triggers the start of a window. Syntax \u200bvar expirationTime = mediaKeySessionObj.expiration; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'expiration' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.generateRequest": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession.generateRequest", 
        "params": [], 
        "path": "dom/mediakeysession/generaterequest", 
        "syntax": "MediaKeySession.generateRequest()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.keyStatuses": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaKeySession.keyStatuses", 
        "params": [], 
        "path": "dom/mediakeysession/keystatuses", 
        "syntax": "MediaKeySession.keyStatuses read-only property returns a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses. Syntax var mediaKeyStatusMapObj = mediaKeySessionObj.keyStatuses; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'keyStatuses' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.load": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession.load", 
        "params": [
            {
                "descr": "A unique string generated by the content decription module for the current media object and its associated keys or licenses.", 
                "name": "sessionId"
            }
        ], 
        "path": "dom/mediakeysession/load", 
        "syntax": "MediaKeySession.load()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.remove": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession.remove", 
        "params": [], 
        "path": "dom/mediakeysession/remove", 
        "syntax": "MediaKeySession.remove()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.sessionId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySession.sessionId", 
        "params": [], 
        "path": "dom/mediakeysession/sessionid", 
        "syntax": "MediaKeySession.sessionId read-only property contains a unique string generated by the CDM for the current media object and its associated keys or licenses. Syntax \u200bvar sessionId = mediaKeySessionObj.sessionId; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'sessionId' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySession.update": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaKeySession.update", 
        "params": [
            {
                "descr": "An instance of type BufferSource.", 
                "name": "response"
            }
        ], 
        "path": "dom/mediakeysession/update", 
        "syntax": "MediaKeySession.update()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeyStatusMap": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeyStatusMap", 
        "params": [
            {
                "descr": "Returns the number of key/value paris in the status map.", 
                "name": "MediaKeyStatusMap.size Read only"
            }, 
            {
                "descr": "Returns returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order.", 
                "name": "MediaKeyStatusMap.entries() Read only"
            }, 
            {
                "descr": "Calls callback once for each key-value pair in the status map, in insertion order. ", 
                "name": "MediaKeyStatusMap.forEach(callback[, argument]) Read only"
            }, 
            {
                "descr": "Returns the value associated with the given key, or undefined if there is none.", 
                "name": "MediaKeyStatusMap.get() Read only"
            }, 
            {
                "descr": "Returns a boolean asserting whether a value has been associated with the given key.", 
                "name": "MediaKeyStatusMap.has() Read only"
            }, 
            {
                "descr": "Returns a new Iterator object containing keys for each element in the status map, in insertion order.", 
                "name": "MediaKeyStatusMap.keys() Read only"
            }, 
            {
                "descr": "Returns a new Iterator object containing values for each element in the status map, in insertion order.", 
                "name": "MediaKeyStatusMap.values() Read only"
            }, 
            {
                "descr": "Returns a new Iterator object containing an array of [key, value] for each element in the status map, in insertion order.", 
                "name": "MediaKeyStatusMap.[@@iterator]() Read only"
            }
        ], 
        "path": "dom/mediakeystatusmap", 
        "syntax": "MediaKeyStatusMap interface of the EncryptedMediaExtensions API is a read-only map of media key statuses by key IDs. Properties  MediaKeyStatusMap.size Read only  Returns the number of key/value paris in the status map.  Methods  MediaKeyStatusMap.entries()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemAccess": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemAccess", 
        "params": [
            {
                "descr": "Returns a DOMString identifying the key system being used.", 
                "name": "MediaKeySystemAccess.keySystem Read only"
            }, 
            {
                "descr": "Returns a Promise that resolves to a new MediaKeys object.", 
                "name": "MediaKeySystemAccess.createMediaKeys()"
            }, 
            {
                "descr": "Returns a MediaKeySystemConfiguration object with the supported combination of configuration options.", 
                "name": "MediaKeySystemAccess.getConfiguration()"
            }
        ], 
        "path": "dom/mediakeysystemaccess", 
        "syntax": "MediaKeySystemAccess interface of the EncryptedMediaExtensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemAccess.createMediaKeys": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemAccess.createMediaKeys", 
        "params": [], 
        "path": "dom/mediakeysystemaccess/createmediakeys", 
        "syntax": "MediaKeySystemAccess.createMediaKeys()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemAccess.getConfiguration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemAccess.getConfiguration", 
        "params": [], 
        "path": "dom/mediakeysystemaccess/getconfiguration", 
        "syntax": "MediaKeySystemAccess.getConfiguration()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemAccess.keySystem": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaKeySystemAccess.keySystem", 
        "params": [], 
        "path": "dom/mediakeysystemaccess/keysystem", 
        "syntax": "MediaKeySystemAccess.keySystem read-only property returns a DOMString identifying the key system being used. Syntax var keySystem = mediaKeySystemAccess.keySystem; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'keySystem' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemConfiguration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemConfiguration", 
        "params": [
            {
                "descr": "Returns a list of supported initialization data type names. ", 
                "name": "MediaKeySystemConfiguration.initDataTypes Read only"
            }, 
            {
                "descr": "Returns a list of supported audio type and capability pairs.", 
                "name": "MediaKeySystemConfiguration.audioCapabilities Read only"
            }, 
            {
                "descr": "Returns a list of supported video type and capability pairs.", 
                "name": "MediaKeySystemConfiguration.videoCapabilities Read only"
            }, 
            {
                "descr": "Indicates whether a persistent distinctive identifier is required.", 
                "name": "MediaKeySystemConfiguration.distinctiveIdentifier Read only"
            }, 
            {
                "descr": "Indicates whether the ability to persist state is required.", 
                "name": "MediaKeySystemConfiguration.persistentState Read only"
            }
        ], 
        "path": "dom/mediakeysystemconfiguration", 
        "syntax": "MediaKeySystemConfiguration interface EncryptedMediaExtensions API provides configuration information about the media key system. Properties  MediaKeySystemConfiguration.initDataTypes Read only  Returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data. MediaKeySystemConfiguration.audioCapabilities Read only  Returns a list of supported audio type and capability pairs. MediaKeySystemConfiguration.videoCapabilities Read only  Returns a list of supported video type and capability pairs. MediaKeySystemConfiguration.distinctiveIdentifier Read only  Indicates whether a persistent distinctive identifier is required. MediaKeySystemConfiguration.persistentState Read only  Indicates whether the ability to persist state is required.  Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'MediaSystemConfiguration' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemConfiguration.audioCapabilities": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemConfiguration.audioCapabilities", 
        "params": [], 
        "path": "dom/mediakeysystemconfiguration/audiocapabilities", 
        "syntax": "MediaKeySystemConfiguration.audioCapabilities read-only property returns an array of supported audio type and capability pairs. Syntax var audioCapabilities[ {contentType: 'contentType', robustness:'robustness'}] = mediaSystemConfiguration.audioCapabilities; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'audioCapabilities' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Web Audio"
    }, 
    "MediaKeySystemConfiguration.distinctiveIdentifier": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemConfiguration.distinctiveIdentifier", 
        "params": [], 
        "path": "dom/mediakeysystemconfiguration/distinctiveidentifier", 
        "syntax": "MediaKeySystemConfiguration.distinctiveIdentifier read-only property indicates whether a persistent distinctive identifier is required. Syntax var distinctiveIdentifier = mediaSystemConfiguration.distinctiveIdentifier; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'distinctiveIdentifier' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemConfiguration.initDataTypes": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemConfiguration.initDataTypes", 
        "params": [], 
        "path": "dom/mediakeysystemconfiguration/initdatatypes", 
        "syntax": "MediaKeySystemConfiguration.initDataTypes read-only property returns a list of supported initialization data type names. An initialization data type is a string indicating the format of the initialization data. Syntax var dataTypes[] = mediaSystemConfiguration.initDataTypes; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'initDataTypes' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemConfiguration.persistentState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemConfiguration.persistentState", 
        "params": [], 
        "path": "dom/mediakeysystemconfiguration/persistentstate", 
        "syntax": "MediaKeySystemConfiguration.persistentState read-only property indicates whether the ability to persist state is required. Syntax var persistentState = mediaSystemConfiguration.persistentSTate; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'persistentState' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeySystemConfiguration.videoCapabilities": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeySystemConfiguration.videoCapabilities", 
        "params": [], 
        "path": "dom/mediakeysystemconfiguration/videocapabilities", 
        "syntax": "MediaKeySystemConfiguration.videoCapabilities read-only property returns an array of supported video type and capability pairs. Syntax var videoCapabilities[{contentType: 'contentType', robustness:'robustness'}] = mediaSystemConfiguration.videoCapabilities; Specifications    Specification Status Comment   Encrypted Media ExtensionsThe definition of 'videoCapabilities' in that specification. Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 43.0 ? ? ? ? ? 42.0          Edit this page on MDN", 
        "type": "Encrypted Media"
    }, 
    "MediaKeys": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaKeys", 
        "params": [
            {
                "descr": "Returns a new MediaKeySession object, which represents a context for message exchange with a content decryption module (CDM).", 
                "name": "MediaKeys.createSession()"
            }, 
            {
                "descr": "Returns a Promise to a server certificate to be used to encrypt messages to the license server.", 
                "name": "MediaKeys.setServerCertificate()"
            }
        ], 
        "path": "dom/mediakeys", 
        "syntax": "MediaKeys interface of EncryptedMediaExtensions API the represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback. Properties None. Methods  MediaKeys.createSession()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeys.createSession": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeys.createSession", 
        "params": [], 
        "path": "dom/mediakeys/createsession", 
        "syntax": "MediaKeys.createSession()", 
        "type": "Encrypted Media"
    }, 
    "MediaKeys.setServerCertificate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaKeys.setServerCertificate", 
        "params": [], 
        "path": "dom/mediakeys/setservercertificate", 
        "syntax": "MediaKeys.setServerCertificate()", 
        "type": "Encrypted Media"
    }, 
    "MediaQueryList": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaQueryList", 
        "params": [
            {
                "descr": "The MediaQueryListListener to invoke when the media query's evaluated result changes.", 
                "name": "listener"
            }, 
            {
                "descr": "The MediaQueryListListener to stop calling on changes to the media query's evaluated result.", 
                "name": "listener"
            }
        ], 
        "path": "dom/mediaquerylist", 
        "syntax": "MediaQueryList object maintains a list of media queries on a document", 
        "type": "MediaQuery"
    }, 
    "MediaQueryListListener": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaQueryListListener", 
        "params": [], 
        "path": "dom/mediaquerylistlistener", 
        "syntax": "MediaQueryList object maintains a list of media queries on a document", 
        "type": "MediaQuery"
    }, 
    "MediaRecorder.canRecordMimeType": {
        "descr": "The MediaRecorder.canRecordMimeType() method returns a DOMString that indicates whether the value of MediaRecorder.mimeType is one the user agent can record.", 
        "name": "MediaRecorder.canRecordMimeType", 
        "params": [], 
        "path": "dom/mediarecorder/canrecordmimetype", 
        "syntax": "var canRecord = MediaRecorder.canRecordMimeType()", 
        "type": "Stream"
    }, 
    "MediaRecorder.constructor": {
        "descr": "The MediaRecorder() constructor creates a new MediaRecorder object.", 
        "name": "MediaRecorder.constructor", 
        "params": [
            {
                "descr": "The mime type you want to use as the recording container for the new MediaRecorder.", 
                "name": "mimeType Optional"
            }, 
            {
                "descr": "The media stream that will be recorded (for example, from a getUserMedia instance.)", 
                "name": "stream"
            }, 
            {
                "descr": "A dictionary object that can contain the following properties:  mimeType: The mime type you want to use as the recording container for the new MediaRecorder. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/mediarecorder/mediarecorder", 
        "syntax": "var m = new MediaRecorder(stream, options);", 
        "type": "Stream"
    }, 
    "MediaRecorder.mimeType": {
        "descr": "The MediaRecorder.mimeType read-only property returns the mime type that was selected as the recording container when it was created.", 
        "name": "MediaRecorder.mimeType", 
        "params": [], 
        "path": "dom/mediarecorder/mimetype", 
        "syntax": "var mimeType\u00a0= MediaRecorder.mimeType Values A DOMString. Example ...navigator.getUserMedia = (navigator.getUserMedia ||                          navigator.mozGetUserMedia ||                          navigator.msGetUserMedia ||                          navigator.webkitGetUserMedia);\n or if (navigator.getUserMedia) {  console.log('getUserMedia supported.');\n or   var constraints = { audio: true, video: true };  var chunks = [];  var onSuccess = function(stream) {\u00a0\u00a0\u00a0 var options = {\u00a0\u00a0\u00a0\u00a0\u00a0 audioBitsPerSecond : 128000,\u00a0\u00a0\u00a0\u00a0\u00a0 videoBitsPerSecond : 2500000,\u00a0\u00a0\u00a0\u00a0\u00a0 mimeType : 'video/mp4'\u00a0\u00a0\u00a0 }\u00a0\u00a0\u00a0 var mediaRecorder = new MediaRecorder(stream,options);\n or \u00a0\u00a0\u00a0 m = mediaRecorder;    m.mimeType; // would return 'video/mp4'...);", 
        "type": "Stream"
    }, 
    "MediaRecorder.ondataavailable": {
        "descr": "The MediaRecorder.ondataavailable event handler (part of the MediaRecorder API) handles the dataavailable event, allowing you to run code in response to Blob data being made available for use.", 
        "name": "MediaRecorder.ondataavailable", 
        "params": [
            {
                "descr": "Contains the captured media blob.", 
                "name": "data"
            }
        ], 
        "path": "dom/mediarecorder/ondataavailable", 
        "syntax": "MediaRecorder.ondataavailable = function(event) { ... }MediaRecorder.addEventListener('dataavailable', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.onerror": {
        "descr": "The MediaRecorder.onerror event handler (part of the MediaRecorder API) handles the DOMError event, allowing you to run code in response to fatal errors occurring that prevent media capture.", 
        "name": "MediaRecorder.onerror", 
        "params": [
            {
                "descr": "Contains information about the error that occurred.", 
                "name": "message"
            }
        ], 
        "path": "dom/mediarecorder/onerror", 
        "syntax": "MediaRecorder.onerror = function(event) { ... }MediaRecorder.addEventListener('error', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.onpause": {
        "descr": "The MediaRecorder.onpause event handler (part of the MediaRecorder API) handles the pause event, allowing you to run code in response to the media recording being paused.", 
        "name": "MediaRecorder.onpause", 
        "params": [], 
        "path": "dom/mediarecorder/onpause", 
        "syntax": "MediaRecorder.onpause = function(event) { ... }MediaRecorder.addEventListener('pause', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.onresume": {
        "descr": "The MediaRecorder.onresume event handler (part of the MediaRecorder API) handles the resume event, allowing you to run code in response to the media recording being resumed after pausing.", 
        "name": "MediaRecorder.onresume", 
        "params": [], 
        "path": "dom/mediarecorder/onresume", 
        "syntax": "MediaRecorder.onresume = function(event) { ... }MediaRecorder.addEventListener('resume', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.onstart": {
        "descr": "The MediaRecorder.onstartevent handler (part of the MediaRecorder API) handles the start event, allowing you to run code in response to media recording being started by a MediaRecorder.", 
        "name": "MediaRecorder.onstart", 
        "params": [], 
        "path": "dom/mediarecorder/onstart", 
        "syntax": "MediaRecorder.onstart = function(event) { ... }MediaRecorder.addEventListener('start', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.onstop": {
        "descr": "The MediaRecorder.onstop event handler (part of the MediaRecorder API) handles the stop event, allowing you to run code in response to media recording via a MediaRecorder being stopped.", 
        "name": "MediaRecorder.onstop", 
        "params": [], 
        "path": "dom/mediarecorder/onstop", 
        "syntax": "MediaRecorder.onstop = function(event) { ... }MediaRecorder.addEventListener('stop', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.onwarning": {
        "descr": "The MediaRecorder.onwarning event handler (part of the MediaRecorder API) handles the recordingwarning event, allowing you to run code in response to non-fatal errors being thrown during media recording via a MediaRecorder, which don't halt recording.", 
        "name": "MediaRecorder.onwarning", 
        "params": [
            {
                "descr": "Contains information about the error that occurred.", 
                "name": "message"
            }
        ], 
        "path": "dom/mediarecorder/onwarning", 
        "syntax": "MediaRecorder.onwarning = function(event) { ... }MediaRecorder.addEventListener('warning', function(event) { ... })", 
        "type": "Stream"
    }, 
    "MediaRecorder.pause": {
        "descr": "The Media.pause() method (part of the MediaRecorder API) is used to pause recording of media streams.", 
        "name": "MediaRecorder.pause", 
        "params": [], 
        "path": "dom/mediarecorder/pause", 
        "syntax": "MediaRecorder.pause()", 
        "type": "Stream"
    }, 
    "MediaRecorder.requestData": {
        "descr": "The MediaRecorder.requestData() method (part of the MediaRecorder API) is used to raise a dataavailable event containing a Blob object of the captured media as it was when the method was called. This can then be grabbed and manipulated as you wish.", 
        "name": "MediaRecorder.requestData", 
        "params": [], 
        "path": "dom/mediarecorder/requestdata", 
        "syntax": "MediaRecorder.requestData()", 
        "type": "Stream"
    }, 
    "MediaRecorder.resume": {
        "descr": "The MediaRecorder.resume() method (part of the MediaRecorder API) is used to resume media recording when it has been previously paused.", 
        "name": "MediaRecorder.resume", 
        "params": [], 
        "path": "dom/mediarecorder/resume", 
        "syntax": "MediaRecorder.resume()", 
        "type": "Stream"
    }, 
    "MediaRecorder.start": {
        "descr": "The MediaRecorder.start() method (part of the MediaRecorder API) is used to start capturing media into a Blob.", 
        "name": "MediaRecorder.start", 
        "params": [
            {
                "descr": "This parameter takes a value of milliseconds, and represents the length of media capture to return in each Blob. ", 
                "name": "timeslice Optional"
            }
        ], 
        "path": "dom/mediarecorder/start", 
        "syntax": "MediaRecorder.start(timeslice)", 
        "type": "Stream"
    }, 
    "MediaRecorder.state": {
        "descr": "The MediaRecorder.state read-only property returns the current state of the current MediaRecorder object.", 
        "name": "MediaRecorder.state", 
        "params": [], 
        "path": "dom/mediarecorder/state", 
        "syntax": "var state\u00a0= MediaRecorder.state Values A AnimationPlayState object containing one of the following values:    Enumeration Description     inactive Recording is not occuring \u2014 it has either not been started yet, or it has been started and then stopped.   recording Recording has been started and the UA is capturing data.   paused Recording has been started, then paused, but not yet stopped or resumed.    Example ...  record.onclick = function() {    mediaRecorder.start();\n or     console.log(mediaRecorder.state);\n or     // Will return \"recording\"    console.log(\"recorder started\");\n or   }...);", 
        "type": "Stream"
    }, 
    "MediaRecorder.stop": {
        "descr": "The MediaRecorder.stop() method (part of the MediaRecorder API) is used to stop media capture.", 
        "name": "MediaRecorder.stop", 
        "params": [], 
        "path": "dom/mediarecorder/stop", 
        "syntax": "MediaRecorder.stop()", 
        "type": "Stream"
    }, 
    "MediaRecorder.stream": {
        "descr": "The MediaRecorder.stream read-only property returns the stream that was passed into the MediaRecorder() constructor when the MediaRecorder was created.", 
        "name": "MediaRecorder.stream", 
        "params": [], 
        "path": "dom/mediarecorder/stream", 
        "syntax": "var stream\u00a0= MediaRecorder.stream Values The MediaStream passed into the MediaRecorder()", 
        "type": "Stream"
    }, 
    "MediaSource": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaSource", 
        "params": [
            {
                "descr": "Constructs and returns a new MediaSource object with no associated source buffers.", 
                "name": "MediaSource()"
            }, 
            {
                "descr": "Returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource.", 
                "name": "MediaSource.sourceBuffers Read only"
            }, 
            {
                "descr": "Returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within SourceBuffers \u2014 the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks.", 
                "name": "MediaSource.activeSourceBuffers Read only"
            }, 
            {
                "descr": "Returns an enum representing the state of the current MediaSource, whether it is not currently attached to a media element (closed), attached and ready to receive SourceBuffer objects (open), or attached but the stream has been ended via MediaSource.endOfStream() (ended.)", 
                "name": "MediaSource.readyState Read only"
            }, 
            {
                "descr": "Gets and sets the duration of the current media being presented.", 
                "name": "MediaSource.duration"
            }, 
            {
                "descr": "Creates a new SourceBuffer of the given MIME type and adds it to the MediaSource's SourceBuffers list.", 
                "name": "MediaSource.addSourceBuffer()"
            }, 
            {
                "descr": "Removes the given SourceBuffer from the SourceBuffers list associated with this MediaSource object.", 
                "name": "MediaSource.removeSourceBuffer()"
            }, 
            {
                "descr": "Signals the end of the stream.", 
                "name": "MediaSource.endOfStream()"
            }, 
            {
                "descr": "Returns a Boolean value indicating if the given MIME type is supported by the current user agent \u2014 this is, if it can successfully create SourceBuffer objects for that MIME type.", 
                "name": "Static methods  MediaSource.isTypeSupported()"
            }
        ], 
        "path": "dom/mediasource", 
        "syntax": "MediaSource interface represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent. Constructor  MediaSource()", 
        "type": "Media"
    }, 
    "MediaSource.activeSourceBuffers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.activeSourceBuffers", 
        "params": [], 
        "path": "dom/mediasource/activesourcebuffers", 
        "syntax": "activeSourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing a subset of the SourceBuffer objects contained within SourceBuffers \u2014 the list of objects providing the selected video track, enabled audio tracks, and shown/hidden text tracks. Syntax var myActiveSourceBuffers = mediaSource.activeSourceBuffers; Value A SourceBufferList. Example The following snippet is based on a simple example written by Nick Desaulniers (view the full demo live, or download the source for further investigation.)", 
        "type": "Media"
    }, 
    "MediaSource.addSourceBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.addSourceBuffer", 
        "params": [
            {
                "descr": "The MIME type of the source buffer you want to create.", 
                "name": "mimeType"
            }
        ], 
        "path": "dom/mediasource/addsourcebuffer", 
        "syntax": "addSourceBuffer()", 
        "type": "Media"
    }, 
    "MediaSource.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.constructor", 
        "params": [], 
        "path": "dom/mediasource/mediasource", 
        "syntax": "MediaSource()", 
        "type": "Media"
    }, 
    "MediaSource.duration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.duration", 
        "params": [], 
        "path": "dom/mediasource/duration", 
        "syntax": "duration property of the MediaSource interface gets and sets the duration of the current media being presented. Syntax mediaSource.duration = 5.5; // 5.5 secondsvar myDuration = mediaSource.duration; Value A double. A value in seconds is expected. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set a duration value that was negative, or NaN.   InvalidStateError MediaSource.readyState is not equal to open, or one or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating", 
        "type": "Media"
    }, 
    "MediaSource.endOfStream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.endOfStream", 
        "params": [
            {
                "descr": "A DOMString representing an error to throw when the end of the stream is reached. ", 
                "name": "endOfStreamError Optional"
            }
        ], 
        "path": "dom/mediasource/endofstream", 
        "syntax": "endOfStream()", 
        "type": "Media"
    }, 
    "MediaSource.isTypeSupported": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.isTypeSupported", 
        "params": [
            {
                "descr": "The MIME type that you want to test support for in the current browser.", 
                "name": "mimeType"
            }
        ], 
        "path": "dom/mediasource/istypesupported", 
        "syntax": "isTypeSupported()", 
        "type": "Media"
    }, 
    "MediaSource.readyState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.readyState", 
        "params": [], 
        "path": "dom/mediasource/readystate", 
        "syntax": "readyState read-only property of the MediaSource interface returns an enum representing the state of the current MediaSource. The three possible values are:  closed: The source is not currently attached to a media element. open: The source is attached to a media element and ready to receive SourceBuffer objects. ended: The source is attached to a media element but the stream has been ended via a call to MediaSource.endOfStream()", 
        "type": "Media"
    }, 
    "MediaSource.removeSourceBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.removeSourceBuffer", 
        "params": [
            {
                "descr": "The SourceBuffer object to be removed.", 
                "name": "sourceBuffer"
            }
        ], 
        "path": "dom/mediasource/removesourcebuffer", 
        "syntax": "removeSourceBuffer()", 
        "type": "Media"
    }, 
    "MediaSource.sourceBuffers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaSource.sourceBuffers", 
        "params": [], 
        "path": "dom/mediasource/sourcebuffers", 
        "syntax": "sourceBuffers read-only property of the MediaSource interface returns a SourceBufferList object containing the list of SourceBuffer objects associated with this MediaSource. Syntax var mySourceBuffers = mediaSource.sourceBuffers; Value A SourceBufferList. Example The following snippet is based on a simple example written by Nick Desaulniers (view the full demo live, or download the source for further investigation.)", 
        "type": "Media"
    }, 
    "MediaStream.active": {
        "descr": "The active read-only property of the MediaStream interface returns a Boolean value that will return to be true if the MediaStream is active, else false.", 
        "name": "MediaStream.active", 
        "params": [], 
        "path": "dom/mediastream/active", 
        "syntax": "var isActive = MediaStream.active; Value A Boolean value that returns true if the MediaStream is active, or false otherwise. Example var promise = navigator.mediaDevices.getUserMedia({ \u00a0 audio: true, \u00a0 video: true });\n or promise.then(function(stream) {  var startBtn = document.querySelector('#startBtn');\n or \u00a0 startBtn.disabled = stream.active; };));", 
        "type": "Stream"
    }, 
    "MediaStream.addTrack": {
        "descr": "The MediaStream.addTrack() method adds a new track to the stream. The track is specified as a parameter of type MediaStreamTrack.", 
        "name": "MediaStream.addTrack", 
        "params": [
            {
                "descr": "A MediaStreamTrack to add to the stream.", 
                "name": "track"
            }
        ], 
        "path": "dom/mediastream.addtrack", 
        "syntax": "stream.addTrack(track);", 
        "type": "Stream"
    }, 
    "MediaStream.getTrackById": {
        "descr": "The MediaStream.getTrackById() method returns a MediaStreamTrack object representing the track with the specified ID string. If there is no track with the specified ID, this method returns null.", 
        "name": "MediaStream.getTrackById", 
        "params": [
            {
                "descr": "A DOMString which identifies the track to be returned.", 
                "name": "id"
            }
        ], 
        "path": "dom/mediastream/gettrackbyid", 
        "syntax": "var track = MediaStream.getTrackById(id);", 
        "type": "Stream"
    }, 
    "MediaStream.id": {
        "descr": "The MediaStream.id() read-only property is a DOMString containing 36 characters denoting a unique identifier (GUID) for the object.", 
        "name": "MediaStream.id", 
        "params": [], 
        "path": "dom/mediastream/id", 
        "syntax": "var id = mediaStream.id; Example var p = navigator.mediaDevices.getUserMedia({ audio: true, video: true });\n or p.then(function(stream) {   console.log(stream.id);\n or };));", 
        "type": "Stream"
    }, 
    "MediaStreamAudioDestinationNode.stream": {
        "descr": "The stream property of the AudioContext interface represents a MediaStream containing a single AudioMediaStreamTrack with the same number of channels as the node itself.", 
        "name": "MediaStreamAudioDestinationNode.stream", 
        "params": [], 
        "path": "dom/mediastreamaudiodestinationnode/stream", 
        "syntax": "var audioCtx = new AudioContext();\n or var destination = audioCtx.createMediaStreamDestination();\n or var myStream = destination.stream;);", 
        "type": "Stream"
    }, 
    "MediaStreamEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MediaStreamEvent", 
        "params": [
            {
                "descr": "Contains the MediaStream containing the stream associated with the event.", 
                "name": "MediaStreamEvent.stream Read only"
            }, 
            {
                "descr": "Returns a new MediaStreamEvent. ", 
                "name": "MediaStreamEvent()"
            }
        ], 
        "path": "dom/mediastreamevent", 
        "syntax": "MediaStreamEvent interface represents events that occurs in relation to a MediaStream. Two events of this type can be thrown: addstream and removestream. Properties A MediaStreamEvent being an Event, this event also implements these properties.  MediaStreamEvent.stream Read only  Contains the MediaStream containing the stream associated with the event.  Constructors  MediaStreamEvent()", 
        "type": "Stream"
    }, 
    "MediaStreamEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaStreamEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the event, like addstream or removestream.", 
                "name": "type"
            }, 
            {
                "descr": "Is a MediaStreamEventInit dictionary, having the following fields:  \"stream\" of type MediaStream representing the stream being concerned by the event. ", 
                "name": "mediaStreamEventInit"
            }
        ], 
        "path": "dom/mediastreamevent/mediastreamevent", 
        "syntax": "MediaStreamEvent()", 
        "type": "Stream"
    }, 
    "MediaStreamEvent.stream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MediaStreamEvent.stream", 
        "params": [], 
        "path": "dom/mediastreamevent/stream", 
        "syntax": "MediaStreamEvent.stream returns the MediaStream associated with the event. Syntax  var stream = event.stream; Example pc.onaddstream = function( ev ) {                      alert(\"A stream (id: '\" +                             ev.stream.id +                             \"') has been added to this connection.\");\n or                    };);", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.enabled": {
        "descr": "The read-only property MediaStreamTrack.enabled returns a Boolean with a value of true if the track is enabled, that is allowed to render the media source stream; or false if it is disabled, that is not rendering the media source stream but silence and blackness. If the track has been disconnected, this value can be changed but has no more effect.", 
        "name": "MediaStreamTrack.enabled", 
        "params": [], 
        "path": "dom/mediastreamtrack/enabled", 
        "syntax": "var bool = track.enabled; Example Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'MediaStreamTrack.enabled' in that specification. Editor's Draft Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 24 (24) No support (Yes) ?         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 24.0 (24) No support ? ?     See also", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.id": {
        "descr": "The read-only property MediaStreamTrack.id returns a DOMString containing a unique identifier (GUID) for the track; it is generated by the browser.", 
        "name": "MediaStreamTrack.id", 
        "params": [], 
        "path": "dom/mediastreamtrack/id", 
        "syntax": "var id = track.id; Example Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'MediaStreamTrack.id' in that specification. Candidate Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes) Not supported (Yes) ?         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? Not supported ? ?     See also", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.kind": {
        "descr": "The read-only property MediaStreamTrack.kind returns a DOMString set to \"audio\" if the track is an audio track and to \"video\", if it is a video track. It doesn't change if the track is deassociated from its source.", 
        "name": "MediaStreamTrack.kind", 
        "params": [], 
        "path": "dom/mediastreamtrack/kind", 
        "syntax": "var type = track.kind; Value The possible values are a DOMString with on of the following values:  \"audio\": the track is an audio track. \"video\": the track is a video track.  Example  Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'MediaStreamTrack.kind' in that specification. Candidate Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes) Not supported (Yes) ?         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? Not supported ? ?     See also", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.label": {
        "descr": "The read-only property MediaStreamTrack.label returns a DOMString containing a user agent-assigned label that identifies the track source, as in \"internal microphone\". The string may be left empty and is empty as long as no source has been connected. When the track is deassociated from its source, the label is not changed.", 
        "name": "MediaStreamTrack.label", 
        "params": [], 
        "path": "dom/mediastreamtrack/label", 
        "syntax": "var name = track.label; Example Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'MediaStreamTrack.label' in that specification. Candidate Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes) Not supported (Yes) ?         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? Not supported ? ?     See also", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.onmute": {
        "descr": "The MediaStreamTrack.onmute event handler is a property called when the mute event is received. Such an event is sent when the track is temporarily not able to send data.", 
        "name": "MediaStreamTrack.onmute", 
        "params": [], 
        "path": "dom/mediastreamtrack/onmute", 
        "syntax": "track.onmute = function; Values  function is the name of a user-defined function, without the ()", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.onoverconstrained": {
        "descr": "The MediaStreamTrack.onoverconstrained event handler is a property called when the overconstrained event is received. Such an event is sent when the track is again able to send data.", 
        "name": "MediaStreamTrack.onoverconstrained", 
        "params": [], 
        "path": "dom/mediastreamtrack/onoverconstrained", 
        "syntax": "track.onoverconstrained = function; Values  function is the name of a user-defined function, without the ()", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.onunmute": {
        "descr": "The MediaStreamTrack.onunmute event handler is a property called when the unmute event is received. Such an event is sent when the track is again able to send data.", 
        "name": "MediaStreamTrack.onunmute", 
        "params": [], 
        "path": "dom/mediastreamtrack/onunmute", 
        "syntax": "track.onunmute = function; Values  function is the name of a user-defined function, without the ()", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.readyState": {
        "descr": "The read-only property MediaStreamTrack.readyState returns an enumerated value giving the status of the track.", 
        "name": "MediaStreamTrack.readyState", 
        "params": [], 
        "path": "dom/mediastreamtrack/readystate", 
        "syntax": "var state = track.readyState; Value It takes one of the following values:  \"live\" which indicates that an input is connected and does its best-effort in providing real-time data. In that case, the output of data can be switched on or off using the MediaStreamTrack.enabled attribute. \"ended\" which indicates that the input is not giving any more data and will never provide new data.  Example Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'MediaStreamTrack.readyState' in that specification. Candidate Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes) Not supported (Yes) ?         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? Not supported ? ?     See also", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.remote": {
        "descr": "The MediaStreamTrack.remote read-only property allows Javascript to know whether a WebRTC MediaStreamTrack is from a remote source or a local one. It returns a Boolean with a value of true if the track is sourced remotely (that is, sourced by an RTCPeerConnection), or false if it is sourced locally.", 
        "name": "MediaStreamTrack.remote", 
        "params": [], 
        "path": "dom/mediastreamtrack/remote", 
        "syntax": "var bool \u200b= track.remote; Specifications    Specification Status Comment     Media Capture and StreamsThe definition of 'MediaStreamTrack.remote' in that specification. Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 48.0 (Yes) Not supported (Yes) ?         Feature Android Android Webview Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported 48.0 (Yes) Not supported (Yes) ? 48.0     See also", 
        "type": "Stream"
    }, 
    "MediaStreamTrack.stop": {
        "descr": "The MediaStreamTrack.stop() method stops playing the source associated with the track. Both the source and the track are deassociated. The track state is set to ended.", 
        "name": "MediaStreamTrack.stop", 
        "params": [], 
        "path": "dom/mediastreamtrack/stop", 
        "syntax": "track.stop();", 
        "type": "Stream"
    }, 
    "MessageChannel.constructor": {
        "descr": "The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.", 
        "name": "MessageChannel.constructor", 
        "params": [], 
        "path": "dom/messagechannel/messagechannel", 
        "syntax": "var channel = new MessageChannel();", 
        "type": "Web Messaging"
    }, 
    "MessageChannel.port1": {
        "descr": "The port1 read-only property of the MessageChannel interface returns the first port of the message channel, the port attached to the context that originated the channel.", 
        "name": "MessageChannel.port1", 
        "params": [], 
        "path": "dom/messagechannel/port1", 
        "syntax": "channel.port1; Value A MessagePort object, the first port of the channel, that is the port attached to the context that originated the channel. Example In the following code block, you can see a new channel being created using the MessageChannel()", 
        "type": "Web Messaging"
    }, 
    "MessageChannel.port2": {
        "descr": "The port2 read-only property of the MessageChannel interface returns second port of the message channel, the port attached to the context at the other end of the channel, which the message is initially sent to.", 
        "name": "MessageChannel.port2", 
        "params": [], 
        "path": "dom/messagechannel/port2", 
        "syntax": "channel.port2; Value A MessagePort object representing the second port of the channel, the port attached to the context at the other end of the channel. Example In the following code block, you can see a new channel being created using the MessageChannel.MessageChannel constructor. When the IFrame has loaded, we pass port2 to the IFrame using MessagePort.postMessage", 
        "type": "Web Messaging"
    }, 
    "MessagePort.close": {
        "descr": "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.", 
        "name": "MessagePort.close", 
        "params": [], 
        "path": "dom/messageport/close", 
        "syntax": "port.close()", 
        "type": "Web Messaging"
    }, 
    "MessagePort.onmessage": {
        "descr": "The onmessage event handler of the MessagePort interface is an EventListener, called whenever an MessageEvent of type message is fired on the port \u2014 that is, when the port receives a message.", 
        "name": "MessagePort.onmessage", 
        "params": [], 
        "path": "dom/messageport/onmessage", 
        "syntax": "channel.onmessage = function() { ... };", 
        "type": "Web Messaging"
    }, 
    "MessagePort.postMessage": {
        "descr": "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.", 
        "name": "MessagePort.postMessage", 
        "params": [
            {
                "descr": "The message you want to send through the channel. ", 
                "name": "message"
            }, 
            {
                "descr": "(optional) Objects to be transferred \u2014 these objects have their ownership transferred to the receiving browsing context, so are no longer usable by the sending browsing context.", 
                "name": "[, transfer]"
            }
        ], 
        "path": "dom/messageport/postmessage", 
        "syntax": "port.postMessage(message [,transfer]);", 
        "type": "Web Messaging"
    }, 
    "MessagePort.start": {
        "descr": "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using MessageChannel.onmessage.", 
        "name": "MessagePort.start", 
        "params": [], 
        "path": "dom/messageport/start", 
        "syntax": "port.start()", 
        "type": "Web Messaging"
    }, 
    "Method definitions": {
        "descr": "Starting with ECMAScript 2015 (ES6), a shorter syntax for method definitions on objects initializers is introduced. It is a shorthand for a function assigned to the method's name.", 
        "name": "Method definitions", 
        "params": [], 
        "path": "javascript/functions/method_definitions", 
        "syntax": "var obj = {  property( parameters\u2026 ) {},  *generator( parameters\u2026 ) {},// also with computed keys:  [property]( parameters\u2026 ) {},  *[generator]( parameters\u2026 ) {},// compare ES5 getter/setter syntax:  get property() {},  set property(value) {}};", 
        "type": "Function"
    }, 
    "MouseEvent.altKey": {
        "descr": "The MouseEvent.altKey read-only property is a Boolean indicates if the alt key was pressed (true) or not (false) when the event occurred.", 
        "name": "MouseEvent.altKey", 
        "params": [], 
        "path": "dom/mouseevent/altkey", 
        "syntax": "var altKeyPressed = instanceOfMouseEvent.altKey Examples <html><head><title>altKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"ALT key pressed: \" + e.altKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key,with or without holding down the ALT key.<br />You can also use the SHIFT key together with the ALT key.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.button": {
        "descr": "The MouseEvent.button read-only property indicates which button was pressed on the mouse to trigger the event.", 
        "name": "MouseEvent.button", 
        "params": [], 
        "path": "dom/mouseevent/button", 
        "syntax": "var buttonPressed = instanceOfMouseEvent.button Return value A number representing a given button:  0: Main button pressed, usually the left button or the un-initialized state 1: Auxiliary button pressed, usually the wheel button or the middle button (if present) 2", 
        "type": "Events"
    }, 
    "MouseEvent.buttons": {
        "descr": "The MouseEvent.buttons read-only property indicates which buttons are pressed on the mouse when the event is triggered.", 
        "name": "MouseEvent.buttons", 
        "params": [], 
        "path": "dom/mouseevent/buttons", 
        "syntax": "var buttonPressed = instanceOfMouseEvent.buttons Return value A number representing one or more buttons. For more than one button pressed, the values are combined.  0\u00a0 : No button or un-initialized 1\u00a0 : Left button 2\u00a0 : Right button 4\u00a0 : Wheel button or middle button 8\u00a0 : 4th button (typically the \"Browser Back\" button) 16", 
        "type": "Events"
    }, 
    "MouseEvent.clientX": {
        "descr": "The MouseEvent.clientX read-only property provides the horizontal coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientX value of 0, regardless of whether the page is scrolled horizontally.", 
        "name": "MouseEvent.clientX", 
        "params": [], 
        "path": "dom/mouseevent/clientx", 
        "syntax": "var x = instanceOfMouseEvent.clientX Return value A number Example <!DOCTYPE html> <html><head><title>clientX\\clientY example</title><script>function showCoords(evt){  alert(    \"clientX value: \" + evt.clientX + \"\\n\" +    \"clientY value: \" + evt.clientY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.clientY": {
        "descr": "The MouseEvent.clientY read-only property returns the vertical coordinate within the application's client area at which the event occurred (as opposed to the coordinates within the page). For example, clicking in the top-left corner of the client area will always result in a mouse event with a clientY value of 0, regardless of whether the page is scrolled vertically.", 
        "name": "MouseEvent.clientY", 
        "params": [], 
        "path": "dom/mouseevent/clienty", 
        "syntax": "var y = instanceOfMouseEvent.clientY Return value A number Example <html><head><title>clientX\\clientY example</title><script type=\"text/javascript\">function showCoords(evt){  alert(    \"clientX value: \" + evt.clientX + \"\\n\"    + \"clientY value: \" + evt.clientY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.constructor": {
        "descr": "The MouseEvent() constructor creates a new MouseEvent.", 
        "name": "MouseEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a MouseEventInit dictionary, having the following fields:  \"screenX\", optional and defaulting to 0, of type long, that is the horizontal position of the mouse event on the user's screen; setting this value doesn't move the mouse pointer. \"screenY\", optional and defaulting to 0, of type long, that is the vertical position of the mouse event on the user's screen; setting this value doesn't move the mouse pointer. \"clientX\", optional and defaulting to 0, of type long, that is the horizontal position of the mouse event on the client window of user's screen; setting this value doesn't move the mouse pointer. \"clientY\", optional and defaulting to 0, of type long, that is the vertical position of the mouse event on the client window of the user's screen; setting this value doesn't move the mouse pointer. \"ctrlKey\", optional and defaulting to false, of type Boolean, that indicates if the ctrl key was simultaneously pressed. \"shiftKey\", optional and defaulting to false, of type Boolean, that indicates if the shift key was simultaneously pressed. \"altKey\", optional and defaulting to false, of type Boolean, that indicates if the alt key was simultaneously pressed. \"metaKey\", optional and defaulting to false, of type Boolean, that indicates if the meta key was simultaneously pressed. \"button\", optional and defaulting to 0, of type short, that describes which button is pressed during events related to the press or release of a button:    Value Meaning     0 Main button pressed (usually the left button) or un-initialized   1 Auxiliary button pressed (usually the middle button)   2 Secondary button pressed (usually the right button)     \"buttons\", optional and defaulting to 0, of type unsigned short, that describes which buttons are pressed when the event is launched:    Bit-field value Meaning     0 No button pressed   1 Main button pressed (usually the left button)   2 Secondary button pressed (usually the right button)   4 Auxiliary button pressed (usually the middle button)     \"relatedTarget\", optional and defaulting to null, of type EventTarget, that is the element just left (in case of a mouseenter or mouseover) or is entering (in case of a mouseout or mouseleave). \"region\", optional and defaulting to null, of type DOMString, is the id of the hit region affected by the event. The absence of any hit region is affected, is represented by the null value.   The MouseEventInit dictionary also accepts fields from UIEventInit and from EventInit dictionaries.", 
                "name": "mouseEventInit Optional"
            }
        ], 
        "path": "dom/mouseevent/mouseevent", 
        "syntax": "event = new MouseEvent(typeArg, mouseEventInit);", 
        "type": "Events"
    }, 
    "MouseEvent.ctrlKey": {
        "descr": "The MouseEvent.ctrlKey read-only property returns a Boolean that indicates if the control key was pressed (true) or not (false) when the event occured.", 
        "name": "MouseEvent.ctrlKey", 
        "params": [], 
        "path": "dom/mouseevent/ctrlkey", 
        "syntax": "var ctrlKeyPressed = instanceOfMouseEvent.ctrlKey Return value A boolean Example <html><head><title>ctrlKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"CTRL key pressed: \" + e.ctrlKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key, with or without holding down the CTRL key.<br />You can also use the SHIFT key together with the CTRL key.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.getModifierState": {
        "descr": "The MouseEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (i.e., the modifier key is pressed or locked), otherwise, false.", 
        "name": "MouseEvent.getModifierState", 
        "params": [
            {
                "descr": "A modifier key value. The value must be one of the KeyboardEvent.key values which represent modifier keys or \"Accel\". ", 
                "name": "keyArg"
            }
        ], 
        "path": "dom/mouseevent/getmodifierstate", 
        "syntax": "var active =\u200b event.getModifierState(keyArg);", 
        "type": "Events"
    }, 
    "MouseEvent.metaKey": {
        "descr": "The MouseEvent.metaKey read-only property returning a Boolean that indicates if the Meta key was pressed (true) or not (false) when the event occured.", 
        "name": "MouseEvent.metaKey", 
        "params": [], 
        "path": "dom/mouseevent/metakey", 
        "syntax": "var metaKeyPressed = instanceOfMouseEvent.metaKey Return value A boolean Example  function goInput(e) { // checks metaKey and   if (e.metaKey) {        // passes event along     superSizeOutput(e);\n or    } else {     doOutput(e);\n or    } });", 
        "type": "Events"
    }, 
    "MouseEvent.movementX": {
        "descr": "The MouseEvent.movementX read-only property provides the shift in the X coordinate of the mouse pointer between that event and the previous mousemove event. In other words, the value of that property is computed that way : currentEvent.movementX = currentEvent.screenX - previousEvent.screenX.", 
        "name": "MouseEvent.movementX", 
        "params": [], 
        "path": "dom/mouseevent/movementx", 
        "syntax": "var xShift = instanceOfMouseEvent.movementX Return value A number Specifications    Specification Status Comment   Pointer LockThe definition of 'MouseEvent.movementX' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support  1.0 (1.7 or earlier) moz 41 (41)", 
        "type": "Events"
    }, 
    "MouseEvent.movementY": {
        "descr": "The MouseEvent.movementY read-only property provides the shift in the Y coordinate of the mouse pointer between that event and the previous mousemove event. In other words, the value of that property is computed that way : currentEvent.movementY = currentEvent.screenY - previousEvent.screenY.", 
        "name": "MouseEvent.movementY", 
        "params": [], 
        "path": "dom/mouseevent/movementy", 
        "syntax": "var yShift = instanceOfMouseEvent.movementY Return value A number Specifications    Specification Status Comment   Pointer LockThe definition of 'MouseEvent.movementY' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Firefox (Gecko) Chrome Internet Explorer Opera Safari   Basic support 1.0 (1.7 or earlier) moz 41 (41) 22.0 webkit 37.0 unprefixed No support ? No support         Feature Firefox Mobile (Gecko) Android Android Webview IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support 1.0 (1.0) moz 41.0 (41) ? ? ? ? ? (Yes) webkit 37.0 unprefixed     See also", 
        "type": "Events"
    }, 
    "MouseEvent.offsetX": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "MouseEvent.offsetX", 
        "params": [], 
        "path": "dom/mouseevent/offsetx", 
        "syntax": "MouseEvent.offsetX read-only property provides the offset in the X coordinate of the mouse pointer between that event and the padding edge of the target node. Syntax var xOffset = instanceOfMouseEvent.offsetX; Return value An integer. Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'MouseEvent' in that specification. Working Draft Initial definition    Browser compatibility", 
        "type": "CSS"
    }, 
    "MouseEvent.offsetY": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MouseEvent.offsetY", 
        "params": [], 
        "path": "dom/mouseevent/offsety", 
        "syntax": "MouseEvent.offsetY read-only property provides the offset in the Y coordinate of the mouse pointer between that event and the padding edge of the target node. Syntax var yOffset = instanceOfMouseEvent.offsetY; Return value An integer. Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'MouseEvent' in that specification. Working Draft Initial definition    Browser compatibility", 
        "type": "CSS"
    }, 
    "MouseEvent.pageX": {
        "descr": "The MouseEvent.pageX read-only property returns the horizontal coordinate of the event relative to the whole document.", 
        "name": "MouseEvent.pageX", 
        "params": [], 
        "path": "dom/mouseevent/pagex", 
        "syntax": "var pos = event.pageX Examples var pageX = event.pageX; pageX is an integer value in pixels for the X coordinate of the mouse pointer, relative to the whole document, when the mouse event fired. This property takes into account any horizontal scrolling of the page. Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'pageX' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "CSS"
    }, 
    "MouseEvent.pageY": {
        "descr": "The MouseEvent.pageY read-only property returns the vertical coordinate of the event relative to the whole document.", 
        "name": "MouseEvent.pageY", 
        "params": [], 
        "path": "dom/mouseevent/pagey", 
        "syntax": "var pos = event.pageY Examples var pageY = event.pageY; pageY is an integer value in pixels for the Y coordinate of the mouse pointer, relative to the whole document, when the mouse event fired. This property takes into account any vertical scrolling of the page. Specifications    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'pageY' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "CSS"
    }, 
    "MouseEvent.region": {
        "descr": "The MouseEvent.region read-only property returns the id of the canvas hit region affected by the event. If no hit region is affected, null is returned.", 
        "name": "MouseEvent.region", 
        "params": [], 
        "path": "dom/mouseevent/region", 
        "syntax": "var hitRegion = instanceOfMouseEvent.region Return value A DOMString representing the id of the hit region. Example <canvas id=\"canvas\"></canvas><script>var canvas = document.getElementById(\"canvas\");\n or var ctx = canvas.getContext(\"2d\");\n or ctx.beginPath();\n or ctx.arc(70, 80, 10, 0, 2 * Math.PI, false);\n or ctx.fill();\n or ctx.addHitRegion({id: \"circle\"});\n or canvas.addEventListener(\"mousemove\", function(event){\u00a0 if(event.region) {\u00a0\u00a0\u00a0 console.log(\"hit region: \" + event.region);\n or \u00a0 }});\n or </script>);", 
        "type": "Events"
    }, 
    "MouseEvent.relatedTarget": {
        "descr": "The MouseEvent.relatedTarget read-only property is the secondary target for the event, if there is one. That is:", 
        "name": "MouseEvent.relatedTarget", 
        "params": [], 
        "path": "dom/mouseevent/relatedtarget", 
        "syntax": "var tgt = instanceOfMouseEvent.relatedTarget Return value An EventTarget object or null. Example <!DOCTYPE html><html><head><style>div > div {  height: 128px;  width: 128px;}#top    { background-color: red; }#bottom { background-color: blue; }</style><script>function outListener(event) {  console.log(\"exited \" + event.target.id + \" for \" + event.relatedTarget.id);\n or }function overListener(event) {  console.log(\"entered \" + event.target.id + \" from \" + event.relatedTarget.id);\n or }function loadListener() {  var top = document.getElementById(\"top\"),       bottom = document.getElementById(\"bottom\");\n or   top.addEventListener(\"mouseover\", overListener);\n or   top.addEventListener(\"mouseout\", outListener);\n or   bottom.addEventListener(\"mouseover\", overListener);\n or   bottom.addEventListener(\"mouseout\", outListener);\n or }</script></head><body onload=\"loadListener();\n or \"><div id=\"outer\">  <div id=\"top\"></div>  <div id=\"bottom\"></div></div></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.screenX": {
        "descr": "The MouseEvent.screenX read-only property provides the horizontal coordinate of the mouse pointer in global (screen) coordinates.", 
        "name": "MouseEvent.screenX", 
        "params": [], 
        "path": "dom/mouseevent/screenx", 
        "syntax": "var pixelNumber = instanceOfMouseEvent.screenX Return value  pixelNumber is the offset from the left side of the screen in pixels.  Example <html><head><title>screenX\\screenY example</title><script type=\"text/javascript\">function showCoords(evt){  alert(    \"screenX value: \" + evt.screenX + \"\\n\"    + \"screenY value: \" + evt.screenY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.screenY": {
        "descr": "The MouseEvent.screenY read-only property provides the vertical coordinate of the mouse pointer in global (screen) coordinates.", 
        "name": "MouseEvent.screenY", 
        "params": [], 
        "path": "dom/mouseevent/screeny", 
        "syntax": "var pixelNumber = instanceOfMouseEvent.screenY Return value  pixelNumber is the offset from the top of the screen in pixels.  Example <html><head><title>screenX\\screenY example</title><script type=\"text/javascript\">function showCoords(evt){  alert(    \"screenX value: \" + evt.screenX + \"\\n\"    + \"screenY value: \" + evt.screenY + \"\\n\"  );\n or }</script></head><body onmousedown=\"showCoords(event)\"><p>To display the mouse coordinates click anywhere on the page.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.shiftKey": {
        "descr": "The MouseEvent.shiftKey read-only property indicates if the shift key was pressed (true) or not (false) when the event occurred.", 
        "name": "MouseEvent.shiftKey", 
        "params": [], 
        "path": "dom/mouseevent/shiftkey", 
        "syntax": "var shiftKeyPressed = instanceOfMouseEvent.shiftKey Return value A boolean Example <html><head><title>shiftKey example</title><script type=\"text/javascript\">function showChar(e){  alert(    \"Key Pressed: \" + String.fromCharCode(e.charCode) + \"\\n\"    + \"charCode: \" + e.charCode + \"\\n\"    + \"SHIFT key pressed: \" + e.shiftKey + \"\\n\"    + \"ALT key pressed: \" + e.altKey + \"\\n\"  );\n or }</script></head><body onkeypress=\"showChar(event);\n or \"><p>Press any character key, with or without holding down the SHIFT key.<br />You can also use the SHIFT key together with the ALT key.</p></body></html>);", 
        "type": "Events"
    }, 
    "MouseEvent.x": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MouseEvent.x", 
        "params": [], 
        "path": "dom/mouseevent/x", 
        "syntax": "MouseEvent.x property is an alias for the MouseEvent.clientX", 
        "type": "CSS"
    }, 
    "MouseEvent.y": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "MouseEvent.y", 
        "params": [], 
        "path": "dom/mouseevent/y", 
        "syntax": "MouseEvent.y property is an alias for the MouseEvent.clientY", 
        "type": "CSS"
    }, 
    "Multiple attribute selector [name=\"value\"][name2=\"value2\u2033]": {
        "descr": "Finds all inputs that have an id attribute and whose name attribute ends with man and sets the value.", 
        "name": "Multiple attribute selector [name=\"value\"][name2=\"value2\u2033]", 
        "params": [], 
        "path": "jquery/multiple-attribute-selector", 
        "syntax": "attributeMultiple selector  Description: Matches elements that match all of the specified attribute filters.   version added: 1.0jQuery( \"[attributeFilter1][attributeFilter2][attributeFilterN]\" ) attributeFilter1: An attribute filter.", 
        "type": "Selectors"
    }, 
    "Multiple selector (\"selector1, selector2, selectorN\"": {
        "descr": "You can specify any number of selectors to combine into a single result. This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .add() method.", 
        "name": "Multiple selector (\"selector1, selector2, selectorN\"", 
        "params": [], 
        "path": "jquery/multiple-selector", 
        "syntax": "multiple selector  Description: Selects the combined results of all the specified selectors.   version added: 1.0jQuery( \"selector1, selector2, selectorN\" ) selector1: Any valid selector.", 
        "type": "Selectors"
    }, 
    "MutationObserver": {
        "descr": "MutationObserver provides developers a way to react to changes in a DOM. It is designed as a replacement for Mutation Events defined in the DOM3 Events specification.", 
        "name": "MutationObserver", 
        "params": [
            {
                "descr": "The function which will be called on each DOM mutation. ", 
                "name": "callback"
            }, 
            {
                "descr": "The Node on which to observe DOM mutations.", 
                "name": "target"
            }, 
            {
                "descr": "A MutationObserverInit object, specifies which DOM mutations should be reported.", 
                "name": "options"
            }
        ], 
        "path": "dom/mutationobserver", 
        "syntax": "callback The function which will be called on each DOM mutation. The observer will call this function with two arguments. The first is an array of objects, each of type MutationRecord. The second is this MutationObserver instance.  Instance methods    void observe( Node", 
        "type": "Miscellaneous"
    }, 
    "NaN": {
        "descr": "The global NaN property is a value representing Not-A-Number.", 
        "name": "NaN", 
        "params": [], 
        "path": "javascript/global_objects/nan", 
        "syntax": "NaN Description NaN is a property of the global object. The initial value of NaN is Not-A-Number \u2014 the same as the value of Number.NaN. In modern browsers, NaN is a non-configurable, non-writable property. Even when this is not the case, avoid overriding it. It is rather rare to use NaN in a program. It is the returned value when Math functions fail (Math.sqrt(-1)", 
        "type": "Global Objects"
    }, 
    "NamedNodeMap.getNamedItem": {
        "descr": "The NamedNodeMap.getNamedItem() method returns the Attr corresponding to the given name, or null if there is no corresponding attribute.", 
        "name": "NamedNodeMap.getNamedItem", 
        "params": [], 
        "path": "dom/namednodemap/getnameditem", 
        "syntax": "myAttr = attrs.getNamedItem(name)", 
        "type": "Miscellaneous"
    }, 
    "Network Information API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Network Information API", 
        "params": [
            {
                "descr": "Provides information about the connection a device is using to commuinicate with the network and provides a means for scripts to be notified if the connection type changes. ", 
                "name": "NetworkInformation"
            }
        ], 
        "path": "dom/network_information_api", 
        "syntax": "NetworkInformation interface and a single property to the Navigator interface: Navigator.connection. Detecting connection changes This example watches for changes to the user's connection. var connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;var type = connection.type;function updateConnectionStatus() {  console.log(\"Connection type is change from \" + type + \" to \" + connection.type);\n or }connection.addEventListener('typechange', updateConnectionStatus);", 
        "type": "Network Information"
    }, 
    "NetworkInformation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "NetworkInformation", 
        "params": [
            {
                "descr": "Returns the type of connection a device is using to communicate with the network. ", 
                "name": "NetworkInformation.type Read only"
            }, 
            {
                "descr": "Returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.", 
                "name": "NetworkInformation.downlinkMax Read only"
            }, 
            {
                "descr": "The event that's fired when connection information changes and the change is fired on this object.", 
                "name": "NetworkInformation.onchange"
            }
        ], 
        "path": "dom/networkinformation", 
        "syntax": "NetworkInformation interface provides information about the connection a device is using to commuinicate with the network and provides a means for scripts to be notified if the connection type changes. The NetworkInformation interfaces cannot be instantiated. It is instead accessed through the connection property of the Navigator interface. Properties This interface also inherits properties of its parent, EventTarget.  NetworkInformation.type Read only  Returns the type of connection a device is using to communicate with the network. It will be one of the following values:  bluetooth cellular ethernet none wifi wimax other unknown   NetworkInformation.downlinkMax", 
        "type": "Network Information"
    }, 
    "NetworkInformation.downlinkMax": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "NetworkInformation.downlinkMax", 
        "params": [], 
        "path": "dom/networkinformation/downlinkmax", 
        "syntax": "NetworkInformation.downlinkMax read-only property returns the maximum downlink speed, in megabits per second (Mbps), for the underlying connection technology.", 
        "type": "Network Information"
    }, 
    "NetworkInformation.onchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NetworkInformation.onchange", 
        "params": [], 
        "path": "dom/networkinformation/onchange", 
        "syntax": "NetworkInformation.onchange event handler contains the code that is fired when connection information changes, and the change is received by the NetworkInformation object.. Syntax netInfo.onchange = function() { ... }", 
        "type": "Network Information"
    }, 
    "NetworkInformation.type": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NetworkInformation.type", 
        "params": [], 
        "path": "dom/networkinformation/type", 
        "syntax": "NetworkInformation.type read-only property returns the type of connection a device is using to communicate with the network. Syntax var type = netInfo.type Return value An enumerated value that is one of the following values:  \"bluetooth\" \"cellular\" \"ethernet\" \"none\" \"wifi\" \"wimax\" \"other\" \"unknown\"  Specifications    Specification Status Comment     Network Information APIThe definition of 'type' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 31 (31) Not supported Not supported Not supported   unknown", 
        "type": "Network Information"
    }, 
    "Next adjacent selector (\"prev + next\"": {
        "descr": "One important point to consider with both the next adjacent sibling selector (prev + next) and the general sibling selector (prev ~ siblings) is that the elements on either side of the combinator must share the same parent.", 
        "name": "Next adjacent selector (\"prev + next\"", 
        "params": [], 
        "path": "jquery/next-adjacent-selector", 
        "syntax": "next adjacent selector  Description: Selects all next elements matching \"next\" that are immediately preceded by a sibling \"prev\".   version added: 1.0jQuery( \"prev + next\" ) prev: Any valid selector.", 
        "type": "Selectors"
    }, 
    "Next siblings selector (\"prev ~ siblings\"": {
        "descr": "The notable difference between (prev + next) and (prev ~ siblings) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.", 
        "name": "Next siblings selector (\"prev ~ siblings\"", 
        "params": [], 
        "path": "jquery/next-siblings-selector", 
        "syntax": "next siblings selector  Description: Selects all sibling elements that follow after the \"prev\" element, have the same parent, and match the filtering \"siblings\" selector.   version added: 1.0jQuery( \"prev ~ siblings\" ) prev: Any valid selector.", 
        "type": "Selectors"
    }, 
    "Node": {
        "descr": "A Node is an interface from which a number of DOM types inherit, and allows these various types to be treated (or tested) similarly.", 
        "name": "Node", 
        "params": [
            {
                "descr": "Returns a DOMString representing the base URL. ", 
                "name": "Node.baseURI Read only"
            }, 
            {
                "descr": "(Not available to web content.) The read-only nsIURI object representing the base URI for the element.", 
                "name": "Node.baseURIObject"
            }, 
            {
                "descr": "Returns a live NodeList containing all the children of this node. ", 
                "name": "Node.childNodes Read only"
            }, 
            {
                "descr": "Returns a Node representing the first direct child node of the node, or null if the node has no child.", 
                "name": "Node.firstChild Read only"
            }, 
            {
                "descr": "Returns a Node representing the last direct child node of the node, or null if the node has no child.", 
                "name": "Node.lastChild Read only"
            }, 
            {
                "descr": "Returns a DOMString representing the local part of the qualified name of an element. ", 
                "name": "Node.localName Read only"
            }, 
            {
                "descr": "The namespace URI of this node, or null if it is no namespace. ", 
                "name": "Node.namespaceURI Read only"
            }, 
            {
                "descr": "Returns a Node representing the next node in the tree, or null if there isn't such node.", 
                "name": "Node.nextSibling Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the name of the Node. ", 
                "name": "Node.nodeName Read only"
            }, 
            {
                "descr": "A nsIPrincipal representing the node principal.", 
                "name": "Node.nodePrincipal"
            }, 
            {
                "descr": "Returns an unsigned short representing the type of the node. ", 
                "name": "Node.nodeTypeRead only"
            }, 
            {
                "descr": "Is a DOMString representing the value of an object. ", 
                "name": "Node.nodeValue"
            }, 
            {
                "descr": "Returns the Document that this node belongs to. ", 
                "name": "Node.ownerDocument Read only"
            }, 
            {
                "descr": "Returns a Node that is the parent of this node. ", 
                "name": "Node.parentNode Read only"
            }, 
            {
                "descr": "Returns an Element that is the parent of this node. ", 
                "name": "Node.parentElement Read only"
            }, 
            {
                "descr": "Is a DOMString representing the namespace prefix of the node, or null if no prefix is specified.", 
                "name": "Node.prefix Read only"
            }, 
            {
                "descr": "Returns a Node representing the previous node in the tree, or null if there isn't such node.", 
                "name": "Node.previousSibling Read only"
            }, 
            {
                "descr": "Returns a Node object representing the topmost node in the tree, or the current node if it's the topmost node in the tree. ", 
                "name": "Node.rootNode Read only"
            }, 
            {
                "descr": "Is a DOMString representing the textual content of an element and all its descendants.", 
                "name": "Node.textContent"
            }, 
            {
                "descr": "Insert a Node as the last child node of this element.", 
                "name": "Node.appendChild()"
            }, 
            {
                "descr": "Clone a Node, and optionally, all of its contents. ", 
                "name": "Node.cloneNode()"
            }, 
            {
                "descr": "Allows a user to get some DOMUserData from the node.", 
                "name": "Node.compareDocumentPosition() Node.contains() Node.getFeature()  Node.getUserData()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has any attributes, or not.", 
                "name": "Node.hasAttributes()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has any child nodes, or not.", 
                "name": "Node.hasChildNodes()"
            }, 
            {
                "descr": "Inserts the first Node given in a parameter immediately before the second, child of this element, Node.", 
                "name": "Node.insertBefore()"
            }, 
            {
                "descr": "Returns a Boolean which indicates whether or not two nodes are of the same type and all their defining data points match.", 
                "name": "Node.isDefaultNamespace() Node.isEqualNode()"
            }, 
            {
                "descr": "Returns a Boolean value indicating whether or not the two nodes are the same (that is, they reference the same object).", 
                "name": "Node.isSameNode()"
            }, 
            {
                "descr": "Returns a Boolean flag containing the result of a test whether the DOM implementation implements a specific feature and this feature is supported by the specific node.", 
                "name": "Node.isSupported()"
            }, 
            {
                "descr": "Clean up all the text nodes under this element (merge adjacent, remove empty).", 
                "name": "Node.lookupPrefix() Node.lookupNamespaceURI() Node.normalize()"
            }, 
            {
                "descr": "Removes a child node from the current element, which must be a child of the current node.", 
                "name": "Node.removeChild()"
            }, 
            {
                "descr": "Replaces one child Node of the current one with the second one given in parameter.", 
                "name": "Node.replaceChild()"
            }, 
            {
                "descr": "Allows a user to attach, or remove, DOMUserData to the node.", 
                "name": "Node.setUserData()"
            }, 
            {
                "descr": "The parent node (Node Object).", 
                "name": "parentNode"
            }, 
            {
                "descr": "The callback function (Function).", 
                "name": "callbackFunction"
            }
        ], 
        "path": "dom/node", 
        "syntax": "CDATASection inherit), ProcessingInstruction", 
        "type": "Node"
    }, 
    "Node.appendChild": {
        "descr": "The Node.appendChild() method adds a node to the end of the list of children of a specified parent node. If the given child is a reference to an existing node in the document, appendChild() moves it from its current position to the new position (there is no requirement to remove the node from its parent node before appending it to some other node).", 
        "name": "Node.appendChild", 
        "params": [], 
        "path": "dom/node/appendchild", 
        "syntax": "var aChild = element.appendChild(aChild);", 
        "type": "Node"
    }, 
    "Node.baseURI": {
        "descr": "The Node.baseURI read-only property returns the absolute base URL of a node.", 
        "name": "Node.baseURI", 
        "params": [], 
        "path": "dom/node/baseuri", 
        "syntax": "var baseURI = node.baseURI;  baseURI is a DOMString representing the base URL of the specified Node", 
        "type": "Node"
    }, 
    "Node.childNodes": {
        "descr": "The Node.childNodes read-only property returns a live collection of child nodes of the given element.", 
        "name": "Node.childNodes", 
        "params": [], 
        "path": "dom/node/childnodes", 
        "syntax": "var ndList = elementNodeReference.childNodes;  ndList is an ordered collection of node objects that are children of the current element. If the element has no children, then ndList contains no node. The ndList is a variable storing the node list of childNodes. Such list is of type NodeList. Example // parg is an object reference to a <p> elementif (parg.hasChildNodes()) {  // So, first we check if the object is not empty, if the object has child nodes  var children = parg.childNodes;  for (var i = 0; i < children.length; i++) {    // do something with each child as children[i]    // NOTE: List is live, Adding or removing children will change the list  }}", 
        "type": "Node"
    }, 
    "Node.cloneNode": {
        "descr": "The Node.cloneNode() method returns a duplicate of the node on which this method was called.", 
        "name": "Node.cloneNode", 
        "params": [
            {
                "descr": "The node to be cloned.", 
                "name": "node"
            }, 
            {
                "descr": "The new node that will be a clone of node", 
                "name": "dupNode"
            }, 
            {
                "descr": "true if the children of the node should also be cloned, or false to clone only the specified node.", 
                "name": "deep Optional"
            }
        ], 
        "path": "dom/node/clonenode", 
        "syntax": "var dupNode = node.cloneNode(deep);", 
        "type": "Node"
    }, 
    "Node.compareDocumentPosition": {
        "descr": "The Node.compareDocumentPosition() method compares the position of the current node against another node in any other document.", 
        "name": "Node.compareDocumentPosition", 
        "params": [], 
        "path": "dom/node/comparedocumentposition", 
        "syntax": "node.compareDocumentPosition( otherNode )", 
        "type": "Node"
    }, 
    "Node.contains": {
        "descr": "The Node.contains() method returns a Boolean value indicating whether a node is a descendant of a given node or not.", 
        "name": "Node.contains", 
        "params": [], 
        "path": "dom/node/contains", 
        "syntax": "node.contains( otherNode )", 
        "type": "Node"
    }, 
    "Node.firstChild": {
        "descr": "The Node.firstChild read-only property returns the node's first child in the tree, or null if the node is childless. If the node is a Document, it returns the first node in the list of its direct children.", 
        "name": "Node.firstChild", 
        "params": [], 
        "path": "dom/node/firstchild", 
        "syntax": "var childNode = node.firstChild; Description childNode is a reference to the first child of node if there is one, otherwise it's null. Example This example demonstrates the use of firstChild and how whitespace nodes might interfere with using this property. See the Notes section for more information about whitespace handling in Gecko DOM. <p id=\"para-01\">  <span>First span</span></p><script type=\"text/javascript\">  var p01 = document.getElementById('para-01');\n or   alert(p01.firstChild.nodeName)</script>);", 
        "type": "Node"
    }, 
    "Node.hasChildNodes": {
        "descr": "The Node.hasChildNodes() method returns a Boolean value indicating whether the current Node has child nodes or not.", 
        "name": "Node.hasChildNodes", 
        "params": [], 
        "path": "dom/node/haschildnodes", 
        "syntax": "node.hasChildNodes()", 
        "type": "Node"
    }, 
    "Node.insertBefore": {
        "descr": "The Node.insertBefore() method inserts the specified node before the reference node as a child of the current node.", 
        "name": "Node.insertBefore", 
        "params": [], 
        "path": "dom/node/insertbefore", 
        "syntax": "var insertedNode = parentNode.insertBefore(newNode, referenceNode);", 
        "type": "Node"
    }, 
    "Node.isDefaultNamespace": {
        "descr": "The Node.isDefaultNamespace()method accepts a namespace URI as an argument and returns a Boolean with a value of true if the namespace is the default namespace on the given node or false if not.", 
        "name": "Node.isDefaultNamespace", 
        "params": [], 
        "path": "dom/node/isdefaultnamespace", 
        "syntax": "result = node.isDefaultNamespace(namespaceURI)", 
        "type": "Node"
    }, 
    "Node.isEqualNode": {
        "descr": "The Node.isEqualNode() method tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that much match varies depending on the types of the nodes.", 
        "name": "Node.isEqualNode", 
        "params": [], 
        "path": "dom/node/isequalnode", 
        "syntax": "var isEqualNode = node.isEqualNode(otherNode);", 
        "type": "Node"
    }, 
    "Node.isSameNode": {
        "descr": "The Node.isSameNode() method tests whether two nodes are the same, that is if they reference the same object.", 
        "name": "Node.isSameNode", 
        "params": [], 
        "path": "dom/node/issamenode", 
        "syntax": "var isSameNode = node.isSameNode(other);", 
        "type": "Node"
    }, 
    "Node.isSupported": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "Node.isSupported", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the feature to test. ", 
                "name": "feature"
            }, 
            {
                "descr": "Is a DOMString containing the version number of the feature to test. ", 
                "name": "version"
            }
        ], 
        "path": "dom/node/issupported", 
        "syntax": "boolValue = element.isSupported(feature, version)", 
        "type": "Node"
    }, 
    "Node.lastChild": {
        "descr": "The Node.lastChild read-only property returns the last child of the node. If its parent is an element, then the child is generally an element node, a text node, or a comment node. It returns null if there are no child elements.", 
        "name": "Node.lastChild", 
        "params": [], 
        "path": "dom/node/lastchild", 
        "syntax": "var last_child = element.lastChild Example var tr = document.getElementById(\"row1\");\n or var corner_td = tr.lastChild;);", 
        "type": "Node"
    }, 
    "Node.localName": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "Node.localName", 
        "params": [], 
        "path": "dom/node/localname", 
        "syntax": "name = element.localName  name is the local name as a string (see Notes below for details)  Example", 
        "type": "Node"
    }, 
    "Node.namespaceURI": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "Node.namespaceURI", 
        "params": [], 
        "path": "dom/node/namespaceuri", 
        "syntax": "namespace = node.namespaceURI Example In this snippet, a node is being examined for its Node.localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (node.localName == \"browser\" &&     node.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") {  // this is a XUL browser }", 
        "type": "Node"
    }, 
    "Node.nextSibling": {
        "descr": "The Node.nextSibling read-only property returns the node immediately following the specified one in its parent's childNodes list, or null if the specified node is the last node in that list.", 
        "name": "Node.nextSibling", 
        "params": [], 
        "path": "dom/node/nextsibling", 
        "syntax": "nextNode = node.nextSibling Notes Gecko-based browsers insert text nodes into a document to represent whitespace in the source markup. Therefore a node obtained, for example, using Node.firstChild or Node.previousSibling may refer to a whitespace text node rather than the actual element the author intended to get. See Whitespace in the DOM and W3C DOM 3 FAQ: Why are some Text nodes empty? for more information. Example <div id=\"div-01\">Here is div-01</div><div id=\"div-02\">Here is div-02</div><script type=\"text/javascript\">var el = document.getElementById('div-01').nextSibling,    i = 1;console.log('Siblings of div-01:');\n or while (el) {  console.log(i + '. ' + el.nodeName);\n or   el = el.nextSibling;  i++;}</script>/**************************************************  The following is written to the console as it loads:     Siblings of div-01      1. #text      2. DIV      3. #text      4. SCRIPT**************************************************/);", 
        "type": "Node"
    }, 
    "Node.nodeName": {
        "descr": "The Node.nodeName read-only property returns the name of the current node as a string.", 
        "name": "Node.nodeName", 
        "params": [], 
        "path": "dom/node/nodename", 
        "syntax": "CDATASection \"#cdata-section\"   '. In XML, the character sequence '--' cannot be used within a comment.\">Comment \"#comment\"   Document \"#document\"   DocumentFragment \"#document-fragment\"   DocumentType The value of DocumentType.name   Element The value of Element.tagName   Entity The entity name   EntityReference The name of entity reference   Notation", 
        "type": "Node"
    }, 
    "Node.nodeType": {
        "descr": "The read-only Node.nodeType property that represents the type of the node.", 
        "name": "Node.nodeType", 
        "params": [], 
        "path": "dom/node/nodetype", 
        "syntax": "var type = node.nodeType; Returns an integer value which specifies the type of the node; possible values are listed in Node type constants. Constants Node type constants    Constant Value Description     Node.ELEMENT_NODE 1 An Element node such as <p>", 
        "type": "Node"
    }, 
    "Node.normalize": {
        "descr": "The Node.normalize() method puts the specified node and all of its sub-tree into a \"normalized\" form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.", 
        "name": "Node.normalize", 
        "params": [], 
        "path": "dom/node/normalize", 
        "syntax": "element.normalize();", 
        "type": "Node"
    }, 
    "Node.ownerDocument": {
        "descr": "The Node.ownerDocument read-only property returns the top-level document object for this node.", 
        "name": "Node.ownerDocument", 
        "params": [], 
        "path": "dom/node/ownerdocument", 
        "syntax": "document = element.ownerDocument  document is the document object parent of the current element.  Example // given a node \"p\", get the top-level HTML child // of the document objectvar d = p.ownerDocument; var html = d.documentElement; Notes The document object returned by this property is the main object with which all the child nodes in the actual HTML document are created. If this property is used on a node that is itself a document, the result is null. Specifications    Specification Status Comment   DOM4The definition of 'Node.ownerDocument' in that specification. Working Draft     Document Object Model (DOM) Level 3 Core SpecificationThe definition of 'Node.ownerDocument' in that specification. Recommendation No change   Document Object Model (DOM) Level 2 Core SpecificationThe definition of 'Node.ownerDocument' in that specification. Recommendation Initial definition    Browser compatibility", 
        "type": "Node"
    }, 
    "Node.parentElement": {
        "descr": "The Node.parentElement read-only property returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.", 
        "name": "Node.parentElement", 
        "params": [], 
        "path": "dom/node/parentelement", 
        "syntax": "parentElement = node.parentElement parentElement is the parent element of the current node. This is always a DOM Element object, or null. Example if (node.parentElement) {    node.parentElement.style.color = \"red\";}", 
        "type": "Node"
    }, 
    "Node.parentNode": {
        "descr": "The Node.parentNode read-only property returns the parent of the specified node in the DOM tree.", 
        "name": "Node.parentNode", 
        "params": [], 
        "path": "dom/node/parentnode", 
        "syntax": "parentNode = node.parentNode parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node. Example if (node.parentNode) {  // remove a node from the tree, unless   // it's not in the tree already  node.parentNode.removeChild(node);\n or });", 
        "type": "Node"
    }, 
    "Node.prefix": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "Node.prefix", 
        "params": [], 
        "path": "dom/node/prefix", 
        "syntax": "string = node.prefix Examples The following logs \"x\" to the console. <x:div onclick=\"console.log(this.prefix)\"/>", 
        "type": "Node"
    }, 
    "Node.previousSibling": {
        "descr": "The Node.previousSibling read-only property returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.", 
        "name": "Node.previousSibling", 
        "params": [], 
        "path": "dom/node/previoussibling", 
        "syntax": "previousNode = node.previousSibling; Example // <a><b1 id=\"b1\"/><b2 id=\"b2\"/></a>alert(document.getElementById(\"b1\").previousSibling);\n or  // nullalert(document.getElementById(\"b2\").previousSibling.id);\n or  // \"b1\");", 
        "type": "Node"
    }, 
    "Node.removeChild": {
        "descr": "The Node.removeChild() method removes a child node from the DOM. Returns removed node.", 
        "name": "Node.removeChild", 
        "params": [], 
        "path": "dom/node/removechild", 
        "syntax": "var oldChild = node.removeChild(child);\n or ORelement.removeChild(child);", 
        "type": "Node"
    }, 
    "Node.replaceChild": {
        "descr": "The Node.replaceChild() method replaces one child node of the specified node with another.", 
        "name": "Node.replaceChild", 
        "params": [], 
        "path": "dom/node/replacechild", 
        "syntax": "replacedNode = parentNode.replaceChild(newChild, oldChild);", 
        "type": "Node"
    }, 
    "Node.rootNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Node.rootNode", 
        "params": [], 
        "path": "dom/node/rootnode", 
        "syntax": "Node.rootNode read-only property returns a Node", 
        "type": "Node"
    }, 
    "Node.textContent": {
        "descr": "The Node.textContent property represents the text content of a node and its descendants.", 
        "name": "Node.textContent", 
        "params": [], 
        "path": "dom/node/textcontent", 
        "syntax": "var text = element.textContent;element.textContent = \"this is some sample text\"; Description  textContent returns null if the element is a document, a document type, or a notation. To grab all of the text and CDATA data for the whole document, one could use document.documentElement.textContent. If the node is a CDATA section, a comment, a processing instruction, or a text node, textContent returns the text inside this node (the nodeValue). For other node types, textContent", 
        "type": "Node"
    }, 
    "NodeIterator": {
        "descr": "The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order.", 
        "name": "NodeIterator", 
        "params": [
            {
                "descr": "Returns a Node representing the root node as specified when the NodeIterator was created.", 
                "name": "NodeIterator.root Read only"
            }, 
            {
                "descr": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. ", 
                "name": "NodeIterator.whatToShow Read only"
            }, 
            {
                "descr": "Returns a NodeFilter used to select the relevant nodes.", 
                "name": "NodeIterator.filter Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time.", 
                "name": "NodeIterator.expandEntityReferences Read only"
            }, 
            {
                "descr": "Returns the Node to which the iterator is anchored.", 
                "name": "NodeIterator.referenceNode Read only"
            }, 
            {
                "descr": "Returns a Boolean flag that indicates whether the NodeIterator is anchored before, the flag being true, or after, the flag being false, the anchor node.", 
                "name": "NodeIterator.pointerBeforeReferenceNode Read only"
            }, 
            {
                "descr": "This operation is a no-op. It doesn't do anything. ", 
                "name": "NodeIterator.detach()"
            }, 
            {
                "descr": "Returns the previous Node in the document, or null if there are none.", 
                "name": "NodeIterator.previousNode()"
            }, 
            {
                "descr": "Returns the next Node in the document, or null if there are none.", 
                "name": "NodeIterator.nextNode()"
            }
        ], 
        "path": "dom/nodeiterator", 
        "syntax": "CDATASection nodes.   NodeFilter.SHOW_COMMENT 128 Shows '. In XML, the character sequence '--' cannot be used within a comment.\" href=\"comment\">Comment nodes.   NodeFilter.SHOW_DOCUMENT 256 Shows Document", 
        "type": "Node"
    }, 
    "NodeIterator.detach": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "NodeIterator.detach", 
        "params": [], 
        "path": "dom/nodeiterator/detach", 
        "syntax": "nodeIterator.detach();", 
        "type": "Node"
    }, 
    "NodeIterator.filter": {
        "descr": "The NodeIterator.filter read-only method returns a NodeFilter object, that is an object implement an acceptNode(node) method, used to screen nodes.", 
        "name": "NodeIterator.filter", 
        "params": [], 
        "path": "dom/nodeiterator/filter", 
        "syntax": "nodeFilter = nodeIterator.filter; Example var nodeIterator = document.createNodeIterator(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or nodeFilter = nodeIterator.filter;);", 
        "type": "Node"
    }, 
    "NodeIterator.nextNode": {
        "descr": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set. The first call to nextNode() returns the first node in the set.", 
        "name": "NodeIterator.nextNode", 
        "params": [], 
        "path": "dom/nodeiterator/nextnode", 
        "syntax": "node = nodeIterator.nextNode();", 
        "type": "Node"
    }, 
    "NodeIterator.pointerBeforeReferenceNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NodeIterator.pointerBeforeReferenceNode", 
        "params": [], 
        "path": "dom/nodeiterator/pointerbeforereferencenode", 
        "syntax": "NodeIterator.pointerBeforeReferenceNode read-only property returns a Boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false", 
        "type": "Node"
    }, 
    "NodeIterator.previousNode": {
        "descr": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.", 
        "name": "NodeIterator.previousNode", 
        "params": [], 
        "path": "dom/nodeiterator/previousnode", 
        "syntax": "node = nodeIterator.previousNode();", 
        "type": "Node"
    }, 
    "NodeIterator.referenceNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "NodeIterator.referenceNode", 
        "params": [], 
        "path": "dom/nodeiterator/referencenode", 
        "syntax": "NodeIterator.referenceNode read-only returns the Node", 
        "type": "Node"
    }, 
    "NodeIterator.root": {
        "descr": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.", 
        "name": "NodeIterator.root", 
        "params": [], 
        "path": "dom/nodeiterator/root", 
        "syntax": "root = nodeIterator.root; Example var nodeIterator = document.createNodeIterator(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or root = nodeIterator.root; // document.body in this case);", 
        "type": "Node"
    }, 
    "NodeIterator.whatToShow": {
        "descr": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.", 
        "name": "NodeIterator.whatToShow", 
        "params": [], 
        "path": "dom/nodeiterator/whattoshow", 
        "syntax": "var nodeTypes = nodeIterator.whatToShow; The values that can be combined to form the bitmask are:    Constant Numerical value Description   NodeFilter.SHOW_ALL -1 (that is the max value of unsigned long) Shows all nodes.   NodeFilter.SHOW_ATTRIBUTE", 
        "type": "Node"
    }, 
    "NodeList.item": {
        "descr": "Returns a node from a NodeList by index. This method doesn't throw exceptions as long as you provide arguments; a value of null is returned if the index is out of range and a TypeError is thrown if no argument is provided.", 
        "name": "NodeList.item", 
        "params": [], 
        "path": "dom/nodelist/item", 
        "syntax": "nodeItem = nodeList.item(index)", 
        "type": "Node"
    }, 
    "NodeList.length": {
        "descr": "length returns the number of items in a NodeList.", 
        "name": "NodeList.length", 
        "params": [], 
        "path": "dom/nodelist/length", 
        "syntax": "numItems =nodeList.length  numItems is an integer value representing the number of items in a NodeList.  Example // all the paragraphs in the document var items = document.getElementsByTagName(\"p\");\n or  // for each item in the list,// append the entire element as a string of HTMLvar gross = \"\";for (var i = 0; i < items.length; i++) {  gross += items[i].innerHTML;}// gross is now all the HTML for the paragraphs);", 
        "type": "Node"
    }, 
    "NonDocumentTypeChildNode.nextElementSibling": {
        "descr": "The NonDocumentTypeChildNode.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.", 
        "name": "NonDocumentTypeChildNode.nextElementSibling", 
        "params": [], 
        "path": "dom/nondocumenttypechildnode/nextelementsibling", 
        "syntax": "var nextNode = elementNodeReference.nextElementSibling;  Example <div id=\"div-01\">Here is div-01</div><div id=\"div-02\">Here is div-02</div><script type=\"text/javascript\">  var el = document.getElementById('div-01').nextElementSibling;  console.log('Siblings of div-01:');\n or   while (el) {    console.log(el.nodeName);\n or     el = el.nextElementSibling;  }</script>);", 
        "type": "Node"
    }, 
    "NonDocumentTypeChildNode.previousElementSibling": {
        "descr": "The NonDocumentTypeChildNode.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.", 
        "name": "NonDocumentTypeChildNode.previousElementSibling", 
        "params": [], 
        "path": "dom/nondocumenttypechildnode/previouselementsibling", 
        "syntax": "prevNode = elementNodeReference.previousElementSibling;  Example <div id=\"div-01\">Here is div-01</div><div id=\"div-02\">Here is div-02</div><li>This is a list item</li><li>This is another list item</li><div id=\"div-03\">Here is div-03</div><script>  var el = document.getElementById('div-03').previousElementSibling;  document.write('<p>Siblings of div-03</p><ol>');\n or   while (el) {    document.write('<li>' + el.nodeName + '</li>');\n or     el = el.previousElementSibling;  }  document.write('</ol>');\n or </script>);", 
        "type": "Node"
    }, 
    "Notification": {
        "descr": "The Notification interface of the Notifications API is used to configure and display desktop notifications to the user.", 
        "name": "Notification", 
        "params": [
            {
                "descr": "Creates a new instance of the Notification object.", 
                "name": "Notification()"
            }, 
            {
                "descr": "A string representing the current permission to display notifications. ", 
                "name": "Notification.permission Read only"
            }, 
            {
                "descr": "The title of the notification as specified in the options parameter of the constructor.", 
                "name": "Notification.title Read only"
            }, 
            {
                "descr": "The text direction of the notification as specified in the options parameter of the constructor.", 
                "name": "Notification.dir Read only"
            }, 
            {
                "descr": "The language code of the notification as specified in the options parameter of the constructor.", 
                "name": "Notification.lang Read only"
            }, 
            {
                "descr": "The body string of the notification as specified in the options parameter of the constructor.", 
                "name": "Notification.body Read only"
            }, 
            {
                "descr": "The ID of the notification (if any) as specified in the options parameter of the constructor.", 
                "name": "Notification.tag Read only"
            }, 
            {
                "descr": "The URL of the image used as an icon of the notification as specified in the options parameter of the constructor.", 
                "name": "Notification.icon Read only"
            }, 
            {
                "descr": "Returns a structured clone of the notification\u2019s data.", 
                "name": "Notification.data Read only"
            }, 
            {
                "descr": "A Boolean indicating that on devices with sufficiently large screens, a notification should remain active until the user clicks or dismisses it.", 
                "name": "Notification.requireInteraction Read only"
            }, 
            {
                "descr": "Specifies whether the notification should be silent, i.e. ", 
                "name": "Notification.silent Read only"
            }, 
            {
                "descr": "Specifies the time at which a notification is created or applicable (past, present, or future).", 
                "name": "Notification.timestamp Read only"
            }, 
            {
                "descr": "Specifies whether the notification firing should enable the device's screen or not.", 
                "name": "Notification.noscreen Read only"
            }, 
            {
                "descr": "Specifies whether the user should be notified after a new notification replaces an old one.", 
                "name": "Notification.renotify Read only"
            }, 
            {
                "descr": "Specifies a sound resource to play when the notification fires, in place of the default system notification sound.", 
                "name": "Notification.sound Read only"
            }, 
            {
                "descr": "Specifies whether the notification should be 'sticky', i.e. ", 
                "name": "Notification.sticky Read only"
            }, 
            {
                "descr": "Specifies a vibration pattern for devices with vibration hardware to emit.", 
                "name": "Notification.vibrate Read only"
            }, 
            {
                "descr": "A handler for the click event. It is triggered each time the user clicks on the notification.", 
                "name": "Notification.onclick"
            }, 
            {
                "descr": "A handler for the error event. It is triggered each time the notification encounters an error.", 
                "name": "Notification.onerror"
            }, 
            {
                "descr": "A handler for the close event. It is triggered when the user closes the notification.", 
                "name": "Notification.onclose"
            }, 
            {
                "descr": "A handler for the show event. It is triggered when the notification is displayed.", 
                "name": "Notification.onshow"
            }, 
            {
                "descr": "Requests permission from the user to display notifications.", 
                "name": "Notification.requestPermission()"
            }, 
            {
                "descr": "Programmatically closes a notification.", 
                "name": "Notification.close()"
            }
        ], 
        "path": "dom/notification", 
        "syntax": "Notification.onclose A handler for the close event. It is triggered when the user closes the notification. Notification.onshow A handler for the show event. It is triggered when the notification is displayed.  Methods Static methods These methods are available only on the Notification object itself.  Notification.requestPermission()", 
        "type": "Notification"
    }, 
    "Notification.body": {
        "descr": "The body read-only property of the Notification interface indicates the body string of the notification, as specified in the body option of the Notification() constructor.", 
        "name": "Notification.body", 
        "params": [], 
        "path": "dom/notification/body", 
        "syntax": "var body = Notification.body; Value A DOMString. Examples In our Emogotchi demo (see source code), we run a simple spawnNotification()", 
        "type": "Notification"
    }, 
    "Notification.close": {
        "descr": "The close() method of the Notification interface is used to close a previously displayed notification.", 
        "name": "Notification.close", 
        "params": [], 
        "path": "dom/notification/close", 
        "syntax": "Notification.close();", 
        "type": "Notification"
    }, 
    "Notification.constructor": {
        "descr": "The Notification() constructor creates a new Notification object instance.", 
        "name": "Notification.constructor", 
        "params": [
            {
                "descr": "Defines a title for the notification, which will be shown at the top of the notification window when it is fired.", 
                "name": "title"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the notification. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/notification/notification", 
        "syntax": "var myNotification = new Notification(title, options);", 
        "type": "Notification"
    }, 
    "Notification.data": {
        "descr": "The data read-only property of the Notification interface returns a structured clone of the notification's data, as specified in the data option of the Notification() constructor.", 
        "name": "Notification.data", 
        "params": [], 
        "path": "dom/notification/data", 
        "syntax": "var data = Notification.data; Value A structured clone. Examples The following snippet fires a notification; a simple options object is created, then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.dir": {
        "descr": "The dir read-only property of the Notification interface indicates the text direction of the notification, as specified in the dir option of the Notification() constructor.", 
        "name": "Notification.dir", 
        "params": [], 
        "path": "dom/notification/dir", 
        "syntax": "var direction = Notification.dir; Value A DOMString specifying the text direction. Possible values are:  auto: adopts the browser's language setting behaviour (the default.) ltr", 
        "type": "Notification"
    }, 
    "Notification.icon": {
        "descr": "The icon read-only property of the Notification interface contains the URL of an icon to be displayed as part of the notification, as specified in the icon option of the Notification() constructor.", 
        "name": "Notification.icon", 
        "params": [], 
        "path": "dom/notification/icon", 
        "syntax": "var icon = Notification.icon; Value A USVString. Examples In our Emogotchi demo (see source code), we run a simple spawnNotification()", 
        "type": "Notification"
    }, 
    "Notification.lang": {
        "descr": "The lang read-only property of the Notification interface indicates the text direction of the notification, as specified in the lang option of the Notification() constructor.", 
        "name": "Notification.lang", 
        "params": [], 
        "path": "dom/notification/lang", 
        "syntax": "var language = Notification.lang; Value A DOMString specifying the language tag. Examples The following snippet fires a notification; a simple options object is created, then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.noscreen": {
        "descr": "Note: This property is not currently supported in any browser.", 
        "name": "Notification.noscreen", 
        "params": [], 
        "path": "dom/notification/noscreen", 
        "syntax": "var noscreen = Notification.noscreen; Value A Boolean. false is the default; true makes the notification not enable the device's screen. Examples The following snippet is intended to fire a notification that doesn't light up the user's screen if it is not already turned on; a simple options object is created, and then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.onclick": {
        "descr": "The onclick property of the Notification interface specifies an event listener to receive click events. These events occur when the user clicks on a displayed Notification.", 
        "name": "Notification.onclick", 
        "params": [], 
        "path": "dom/notification/onclick", 
        "syntax": "Notification.onclick = function(event) { ... };", 
        "type": "Notification"
    }, 
    "Notification.onclose": {
        "descr": "The onclose property of the Notification interface specifies an event listener to receive close events. These events occur when a Notification is closed.", 
        "name": "Notification.onclose", 
        "params": [], 
        "path": "dom/notification/onclose", 
        "syntax": "Notification.onclose = function() { ... };", 
        "type": "Notification"
    }, 
    "Notification.onerror": {
        "descr": "The onerror property of the Notification interface specifies an event listener to receive error events. These events occur when something goes wrong with a Notification (in many cases an error preventing the notification from being displayed.)", 
        "name": "Notification.onerror", 
        "params": [], 
        "path": "dom/notification/onerror", 
        "syntax": "Notification.onerror = function() { ... };", 
        "type": "Notification"
    }, 
    "Notification.onshow": {
        "descr": "The onshow property of the Notification interface specifies an event listener to receive show events. These events occur when a Notification is displayed.", 
        "name": "Notification.onshow", 
        "params": [], 
        "path": "dom/notification/onshow", 
        "syntax": "Notification.onshow = function() { ... };", 
        "type": "Notification"
    }, 
    "Notification.permission": {
        "descr": "The permission read-only property of the Notification interface indicates the current permission granted by the user for the current origin to display web notifications.", 
        "name": "Notification.permission", 
        "params": [], 
        "path": "dom/notification/permission", 
        "syntax": "var permission = Notification.permission; Value A DOMString representing the current permission. The value can be:  granted: The user has explicitly granted permission for the current origin to display system notifications. denied: The user has explicitly denied permission for the current origin to display system notifications. default: The user decision is unknown; in this case the application will act as if permission was denied.  Examples The following fairly verbose snippet could be used if you wanted to first check whether notifications are supported, then check if permission has been granted for the current origin to send notifications, then request permission if required, before then sending a notification. function notifyMe() {  // Let's check if the browser supports notifications  if (!(\"Notification\" in window)) {    console.log(\"This browser does not support desktop notification\");\n or   }  // Let's check whether notification permissions have alredy been granted  else if (Notification.permission === \"granted\") {    // If it's okay let's create a notification    var notification = new Notification(\"Hi there!\");\n or   }  // Otherwise, we need to ask the user for permission  else if (Notification.permission !== 'denied' || Notification.permission === \"default\") {    Notification.requestPermission(function (permission) {      // If the user accepts, let's create a notification      if (permission === \"granted\") {        var notification = new Notification(\"Hi there!\");\n or       }    });\n or   }  // At last, if the user has denied notifications, and you   // want to be respectful there is no need to bother them any more.});", 
        "type": "Notification"
    }, 
    "Notification.renotify": {
        "descr": "Note: This property is not currently supported in any browser.", 
        "name": "Notification.renotify", 
        "params": [], 
        "path": "dom/notification/renotify", 
        "syntax": "var renotify = Notification.renotify; Value A Boolean. false is the default; true makes the notification renotify the user. Examples The following snippet is intended to fire a notification that renotifies the user after it has been replaced; a simple options object is created, and then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.requestPermission": {
        "descr": "The requestPermission() method of the Notification interface requests permission from the user for the current origin to display notifications.", 
        "name": "Notification.requestPermission", 
        "params": [
            {
                "descr": "An optional callback function that is called with the permission value. ", 
                "name": "callback Optional Deprecated since Gecko 46"
            }
        ], 
        "path": "dom/notification/requestpermission", 
        "syntax": "Notification.requestPermission().then(function(permission) { ... });", 
        "type": "Notification"
    }, 
    "Notification.silent": {
        "descr": "The silent read-only property of the Notification interface specifies whether the notification should be silent, i.e. no sounds or vibrations should be issued, regardless of the device settings. This is specified in the renotify option of the Notification() constructor.", 
        "name": "Notification.silent", 
        "params": [], 
        "path": "dom/notification/silent", 
        "syntax": "var silent = Notification.silent; Value A Boolean. false is the default; true makes the notification silent. Examples The following snippet is intended to fire a silent notification; a simple options object is created, and then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.sound": {
        "descr": "Note: This property is not currently supported in any browser.", 
        "name": "Notification.sound", 
        "params": [], 
        "path": "dom/notification/sound", 
        "syntax": "var sound = Notification.sound; Value A USVString. Examples The following snippet is intended to fire a sound along with the notification; a simple options object is created, then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.sticky": {
        "descr": "Note: This property is not currently supported in any browser.", 
        "name": "Notification.sticky", 
        "params": [], 
        "path": "dom/notification/sticky", 
        "syntax": "var sticky = Notification.sticky; Value A Boolean. false is the default; true makes the notification 'sticky'. Examples The following snippet is intended to create a 'sticky' notification; a simple options object is created, then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.tag": {
        "descr": "The tag read-only property of the Notification interface signifies an identifying tag for the notification, as specified in the tag option of the Notification() constructor.", 
        "name": "Notification.tag", 
        "params": [], 
        "path": "dom/notification/tag", 
        "syntax": "var tag = Notification.tag; Value A DOMString. Examples Our Using the Notifications API article has a good example of tag usage.  Specifications     Specification Status Comment   Notifications APIThe definition of 'tag' in that specification. Living Standard Living standard    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 webkit (see notes) 22 4.0 moz (see notes) 22 Not supported 25 6 (see notes)   Available in workers ? 41.0 (41.0) ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ?  (Yes)", 
        "type": "Notification"
    }, 
    "Notification.timestamp": {
        "descr": "The timestamp read-only property of the Notification interface returns a DOMTimeStamp, as specified in the timestamp option of the Notification() constructor.", 
        "name": "Notification.timestamp", 
        "params": [], 
        "path": "dom/notification/timestamp", 
        "syntax": "var timestamp = Notification.timestamp; Value A DOMTimeStamp. Examples The following snippet fires a notification; a simple options object is created, then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "Notification.title": {
        "descr": "The title read-only property of the Notification interface indicates the title of the notification, as specified in the title parameter of the Notification() constructor.", 
        "name": "Notification.title", 
        "params": [], 
        "path": "dom/notification/title", 
        "syntax": "var title = Notification.title; Value A DOMString. Examples In our Emogotchi demo (see source code), we run a simple spawnNotification()", 
        "type": "Notification"
    }, 
    "Notification.vibrate": {
        "descr": "Note: This property is not currently supported in any browser.", 
        "name": "Notification.vibrate", 
        "params": [], 
        "path": "dom/notification/vibrate", 
        "syntax": "var vibrate = Notification.vibrate; Value A vibration pattern, as specified in the Vibration API spec. Examples The following snippet is intended to create a notification that also triggers a device vibration; a simple options object is created, and then the notification is fired using the Notification()", 
        "type": "Notification"
    }, 
    "NotificationEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "NotificationEvent", 
        "params": [
            {
                "descr": "Creates a new NotificationEvent object.", 
                "name": "NotificationEvent.NotificationEvent()"
            }, 
            {
                "descr": "Returns a Notification object representing the notification that was clicked to fire the event.", 
                "name": "NotificationEvent.notification Read only"
            }, 
            {
                "descr": "Returns the string ID of the notification button the user clicked. ", 
                "name": "NotificationEvent.action Read only"
            }, 
            {
                "descr": "Extends the lifetime of the event. ", 
                "name": "ExtendableEvent.waitUntil()"
            }
        ], 
        "path": "dom/notificationevent", 
        "syntax": "onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker", 
        "type": "Notification"
    }, 
    "NotificationEvent.action": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "NotificationEvent.action", 
        "params": [], 
        "path": "dom/notificationevent/action", 
        "syntax": "undefined if the user clicked the notification somewhere other than an action button, or the notification does not have a button. Returns A DOMString object. Example self.registration.showNotification(\"New articles available\", {  actions: [{action: \"get\", title: \"Get now.\"}]});\n or self.addEventListener('notificationclick', function(event) {  event.notification.close();\n or   if (event.action === 'get') {    synchronizeReader();\n or   } else {    clients.openWindow(\"/reader\");\n or   }}, false);", 
        "type": "Notification"
    }, 
    "NotificationEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "NotificationEvent.constructor", 
        "params": [
            {
                "descr": "TBD", 
                "name": "type"
            }, 
            {
                "descr": "A dictionary object containing a Notification object to be used as the notification the event is dispatched on. ", 
                "name": "NotificationEventInit Optional"
            }
        ], 
        "path": "dom/notificationevent/notificationevent", 
        "syntax": "NotificationEvent()", 
        "type": "Notification"
    }, 
    "NotificationEvent.notification": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "NotificationEvent.notification", 
        "params": [], 
        "path": "dom/notificationevent/notification", 
        "syntax": "notification read-only property of the NotificationEvent interface returns the Notification that was clicked to fire the event. Returns A Notification object. Example self.addEventListener('notificationclick', function(event) {  console.log('On notification click: ', event.notification.tag);\n or   event.notification.close();\n or   // This looks to see if the current is already open and  // focuses if it is  event.waitUntil(clients.matchAll({    type: \"window\"  }).then(function(clientList) {    for (var i = 0; i < clientList.length; i++) {      var client = clientList[i];      if (client.url == '/' && 'focus' in client)        return client.focus();\n or     }    if (clients.openWindow)      return clients.openWindow('/');\n or   }));\n or });", 
        "type": "Notification"
    }, 
    "Number": {
        "descr": "The Number JavaScript object is a wrapper object allowing you to work with numerical values. A Number object is created using the Number() constructor.", 
        "name": "Number", 
        "params": [
            {
                "descr": "The numeric value of the object being created.", 
                "name": "value"
            }, 
            {
                "descr": "The smallest interval between two representable numbers.", 
                "name": "Number.EPSILON"
            }, 
            {
                "descr": "The maximum safe integer in JavaScript (253 - 1).", 
                "name": "Number.MAX_SAFE_INTEGER"
            }, 
            {
                "descr": "The largest positive representable number.", 
                "name": "Number.MAX_VALUE"
            }, 
            {
                "descr": "The minimum safe integer in JavaScript (-(253 - 1)).", 
                "name": "Number.MIN_SAFE_INTEGER"
            }, 
            {
                "descr": "The smallest positive representable number - that is, the positive number closest to zero (without actually being zero).", 
                "name": "Number.MIN_VALUE"
            }, 
            {
                "descr": "Special \"not a number\" value.", 
                "name": "Number.NaN"
            }, 
            {
                "descr": "Special value representing negative infinity; returned on overflow.", 
                "name": "Number.NEGATIVE_INFINITY"
            }, 
            {
                "descr": "Special value representing infinity; returned on overflow.", 
                "name": "Number.POSITIVE_INFINITY"
            }, 
            {
                "descr": "Allows the addition of properties to a Number object.", 
                "name": "Number.prototype"
            }, 
            {
                "descr": "Determine whether the passed value is NaN.", 
                "name": "Number.isNaN()"
            }, 
            {
                "descr": "Determine whether the passed value is a finite number.", 
                "name": "Number.isFinite()"
            }, 
            {
                "descr": "Determine whether the passed value is an integer.", 
                "name": "Number.isInteger()"
            }, 
            {
                "descr": "Determine whether the passed value is a safe integer (number between -(253 - 1) and 253 - 1).", 
                "name": "Number.isSafeInteger()"
            }, 
            {
                "descr": "Used to evaluate the passed value and convert it to an integer (or Infinity), but has been removed.", 
                "name": "Number.toInteger()"
            }, 
            {
                "descr": "The value is the same as parseFloat() of the global object.", 
                "name": "Number.parseFloat()"
            }, 
            {
                "descr": "The value is the same as parseInt() of the global object.", 
                "name": "Number.parseInt()"
            }, 
            {
                "descr": "Returns a string representing the number in exponential notation.", 
                "name": "Number.prototype.toExponential()"
            }, 
            {
                "descr": "Returns a string representing the number in fixed-point notation.", 
                "name": "Number.prototype.toFixed()"
            }, 
            {
                "descr": "Returns a string with a language sensitive representation of this number. ", 
                "name": "Number.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the number to a specified precision in fixed-point or exponential notation.", 
                "name": "Number.prototype.toPrecision()"
            }, 
            {
                "descr": "Returns an object literal representing the specified Number object; you can use this value to create a new object. ", 
                "name": "Number.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object in the specified radix (base). ", 
                "name": "Number.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "Number.prototype.valueOf()"
            }
        ], 
        "path": "javascript/global_objects/number", 
        "syntax": "new Number(value);", 
        "type": "Number"
    }, 
    "Number.isFinite": {
        "descr": "The Number.isFinite() method determines whether the passed value is a finite number.", 
        "name": "Number.isFinite", 
        "params": [
            {
                "descr": "The value to be tested for finiteness.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/number/isfinite", 
        "syntax": "Number.isFinite(value)", 
        "type": "Number"
    }, 
    "Number.isInteger": {
        "descr": "The Number.isInteger() method determines whether the passed value is an integer.", 
        "name": "Number.isInteger", 
        "params": [
            {
                "descr": "The value to be tested for being an integer.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/number/isinteger", 
        "syntax": "Number.isInteger(value)", 
        "type": "Number"
    }, 
    "Number.isNaN": {
        "descr": "The Number.isNaN() method determines whether the passed value is NaN. It is a more robust version of the original, global isNaN().", 
        "name": "Number.isNaN", 
        "params": [
            {
                "descr": "The value to be tested for NaN.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/number/isnan", 
        "syntax": "Number.isNaN(value)", 
        "type": "Number"
    }, 
    "Number.isSafeInteger": {
        "descr": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that", 
        "name": "Number.isSafeInteger", 
        "params": [
            {
                "descr": "The value to be tested for being a safe integer.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/issafeinteger", 
        "syntax": "Number.isSafeInteger(testValue)", 
        "type": "Number"
    }, 
    "Number.parseFloat": {
        "descr": "The Number.parseFloat() method parses a string argument and returns a floating point number. This method behaves identically to the global function parseFloat() and is part of ECMAScript 6 (its purpose is modularization of globals).", 
        "name": "Number.parseFloat", 
        "params": [
            {
                "descr": "A string that represents the value you want to parse.", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/number/parsefloat", 
        "syntax": "Number.parseFloat(string)", 
        "type": "Number"
    }, 
    "Number.parseInt": {
        "descr": "The Number.parseInt() method parses a string argument and returns an integer of the specified radix or base.", 
        "name": "Number.parseInt", 
        "params": [
            {
                "descr": "The value to parse. If string is not a string, then it is converted to a string (using the ToString abstract operation). ", 
                "name": "string"
            }, 
            {
                "descr": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string. ", 
                "name": "radix"
            }
        ], 
        "path": "javascript/global_objects/number/parseint", 
        "syntax": "Number.parseInt(string[, radix])", 
        "type": "Number"
    }, 
    "Object": {
        "descr": "The Object constructor creates an object wrapper.", 
        "name": "Object", 
        "params": [
            {
                "descr": "Pairs of names (strings) and values (any value) where the name is separated from the value by a colon.", 
                "name": "nameValuePair1, nameValuePair2, ... nameValuePairN"
            }, 
            {
                "descr": "Any value.", 
                "name": "value"
            }, 
            {
                "descr": "Has a value of 1.", 
                "name": "Object.length"
            }, 
            {
                "descr": "Allows the addition of properties to all objects of type Object.", 
                "name": "Object.prototype"
            }, 
            {
                "descr": "Creates a new object by copying the values of all enumerable own properties from one or more source objects to a target object.", 
                "name": "Object.assign()"
            }, 
            {
                "descr": "Creates a new object with the specified prototype object and properties.", 
                "name": "Object.create()"
            }, 
            {
                "descr": "Adds the named property described by a given descriptor to an object.", 
                "name": "Object.defineProperty()"
            }, 
            {
                "descr": "Adds the named properties described by the given descriptors to an object.", 
                "name": "Object.defineProperties()"
            }, 
            {
                "descr": "Returns an array of a given object's own enumerable property [key, value] pairs.", 
                "name": "Object.entries()"
            }, 
            {
                "descr": "Freezes an object: other code can't delete or change any properties.", 
                "name": "Object.freeze()"
            }, 
            {
                "descr": "Returns a property descriptor for a named property on an object.", 
                "name": "Object.getOwnPropertyDescriptor()"
            }, 
            {
                "descr": "Returns an object containing all own property descriptors for an object.", 
                "name": "Object.getOwnPropertyDescriptors()"
            }, 
            {
                "descr": "Returns an array containing the names of all of the given object's own enumerable and non-enumerable properties.", 
                "name": "Object.getOwnPropertyNames()"
            }, 
            {
                "descr": "Returns an array of all symbol properties found directly upon a given object.", 
                "name": "Object.getOwnPropertySymbols()"
            }, 
            {
                "descr": "Returns the prototype of the specified object.", 
                "name": "Object.getPrototypeOf()"
            }, 
            {
                "descr": "Compares if two values are distinguishable (ie. ", 
                "name": "Object.is()"
            }, 
            {
                "descr": "Determines if extending of an object is allowed.", 
                "name": "Object.isExtensible()"
            }, 
            {
                "descr": "Determines if an object was frozen.", 
                "name": "Object.isFrozen()"
            }, 
            {
                "descr": "Determines if an object is sealed.", 
                "name": "Object.isSealed()"
            }, 
            {
                "descr": "Returns an array containing the names of all of the given object's own enumerable properties.", 
                "name": "Object.keys()"
            }, 
            {
                "descr": "Prevents any extensions of an object.", 
                "name": "Object.preventExtensions()"
            }, 
            {
                "descr": "Prevents other code from deleting properties of an object.", 
                "name": "Object.seal()"
            }, 
            {
                "descr": "Sets the prototype (i.e., the internal [[Prototype]] property)", 
                "name": "Object.setPrototypeOf()"
            }, 
            {
                "descr": "Returns an array of a given object's own enumerable values.", 
                "name": "Object.values()"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "Object.prototype.constructor"
            }, 
            {
                "descr": "Points to the object which was used as prototype when the object was instantiated.", 
                "name": "Object.prototype.__proto__"
            }, 
            {
                "descr": "Allows a function to be defined that will be executed when an undefined object member is called as a method.", 
                "name": "Object.prototype.__noSuchMethod__"
            }, 
            {
                "descr": "Used to return the number of enumerable properties directly on a user-defined object, but has been removed.", 
                "name": "Object.prototype.__count__"
            }, 
            {
                "descr": "Used to point to an object's context, but has been removed.", 
                "name": "Object.prototype.__parent__"
            }, 
            {
                "descr": "Associates a function with a property that, when accessed, executes that function and returns its return value.", 
                "name": "Object.prototype.__defineGetter__()"
            }, 
            {
                "descr": "Associates a function with a property that, when set, executes that function which modifies the property.", 
                "name": "Object.prototype.__defineSetter__()"
            }, 
            {
                "descr": "Returns the function associated with the specified property by the __defineGetter__() method.", 
                "name": "Object.prototype.__lookupGetter__()"
            }, 
            {
                "descr": "Returns the function associated with the specified property by the __defineSetter__() method.", 
                "name": "Object.prototype.__lookupSetter__()"
            }, 
            {
                "descr": "Returns a boolean indicating whether an object contains the specified property as a direct property of that object and not inherited through the prototype chain.", 
                "name": "Object.prototype.hasOwnProperty()"
            }, 
            {
                "descr": "Returns a boolean indication whether the specified object is in the prototype chain of the object this method is called upon.", 
                "name": "Object.prototype.isPrototypeOf()"
            }, 
            {
                "descr": "Returns a boolean indicating if the internal ECMAScript [[Enumerable]] attribute is set.", 
                "name": "Object.prototype.propertyIsEnumerable()"
            }, 
            {
                "descr": "Returns string containing the source of an object literal representing the object that this method is called upon; you can use this value to create a new object.", 
                "name": "Object.prototype.toSource()"
            }, 
            {
                "descr": "Calls toString().", 
                "name": "Object.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representation of the object.", 
                "name": "Object.prototype.toString()"
            }, 
            {
                "descr": "Removes a watchpoint from a property of the object.", 
                "name": "Object.prototype.unwatch()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object.", 
                "name": "Object.prototype.valueOf()"
            }, 
            {
                "descr": "Adds a watchpoint to a property of the object.", 
                "name": "Object.prototype.watch()"
            }, 
            {
                "descr": "Used to evaluate a string of JavaScript code in the context of the specified object, but has been removed.", 
                "name": "Object.prototype.eval()"
            }
        ], 
        "path": "javascript/global_objects/object", 
        "syntax": "// Object initialiser or literal{ [ nameValuePair1[, nameValuePair2[, ...nameValuePairN] ] ] }// Called as a constructornew Object([value])", 
        "type": "Object"
    }, 
    "Object initializer": {
        "descr": "Objects can be initialized using new Object(), Object.create(), or using the literal notation (initializer notation). An object initializer is a list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}).", 
        "name": "Object initializer", 
        "params": [], 
        "path": "javascript/operators/object_initializer", 
        "syntax": "var o = {};var o = { a: \"foo\", b: 42, c: {} };var a = \"foo\", b = 42, c = {};var o = { a: a, b: b, c: c };var o = {  property: function ([parameters]) {},  get property() {},  set property(value) {},};", 
        "type": "Operators"
    }, 
    "Object.assign": {
        "descr": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.", 
        "name": "Object.assign", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The source object(s).", 
                "name": "sources"
            }
        ], 
        "path": "javascript/global_objects/object/assign", 
        "syntax": "Object.assign(target, ...sources)", 
        "type": "Object"
    }, 
    "Object.create": {
        "descr": "The Object.create() method creates a new object with the specified prototype object and properties.", 
        "name": "Object.create", 
        "params": [
            {
                "descr": "The object which should be the prototype of the newly-created object.", 
                "name": "proto"
            }, 
            {
                "descr": "Optional. If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties().", 
                "name": "propertiesObject"
            }
        ], 
        "path": "javascript/global_objects/object/create", 
        "syntax": "Object.create(proto[, propertiesObject])", 
        "type": "Object"
    }, 
    "Object.defineProperties": {
        "descr": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.", 
        "name": "Object.defineProperties", 
        "params": [
            {
                "descr": "The object on which to define or modify properties.", 
                "name": "obj"
            }, 
            {
                "descr": "An object whose own enumerable properties constitute descriptors for the properties to be defined or modified. ", 
                "name": "props"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ", 
                "name": "enumerable"
            }, 
            {
                "descr": "The value associated with the property. ", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ", 
                "name": "set"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperties", 
        "syntax": "Object.defineProperties(obj, props)", 
        "type": "Object"
    }, 
    "Object.defineProperty": {
        "descr": "The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.", 
        "name": "Object.defineProperty", 
        "params": [
            {
                "descr": "The object on which to define the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property to be defined or modified.", 
                "name": "prop"
            }, 
            {
                "descr": "The descriptor for the property being defined or modified.", 
                "name": "descriptor"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ", 
                "name": "enumerable"
            }, 
            {
                "descr": "The value associated with the property. ", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ", 
                "name": "set"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperty", 
        "syntax": "Object.defineProperty(obj, prop, descriptor)", 
        "type": "Object"
    }, 
    "Object.entries": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Object.entries", 
        "params": [
            {
                "descr": "The object whose enumerable own property [key, value] pairs are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/entries", 
        "syntax": "Object.entries()", 
        "type": "Object"
    }, 
    "Object.freeze": {
        "descr": "The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.", 
        "name": "Object.freeze", 
        "params": [
            {
                "descr": "The object to freeze.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/freeze", 
        "syntax": "Object.freeze(obj)", 
        "type": "Object"
    }, 
    "Object.getOwnPropertyDescriptor": {
        "descr": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.", 
        "name": "Object.getOwnPropertyDescriptor", 
        "params": [
            {
                "descr": "The object in which to look for the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property whose description is to be retrieved.", 
                "name": "prop"
            }, 
            {
                "descr": "The value associated with the property (data descriptors only).", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).", 
                "name": "set"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.", 
                "name": "enumerable"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertydescriptor", 
        "syntax": "Object.getOwnPropertyDescriptor(obj, prop)", 
        "type": "Object"
    }, 
    "Object.getOwnPropertyDescriptors": {
        "descr": "The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.", 
        "name": "Object.getOwnPropertyDescriptors", 
        "params": [
            {
                "descr": "The object for which to get all own property descriptors.", 
                "name": "obj"
            }, 
            {
                "descr": "The value associated with the property (data descriptors only).", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).", 
                "name": "set"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.", 
                "name": "enumerable"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertydescriptors", 
        "syntax": "Object.getOwnPropertyDescriptors(obj)", 
        "type": "Object"
    }, 
    "Object.getOwnPropertyNames": {
        "descr": "The Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.", 
        "name": "Object.getOwnPropertyNames", 
        "params": [
            {
                "descr": "The object whose enumerable and non-enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertynames", 
        "syntax": "Object.getOwnPropertyNames(obj)", 
        "type": "Object"
    }, 
    "Object.getOwnPropertySymbols": {
        "descr": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.", 
        "name": "Object.getOwnPropertySymbols", 
        "params": [
            {
                "descr": "The object whose symbol properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertysymbols", 
        "syntax": "Object.getOwnPropertySymbols(obj)", 
        "type": "Object"
    }, 
    "Object.getPrototypeOf": {
        "descr": "The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.", 
        "name": "Object.getPrototypeOf", 
        "params": [
            {
                "descr": "The object whose prototype is to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getprototypeof", 
        "syntax": "Object.getPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "Object.is": {
        "descr": "The Object.is() method determines whether two values are the same value.", 
        "name": "Object.is", 
        "params": [
            {
                "descr": "The first value to compare.", 
                "name": "value1"
            }, 
            {
                "descr": "The second value to compare.", 
                "name": "value2"
            }
        ], 
        "path": "javascript/global_objects/object/is", 
        "syntax": "Object.is(value1, value2);", 
        "type": "Object"
    }, 
    "Object.isExtensible": {
        "descr": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).", 
        "name": "Object.isExtensible", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isextensible", 
        "syntax": "Object.isExtensible(obj)", 
        "type": "Object"
    }, 
    "Object.isFrozen": {
        "descr": "The Object.isFrozen() determines if an object is frozen.", 
        "name": "Object.isFrozen", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isfrozen", 
        "syntax": "Object.isFrozen(obj)", 
        "type": "Object"
    }, 
    "Object.isSealed": {
        "descr": "The Object.isSealed() method determines if an object is sealed.", 
        "name": "Object.isSealed", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/issealed", 
        "syntax": "Object.isSealed(obj)", 
        "type": "Object"
    }, 
    "Object.keys": {
        "descr": "The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).", 
        "name": "Object.keys", 
        "params": [
            {
                "descr": "The object whose enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/keys", 
        "syntax": "Object.keys(obj)", 
        "type": "Object"
    }, 
    "Object.preventExtensions": {
        "descr": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).", 
        "name": "Object.preventExtensions", 
        "params": [
            {
                "descr": "The object which should be made non-extensible.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/preventextensions", 
        "syntax": "Object.preventExtensions(obj)", 
        "type": "Object"
    }, 
    "Object.proto": {
        "descr": "Warning: Changing the [[Prototype]] of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in every browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in obj.__proto__ = ... statement, but may extend to any code that has access to any object whose [[Prototype]] has been altered. If you care about performance you should avoid setting the [[Prototype]] of an object. Instead, create a new object with the desired [[Prototype]] using Object.create().", 
        "name": "Object.proto", 
        "params": [], 
        "path": "javascript/global_objects/object/proto", 
        "syntax": "var shape = {};var circle = new Circle();\n or // Set the object prototype.// DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code.shape.__proto__ = circle;// Get the object prototypeconsole.log(shape.__proto__ === circle);\n or  // true);", 
        "type": "Object"
    }, 
    "Object.seal": {
        "descr": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.", 
        "name": "Object.seal", 
        "params": [
            {
                "descr": "The object which should be sealed.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/seal", 
        "syntax": "Object.seal(obj)", 
        "type": "Object"
    }, 
    "Object.setPrototypeOf": {
        "descr": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.", 
        "name": "Object.setPrototypeOf", 
        "params": [
            {
                "descr": "The object which is to have its prototype set.", 
                "name": "obj"
            }, 
            {
                "descr": "The object's new prototype (an object or null).", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/object/setprototypeof", 
        "syntax": "Object.setPrototypeOf(obj, prototype);", 
        "type": "Object"
    }, 
    "Object.values": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Object.values", 
        "params": [
            {
                "descr": "The object whose enumerable own property values are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/values", 
        "syntax": "Object.values()", 
        "type": "Object"
    }, 
    "OffScreenCanvas.transferToImageBitmap": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OffScreenCanvas.transferToImageBitmap", 
        "params": [], 
        "path": "dom/offscreencanvas/transfertoimagebitmap", 
        "syntax": "OffscreenCanvas.transferToImageBitmap()", 
        "type": "Canvas"
    }, 
    "OfflineAudioCompletionEvent": {
        "descr": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event implements this interface.", 
        "name": "OfflineAudioCompletionEvent", 
        "params": [], 
        "path": "dom/offlineaudiocompletionevent", 
        "syntax": "Working Draft      Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes)webkit Activated on Nightly only (24) Not supported Not supported ?         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? Activated on Nightly only Not supported Not supported ?     See also", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext": {
        "descr": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.", 
        "name": "OfflineAudioContext", 
        "params": [
            {
                "descr": "An integer representing the number of channels this buffer should have. ", 
                "name": "numOfChannels"
            }, 
            {
                "descr": "An integer representing the size of the buffer in sample-frames.", 
                "name": "length"
            }, 
            {
                "descr": "The sample-rate of the linear audio data in sample-frames per second. ", 
                "name": "sampleRate"
            }, 
            {
                "descr": "An integer representing the size of the buffer in sample-frames.", 
                "name": "OfflineAudioContext.length Read only"
            }, 
            {
                "descr": "Is an EventHandler called when the processing is terminated, that is when the complete event (of type OfflineAudioCompletionEvent) is raised.", 
                "name": "OfflineAudioContext.oncomplete"
            }, 
            {
                "descr": "Resumes the progression of time in an audio context that has been suspended.", 
                "name": "OfflineAudioContext.resume()"
            }, 
            {
                "descr": "Schedules a suspension of the time progression in the audio context at the specified time and returns a promise.", 
                "name": "OfflineAudioContext.suspend()"
            }, 
            {
                "descr": "Starts rendering the audio, taking into account the current connections and the current scheduled changes. ", 
                "name": "OfflineAudioContext.startRendering()"
            }, 
            {
                "descr": "Starts rendering the audio, taking into account the current connections and the current scheduled changes. ", 
                "name": "OfflineAudioContext.startRendering_(promise)"
            }
        ], 
        "path": "dom/offlineaudiocontext", 
        "syntax": "AudioBuffer with the AudioContext.createBuffer method. For more detail, read Audio buffers: frames, samples and channels from our Basic concepts guide. The arguments are:  numOfChannels An integer representing the number of channels this buffer should have. Implementations must support a minimum 32 channels. length An integer representing the size of the buffer in sample-frames. sampleRate The sample-rate of the linear audio data in sample-frames per second. An implementation must support sample-rates in at least the range 22050 to 96000, with 44100 being the most commonly used.   Note: Like a regular AudioContext, an OfflineAudioContext can be the target of events, therefore it implements the EventTarget interface.  Properties Implements properties from its parent, AudioContext.  OfflineAudioContext.length Read only  An integer representing the size of the buffer in sample-frames.  Event handlers  OfflineAudioContext.oncomplete", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext.oncomplete": {
        "descr": "The oncomplete event handler of the OfflineAudioContext interface is called when the audio processing is terminated, that is when the complete event (of type OfflineAudioCompletionEvent) is raised.", 
        "name": "OfflineAudioContext.oncomplete", 
        "params": [], 
        "path": "dom/offlineaudiocontext/oncomplete", 
        "syntax": "var offlineAudioCtx = new OfflineAudioContext();\n or offlineAudioCtx.oncomplete = function() { ... });", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext.resume": {
        "descr": "The resume() method of the OfflineAudioContext interface resumes the progression of time in an audio context that has been suspended. The promise resolves immediately because the OfflineAudioContext does not require the audio hardware. If the context is not currently suspended or the rendering has not started, the promise is rejected with InvalidStateError.", 
        "name": "OfflineAudioContext.resume", 
        "params": [], 
        "path": "dom/offlineaudiocontext/resume", 
        "syntax": "OfflineAudioContext.resume().then(function() { ... });", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext.startRendering": {
        "descr": "The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.", 
        "name": "OfflineAudioContext.startRendering", 
        "params": [], 
        "path": "dom/offlineaudiocontext/startrendering", 
        "syntax": "offlineAudioCtx.startRendering();\n or offlineAudioCtx.oncomplete = function(e) {  // e.renderedBuffer contains the output buffer});", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext.startRendering%28promise%29": {
        "descr": "The promise-based startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.", 
        "name": "OfflineAudioContext.startRendering%28promise%29", 
        "params": [], 
        "path": "dom/offlineaudiocontext/startrendering%28promise%29", 
        "syntax": "offlineAudioCtx.startRendering().then(function(renderedBuffer) {  // do something with the output buffer});", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext.startRendering(promise": {
        "descr": "The promise-based startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.", 
        "name": "OfflineAudioContext.startRendering(promise", 
        "params": [], 
        "path": "dom/offlineaudiocontext/startrendering(promise)", 
        "syntax": "offlineAudioCtx.startRendering().then(function(renderedBuffer) {  // do something with the output buffer});", 
        "type": "Web Audio"
    }, 
    "OfflineAudioContext.suspend": {
        "descr": "The suspend() method of the OfflineAudioContext interface schedules a suspension of the time progression in the audio context at the specified time and returns a promise. This is generally useful at the time of manipulating the audio graph synchronously on OfflineAudioContext.", 
        "name": "OfflineAudioContext.suspend", 
        "params": [
            {
                "descr": "A double specifying the suspend time.", 
                "name": "suspendTime"
            }
        ], 
        "path": "dom/offlineaudiocontext/suspend", 
        "syntax": "OfflineAudioContext.suspend(suspendTime).then(function() { ... });", 
        "type": "Web Audio"
    }, 
    "OffscreenCanvas": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "OffscreenCanvas", 
        "params": [
            {
                "descr": "OffscreenCanvas constructor. Creates a new OffscreenCanvas object.", 
                "name": "OffscreenCanvas()"
            }, 
            {
                "descr": "The height of the offscreen canvas.", 
                "name": "OffscreenCanvas.height"
            }, 
            {
                "descr": "The width of the offscreen canvas.", 
                "name": "OffscreenCanvas.width"
            }, 
            {
                "descr": "Returns a rendering context for the offscreen canvas.", 
                "name": "OffscreenCanvas.getContext()"
            }, 
            {
                "descr": "Creates a Blob object representing the image contained in the canvas.", 
                "name": "OffscreenCanvas.toBlob()"
            }, 
            {
                "descr": "Creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas.", 
                "name": "OffscreenCanvas.transferToImageBitmap()"
            }
        ], 
        "path": "dom/offscreencanvas", 
        "syntax": "OffscreenCanvas interface provides a canvas that can be rendered off screen. It is available in both the window and worker contexts.  Note: This API is currently implemented for WebGL1 and WebGL2 contexts only. See bug 801176 for Canvas 2D API support from workers.", 
        "type": "Canvas"
    }, 
    "OffscreenCanvas.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OffscreenCanvas.constructor", 
        "params": [
            {
                "descr": "The height of the offscreen canvas.", 
                "name": "width"
            }, 
            {
                "descr": "The width of the offscreen canvas.", 
                "name": "height"
            }
        ], 
        "path": "dom/offscreencanvas/offscreencanvas", 
        "syntax": "OffscreenCanvas()", 
        "type": "Canvas"
    }, 
    "OffscreenCanvas.getContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OffscreenCanvas.getContext", 
        "params": [
            {
                "descr": "Is a DOMString containing the context identifier defining the drawing context associated to the canvas. ", 
                "name": "contextType"
            }, 
            {
                "descr": "You can use several context attributes when creating your rendering context, for example: offscreen.getContext(\"webgl\",                  { antialias: false,                   depth: false }); 2d context attributes:  alpha: Boolean that indicates if the canvas contains an alpha channel. If set to false, the browser now knows that the backdrop is always opaque, which can speed up drawing of transparent content and images then.  (Gecko only) willReadFrequently: Boolean that indicates whether or not a lot of read-back operations are planned. This will force the use of a software (instead of hardware accelerated) 2D canvas and can save memory when calling getImageData() frequently. This option is only available, if the flag gfx.canvas.willReadFrequently.enable is set to true (which, by default, is only the case for B2G/Firefox OS).  (Blink only) storage: String that indicates which storage is used (\"persistent\" by default).  WebGL context attributes:  alpha: Boolean that indicates if the canvas contains an alpha buffer. depth: Boolean that indicates that the drawing buffer has a depth buffer of at least 16 bits. stencil: Boolean that indicates that the drawing buffer has a stencil buffer of at least 8 bits. antialias: Boolean that indicates whether or not to perform anti-aliasing. premultipliedAlpha: Boolean that indicates that the page compositor will assume the drawing buffer contains colors with pre-multiplied alpha. preserveDrawingBuffer: If the value is true the buffers will not be cleared and will preserve their values until cleared or overwritten by the author.  failIfMajorPerformanceCaveat: Boolean that indicates if a context will be created if the system performance is low.", 
                "name": "contextAttributes"
            }
        ], 
        "path": "dom/offscreencanvas/getcontext", 
        "syntax": "OffscreenCanvas.getContext()", 
        "type": "Canvas"
    }, 
    "OffscreenCanvas.height": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OffscreenCanvas.height", 
        "params": [], 
        "path": "dom/offscreencanvas/height", 
        "syntax": "height property returns and sets the height of an OffscreenCanvas object. Syntax var pxl = offscreen.height;offscreen.height = pxl;  Examples Creating a new offscreen canvas and returning or setting the height of the offscreen canvas: var offscreen = new OffscreenCanvas(256, 256);\n or offscreen.height; // 256offscreen.height = 512;);", 
        "type": "Canvas"
    }, 
    "OffscreenCanvas.toBlob": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OffscreenCanvas.toBlob", 
        "params": [
            {
                "descr": "A DOMString indicating the image format. ", 
                "name": "type Optional"
            }, 
            {
                "descr": "A Number between 0 and 1 indicating image quality if the requested type is image/jpeg or image/webp. ", 
                "name": "encoderOptions Optional"
            }
        ], 
        "path": "dom/offscreencanvas/toblob", 
        "syntax": "OffscreenCanvas.toBlob()", 
        "type": "Canvas"
    }, 
    "OffscreenCanvas.width": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "OffscreenCanvas.width", 
        "params": [], 
        "path": "dom/offscreencanvas/width", 
        "syntax": "width property returns and sets the width of an OffscreenCanvas object. Syntax var pxl = offscreen.width;offscreen.width = pxl;  Examples Creating a new offscreen canvas and returning or setting the width of the offscreen canvas: var offscreen = new OffscreenCanvas(256, 256);\n or offscreen.width; // 256offscreen.width = 512;);", 
        "type": "Canvas"
    }, 
    "Operator Precedence": {
        "descr": "Operator precedence determines the order in which operators are evaluated. Operators with higher precedence are evaluated first.", 
        "name": "Operator Precedence", 
        "params": [], 
        "path": "javascript/operators/operator_precedence", 
        "syntax": "(a OP b) OP c", 
        "type": "Operators"
    }, 
    "OscillatorNode.detune": {
        "descr": "The detune property of the OscillatorNode interface is an a-rate AudioParam representing detuning of oscillation in cents.", 
        "name": "OscillatorNode.detune", 
        "params": [], 
        "path": "dom/oscillatornode/detune", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.detune.value = 100; // value in cents);", 
        "type": "Web Audio"
    }, 
    "OscillatorNode.frequency": {
        "descr": "The frequency property of the OscillatorNode interface is an a-rate AudioParam representing the frequency of oscillation in hertz.", 
        "name": "OscillatorNode.frequency", 
        "params": [], 
        "path": "dom/oscillatornode/frequency", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.frequency.value = 3000; // value in hertz);", 
        "type": "Web Audio"
    }, 
    "OscillatorNode.onended": {
        "descr": "The onended property of the OscillatorNode interface is used to set the event handler for the ended event, which fires when the tone has stopped playing.", 
        "name": "OscillatorNode.onended", 
        "params": [], 
        "path": "dom/oscillatornode/onended", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.onended = function() { ... };);", 
        "type": "Web Audio"
    }, 
    "OscillatorNode.setPeriodicWave": {
        "descr": "The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type = \"custom\" is used.", 
        "name": "OscillatorNode.setPeriodicWave", 
        "params": [
            {
                "descr": "The PeriodicWave object you want to use to shape the oscillator's output.", 
                "name": "periodicWave"
            }
        ], 
        "path": "dom/oscillatornode/setperiodicwave", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.setPeriodicWave(wave);", 
        "type": "Web Audio"
    }, 
    "OscillatorNode.start": {
        "descr": "The start method of the OscillatorNode interface specifies the exact time to start playing the tone. Its parameter is optional and default to 0.", 
        "name": "OscillatorNode.start", 
        "params": [
            {
                "descr": "An optional double representing the time in seconds after the current time when the oscillator should start. ", 
                "name": "when"
            }
        ], 
        "path": "dom/oscillatornode/start", 
        "syntax": "oscillator.start(when);\n or  // start playing oscillator in when seconds);", 
        "type": "Web Audio"
    }, 
    "OscillatorNode.stop": {
        "descr": "The stop method of the OscillatorNode interface specifies the time to stop playing the tone. Its parameter is optional and defaults to 0.", 
        "name": "OscillatorNode.stop", 
        "params": [
            {
                "descr": "An optional double representing the audio context time when the oscillator should stop. ", 
                "name": "when"
            }
        ], 
        "path": "dom/oscillatornode/stop", 
        "syntax": "oscillator.stop(when);\n or  // stop playing oscillator at when);", 
        "type": "Web Audio"
    }, 
    "OscillatorNode.type": {
        "descr": "The type property of the OscillatorNode interface represents the shape of the oscillator wave generated. Different waves will produce different tones.", 
        "name": "OscillatorNode.type", 
        "params": [], 
        "path": "dom/oscillatornode/type", 
        "syntax": "var oscillator = audioCtx.createOscillator();\n or oscillator.type = 'square';);", 
        "type": "Web Audio"
    }, 
    "PannerNode.coneInnerAngle": {
        "descr": "The coneInnerAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.", 
        "name": "PannerNode.coneInnerAngle", 
        "params": [], 
        "path": "dom/pannernode/coneinnerangle", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.coneInnerAngle = 360;);", 
        "type": "Web Audio"
    }, 
    "PannerNode.coneOuterAngle": {
        "descr": "The coneOuterAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain property.", 
        "name": "PannerNode.coneOuterAngle", 
        "params": [], 
        "path": "dom/pannernode/coneouterangle", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.coneOuterAngle = 0;);", 
        "type": "Web Audio"
    }, 
    "PannerNode.coneOuterGain": {
        "descr": "The coneOuterGain property of the PannerNode interface is a double value describing the amount of volume reduction outside the cone defined by the coneOuterAngle attribute.", 
        "name": "PannerNode.coneOuterGain", 
        "params": [], 
        "path": "dom/pannernode/coneoutergain", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.coneOuterGain = 0;);", 
        "type": "Web Audio"
    }, 
    "PannerNode.distanceModel": {
        "descr": "The distanceModel property of the PannerNode interface is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.", 
        "name": "PannerNode.distanceModel", 
        "params": [], 
        "path": "dom/pannernode/distancemodel", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.distanceModel = 'inverse';);", 
        "type": "Web Audio"
    }, 
    "PannerNode.maxDistance": {
        "descr": "The maxDistance property of the PannerNode interface is a double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further. This value is used only by the linear distance model.", 
        "name": "PannerNode.maxDistance", 
        "params": [], 
        "path": "dom/pannernode/maxdistance", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.maxDistance = 10000;);", 
        "type": "Web Audio"
    }, 
    "PannerNode.panningModel": {
        "descr": "The panningModel property of the PannerNode interface is an enumerated value determining which spatialisation algorithm to use to position the audio in 3D space.", 
        "name": "PannerNode.panningModel", 
        "params": [], 
        "path": "dom/pannernode/panningmodel", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.panningModel = 'HRTF';);", 
        "type": "Web Audio"
    }, 
    "PannerNode.refDistance": {
        "descr": "The refDistance property of the PannerNode interface is a double value representing the reference distance for reducing volume as the audio source moves further from the listener. This value is used by all distance models.", 
        "name": "PannerNode.refDistance", 
        "params": [], 
        "path": "dom/pannernode/refdistance", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.refDistance = 1;);", 
        "type": "Web Audio"
    }, 
    "PannerNode.rolloffFactor": {
        "descr": "The rolloffFactor property of the PannerNode interface is a double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models.", 
        "name": "PannerNode.rolloffFactor", 
        "params": [], 
        "path": "dom/pannernode/rollofffactor", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.rolloffFactor = 1;);", 
        "type": "Web Audio"
    }, 
    "PannerNode.setOrientation": {
        "descr": "The setOrientation() method of the PannerNode Interface defines the direction the audio source is playing in.", 
        "name": "PannerNode.setOrientation", 
        "params": [
            {
                "descr": "The x value of the panner's direction vector in 3D space.", 
                "name": "x"
            }, 
            {
                "descr": "The y value of the panner's direction vector in 3D space.", 
                "name": "y"
            }, 
            {
                "descr": "The z value of the panner's direction vector in 3D space.", 
                "name": "z"
            }
        ], 
        "path": "dom/pannernode/setorientation", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.setOrientation(1,0,0);", 
        "type": "Web Audio"
    }, 
    "PannerNode.setPosition": {
        "descr": "The setPosition() method of the PannerNode Interface defines the position of the audio source relative to the listener (represented by an AudioListener object stored in the AudioContext.listener attribute.) The three parameters x, y and z are unitless and describe the source's position in 3D space using the right-hand Cartesian coordinate system.", 
        "name": "PannerNode.setPosition", 
        "params": [
            {
                "descr": "The x position of the panner in 3D space.", 
                "name": "x"
            }, 
            {
                "descr": "The y position of the panner in 3D space.", 
                "name": "y"
            }, 
            {
                "descr": "The z position of the panner in 3D space.", 
                "name": "z"
            }
        ], 
        "path": "dom/pannernode/setposition", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.setPosition(0,0,0);", 
        "type": "Web Audio"
    }, 
    "PannerNode.setVelocity": {
        "descr": "The setVelocity() method of the PannerNode Interface defines the velocity vector of the audio source \u2014 how fast it is moving and in what direction.", 
        "name": "PannerNode.setVelocity", 
        "params": [
            {
                "descr": "The x value of the panner's velocity vector.", 
                "name": "x"
            }, 
            {
                "descr": "The y value of the panner's velocity vector.", 
                "name": "y"
            }, 
            {
                "descr": "The z value of the panner's velocity vector.", 
                "name": "z"
            }
        ], 
        "path": "dom/pannernode/setvelocity", 
        "syntax": "var audioCtx = new AudioContext();\n or var panner = audioCtx.createPanner();\n or panner.setVelocity(0,0,17);", 
        "type": "Web Audio"
    }, 
    "ParallelArray": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "ParallelArray", 
        "params": [
            {
                "descr": "Reflects the number of elements in the ParallelArray.", 
                "name": "length"
            }
        ], 
        "path": "javascript/global_objects/parallelarray", 
        "syntax": "new ParallelArray()new ParallelArray([element0, element1, ...])new ParallelArray(arrayLength, elementalFunction)", 
        "type": "Global Objects"
    }, 
    "ParentNode.append": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ParentNode.append", 
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.", 
                "name": "nodes"
            }
        ], 
        "path": "dom/parentnode/append", 
        "syntax": "ParentNode.append method inserts a set of Node", 
        "type": "Node"
    }, 
    "ParentNode.childElementCount": {
        "descr": "The ParentNode.childElementCount read-only property returns an unsigned long representing the number of child elements of the given element.", 
        "name": "ParentNode.childElementCount", 
        "params": [], 
        "path": "dom/parentnode/childelementcount", 
        "syntax": "var elCount = elementNodeReference.childElementCount;  Polyfill for Internet Explorer 8 This property is unsupported prior to IE9, so the following snippet can be used to add support to IE8: // Source: https://github.com/Alhadis/Snippets/blob/master/js/polyfills/IE8-child-elements.jsif(!(\"childElementCount\" in document.documentElement)){    Object.defineProperty(Element.prototype, \"childElementCount\", {        get: function(){            for(var c = 0, nodes = this.children, n, i = 0, l = nodes.length; i < l; ++i)                (n = nodes[i], 1 === n.nodeType) && ++c;            return c;        }    });\n or });", 
        "type": "Node"
    }, 
    "ParentNode.children": {
        "descr": "Node.children is a read-only property that returns a live HTMLCollection of the child elements of Node.", 
        "name": "ParentNode.children", 
        "params": [], 
        "path": "dom/parentnode/children", 
        "syntax": "var elList = elementNodeReference.children;  elList is a HTMLCollection", 
        "type": "Node"
    }, 
    "ParentNode.firstElementChild": {
        "descr": "The ParentNode.firstElementChild read-only property returns the object's first child Element, or null if there are no child elements.", 
        "name": "ParentNode.firstElementChild", 
        "params": [], 
        "path": "dom/parentnode/firstelementchild", 
        "syntax": "var childNode = elementNodeReference.firstElementChild;  Example <p id=\"para-01\">  <span>First span</span></p><script type=\"text/javascript\">  var p01 = document.getElementById('para-01');\n or   alert(p01.firstElementChild.nodeName)</script>);", 
        "type": "Node"
    }, 
    "ParentNode.lastElementChild": {
        "descr": "The ParentNode.lastElementChild read-only property returns the object's last child Element or null if there are no child elements.", 
        "name": "ParentNode.lastElementChild", 
        "params": [], 
        "path": "dom/parentnode/lastelementchild", 
        "syntax": "var childNode = elementNodeReference.lastElementChild;  Example <p id=\"para-01\">  <span>First span</span>  <b>bold</b></p><script type=\"text/javascript\">  var p01 = document.getElementById('para-01');\n or   alert(p01.lastElementChild.nodeName)</script>);", 
        "type": "Node"
    }, 
    "ParentNode.prepend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ParentNode.prepend", 
        "params": [
            {
                "descr": "A set of Node or DOMString objects to insert.", 
                "name": "nodes"
            }
        ], 
        "path": "dom/parentnode/prepend", 
        "syntax": "ParentNode.prepend method inserts a set of Node", 
        "type": "Node"
    }, 
    "PasswordCredential": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PasswordCredential", 
        "params": [
            {
                "descr": "Creates a new PasswordCredential object.", 
                "name": "PasswordCredential.PasswordCredential()"
            }, 
            {
                "descr": "One of a FormData instance, a URLSearchParams instance, or null. ", 
                "name": "PasswordCredential.additionalData"
            }, 
            {
                "descr": "A USVString representing the name that will be used for the ID field when submitting the current object to a remote endpoint via fetch. ", 
                "name": "PasswordCredential.idName"
            }, 
            {
                "descr": "A USVString representing the name that will be used for the password field when submitting the current object to a remote endpoint via fetch. ", 
                "name": "PasswordCredential.passwordName"
            }
        ], 
        "path": "dom/passwordcredential", 
        "syntax": "credential member of the init object for global fetch", 
        "type": "Credential Management"
    }, 
    "PasswordCredential.additionalData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PasswordCredential.additionalData", 
        "params": [], 
        "path": "dom/passwordcredential/additionaldata", 
        "syntax": "additionalData property of the PasswordCredential interface takes one of a FormData", 
        "type": "Credential Management"
    }, 
    "PasswordCredential.idName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PasswordCredential.idName", 
        "params": [], 
        "path": "dom/passwordcredential/idname", 
        "syntax": "idName property of the PasswordCredential interface returns a USVString representing the name that will be used for the ID field when submitting the current object to a remote endpoint via fetch", 
        "type": "Credential Management"
    }, 
    "PasswordCredential.passwordName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PasswordCredential.passwordName", 
        "params": [], 
        "path": "dom/passwordcredential/passwordname", 
        "syntax": "passwordName property of the PasswordCredential interface returns a USVString representing the name that will be used for the password field when submitting the current object to a remote endpoint via fetch", 
        "type": "Credential Management"
    }, 
    "Path2D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Path2D", 
        "params": [
            {
                "descr": "Path2D constructor. Creates a new Path2D object.", 
                "name": "Path2D()"
            }, 
            {
                "descr": "Adds a path to the current path.", 
                "name": "Path2D.addPath()"
            }, 
            {
                "descr": "Causes the point of the pen to move back to the start of the current sub-path. ", 
                "name": "Path2D.closePath()"
            }, 
            {
                "descr": "Moves the starting point of a new sub-path to the (x, y) coordinates.", 
                "name": "Path2D.moveTo()"
            }, 
            {
                "descr": "Connects the last point in the subpath to the x, y coordinates with a straight line.", 
                "name": "Path2D.lineTo()"
            }, 
            {
                "descr": "Adds a cubic B\u00e9zier curve to the path. ", 
                "name": "Path2D.bezierCurveTo()"
            }, 
            {
                "descr": "Adds a quadratic B\u00e9zier curve to the current path.", 
                "name": "Path2D.quadraticCurveTo()"
            }, 
            {
                "descr": "Adds an arc to the path which is centered at (x, y) position with radius r starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).", 
                "name": "Path2D.arc()"
            }, 
            {
                "descr": "Adds an arc to the path with the given control points and radius, connected to the previous point by a straight line.", 
                "name": "Path2D.arcTo()"
            }, 
            {
                "descr": "Adds an ellipse to the path which is centered at (x, y) position with the radii radiusX and radiusY starting at startAngle and ending at endAngle going in the given direction by anticlockwise (defaulting to clockwise).", 
                "name": "Path2D.ellipse()"
            }, 
            {
                "descr": "Creates a path for a rectangle atposition (x, y) with a size that is determined by width and height.", 
                "name": "Path2D.rect()"
            }
        ], 
        "path": "dom/path2d", 
        "syntax": "Path2D interface of the Canvas 2D API is used to declare paths that are then later used on CanvasRenderingContext2D", 
        "type": "Canvas"
    }, 
    "Path2D.addPath": {
        "descr": "The Path2D.addPath() method of the Canvas 2D API adds to the path the path given by the argument.", 
        "name": "Path2D.addPath", 
        "params": [
            {
                "descr": "A Path2D path to add.", 
                "name": "path"
            }, 
            {
                "descr": "An SVGMatrix to be used as the transformation matrix for the path that is added.", 
                "name": "transform Optional"
            }
        ], 
        "path": "dom/path2d/addpath", 
        "syntax": "void path.addPath(path [, transform]);", 
        "type": "Canvas"
    }, 
    "Path2D.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Path2D.constructor", 
        "params": [
            {
                "descr": "When invoked with another Path2D object, a copy of the path argument is created.", 
                "name": "path Optional"
            }, 
            {
                "descr": "When invoked with a string consisting of SVG path data, a new path is created from that description.", 
                "name": "d Optional"
            }
        ], 
        "path": "dom/path2d/path2d", 
        "syntax": "Path2D()", 
        "type": "Canvas"
    }, 
    "Performance API: Using the Performance API": {
        "descr": "A fundamental requirement of web performance is a precise and consistent definition of time. The DOMHighResTimeStamp type (a double) is used by all performance interfaces to hold such time values. Additionally, there must be a way to create a timestamp for a specific point in time; this is done with the now() method.", 
        "name": "Performance API: Using the Performance API", 
        "params": [], 
        "path": "dom/performance_api/using_the_performance_api", 
        "syntax": "Performance interface. High precision timing High precision timing is achieved by using the DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "Performance Timeline": {
        "descr": "The Performance Timeline API defines extensions to the Performance interface to support client-side latency measurements within applications. The extensions provide interfaces to retrieve performance entry metrics based on specific filter criteria. The standard also includes interfaces that allow an application to define performance observer callbacks that are notified when specific performance events are added to the browser's performance timeline.", 
        "name": "Performance Timeline", 
        "params": [
            {
                "descr": "Returns all recorded performance entries or, optionally, the entries based on the specified name, performance type and/or the initiatorType (such as a HTML element).", 
                "name": "getEntries()"
            }, 
            {
                "descr": "Returns the recorded performance entries based on the specified name and optionally the performance type.", 
                "name": "getEntriesByName()"
            }, 
            {
                "descr": "Returns the recorded performance entries based on the specified performance type.", 
                "name": "getEntriesByType()"
            }, 
            {
                "descr": "The name of the performance entry when the metric was created.", 
                "name": "name"
            }, 
            {
                "descr": "The type of performance metric (for example \"mark\").", 
                "name": "entryType"
            }, 
            {
                "descr": "A high resolution timestamp representing the starting time for the performance entry.", 
                "name": "startTime"
            }, 
            {
                "descr": "A high resolution timestamp representing the time value of the duration of the performance event. ", 
                "name": "duration"
            }
        ], 
        "path": "dom/performance_timeline", 
        "syntax": "performance observer entry list that only contains observed performance entries", 
        "type": "Web Performance"
    }, 
    "Performance Timeline.Using Performance Timeline": {
        "descr": "The Performance Timeline standard defines extensions to the Performance interface to support client-side latency measurements within applications. The standard also includes interfaces that allow an application to be notified when specific performance events occur. Together, these interfaces can be used to help identify an application's performance bottlenecks.", 
        "name": "Performance Timeline.Using Performance Timeline", 
        "params": [], 
        "path": "dom/performance_timeline/using_performance_timeline", 
        "syntax": "performance observer entry list that only contains observed performance entries", 
        "type": "Web Performance"
    }, 
    "Performance.clearMarks": {
        "descr": "The clearMarks() method removes the named mark from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of \"mark\" will be removed from the performance entry buffer.", 
        "name": "Performance.clearMarks", 
        "params": [
            {
                "descr": "A DOMString representing the name of the timestamp. ", 
                "name": "name Optional"
            }
        ], 
        "path": "dom/performance/clearmarks", 
        "syntax": "performance.clearMarks();\n or performance.clearMarks(name);", 
        "type": "Web Performance"
    }, 
    "Performance.clearMeasures": {
        "descr": "The clearMeasures() method removes the named measure from the browser's performance entry buffer. If the method is called with no arguments, all performance entries with an entry type of \"measure\" will be removed from the performance entry buffer.", 
        "name": "Performance.clearMeasures", 
        "params": [
            {
                "descr": "A DOMString representing the name of the timestamp. ", 
                "name": "name Optional"
            }
        ], 
        "path": "dom/performance/clearmeasures", 
        "syntax": "performance.clearMeasures();\n or performance.clearMeasures(name);", 
        "type": "Web Performance"
    }, 
    "Performance.clearResourceTimings": {
        "descr": "The clearResourceTimings() method removes all performance entries with an entryType of \"resource\" from the browser's performance data buffer and sets the size of the performance data buffer to zero. To set the size of the browser's performance data buffer, use the Performance.setResourceTimingBufferSize() method.", 
        "name": "Performance.clearResourceTimings", 
        "params": [
            {
                "descr": "This method has no return value.", 
                "name": "void   Return value  none"
            }
        ], 
        "path": "dom/performance/clearresourcetimings", 
        "syntax": "performance.clearResourceTimings();", 
        "type": "Web Performance"
    }, 
    "Performance.getEntries": {
        "descr": "The getEntries() method returns a list of PerformanceEntry objects for a given filter. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.", 
        "name": "Performance.getEntries", 
        "params": [
            {
                "descr": "PerformanceEntryFilterOptions is a dictionary with the following fields:  \"name\", the name of a performance entry. ", 
                "name": "PerformanceEntryFilterOptions Optional"
            }, 
            {
                "descr": "A list of PerformanceEntry objects that meets the criteria of the filter. ", 
                "name": "entries"
            }
        ], 
        "path": "dom/performance/getentries", 
        "syntax": "entries = window.performance.getEntries();\n or entries = window.performance.getEntries(PerformanceEntryFilterOptions);", 
        "type": "Web Performance"
    }, 
    "Performance.getEntriesByName": {
        "descr": "The getEntriesByName() method returns a list of PerformanceEntry objects for the given name and type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.", 
        "name": "Performance.getEntriesByName", 
        "params": [
            {
                "descr": "The name of the entry to retrieve.", 
                "name": "name"
            }, 
            {
                "descr": "The type of entry to retrieve such as \"mark\". ", 
                "name": "type Optional"
            }, 
            {
                "descr": "A list of PerformanceEntry objects that have the specified name and type. ", 
                "name": "entries"
            }
        ], 
        "path": "dom/performance/getentriesbyname", 
        "syntax": "entries = window.performance.getEntriesByName(name, type);", 
        "type": "Web Performance"
    }, 
    "Performance.getEntriesByType": {
        "descr": "The getEntriesByType() method returns a list of PerformanceEntry objects for a given type. The list's members (entries) can be created by making performance marks or measures (for example by calling the mark() method) at explicit points in time.", 
        "name": "Performance.getEntriesByType", 
        "params": [
            {
                "descr": "The type of entry to retrieve such as \"mark\". ", 
                "name": "type"
            }, 
            {
                "descr": "A list of PerformanceEntry objects that have the specified type. ", 
                "name": "entries"
            }
        ], 
        "path": "dom/performance/getentriesbytype", 
        "syntax": "entries = window.performance.getEntriesByType(type);", 
        "type": "Web Performance"
    }, 
    "Performance.mark": {
        "descr": "The mark() method creates a timestamp in the browser's performance entry buffer with the given name. The application defined timestamp can be retrieved by one of the Performance interface's getEntries*() methods (getEntries(), getEntriesByName() or getEntriesByType()).", 
        "name": "Performance.mark", 
        "params": [
            {
                "descr": "A DOMString representing the name of the mark.", 
                "name": "name"
            }
        ], 
        "path": "dom/performance/mark", 
        "syntax": "SyntaxError is thrown. Syntax performance.mark(name);", 
        "type": "Web Performance"
    }, 
    "Performance.measure": {
        "descr": "The measure() method creates a named timestamp in the browser's performance entry buffer between two specified marks (known as the start mark and end mark, respectively). The named timestamp is referred to as a measure.", 
        "name": "Performance.measure", 
        "params": [
            {
                "descr": "A DOMString representing the name of the measure.", 
                "name": "name"
            }, 
            {
                "descr": "A DOMString representing the name of the measure's starting mark. ", 
                "name": "startMark Optional"
            }, 
            {
                "descr": "A DOMString representing the name of the measure's ending mark. ", 
                "name": "endMark Optional"
            }
        ], 
        "path": "dom/performance/measure", 
        "syntax": "performance.measure(name, startMark, endMark);", 
        "type": "Web Performance"
    }, 
    "Performance.navigation": {
        "descr": "Not available to workers.Although the interface of this feature is available to workers, this feature isn't.", 
        "name": "Performance.navigation", 
        "params": [], 
        "path": "dom/performance/navigation", 
        "syntax": "navObject = performance.navigation; Specifications    Specification Status Comment   Navigation TimingThe definition of 'Performance.navigation' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 10 7.0 (7.0) 9.0 15 8         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support (Yes) 7.0 (7.0) 1.0 (7.0) 9.0 Not supported 9     See also", 
        "type": "Web Performance"
    }, 
    "Performance.now": {
        "descr": "The Performance.now() method returns a DOMHighResTimeStamp, measured in milliseconds, accurate to one thousandth of a millisecond.", 
        "name": "Performance.now", 
        "params": [], 
        "path": "dom/performance/now", 
        "syntax": "t = performance.now();", 
        "type": "Web Performance"
    }, 
    "Performance.onresourcetimingbufferfull": {
        "descr": "The onresourcetimingbufferfull property is an event handler that will be called when the resourcetimingbufferfull event is fired. This event is fired when the browser's resource timing performance buffer is full.", 
        "name": "Performance.onresourcetimingbufferfull", 
        "params": [
            {
                "descr": "An EventHandler that is invoked when the resourcetimingbufferfull event is fired.", 
                "name": "callback"
            }
        ], 
        "path": "dom/performance/onresourcetimingbufferfull", 
        "syntax": "callback = performance.onresourcetimingbufferfull = buffer_full_cb; Return value  callback An EventHandler", 
        "type": "Web Performance"
    }, 
    "Performance.setResourceTimingBufferSize": {
        "descr": "The setResourceTimingBufferSize() method sets the browser's resource timing buffer size to the specified number of \"resource\" performance entry type objects.", 
        "name": "Performance.setResourceTimingBufferSize", 
        "params": [
            {
                "descr": "A number representing the maximum number of performance entry objects the browser should hold in its performance entry buffer.", 
                "name": "maxSize"
            }, 
            {
                "descr": "This method has no return value.", 
                "name": "none"
            }
        ], 
        "path": "dom/performance/setresourcetimingbuffersize", 
        "syntax": "performance.setResourceTimingBufferSize(maxSize);", 
        "type": "Web Performance"
    }, 
    "Performance.timing": {
        "descr": "The Performance.timing read-only property returns a PerformanceTiming object containing latency-related performance information.", 
        "name": "Performance.timing", 
        "params": [], 
        "path": "dom/performance/timing", 
        "syntax": "timingInfo = performance.timing; Specifications    Specification Status Comment   Navigation TimingThe definition of 'Performance.timing' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 8         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support 6.0 7.0 (7.0) 1.0 (7.0) 9.0 15.0 9     See also", 
        "type": "Web Performance"
    }, 
    "Performance.toJSON": {
        "descr": "The toJSON() method of the Performance interface is a standard serializer: it returns a JSON representation of the performance object's properties.", 
        "name": "Performance.toJSON", 
        "params": [
            {
                "descr": "A JSON object that is the serialization of the Performance object.", 
                "name": "None   Return value  myPerf"
            }
        ], 
        "path": "dom/performance/tojson", 
        "syntax": "myPerf = performance.toJSON()", 
        "type": "Web Performance"
    }, 
    "PerformanceEntry.duration": {
        "descr": "The duration property returns a timestamp that is the duration of the performance entry.", 
        "name": "PerformanceEntry.duration", 
        "params": [], 
        "path": "dom/performanceentry/duration", 
        "syntax": "entry.duration; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceEntry.entryType": {
        "descr": "The entryType property returns the performance entry's type. The valid entryType values are:", 
        "name": "PerformanceEntry.entryType", 
        "params": [], 
        "path": "dom/performanceentry/entrytype", 
        "syntax": "entry.entryType; Return value A DOMString representing the type of interface the performance entry", 
        "type": "Web Performance"
    }, 
    "PerformanceEntry.name": {
        "descr": "The name property returns the name given to a performance entry when the entry was created (for example by calling performance.mark()).", 
        "name": "PerformanceEntry.name", 
        "params": [], 
        "path": "dom/performanceentry/name", 
        "syntax": "entry.name; Return value A DOMString representing the name of the performance entry when the metric was created. Note: if the performance entry has an entryType of \"resource\" (i.e. the entry is a PerformanceResourceTiming", 
        "type": "Web Performance"
    }, 
    "PerformanceEntry.startTime": {
        "descr": "The startTime property returns the first recorded timestamp of the performance entry.", 
        "name": "PerformanceEntry.startTime", 
        "params": [], 
        "path": "dom/performanceentry/starttime", 
        "syntax": "entry.startTime; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceEntry.toJSON": {
        "descr": "The toJSON() method is a serializer; it returns a JSON representation of the performance entry object.", 
        "name": "PerformanceEntry.toJSON", 
        "params": [
            {
                "descr": "A JSON object that is the serialization of the PerformanceEntry object.", 
                "name": "None   Return value  json"
            }
        ], 
        "path": "dom/performanceentry/tojson", 
        "syntax": "json = perfEntry.toJSON();", 
        "type": "Web Performance"
    }, 
    "PerformanceFrameTiming": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceFrameTiming", 
        "params": [
            {
                "descr": "Set to \"frame\".", 
                "name": "PerformanceEntry.entryType"
            }, 
            {
                "descr": "Set to the document's address.", 
                "name": "PerformanceEntry.name"
            }, 
            {
                "descr": "Set to the timestamp when the frame was started.", 
                "name": "PerformanceEntry.startTime"
            }, 
            {
                "descr": "Set to a timestamp indicating the difference between the startTimes of two successive frames.", 
                "name": "PerformanceEntry.duration"
            }
        ], 
        "path": "dom/performanceframetiming", 
        "syntax": "PerformanceFrameTiming interface provides frame timing data about the browser's event loop. A frame represents the amount of work a browser does in one event loop such as processing DOM events, resizing, scrolling, rendering, CSS animations, etc. A frame rate of 60fps (frames per second) for a 60Hz refresh rate is the target for a good responsive user experience. This means the browser should process a frame in about 16.7ms.", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigation.redirectCount": {
        "descr": "The PerformanceNavigation.redirectCount read-only property returns an unsigned short representing the number of REDIRECTs done before reaching the page.", 
        "name": "PerformanceNavigation.redirectCount", 
        "params": [], 
        "path": "dom/performancenavigation/redirectcount", 
        "syntax": "amount = performanceNavigation.redirectCount; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceNavigation.redirectCount' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported 7.0 (7.0) 9.0 Not supported Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 Not supported Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigation.type": {
        "descr": "The PerformanceNavigation.type read-only property returns an unsigned short containing a constant describing how the navigation to this page was done. Possible values are:", 
        "name": "PerformanceNavigation.type", 
        "params": [], 
        "path": "dom/performancenavigation/type", 
        "syntax": "type = performanceNavigation.type; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceNavigation.type' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported 7.0 (7.0) 9.0 Not supported Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 Not supported Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming", 
        "params": [
            {
                "descr": "A DOMHighResTimeStamp representing a time value equal to the time immediately before the browser sets the current document readiness of the current document to complete.", 
                "name": "PerformanceNavigationTiming.domComplete Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately after the current document's DOMContentLoaded event completes.", 
                "name": "PerformanceNavigationTiming.domContentLoadedEventEnd Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent fires the DOMContentLoaded event at the current document.", 
                "name": "PerformanceNavigationTiming.domContentLoadedEventStart Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing a timestamp representing the time value equal to the time immediately before the user agent sets the current document readiness of the current document to interactive.", 
                "name": "PerformanceNavigationTiming.domInteractive Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing the time when the load event of the current document is completed.", 
                "name": "PerformanceNavigationTiming.loadEventEnd Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately before the load event of the current document is fired.", 
                "name": "PerformanceNavigationTiming.loadEventStart Read only"
            }, 
            {
                "descr": "A number representing the number of redirects since the last non-redirect navigation under the current browsing context.", 
                "name": "PerformanceNavigationTiming.redirectCount Read only"
            }, 
            {
                "descr": "A string representing the navigation type. ", 
                "name": "PerformanceNavigationTiming.type Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately after the user agent finishes the unload event of the previous document.", 
                "name": "PerformanceNavigationTiming.unloadEventEnd Read only"
            }, 
            {
                "descr": "A DOMHighResTimeStamp representing the time value equal to the time immediately before the user agent starts the unload event of the previous document.", 
                "name": "PerformanceNavigationTiming.unloadEventStart Read only"
            }, 
            {
                "descr": "Returns a DOMString that is the JSON representation of the PerformanceNavigationTiming object.", 
                "name": "PerformanceNavigationTiming.toJSON()"
            }
        ], 
        "path": "dom/performancenavigationtiming", 
        "syntax": "PerformanceNavigationTiming interface provides methods and properties to store and retrieve high resolution timestamps", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.domComplete": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.domComplete", 
        "params": [], 
        "path": "dom/performancenavigationtiming/domcomplete", 
        "syntax": "domComplete property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.domContentLoadedEventEnd": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.domContentLoadedEventEnd", 
        "params": [], 
        "path": "dom/performancenavigationtiming/domcontentloadedeventend", 
        "syntax": "domContentLoadedEventEnd property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.domContentLoadedEventStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.domContentLoadedEventStart", 
        "params": [], 
        "path": "dom/performancenavigationtiming/domcontentloadedeventstart", 
        "syntax": "domContentLoadedEventStart property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.domInteractive": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.domInteractive", 
        "params": [], 
        "path": "dom/performancenavigationtiming/dominteractive", 
        "syntax": "domInteractive property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.loadEventEnd": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.loadEventEnd", 
        "params": [], 
        "path": "dom/performancenavigationtiming/loadeventend", 
        "syntax": "loadEventEnd property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.loadEventStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.loadEventStart", 
        "params": [], 
        "path": "dom/performancenavigationtiming/loadeventstart", 
        "syntax": "loadEventStart property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.redirectCount": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.redirectCount", 
        "params": [], 
        "path": "dom/performancenavigationtiming/redirectcount", 
        "syntax": "redirectCount property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.toJSON": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.toJSON", 
        "params": [
            {
                "descr": "A JSON object that is the serialization of the PerformanceNavigationTiming object as a map with entries from the closest inherited interface and with entries for each of the serializable attributes.", 
                "name": "None   Return value  json"
            }
        ], 
        "path": "dom/performancenavigationtiming/tojson", 
        "syntax": "toJSON()", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.type": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.type", 
        "params": [
            {
                "descr": "Navigation started by clicking a link, entering the URL in the browser's address bar, form submission, or initializing through a script operation other than reload and back_forward as listed below.", 
                "name": "navigate"
            }, 
            {
                "descr": "Navigation is through the browser's reload operation or location.reload().", 
                "name": "reload"
            }, 
            {
                "descr": "Navigation is through the browser's history traversal operation.", 
                "name": "back_forward"
            }, 
            {
                "descr": "Navigation is initiated by a prerender hint.", 
                "name": "prerender"
            }
        ], 
        "path": "dom/performancenavigationtiming/type", 
        "syntax": "type property returns a string representing the type of navigation. The value must be one of the following:  navigate Navigation started by clicking a link, entering the URL in the browser's address bar, form submission, or initializing through a script operation other than reload and back_forward as listed below. reload Navigation is through the browser's reload operation or location.reload()", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.unloadEventEnd": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.unloadEventEnd", 
        "params": [], 
        "path": "dom/performancenavigationtiming/unloadeventend", 
        "syntax": "unloadEventEnd property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceNavigationTiming.unloadEventStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceNavigationTiming.unloadEventStart", 
        "params": [], 
        "path": "dom/performancenavigationtiming/unloadeventstart", 
        "syntax": "unloadEventStart property returns a timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceObserver": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserver", 
        "params": [
            {
                "descr": "Creates a PerformanceObserver object.", 
                "name": "PerformanceObserver()"
            }, 
            {
                "descr": "Specifies the set of entry types to observe. ", 
                "name": "PerformanceObserver.observe()"
            }, 
            {
                "descr": "Stops the performance observer callback from receiving performance entries.", 
                "name": "PerformanceObserver.disconnect()"
            }
        ], 
        "path": "dom/performanceobserver", 
        "syntax": "PerformanceObserver interface is used to observe performance measurement events and be notified of new performance entries as they are recorded in the browser's performance timeline.", 
        "type": "Web Performance"
    }, 
    "PerformanceObserver.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserver.constructor", 
        "params": [
            {
                "descr": "A PerformanceObserverCallback callback that will be invoked when observered performance events are recorded. ", 
                "name": "callback"
            }
        ], 
        "path": "dom/performanceobserver/performanceobserver", 
        "syntax": "PerformanceObserver()", 
        "type": "Web Performance"
    }, 
    "PerformanceObserver.disconnect": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserver.disconnect", 
        "params": [], 
        "path": "dom/performanceobserver/disconnect", 
        "syntax": "disconnect()", 
        "type": "Web Performance"
    }, 
    "PerformanceObserver.observe": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserver.observe", 
        "params": [
            {
                "descr": "A PerformanceObserverInit dictionary with one member:  \"entryTypes\", an array of strings and the valid values for the strings are defined in PerformanceEntry.entryType. ", 
                "name": "options"
            }
        ], 
        "path": "dom/performanceobserver/observe", 
        "syntax": "observe()", 
        "type": "Web Performance"
    }, 
    "PerformanceObserverEntryList": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserverEntryList", 
        "params": [
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects based on the given filter.", 
                "name": "PerformanceObserverEntryList.getEntries()"
            }, 
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects of the given entry type.", 
                "name": "PerformanceObserverEntryList.getEntriesByType()"
            }, 
            {
                "descr": "Returns a list of explicitly observed PerformanceEntry objects based on the given name and entry type.", 
                "name": "PerformanceObserverEntryList.getEntriesByName()"
            }
        ], 
        "path": "dom/performanceobserverentrylist", 
        "syntax": "PerformanceObserverEntryList interface is a list of peformance events that were explicitly observed via the observe()", 
        "type": "Web Performance"
    }, 
    "PerformanceObserverEntryList.getEntries": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserverEntryList.getEntries", 
        "params": [
            {
                "descr": "Is a PerformanceEntryFilterOptions dictionary, having the following fields:  \"name\", the name of a performance entry. ", 
                "name": "PerformanceEntryFilterOptionsOptional"
            }
        ], 
        "path": "dom/performanceobserverentrylist/getentries", 
        "syntax": "getEntries()", 
        "type": "Web Performance"
    }, 
    "PerformanceObserverEntryList.getEntriesByName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserverEntryList.getEntriesByName", 
        "params": [
            {
                "descr": "A DOMString representing the name of the entry to retrieve.", 
                "name": "name"
            }, 
            {
                "descr": "A DOMString representing the type of entry to retrieve such as \"mark\". ", 
                "name": "type Optional"
            }
        ], 
        "path": "dom/performanceobserverentrylist/getentriesbyname", 
        "syntax": "getEntriesByName()", 
        "type": "Web Performance"
    }, 
    "PerformanceObserverEntryList.getEntriesByType": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PerformanceObserverEntryList.getEntriesByType", 
        "params": [
            {
                "descr": "The type of entry to retrieve such as \"frame\". ", 
                "name": "type"
            }
        ], 
        "path": "dom/performanceobserverentrylist/getentriesbytype", 
        "syntax": "getEntriesByType()", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.connectEnd": {
        "descr": "The connectEnd property returns the timestamp immediately after the browser finishes establishing the connection to the server to retrieve the resource. The timestamp value includes the time interval to establish the transport connection, as well as other time intervals such as SSL handshake and SOCKS authentication.", 
        "name": "PerformanceResourceTiming.connectEnd", 
        "params": [], 
        "path": "dom/performanceresourcetiming/connectend", 
        "syntax": "resource.connectEnd; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.connectStart": {
        "descr": "The connectStart property returns the timestamp immediately before the user agent starts establishing the connection to the server to retrieve the resource.", 
        "name": "PerformanceResourceTiming.connectStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/connectstart", 
        "syntax": "resource.connectStart; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.decodedBodySize": {
        "descr": "The decodedBodySize property returns the size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings. If the resource is retrieved from an application cache or local resources, it returns the size of the payload after removing any applied content-codings.", 
        "name": "PerformanceResourceTiming.decodedBodySize", 
        "params": [], 
        "path": "dom/performanceresourcetiming/decodedbodysize", 
        "syntax": "resource.decodedBodySize; Return value The size (in octets) received from the fetch (HTTP or cache) of the message body, after removing any applied content-codings.", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.domainLookupEnd": {
        "descr": "The domainLookupEnd property returns the timestamp immediately after the browser finishes the domain name lookup for the resource.", 
        "name": "PerformanceResourceTiming.domainLookupEnd", 
        "params": [], 
        "path": "dom/performanceresourcetiming/domainlookupend", 
        "syntax": "resource.domainLookupEnd; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.domainLookupStart": {
        "descr": "The domainLookupStart property returns the timestamp immediately before the browser starts the domain name lookup for the resource.", 
        "name": "PerformanceResourceTiming.domainLookupStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/domainlookupstart", 
        "syntax": "resource.domainLookupStart; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.encodedBodySize": {
        "descr": "The encodedBodySize property represents the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.", 
        "name": "PerformanceResourceTiming.encodedBodySize", 
        "params": [], 
        "path": "dom/performanceresourcetiming/encodedbodysize", 
        "syntax": "resource.encodedBodySize; Return value A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before removing any applied content-codings.", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.fetchStart": {
        "descr": "The fetchStart property represents a timestamp immediately before the browser starts to fetch the resource.", 
        "name": "PerformanceResourceTiming.fetchStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/fetchstart", 
        "syntax": "resource.fetchStart; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.initiatorType": {
        "descr": "The initiatorType property is a string that represents the type of resource that initiated the performance event. The value of this string is as follows:", 
        "name": "PerformanceResourceTiming.initiatorType", 
        "params": [], 
        "path": "dom/performanceresourcetiming/initiatortype", 
        "syntax": "resource.initiatorType; Return value A string representing the type of resource that initiated the performance event, as specified above. Example function print_PerformanceEntries() {  // Use getEntriesByType() to just get the \"resource\" events  var p = performance.getEntriesByType(\"resource\");\n or   for (var i=0; i < p.length; i++) {    print_initiatorType(p[i]);\n or   }}function print_initiatorType(perfEntry) {  // Print this performance entry object's initiatorType value  var value = \"initiatorType\" in perfEntry;  if (value)    console.log(\"... initiatorType = \" + perfEntry.initiatorType);\n or   else    console.log(\"... initiatorType = NOT supported\");\n or });", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.nextHopProtocol": {
        "descr": "The nextHopProtocol property is a string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).", 
        "name": "PerformanceResourceTiming.nextHopProtocol", 
        "params": [], 
        "path": "dom/performanceresourcetiming/nexthopprotocol", 
        "syntax": "resource.nextHopProtocol; Return value A string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.redirectEnd": {
        "descr": "The redirectEnd property returns a timestamp immediately after receiving the last byte of the response of the last redirect.", 
        "name": "PerformanceResourceTiming.redirectEnd", 
        "params": [], 
        "path": "dom/performanceresourcetiming/redirectend", 
        "syntax": "resource.redirectEnd; Return value A timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.redirectStart": {
        "descr": "The redirectStart property returns a timestamp representing the start time of the fetch which that initiates the redirect.", 
        "name": "PerformanceResourceTiming.redirectStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/redirectstart", 
        "syntax": "resource.redirectStart; Return value A timestamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.requestStart": {
        "descr": "The requestStart property returns a timestamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource. If the transport connection fails and the browser retires the request, the value returned will be the start of the retry request.", 
        "name": "PerformanceResourceTiming.requestStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/requeststart", 
        "syntax": "resource.requestStart; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.responseEnd": {
        "descr": "The responseEnd property returns a timestamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.", 
        "name": "PerformanceResourceTiming.responseEnd", 
        "params": [], 
        "path": "dom/performanceresourcetiming/responseend", 
        "syntax": "resource.responseEnd; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.responseStart": {
        "descr": "The responseStart property returns a timestamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.", 
        "name": "PerformanceResourceTiming.responseStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/responsestart", 
        "syntax": "resource.responseStart; Return value A DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.secureConnectionStart": {
        "descr": "The secureConnectionStart property returns a timestamp immediately before the browser starts the handshake process to secure the current connection. If a secure connection is not used, the property returns zero.", 
        "name": "PerformanceResourceTiming.secureConnectionStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/secureconnectionstart", 
        "syntax": "resource.secureConnectionStart; Return value If the resource is fetched over a secure connection, a DOMHighResTimeStamp", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.toJSON": {
        "descr": "The toJSON() method is a serializer that returns a JSON representation of the PerformanceResourceTiming object.", 
        "name": "PerformanceResourceTiming.toJSON", 
        "params": [
            {
                "descr": "A JSON object that is the serialization of the PerformanceResourceTiming object as a map with entries from the closest inherited interface and with entries for each of the serializable attributes.", 
                "name": "None   Return value  json"
            }
        ], 
        "path": "dom/performanceresourcetiming/tojson", 
        "syntax": "json = resourcePerfEntry.toJSON();", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.transferSize": {
        "descr": "The transferSize property represents the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body (as defined by RFC7230.", 
        "name": "PerformanceResourceTiming.transferSize", 
        "params": [], 
        "path": "dom/performanceresourcetiming/transfersize", 
        "syntax": "resource.transferSize; Return value A number representing the size (in octets) of the fetched resource. The size includes the response header fields plus the response payload body (RFC7230).", 
        "type": "Web Performance"
    }, 
    "PerformanceResourceTiming.workerStart": {
        "descr": "If the current context is a worker, the workerStart property returns a timestamp immediately before the worker that fetches the resource is started. If the context is not a worker (i.e. a browser context), this property returns zero.", 
        "name": "PerformanceResourceTiming.workerStart", 
        "params": [], 
        "path": "dom/performanceresourcetiming/workerstart", 
        "syntax": "resource.workerStart; Return value If the current context is a worker", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.connectEnd": {
        "descr": "The PerformanceTiming.connectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the connection is opened network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment end time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart. A connection is considered as opened when all secure connection handshake, or SOCKS authentication, is terminated.", 
        "name": "PerformanceTiming.connectEnd", 
        "params": [], 
        "path": "dom/performancetiming/connectend", 
        "syntax": "time = performanceTiming.connectEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.connectEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.connectStart": {
        "descr": "The PerformanceTiming.connectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the request to open a connection is sent to the network. If the transport layer reports an error and the connection establishment is started again, the last connection establisment start time is given. If a persistent connection is used, the value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.connectStart", 
        "params": [], 
        "path": "dom/performancetiming/connectstart", 
        "syntax": "time = performanceTiming.connectStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.connectStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domComplete": {
        "descr": "The PerformanceTiming.domComplete read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'complete' and the corresponding readystatechange event is thrown.", 
        "name": "PerformanceTiming.domComplete", 
        "params": [], 
        "path": "dom/performancetiming/domcomplete", 
        "syntax": "time = performanceTiming.domComplete; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domComplete' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domContentLoadedEventEnd": {
        "descr": "The PerformanceTiming.domContentLoadedEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed.", 
        "name": "PerformanceTiming.domContentLoadedEventEnd", 
        "params": [], 
        "path": "dom/performancetiming/domcontentloadedeventend", 
        "syntax": "time = performanceTiming.domContentLoadedEventEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domContentLoadedEventEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domContentLoadedEventStart": {
        "descr": "The PerformanceTiming.domContentLoadedEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right before the parser sent the DOMContentLoaded event, that is right after all the scripts that need to be executed right after parsing has been executed.", 
        "name": "PerformanceTiming.domContentLoadedEventStart", 
        "params": [], 
        "path": "dom/performancetiming/domcontentloadedeventstart", 
        "syntax": "time = performanceTiming.domContentLoadedEventStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domContentLoadedEventStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domInteractive": {
        "descr": "The PerformanceTiming.domInteractive read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to 'interactive' and the corresponding readystatechange event is thrown.", 
        "name": "PerformanceTiming.domInteractive", 
        "params": [], 
        "path": "dom/performancetiming/dominteractive", 
        "syntax": "time = performanceTiming.domInteractive; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domInteractive' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domLoading": {
        "descr": "The PerformanceTiming.domLoading read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the parser started its work, that is when its Document.readyState changes to 'loading' and the corresponding readystatechange event is thrown.", 
        "name": "PerformanceTiming.domLoading", 
        "params": [], 
        "path": "dom/performancetiming/domloading", 
        "syntax": "time = performanceTiming.domLoading; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domLoading' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domainLookupEnd": {
        "descr": "The PerformanceTiming.domainLookupEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup is finished. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.domainLookupEnd", 
        "params": [], 
        "path": "dom/performancetiming/domainlookupend", 
        "syntax": "time = performanceTiming.domainLookupEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domainLookupEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.domainLookupStart": {
        "descr": "The PerformanceTiming.domainLookupStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the domain lookup starts. If a persistent connection is used, or the information is stored in a cache or a local resource, the value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.domainLookupStart", 
        "params": [], 
        "path": "dom/performancetiming/domainlookupstart", 
        "syntax": "time = performanceTiming.domainLookupStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.domainLookupStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.fetchStart": {
        "descr": "The PerformanceTiming.fetchStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request. This moment is before the check to any application cache.", 
        "name": "PerformanceTiming.fetchStart", 
        "params": [], 
        "path": "dom/performancetiming/fetchstart", 
        "syntax": "time = performanceTiming.fetchStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.fetchStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.loadEventEnd": {
        "descr": "The PerformanceTiming.loadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event handler terminated, that is when the load event is completed. If this event has not yet been sent, or is not yet completed, it returns 0.", 
        "name": "PerformanceTiming.loadEventEnd", 
        "params": [], 
        "path": "dom/performancetiming/loadeventend", 
        "syntax": "time = performanceTiming.loadEventEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.loadEventEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.loadEventStart": {
        "descr": "The PerformanceTiming.loadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the load event was sent for the current document. If this event has not yet been sent, it returns 0.", 
        "name": "PerformanceTiming.loadEventStart", 
        "params": [], 
        "path": "dom/performancetiming/loadeventstart", 
        "syntax": "time = performanceTiming.loadEventStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.loadEventStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.navigationStart": {
        "descr": "The PerformanceTiming.navigationStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context. If there is no previous document, this value will be the same as PerformanceTiming.fetchStart.", 
        "name": "PerformanceTiming.navigationStart", 
        "params": [], 
        "path": "dom/performancetiming/navigationstart", 
        "syntax": "time = performanceTiming.navigationStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.navigationStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.redirectEnd": {
        "descr": "The PerformanceTiming.redirectEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.redirectEnd", 
        "params": [], 
        "path": "dom/performancetiming/redirectend", 
        "syntax": "time = performanceTiming.redirectEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.redirectEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.redirectStart": {
        "descr": "The PerformanceTiming.redirectStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the first HTTP redirect starts. If there is no redirect, or if one of the redirect is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.redirectStart", 
        "params": [], 
        "path": "dom/performancetiming/redirectstart", 
        "syntax": "time = performanceTiming.redirectStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.redirectStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.requestStart": {
        "descr": "The PerformanceTiming.requestStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache. If the transport layer fails after the start of the request and the connection is reopened, this property will be set to the time corresponding to the new request.", 
        "name": "PerformanceTiming.requestStart", 
        "params": [], 
        "path": "dom/performancetiming/requeststart", 
        "syntax": "time = performanceTiming.requestStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.requestStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.responseEnd": {
        "descr": "The PerformanceTiming.responseEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache, of from a local resource.", 
        "name": "PerformanceTiming.responseEnd", 
        "params": [], 
        "path": "dom/performancetiming/responseend", 
        "syntax": "time = performanceTiming.responseEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.responseEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.responseStart": {
        "descr": "The PerformanceTiming.responseStart read-only property returns an unsigned long long representing the moment in time (in milliseconds since the UNIX epoch) when the browser received the first byte of the response from the server, cache, or local resource.", 
        "name": "PerformanceTiming.responseStart", 
        "params": [], 
        "path": "dom/performancetiming/responsestart", 
        "syntax": "time = performanceTiming.responseStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.responseStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.secureConnectionStart": {
        "descr": "The PerformanceTiming.secureConnectionStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, where the secure connection handshake starts. If no such connection is requested, it returns 0.", 
        "name": "PerformanceTiming.secureConnectionStart", 
        "params": [], 
        "path": "dom/performancetiming/secureconnectionstart", 
        "syntax": "time = performanceTiming.secureConnectionStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.secureConnectionStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.unloadEventEnd": {
        "descr": "The PerformanceTiming.unloadEventEnd read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event handler finishes. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.unloadEventEnd", 
        "params": [], 
        "path": "dom/performancetiming/unloadeventend", 
        "syntax": "time = performanceTiming.unloadEventEnd; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.unloadEventEnd' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "PerformanceTiming.unloadEventStart": {
        "descr": "The PerformanceTiming.unloadEventStart read-only property returns an unsigned long long representing the moment, in miliseconds since the UNIX epoch, the unload event has been thrown. If there is no previous document, or if the previous document, or one of the needed redirects, is not of the same origin, the value returned is 0.", 
        "name": "PerformanceTiming.unloadEventStart", 
        "params": [], 
        "path": "dom/performancetiming/unloadeventstart", 
        "syntax": "time = performanceTiming.unloadEventStart; Specifications    Specification Status Comment   Navigation TimingThe definition of 'PerformanceTiming.unloadEventStart' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 6.0 7.0 (7.0) 9.0 15.0 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 7.0 (7.0) 1.0 (7.0) 9.0 15.0 Not supported     See also", 
        "type": "Web Performance"
    }, 
    "Pointer events": {
        "descr": "Most of today's web content assumes the user's pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed and pointer events address that need.", 
        "name": "Pointer events", 
        "params": [
            {
                "descr": "Any pointer input device that can produce events. ", 
                "name": "active pointer"
            }, 
            {
                "descr": "Pointer capture allows the events for a pointer to be retargeted to a particular element other than the normal hit test result of the pointer's location.", 
                "name": "pointer capture"
            }
        ], 
        "path": "dom/pointer_events", 
        "syntax": "PointerEvent interface extends the MouseEvent", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.constructor": {
        "descr": "The PointerEvent() constructor creates a new synthetic and untrusted PointerEvent.", 
        "name": "PointerEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event (see PointerEvent event types).", 
                "name": "type"
            }, 
            {
                "descr": "Is a PointerEventInit dictionary, having the following fields:  \"pointerId\", optional and defaulting to \"0\", of type long, that sets the value of PointerEvent. ", 
                "name": "PointerEventInitOptional"
            }
        ], 
        "path": "dom/pointerevent/pointerevent", 
        "syntax": "event = new PointerEvent(type, PointerEventInit);", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.height": {
        "descr": "The height of the pointer's contact geometry, along the Y axis (in CSS pixels). Depending on the source of the pointer device (for example a finger), for a given pointer, each event may produce a different value.", 
        "name": "PointerEvent.height", 
        "params": [
            {
                "descr": "The height of the event's contact area (in CSS pixels).", 
                "name": "contactHeight"
            }
        ], 
        "path": "dom/pointerevent/height", 
        "syntax": "var contactHeight = pointerEvent.height; Return value  contactHeight The height of the event's contact area (in CSS pixels).  Example", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.isPrimary": {
        "descr": "The property indicates whether or not the pointer device that created the event is the primary pointer. Returns true if the pointer that caused the event to be fired is the primary device and returns false otherwise.", 
        "name": "PointerEvent.isPrimary", 
        "params": [
            {
                "descr": "Returns true if the pointer for this event is the primary pointer and returns false otherwise.", 
                "name": "isPrime"
            }
        ], 
        "path": "dom/pointerevent/isprimary", 
        "syntax": "var isPrime = pointerEvent.isPrimary; Return value  isPrime Returns true if the pointer for this event is the primary pointer and returns false otherwise.  Example This example illustrates using the value of the isPrimary to call the appropriate processing function. target.addEventListener(\"pointerdown\", function(ev) {   if (ev.isPrimary)      process_primary_pointer(ev);\n or    else     process_secondary_pointer(ev);\n or  }, false);", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.pointerId": {
        "descr": "An identifier assigned to a pointer event that is unique from the identifiers of all active pointer events at the time. Authors cannot assume values convey any particular meaning other than an identifier for the pointer that is unique from all other active pointers.", 
        "name": "PointerEvent.pointerId", 
        "params": [
            {
                "descr": "The pointer event's unique identifier number.", 
                "name": "id"
            }
        ], 
        "path": "dom/pointerevent/pointerid", 
        "syntax": "var id = pointerEvent.pointerId; Return value  id The pointer event's unique identifier number.  Example This example illustrates the PointerEvent", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.pointerType": {
        "descr": "Indicates the device type that caused the pointer event. The supported values are the following strings:", 
        "name": "PointerEvent.pointerType", 
        "params": [
            {
                "descr": "The event was generated by a mouse device.", 
                "name": "mouse"
            }, 
            {
                "descr": "The event was generated by a pen or stylus device.", 
                "name": "pen"
            }, 
            {
                "descr": "The event was generated by a touch such as a finger.", 
                "name": "touch"
            }, 
            {
                "descr": "The event's pointer type, either the string mouse, pen or touch.", 
                "name": "pType"
            }
        ], 
        "path": "dom/pointerevent/pointertype", 
        "syntax": "var pType = pointerEvent.pointerType; Return value  pType The event's pointer type, either the string mouse, pen or touch.  Example This example illustrates using the value of the pointerType to call the appropriate pointer type processing function. targetElement.addEventListener(\"pointerdown\", function(ev) {   // Call the appropriate pointer type handler   switch (ev.pointerType) {     case \"mouse\":        process_pointer_mouse(ev);\n or         break;     case \"pen\":        process_pointer_pen(ev);\n or         break;     case \"touch\":        process_pointer_touch(ev);\n or         break;     default:       console.log(\"pointerType \" + ev.pointerType + \" is Not suported\");\n or    } }, false);", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.pressure": {
        "descr": "The normalized pressure of the pointer input in the range of 0 to 1, where 0 and 1 represent the minimum and maximum pressure the hardware is capable of detecting, respectively. For hardware that does not support pressure, including but not limited to mouse, the value MUST be 0.5 when the pointer is active and 0 otherwise.", 
        "name": "PointerEvent.pressure", 
        "params": [
            {
                "descr": "The amount of pressure applied to the pointer.", 
                "name": "pressure"
            }
        ], 
        "path": "dom/pointerevent/pressure", 
        "syntax": "var pressure = pointerEvent.pressure; Return value  pressure The amount of pressure applied to the pointer.  Example This example illustrates using the pressure property. When a pointerdown event is fired, different functions are called depending on the value of the event's pressure property. someElement.addEventListener('pointerdown', function(ev) {   if (ev.pressure == 0) {     // No pressure     process_no_pressure(ev);\n or    } else if (ev.pressure == 1) {     // Maximum pressure     process_max_pressure(ev);\n or    } else {     // Default     process_pressure(ev);\n or    } }, false);", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.tiltX": {
        "descr": "This property is the angle (in degrees) between the Y-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type. The range of values is -90 to 90 degrees and a positive value means a tilt to the right. For devices that do not support this property, the value is 0.", 
        "name": "PointerEvent.tiltX", 
        "params": [
            {
                "descr": "The angle between the Y-Z plane of the pointer (stylus) and the screen.", 
                "name": "tilt"
            }
        ], 
        "path": "dom/pointerevent/tiltx", 
        "syntax": "var tilt = pointerEvent.tiltX; Return value  tilt The angle between the Y-Z plane of the pointer (stylus) and the screen.  Example", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.tiltY": {
        "descr": "This property is the angle (in degrees) between the X-Z plane of the pointer and the screen. This property is typically only useful for a pen/stylus pointer type. The range of values is -90 to 90 degrees and a positive value is a tilt toward the user. For devices that do not support this property, the value is 0.", 
        "name": "PointerEvent.tiltY", 
        "params": [
            {
                "descr": "The angle between the X-Z plane of the pointer (stylus) and the screen.", 
                "name": "tilt"
            }
        ], 
        "path": "dom/pointerevent/tilty", 
        "syntax": "var tilt = pointerEvent.tiltY; Return value  tilt The angle between the X-Z plane of the pointer (stylus) and the screen.  Example", 
        "type": "Pointer Events"
    }, 
    "PointerEvent.width": {
        "descr": "The width of the pointer's contact geometry along the x-axis, measured in CSS pixels. Depending on the source of the pointer device (such as a finger), for a given pointer, each event may produce a different value.", 
        "name": "PointerEvent.width", 
        "params": [
            {
                "descr": "The width of the event's contact area (in CSS pixels).", 
                "name": "contactWidth"
            }
        ], 
        "path": "dom/pointerevent/width", 
        "syntax": "var contactWidth = pointerEvent.width; Return value  contactWidth The width of the event's contact area (in CSS pixels).  Example", 
        "type": "Pointer Events"
    }, 
    "PopStateEvent": {
        "descr": "An event handler for the popstate event on the window.", 
        "name": "PopStateEvent", 
        "params": [], 
        "path": "dom/popstateevent", 
        "syntax": "window.onpopstate = funcRef;  funcRef is a handler function.  The popstate event As an example, a page at http://example.com/example.html running the following code will generate alerts as indicated: window.onpopstate = function(event) {  alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n or };history.pushState({page: 1}, \"title 1\", \"?page=1\");\n or history.pushState({page: 2}, \"title 2\", \"?page=2\");\n or history.replaceState({page: 3}, \"title 3\", \"?page=3\");\n or history.back();\n or  // alerts \"location: http://example.com/example.html?page=1, state: {\"page\":1}\"history.back();\n or  // alerts \"location: http://example.com/example.html, state: nullhistory.go(2);\n or   // alerts \"location: http://example.com/example.html?page=3, state: {\"page\":3});", 
        "type": "Events"
    }, 
    "Position.coords": {
        "descr": "The Position.coords read-only property, a Coordinates object, represents a geographic attitude: it contains the location, that is longitude and latitude on the Earth, the altitude, and the speed of the object concerned, regrouped inside the returned value. It also contains accuracy information about these values.", 
        "name": "Position.coords", 
        "params": [], 
        "path": "dom/position/coords", 
        "syntax": "coord = position.coords Specifications    Specification Status Comment     Geolocation APIThe definition of 'Position.coords' in that specification. Recommendation Initial specification.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "Position.timestamp": {
        "descr": "The Position.timestamp read-only property, a DOMTimeStamp object, represents the date and the time of the creation of the Position object it belongs to. The precision is to the millisecond.", 
        "name": "Position.timestamp", 
        "params": [], 
        "path": "dom/position/timestamp", 
        "syntax": "coord = position.timestamp Specifications    Specification Status Comment     Geolocation APIThe definition of 'Position.timestamp' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "PositionError.code": {
        "descr": "The PositionError.code read-only property is an unsigned short representing the error code. The following values are possible:", 
        "name": "PositionError.code", 
        "params": [], 
        "path": "dom/positionerror/code", 
        "syntax": "typeErr = poserr.code Specifications    Specification Status Comment     Geolocation APIThe definition of 'PositionError.code' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "PositionError.message": {
        "descr": "The PositionError.message read-only property returns a human-readable DOMString describing the details of the error.", 
        "name": "PositionError.message", 
        "params": [], 
        "path": "dom/positionerror/message", 
        "syntax": "msg = positionError.message Specifications    Specification Status Comment     Geolocation APIThe definition of 'PositionError.message' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "PositionOptions.enableHighAccuracy": {
        "descr": "The PositionOptions.enableHighAccuracy property is a Boolean that indicates the application would like to receive the best possible results. If true and if the device is able to provide a more accurate position, it will do so. Note that this can result in slower response times or increased power consumption (with a GPS chip on a mobile device for example). On the other hand, if false (the default value), the device can take the liberty to save resources by responding more quickly and/or using less power.", 
        "name": "PositionOptions.enableHighAccuracy", 
        "params": [], 
        "path": "dom/positionoptions/enablehighaccuracy", 
        "syntax": "positionOptions.enableHighAccuracy = booleanValue Specifications    Specification Status Comment     Geolocation APIThe definition of 'PositionOptions.enableHighAccuracy' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "PositionOptions.maximumAge": {
        "descr": "The PositionOptions.maximumAge property is a positive long value indicating the maximum age in milliseconds of a possible cached position that is acceptable to return. If set to 0, it means that the device cannot use a cached position and must attempt to retrieve the real current position. If set to Infinity the device must return a cached position regardless of its age.", 
        "name": "PositionOptions.maximumAge", 
        "params": [], 
        "path": "dom/positionoptions/maximumage", 
        "syntax": "positionOptions.maximumAge = timeLength Specifications    Specification Status Comment     Geolocation APIThe definition of 'PositionOptions.maximumAge' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "PositionOptions.timeout": {
        "descr": "The PositionOptions.timeout property is a positive long value representing the maximum length of time (in milliseconds) the device is allowed to take in order to return a position. The default value is Infinity, meaning that getCurrentPosition() won't return until the position is available.", 
        "name": "PositionOptions.timeout", 
        "params": [], 
        "path": "dom/positionoptions/timeout", 
        "syntax": "positionOptions.timeout = timeLength Specifications    Specification Status Comment     Geolocation APIThe definition of 'PositionOptions.timeout' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Geolocation"
    }, 
    "PositionSensorVRDevice": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "PositionSensorVRDevice", 
        "params": [
            {
                "descr": "Returns the current state of the position sensor for the current frame (e.g. ", 
                "name": "PositionSensorVRDevice.getState()"
            }, 
            {
                "descr": "Returns the current instantaneous position sensor state. ", 
                "name": "PositionSensorVRDevice.getImmediateState()"
            }, 
            {
                "descr": "Can be used to reset the sensor if desired, returning the position and orientation values to zero.", 
                "name": "PositionSensorVRDevice.resetSensor()"
            }, 
            {
                "descr": "Returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. ", 
                "name": "VRDevice.hardwareUnitId Read only"
            }, 
            {
                "descr": "Returns the ID for this specific VRDevice. ", 
                "name": "VRDevice.deviceId Read only"
            }, 
            {
                "descr": "A human-readable name to identify the VRDevice.", 
                "name": "VRDevice.deviceName Read only"
            }
        ], 
        "path": "dom/positionsensorvrdevice", 
        "syntax": "PositionSensorVRDevice interface of the WebVR API represents VR hardware's position sensor. You can access information such as the current position and orientation of the sensor in relation to the head mounted display through the PositionSensorVRDevice.getState()", 
        "type": "WebVR"
    }, 
    "PositionSensorVRDevice.getImmediateState": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "PositionSensorVRDevice.getImmediateState", 
        "params": [], 
        "path": "dom/positionsensorvrdevice/getimmediatestate", 
        "syntax": "getImmediateState()", 
        "type": "WebVR"
    }, 
    "PositionSensorVRDevice.getState": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "PositionSensorVRDevice.getState", 
        "params": [], 
        "path": "dom/positionsensorvrdevice/getstate", 
        "syntax": "getState()", 
        "type": "WebVR"
    }, 
    "PositionSensorVRDevice.resetSensor": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "PositionSensorVRDevice.resetSensor", 
        "params": [], 
        "path": "dom/positionsensorvrdevice/resetsensor", 
        "syntax": "resetSensor()", 
        "type": "WebVR"
    }, 
    "PresentationConnection.send": {
        "descr": "The PresentationConnection.send() method of the PresentationConnection interface sends either binary or text data between a controlling browsing context and a presenting browsing context.", 
        "name": "PresentationConnection.send", 
        "params": [
            {
                "descr": "Data to send to the presentation. ", 
                "name": "data"
            }
        ], 
        "path": "dom/presentationconnection/send", 
        "syntax": "PresentationConnection.send(data);", 
        "type": "Presentation"
    }, 
    "ProgressEvent.constructor": {
        "descr": "The ProgressEvent() constructor returns a newly created ProgressEvent, representing the current completion of a long process.", 
        "name": "ProgressEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the ProgressEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a Boolean flag indicating if the total work to be done, and the amount of work already done, by the underlying process is calculable. ", 
                "name": "lengthComputable Optional"
            }, 
            {
                "descr": "Is an unsigned long long representing the amount of work already performed by the underlying process. ", 
                "name": "loaded Optional"
            }, 
            {
                "descr": "Is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. ", 
                "name": "total Optional"
            }
        ], 
        "path": "dom/progressevent/progressevent", 
        "syntax": "progressEvent = new ProgressEvent(type, {lengthComputable: aBooleanValue, loaded: aNumber, total: aNumber});", 
        "type": "Events"
    }, 
    "ProgressEvent.lengthComputable": {
        "descr": "The ProgressEvent.lengthComputable read-only property is a Boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value.", 
        "name": "ProgressEvent.lengthComputable", 
        "params": [], 
        "path": "dom/progressevent/lengthcomputable", 
        "syntax": "flag = ProgressEvent.lengthComputable Specifications    Specification Status Comment   Progress EventsThe definition of 'ProgressEvent.lengthComputable' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 3.5 (1.9.1) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 1.0 (1.9.1) Not supported Not supported Not supported     See also", 
        "type": "Events"
    }, 
    "ProgressEvent.loaded": {
        "descr": "The ProgressEvent.loaded read-only property is an unsigned long long representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and ProgressEvent.total. When downloading a resource using HTTP, this only represent the part of the content itself, not headers and other overhead.", 
        "name": "ProgressEvent.loaded", 
        "params": [], 
        "path": "dom/progressevent/loaded", 
        "syntax": "value = ProgressEvent.loaded Specifications    Specification Status Comment   Progress EventsThe definition of 'ProgressEvent.loaded' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 3.5 (1.9.1) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 1.0 (1.9.1) Not supported Not supported Not supported     See also", 
        "type": "Events"
    }, 
    "ProgressEvent.total": {
        "descr": "The ProgressEvent.total read-only property is an unsigned long long representing the total amount of work that the underlying process is in the progress of performing. When downloading a resource using HTTP, this only represent the content itself, not headers and other overhead.", 
        "name": "ProgressEvent.total", 
        "params": [], 
        "path": "dom/progressevent/total", 
        "syntax": "value = ProgressEvent.total Specifications    Specification Status Comment   Progress EventsThe definition of 'ProgressEvent.lengthComputable' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 3.5 (1.9.1) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 1.0 (1.9.1) Not supported Not supported Not supported     See also", 
        "type": "Events"
    }, 
    "Promise": {
        "descr": "The Promise object is used for asynchronous computations. A Promise represents an operation that hasn't completed yet, but is expected in the future.", 
        "name": "Promise", 
        "params": [
            {
                "descr": "A function that will be passed other functions via the arguments resolve and reject. ", 
                "name": "executor"
            }, 
            {
                "descr": "Length property whose value is always 1 (number of constructor arguments).", 
                "name": "Promise.length"
            }, 
            {
                "descr": "Represents the prototype for the Promise constructor.", 
                "name": "Promise.prototype"
            }, 
            {
                "descr": "Returns a promise that either resolves when all of the promises in the iterable argument have resolved or rejects as soon as one of the promises in the iterable argument rejects. ", 
                "name": "Promise.all(iterable)"
            }, 
            {
                "descr": "Returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.", 
                "name": "Promise.race(iterable)"
            }, 
            {
                "descr": "Returns a Promise object that is rejected with the given reason.", 
                "name": "Promise.reject(reason)"
            }, 
            {
                "descr": "Returns a Promise object that is resolved with the given value. ", 
                "name": "Promise.resolve(value)"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Promise.prototype.constructor"
            }, 
            {
                "descr": "Appends a rejection handler callback to the promise, and returns a new promise resolving to the return value of the callback if it is called, or to its original fulfillment value if the promise is instead fulfilled.", 
                "name": "Promise.prototype.catch(onRejected)"
            }, 
            {
                "descr": "Appends fulfillment and rejection handlers to the promise, and returns a new promise resolving to the return value of the called handler, or to its original settled value if the promise was not handled (i.e. if the relevant handler onFulfilled or onRejected is not a function).", 
                "name": "Promise.prototype.then(onFulfilled, onRejected)"
            }
        ], 
        "path": "javascript/global_objects/promise", 
        "syntax": "new Promise( /* executor */ function(resolve, reject) { ... } );", 
        "type": "Promise"
    }, 
    "Promise.all": {
        "descr": "The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved, or rejects with the reason of the first passed promise that rejects.", 
        "name": "Promise.all", 
        "params": [
            {
                "descr": "An iterable object, such as an Array. ", 
                "name": "iterable"
            }
        ], 
        "path": "javascript/global_objects/promise/all", 
        "syntax": "Promise.all(iterable);", 
        "type": "Promise"
    }, 
    "Promise.race": {
        "descr": "The Promise.race(iterable) method returns a promise that resolves or rejects as soon as one of the promises in the iterable resolves or rejects, with the value or reason from that promise.", 
        "name": "Promise.race", 
        "params": [
            {
                "descr": "An iterable object, such as an Array. ", 
                "name": "iterable"
            }
        ], 
        "path": "javascript/global_objects/promise/race", 
        "syntax": "Promise.race(iterable);", 
        "type": "Promise"
    }, 
    "Promise.reject": {
        "descr": "The Promise.reject(reason) method returns a Promise object that is rejected with the given reason.", 
        "name": "Promise.reject", 
        "params": [
            {
                "descr": "Reason why this Promise rejected.", 
                "name": "reason"
            }
        ], 
        "path": "javascript/global_objects/promise/reject", 
        "syntax": "Promise.reject(reason);", 
        "type": "Promise"
    }, 
    "Promise.resolve": {
        "descr": "The Promise.resolve(value) method returns a Promise.then object that is resolved with the given value. If the value is a thenable (i.e. has a \"then\" method), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value.", 
        "name": "Promise.resolve", 
        "params": [
            {
                "descr": "Argument to be resolved by this Promise. ", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/promise/resolve", 
        "syntax": "Promise.resolve(value);\n or Promise.resolve(promise);\n or Promise.resolve(thenable);", 
        "type": "Promise"
    }, 
    "PromiseRejection": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PromiseRejection", 
        "params": [
            {
                "descr": "Creates a new PromiseRejection object.", 
                "name": "PromiseRejection.PromiseRejection()"
            }, 
            {
                "descr": "Returns the promise identifier that this notification is about.", 
                "name": "PromiseRejection.promise Read only"
            }, 
            {
                "descr": "Returns the reason the promise was rejected.", 
                "name": "PromiseRejection.reason Read only"
            }
        ], 
        "path": "dom/promiserejection", 
        "syntax": "Promise that has been rejected. Constructor  PromiseRejection.PromiseRejection()", 
        "type": "Miscellaneous"
    }, 
    "PromiseRejection.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PromiseRejection.constructor", 
        "params": [
            {
                "descr": "The type of the Event.", 
                "name": "type"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the event object. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/promiserejection/promiserejection", 
        "syntax": "PromiseRejection()", 
        "type": "Miscellaneous"
    }, 
    "PromiseRejection.promise": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PromiseRejection.promise", 
        "params": [], 
        "path": "dom/promiserejection/promise", 
        "syntax": "promise read-only property of the PromiseRejection returns the ID of the Promise that the current notification is about. Syntax var myPromiseRejectionId = myPromiseRejection.promise; Value A DOMString that represents the promise ID. Example var myPromiseRejection = new PromiseRejection();\n or var myPromiseRejectionId = myPromiseRejection.promise;);", 
        "type": "Miscellaneous"
    }, 
    "PromiseRejection.reason": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PromiseRejection.reason", 
        "params": [], 
        "path": "dom/promiserejection/reason", 
        "syntax": "reason read-only property of the PromiseRejection returns the rejection reason for the Promise that the current notification is about. Although the reason can be undefined, it is generally an Error object, like in exception handling. Syntax var myPromiseRejectionReason = myPromiseRejection.reason; Value A DOMString that represents the promise's rejection reason. Example var myPromiseRejection = new PromiseRejection();\n or var myPromiseRejectionReason = myPromiseRejection.reason;);", 
        "type": "Miscellaneous"
    }, 
    "PromiseRejectionEvent.constructor": {
        "descr": "The PromiseRejectionEvent() constructor returns a newly created PromiseRejectionEvent, which represents events fired when a JavaScript Promise is rejected.", 
        "name": "PromiseRejectionEvent.constructor", 
        "params": [
            {
                "descr": "A string representing the name of the type of the PromiseRejectionEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "The Promise which was rejected.", 
                "name": "promise"
            }, 
            {
                "descr": "Any value or Object which represents the reason the promise was rejected.", 
                "name": "reason"
            }
        ], 
        "path": "dom/promiserejectionevent/promiserejectionevent", 
        "syntax": "new PromiseRejectionEvent(type, {  promise: somePromise,   reason : someValue});", 
        "type": "Events"
    }, 
    "PromiseRejectionEvent.promise": {
        "descr": "The PromiseRejectionEvent.promise read-only property indicates the JavaScript Promise which has been rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.", 
        "name": "PromiseRejectionEvent.promise", 
        "params": [], 
        "path": "dom/promiserejectionevent/promise", 
        "syntax": "promise = PromiseRejectionEvent.promise Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'PromiseRejectionEvent.promise' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 49 No support No support No support No support         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support No support No support No support No support No support     See also", 
        "type": "Events"
    }, 
    "PromiseRejectionEvent.reason": {
        "descr": "The PromiseRejectionEvent.reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.", 
        "name": "PromiseRejectionEvent.reason", 
        "params": [], 
        "path": "dom/promiserejectionevent/reason", 
        "syntax": "reason = PromiseRejectionEvent.reason Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'PromiseRejectionEvent.reason' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 49 No support No support No support No support         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support No support No support No support No support No support     See also", 
        "type": "Events"
    }, 
    "PromiseResolver": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "PromiseResolver", 
        "params": [
            {
                "descr": "Sets the result value of the associated Promise to the parameter and its state to fulfill. ", 
                "name": "PromiseResolver.fulfill()"
            }, 
            {
                "descr": "...", 
                "name": "PromiseResolver.resolve()"
            }, 
            {
                "descr": "Sets the result value of the associated Promise to the parameter and its state to rejected. ", 
                "name": "PromiseResolver.reject()"
            }
        ], 
        "path": "dom/promiseresolver", 
        "syntax": "PromiseResolver interface represents an object controlling the state and the result value of a Promise. Properties No specific property. Methods Doesn't inherit any method.  PromiseResolver.fulfill()", 
        "type": "Miscellaneous"
    }, 
    "Property Accessors": {
        "descr": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation.", 
        "name": "Property Accessors", 
        "params": [], 
        "path": "javascript/operators/property_accessors", 
        "syntax": "object.propertyobject[\"property\"] Description One can think of an object as an associative array (a.k.a. map, dictionary, hash, lookup table). The keys in this array are the names of the object's properties. It's typical when speaking of an object's properties to make a distinction between properties and methods. However, the property/method distinction is little more than a convention. A method is simply a property that can be called, for example if it has a reference to a Function instance as its value.", 
        "type": "Operators"
    }, 
    "Proxy": {
        "descr": "The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).", 
        "name": "Proxy", 
        "params": [
            {
                "descr": "Placeholder object which contains traps.", 
                "name": "handler"
            }, 
            {
                "descr": "The methods that provide property access. ", 
                "name": "traps"
            }, 
            {
                "descr": "Object which the proxy virtualizes. ", 
                "name": "target"
            }, 
            {
                "descr": "A target object (can be any sort of objects, including a native array, a function or even another proxy) or function to wrap with Proxy.", 
                "name": "target"
            }, 
            {
                "descr": "An object whose properties are functions which define the behavior of the proxy when an operation is performed on it.", 
                "name": "handler"
            }, 
            {
                "descr": "Creates a revocable Proxy object.", 
                "name": "Proxy.revocable()"
            }, 
            {
                "descr": "A trap for Object.getPrototypeOf.", 
                "name": "handler.getPrototypeOf()"
            }, 
            {
                "descr": "A trap for Object.setPrototypeOf.", 
                "name": "handler.setPrototypeOf()"
            }, 
            {
                "descr": "A trap for Object.isExtensible.", 
                "name": "handler.isExtensible()"
            }, 
            {
                "descr": "A trap for Object.preventExtensions.", 
                "name": "handler.preventExtensions()"
            }, 
            {
                "descr": "A trap for Object.getOwnPropertyDescriptor.", 
                "name": "handler.getOwnPropertyDescriptor()"
            }, 
            {
                "descr": "A trap for Object.defineProperty.", 
                "name": "handler.defineProperty()"
            }, 
            {
                "descr": "A trap for the in operator.", 
                "name": "handler.has()"
            }, 
            {
                "descr": "A trap for getting property values.", 
                "name": "handler.get()"
            }, 
            {
                "descr": "A trap for setting property values.", 
                "name": "handler.set()"
            }, 
            {
                "descr": "A trap for the delete operator.", 
                "name": "handler.deleteProperty()"
            }, 
            {
                "descr": "A trap for Object.getOwnPropertyNames.", 
                "name": "handler.ownKeys()"
            }, 
            {
                "descr": "A trap for a function call.", 
                "name": "handler.apply()"
            }, 
            {
                "descr": "A trap for the new operator.", 
                "name": "handler.construct()"
            }
        ], 
        "path": "javascript/global_objects/proxy", 
        "syntax": "var p = new Proxy(target, handler);", 
        "type": "Global Objects"
    }, 
    "Proxy.handler.apply": {
        "descr": "The handler.apply() method is a trap for a function call.", 
        "name": "Proxy.handler.apply", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The this argument for the call.", 
                "name": "thisArg"
            }, 
            {
                "descr": "The list of arguments for the call.", 
                "name": "argumentsList"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/apply", 
        "syntax": "var p = new Proxy(target, {  apply: function(target, thisArg, argumentsList) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.construct": {
        "descr": "The handler.construct() method is a trap for the new operator.", 
        "name": "Proxy.handler.construct", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The list of arguments for the constructor.", 
                "name": "argumentsList"
            }, 
            {
                "descr": "The constructor that was originally called.", 
                "name": "newTarget"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/construct", 
        "syntax": "var p = new Proxy(target, {  construct: function(target, argumentsList, newTarget) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.defineProperty": {
        "descr": "The handler.defineProperty() method is a trap for Object.defineProperty().", 
        "name": "Proxy.handler.defineProperty", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property whose description is to be retrieved.", 
                "name": "property"
            }, 
            {
                "descr": "The descriptor for the property being defined or modified.", 
                "name": "descriptor"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/defineproperty", 
        "syntax": "var p = new Proxy(target, {  defineProperty: function(target, property, descriptor) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.deleteProperty": {
        "descr": "The handler.deleteProperty() method is a trap for the delete operator.", 
        "name": "Proxy.handler.deleteProperty", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to delete.", 
                "name": "property"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/deleteproperty", 
        "syntax": "var p = new Proxy(target, {  deleteProperty: function(target, property) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.get": {
        "descr": "The handler.get() method is a trap for getting a property value.", 
        "name": "Proxy.handler.get", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to get.", 
                "name": "property"
            }, 
            {
                "descr": "Either the proxy or an object that inherits from the proxy.", 
                "name": "receiver"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/get", 
        "syntax": "var p = new Proxy(target, {  get: function(target, property, receiver) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.getOwnPropertyDescriptor": {
        "descr": "The handler.getOwnPropertyDescriptor() method is a trap for Object.getOwnPropertyDescriptor().", 
        "name": "Proxy.handler.getOwnPropertyDescriptor", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property whose description should be retrieved.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/getownpropertydescriptor", 
        "syntax": "var p = new Proxy(target, {  getOwnPropertyDescriptor: function(target, prop) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.getPrototypeOf": {
        "descr": "The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] internal method.", 
        "name": "Proxy.handler.getPrototypeOf", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/getprototypeof", 
        "syntax": "var p = new Proxy(obj, {  getPrototypeOf(target) {\u00a0 ...  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.has": {
        "descr": "The handler.has() method is a trap for the in operator.", 
        "name": "Proxy.handler.has", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to check for existence.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/has", 
        "syntax": "var p = new Proxy(target, {  has: function(target, prop) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.isExtensible": {
        "descr": "The handler.isExtensible() method is a trap for Object.isExtensible().", 
        "name": "Proxy.handler.isExtensible", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/isextensible", 
        "syntax": "var p = new Proxy(target, {  isExtensible: function(target) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.ownKeys": {
        "descr": "The handler.ownKeys() method is a trap for Object.getOwnPropertyNames().", 
        "name": "Proxy.handler.ownKeys", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/ownkeys", 
        "syntax": "var p = new Proxy(target, {  ownKeys: function(target) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.preventExtensions": {
        "descr": "The handler.preventExtensions() method is a trap for Object.preventExtensions().", 
        "name": "Proxy.handler.preventExtensions", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/preventextensions", 
        "syntax": "var p = new Proxy(target, {  preventExtensions: function(target) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.set": {
        "descr": "The handler.set() method is a trap for setting a property value.", 
        "name": "Proxy.handler.set", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to set.", 
                "name": "property"
            }, 
            {
                "descr": "The new value of the property to set.", 
                "name": "value"
            }, 
            {
                "descr": "The object to which the assignment was originally directed. ", 
                "name": "receiver"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/set", 
        "syntax": "var p = new Proxy(target, {  set: function(target, property, value, receiver) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.handler.setPrototypeOf": {
        "descr": "The handler.setPrototypeOf() method is a trap for Object.setPrototypeOf().", 
        "name": "Proxy.handler.setPrototypeOf", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The object's new prototype or null.", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/proxy/handler/setprototypeof", 
        "syntax": "var p = new Proxy(target, {  setPrototypeOf: function(target, prototype) {  }});", 
        "type": "Proxy"
    }, 
    "Proxy.revocable": {
        "descr": "The Proxy.revocable() method is used to create a revocable Proxy object.", 
        "name": "Proxy.revocable", 
        "params": [
            {
                "descr": "A target object (can be any sort of objects, including a native array, a function or even another proxy) or function to wrap with Proxy.", 
                "name": "target"
            }, 
            {
                "descr": "An object whose properties are functions which define the behavior of the proxy when an operation is performed on it.", 
                "name": "handler"
            }, 
            {
                "descr": "A Proxy object created with new Proxy(target, handler) call.", 
                "name": "proxy"
            }, 
            {
                "descr": "A function with no argument to invalidate (switch off) the proxy.", 
                "name": "revoke"
            }
        ], 
        "path": "javascript/global_objects/proxy/revocable", 
        "syntax": "Proxy.revocable(target, handler);", 
        "type": "Proxy"
    }, 
    "Push API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Push API", 
        "params": [
            {
                "descr": "Represents a push action sent to the global scope of a ServiceWorker. ", 
                "name": "PushEvent"
            }, 
            {
                "descr": "Provides a way to receive notifications from third-party servers as well as request URLs for push notifications. ", 
                "name": "PushManager"
            }, 
            {
                "descr": "Provides access to push data sent by a server, and includes methods to manipulate the received data.", 
                "name": "PushMessageData"
            }, 
            {
                "descr": "Provides a subcription's URL endpoint and allows unsubscription from a push service.", 
                "name": "PushSubscription"
            }, 
            {
                "descr": "Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status. ", 
                "name": "ServiceWorkerRegistration.pushManager Read only"
            }, 
            {
                "descr": "An event handler fired whenever a push event occurs; that is, whenever a server push message is received.", 
                "name": "ServiceWorkerGlobalScope.onpush"
            }, 
            {
                "descr": "An event handler fired whenever a pushsubscriptionchange event occurs; for example, when a push subscription has been invalidated, or is about to be invalidated (e.g. ", 
                "name": "ServiceWorkerGlobalScope.onpushsubscriptionchange"
            }
        ], 
        "path": "dom/push_api", 
        "syntax": "PushManager.subscribe()", 
        "type": "Push"
    }, 
    "Push API: Using the Push API": {
        "descr": "The ability to push messages or notifications from a server to a client at any time\u2014whether the app is active on your system or not\u2014is something that has been enjoyed by native platforms for some time, and it is finally coming to the Web! Support for most of Push is now available in Firefox 43+ and Chrome 42+ on desktop, with mobile platforms hopefully following soon. PushMessageData is currently only supported experimentally in Firefox Nightly (44+), and the implementation is subject to change.", 
        "name": "Push API: Using the Push API", 
        "params": [], 
        "path": "dom/push_api/using_the_push_api", 
        "syntax": "MessageChannel.  Often a combination of the two will be required; the demo below features an example of each.  Note: You need some form of code running on the server to handle the endpoint/data encryption and send push message requests. In our demo we have put together a quick-and-dirty server using NodeJS.  The service worker also has to subscribe to the push messaging service. Each session is given its own unique endpoint when it subscribes to the push messaging service. This endpoint is obtained from the (PushSubscription.endpoint) property on the subscription object. This endpoint can be sent to your server and used to send a message to that session's active service worker. Each browser has its own push messaging server to handle sending the push message.", 
        "type": "Push"
    }, 
    "PushEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushEvent", 
        "params": [
            {
                "descr": "Creates a new PushEvent object.", 
                "name": "PushEvent.PushEvent()"
            }, 
            {
                "descr": "Returns a reference to a PushMessageData object containing data sent to the PushSubscription.", 
                "name": "PushEvent.data Read only"
            }
        ], 
        "path": "dom/pushevent", 
        "syntax": "PushEvent interface of the Push API represents a push message that has been received. This event is sent to the global scope of a ServiceWorker", 
        "type": "Push"
    }, 
    "PushEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushEvent.constructor", 
        "params": [
            {
                "descr": "A DOMString defining the type of PushEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "An options object containing any initialization data you want to populate the PushEvent object with. ", 
                "name": "eventInitDict Optional"
            }
        ], 
        "path": "dom/pushevent/pushevent", 
        "syntax": "PushEvent()", 
        "type": "Push"
    }, 
    "PushEvent.data": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushEvent.data", 
        "params": [], 
        "path": "dom/pushevent/data", 
        "syntax": "data read-only property of the PushEvent interface returns a reference to a PushMessageData object containing data sent to the PushSubscription. Syntax var myPushData = PushEvent.data; Value A PushMessageData object. Examples The following example takes data from a PushEvent and displays it on all of the service workers' clients. self.addEventListener('push', function(event) {\u00a0 if (!(self.Notification && self.notification.permission === 'granted')) {\u00a0   return;\u00a0 }\u00a0 var data = {};\u00a0 if (event.data) {\u00a0   data = event.data.json();\n or \u00a0 }\u00a0 var title = data.title || \"Something Has Happened\";\u00a0 var message = data.message || \"Here's something you might want to check out.\";\u00a0 var icon = \"images/new-notification.png\";\u00a0 var notification = new Notification(title, {\u00a0   body: message,\u00a0   tag: 'simple-push-demo-notification',\u00a0   icon: icon\u00a0 });\n or \u00a0 notification.addEventListener('click', function() {\u00a0   if (clients.openWindow) {\u00a0     clients.openWindow('https://example.blog.com/2015/03/04/something-new.html');\n or \u00a0   }\u00a0 };});", 
        "type": "Push"
    }, 
    "PushManager": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushManager", 
        "params": [
            {
                "descr": "Retrieves an existing push subscription. ", 
                "name": "PushManager.getSubscription()"
            }, 
            {
                "descr": "Returns a Promise that resolves to the permission state of the current PushManager, which will be one of 'granted', 'denied', or 'prompt'.", 
                "name": "PushManager.permissionState()"
            }, 
            {
                "descr": "Subscribes to a push service. It returns a Promise that resolves to a PushSubscription object containing details of a push subscription. ", 
                "name": "PushManager.subscribe()"
            }, 
            {
                "descr": "Returns a Promise that resolves to the PushPermissionStatus of the requesting webapp, which will be one of granted, denied, or default. ", 
                "name": "PushManager.hasPermission()"
            }, 
            {
                "descr": "Subscribes to a push subscription. ", 
                "name": "PushManager.register()"
            }, 
            {
                "descr": "Retrieves existing push subscriptions. ", 
                "name": "PushManager.registrations()"
            }, 
            {
                "descr": "Unregisters and deletes a specified subscription endpoint. ", 
                "name": "PushManager.unregister()"
            }
        ], 
        "path": "dom/pushmanager", 
        "syntax": "PushManager interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications. This interface is accessed via the ServiceWorkerRegistration.pushManager property.  Note: This interface replaces functionality previously offered by the obsolete PushRegistrationManager interface.  Properties None. Methods  PushManager.getSubscription()", 
        "type": "Push"
    }, 
    "PushManager.getSubscription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushManager.getSubscription", 
        "params": [], 
        "path": "dom/pushmanager/getsubscription", 
        "syntax": "PushManager.getSubscription()", 
        "type": "Push"
    }, 
    "PushManager.permissionState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushManager.permissionState", 
        "params": [
            {
                "descr": "An object containing optional configuration parameters. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/pushmanager/permissionstate", 
        "syntax": "permissionState()", 
        "type": "Push"
    }, 
    "PushManager.subscribe": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushManager.subscribe", 
        "params": [
            {
                "descr": "An object containing optional configuration parameters. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/pushmanager/subscribe", 
        "syntax": "subscribe()", 
        "type": "Push"
    }, 
    "PushMessageData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushMessageData", 
        "params": [
            {
                "descr": "Extracts the data as an ArrayBuffer object.", 
                "name": "PushMessageData.arrayBuffer()"
            }, 
            {
                "descr": "Extracts the data as a Blob object.", 
                "name": "PushMessageData.blob()"
            }, 
            {
                "descr": "Extracts the data as a JSON object.", 
                "name": "PushMessageData.json()"
            }, 
            {
                "descr": "Extracts the data as a plain text string.", 
                "name": "PushMessageData.text()"
            }
        ], 
        "path": "dom/pushmessagedata", 
        "syntax": "PushMessageData interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats. Unlike the similar methods in the Fetch API, which only allow the method to be invoked once, these methods can be called multiple times. Properties None. Methods  PushMessageData.arrayBuffer()", 
        "type": "Push"
    }, 
    "PushMessageData.arrayBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushMessageData.arrayBuffer", 
        "params": [], 
        "path": "dom/pushmessagedata/arraybuffer", 
        "syntax": "arrayBuffer()", 
        "type": "Push"
    }, 
    "PushMessageData.blob": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushMessageData.blob", 
        "params": [], 
        "path": "dom/pushmessagedata/blob", 
        "syntax": "blob()", 
        "type": "Push"
    }, 
    "PushMessageData.json": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushMessageData.json", 
        "params": [], 
        "path": "dom/pushmessagedata/json", 
        "syntax": "json()", 
        "type": "Push"
    }, 
    "PushMessageData.text": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushMessageData.text", 
        "params": [], 
        "path": "dom/pushmessagedata/text", 
        "syntax": "text()", 
        "type": "Push"
    }, 
    "PushSubscription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushSubscription", 
        "params": [
            {
                "descr": "A USVString containing the endpoint associated with the push subscription.", 
                "name": "PushSubscription.endpoint Read only"
            }, 
            {
                "descr": "A DOMString containing the subscription ID associated with the push subscription.", 
                "name": "PushSubscription.subscriptionId  Read only"
            }, 
            {
                "descr": "Returns an ArrayBuffer which contains the client's public key, which can then be sent to a server and used in encrypting push message data.", 
                "name": "PushSubscription.getKey()"
            }, 
            {
                "descr": "Standard serializer \u2014 returns a JSON representation of the subscription properties.", 
                "name": "PushSubscription.toJSON()"
            }, 
            {
                "descr": "Starts the asynchronous process of unsubscribing from the push service, returning a Promise that resolves to a Boolean when the current subscription is successfully unregistered.", 
                "name": "PushSubscription.unsubscribe()"
            }
        ], 
        "path": "dom/pushsubscription", 
        "syntax": "PushSubscription interface of the Push API provides a subcription's URL endpoint and allows unsubscription from a push service. An instance of this interface can be serialized. Properties  PushSubscription.endpoint Read only  A USVString containing the endpoint associated with the push subscription.   PushSubscription.subscriptionId  Read only  A DOMString containing the subscription ID associated with the push subscription.  Methods  PushSubscription.getKey()", 
        "type": "Push"
    }, 
    "PushSubscription.endpoint": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushSubscription.endpoint", 
        "params": [], 
        "path": "dom/pushsubscription/endpoint", 
        "syntax": "endpoint read-only property of the PushSubscription interface returns a USVString containing the endpoint associated with the push subscription. The endpoint takes the form of a custom URL pointing to a push server, which can be used to send a push message to the particular service worker instance that subscribed to the push service. For this reason, it is a good idea to keep your endPoint a secret, so others do not hijack it and abuse the push functionality. Syntax var myEnd = pushSubscription.endpoint; Value A USVString. Example navigator.serviceWorker.ready.then(function(reg) {  reg.pushManager.subscribe({userVisibleOnly: true}).then(function(subscription) {    console.log(subscription.endpoint);\n or       // At this point you would most likely send the subscription      // endpoint to your server, save it, then use it to send a      // push message at a later date  })}));", 
        "type": "Push"
    }, 
    "PushSubscription.getKey": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushSubscription.getKey", 
        "params": [
            {
                "descr": "The encryption method used to generate the client public key. ", 
                "name": "method"
            }
        ], 
        "path": "dom/pushsubscription/getkey", 
        "syntax": "getKey()", 
        "type": "Push"
    }, 
    "PushSubscription.toJSON": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushSubscription.toJSON", 
        "params": [], 
        "path": "dom/pushsubscription/tojson", 
        "syntax": "toJSON()", 
        "type": "Push"
    }, 
    "PushSubscription.unsubscribe": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "PushSubscription.unsubscribe", 
        "params": [], 
        "path": "dom/pushsubscription/unsubscribe", 
        "syntax": "unsubscribe()", 
        "type": "Push"
    }, 
    "RTCDataChannel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel", 
        "params": [
            {
                "descr": "The property binaryType on the RTCDataChannel interface is a DOMString which specifies the type of JavaScript object which should be used to represent binary data received on the RTCDataChannel. ", 
                "name": "binaryType"
            }, 
            {
                "descr": "The read-only RTCDataChannel property bufferedAmount returns the number of bytes of data currently queued to be sent over the data channel.", 
                "name": "bufferedAmount  Read only"
            }, 
            {
                "descr": "The RTCDataChannel property bufferedAmountLowThreshold is used to specify the number of bytes of buffered outgoing data that is considered \"low.\" The default value is 0 (meaning no bufferedamountlow events are sent).", 
                "name": "bufferedAmountLowThreshold"
            }, 
            {
                "descr": "The read-only RTCDataChannel property id returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel.", 
                "name": "id  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property label returns a DOMString containing a name describing the data channel. ", 
                "name": "label  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property maxPacketLifeTime returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or null.", 
                "name": "maxPacketLifeTime  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property maxRetransmits returns the maximum number of times the browser should try to transmit a message before giving up when in unordered mode, as set when the data channel was created, or null, which indicates that there is no maximum.", 
                "name": "maxRetransmits  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property negotiated indicates whether the RTCDataChannel's connection was negotiated by the Web app (true) or by the WebRTC layer (false). ", 
                "name": "negotiated  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property ordered indicates whether or not the data channel guarantees in-order delivery of messages; the default is true, which indicates that the data channel is indeed ordered.", 
                "name": "ordered  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property protocol returns a DOMString containing the name of the subprotocol in use. ", 
                "name": "protocol  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property readyState returns an enum of type RTCDataChannelState which indicates the state of the data channel's underlying data connection.", 
                "name": "readyState  Read only"
            }, 
            {
                "descr": "The read-only RTCDataChannel property reliable indicates whether or not the data channel is reliable.", 
                "name": "reliable   Read only"
            }, 
            {
                "descr": "The deprecated (and never part of the official specification) read-only RTCDataChannel property stream returns an ID number (between 0 and 65,535) which uniquely identifies the RTCDataChannel.", 
                "name": "stream   Read only"
            }, 
            {
                "descr": "The RTCDataChannel.onbufferedamountlow property is an EventHandler which specifies a function the browser calls when the bufferedamountlow event is sent to the RTCDataChannel. ", 
                "name": "onbufferedamountlow"
            }, 
            {
                "descr": "The RTCDataChannel.onclose property is an EventHandler which specifies a function to be called by the browser when the close event is received by the RTCDataChannel. ", 
                "name": "onclose"
            }, 
            {
                "descr": "The RTCDataChannel.onerror property is an EventHandler which specifies a function to be called when the error event is received. ", 
                "name": "onerror"
            }, 
            {
                "descr": "The RTCDataChannel.ommessage property stores an EventHandler which specifies a function to be called when the message event is fired on the channel. ", 
                "name": "onmessage"
            }, 
            {
                "descr": "The RTCDataChannel.onopen property is an EventHandler which specifies a function to be called when the open event is fired; this is a simple Event which is sent when the data channel's underlying data transport\u2014the link over which the RTCDataChannel's messages flow\u2014is established or re-established.", 
                "name": "onopen"
            }, 
            {
                "descr": "The RTCDataChannel.close() method closes the RTCDataChannel. ", 
                "name": "close()"
            }, 
            {
                "descr": "The send() method of the RTCDataChannel interface sends data across the data channel to the remote peer.", 
                "name": "send()"
            }
        ], 
        "path": "dom/rtcdatachannel", 
        "syntax": "RTCDataChannel interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an RTCPeerConnection, and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.binaryType": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.binaryType", 
        "params": [
            {
                "descr": "Received binary messages' contents will be contained in Blob objects.", 
                "name": "\"blob\""
            }, 
            {
                "descr": "Received binary messages' contents will be contained in ArrayBuffer objects.", 
                "name": "\"arraybuffer\""
            }
        ], 
        "path": "dom/rtcdatachannel/binarytype", 
        "syntax": "The property binaryType on the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.bufferedAmount": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.bufferedAmount", 
        "params": [], 
        "path": "dom/rtcdatachannel/bufferedamount", 
        "syntax": "The read-only RTCDataChannel property bufferedAmount returns the number of bytes of data currently queued to be sent over the data channel. The queue may build up as a result of calls to the send()", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.bufferedAmountLowThreshold": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.bufferedAmountLowThreshold", 
        "params": [], 
        "path": "dom/rtcdatachannel/bufferedamountlowthreshold", 
        "syntax": "The RTCDataChannel property bufferedAmountLowThreshold is used to specify the number of bytes of buffered outgoing data that is considered \"low.\" The default value is 0 (meaning no bufferedamountlow events are sent). When the number of buffered outgoing bytes, as indicated by the bufferedAmount", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.close": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.close", 
        "params": [], 
        "path": "dom/rtcdatachannel/close", 
        "syntax": "RTCDataChannel.close()", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.id": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.id", 
        "params": [], 
        "path": "dom/rtcdatachannel/id", 
        "syntax": "The read-only RTCDataChannel property id returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.label": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.label", 
        "params": [], 
        "path": "dom/rtcdatachannel/label", 
        "syntax": "RTCDataChannel property label returns a DOMString containing a name describing the data channel. These labels are not required to be unique. You may use the label as you wish; you could use it to identify all the channels that are being used for the same purpose, by giving them all the same namel. Or you could give each channel a unique label for tracking purposes. It's entirely up to the design decisions made when building your site or app. A unique ID can be found in the id", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.maxPacketLifeTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.maxPacketLifeTime", 
        "params": [], 
        "path": "dom/rtcdatachannel/maxpacketlifetime", 
        "syntax": "The read-only RTCDataChannel property maxPacketLifeTime returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or null. This limits how long the browser can continue to attempt to transmit and retransmit the message before giving up when in unordered mode.  This value is only used while in unordered (sometimes called \"unreliable\") mode; that is, if ordered", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.maxRetransmits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.maxRetransmits", 
        "params": [], 
        "path": "dom/rtcdatachannel/maxretransmits", 
        "syntax": "The read-only RTCDataChannel property maxRetransmits returns the maximum number of times the browser should try to transmit a message before giving up when in unordered mode, as set when the data channel was created, or null, which indicates that there is no maximum. This can only be set when the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.negotiated": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.negotiated", 
        "params": [], 
        "path": "dom/rtcdatachannel/negotiated", 
        "syntax": "RTCDataChannel property negotiated indicates whether the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.onbufferedamountlow": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.onbufferedamountlow", 
        "params": [], 
        "path": "dom/rtcdatachannel/onbufferedamountlow", 
        "syntax": "RTCDataChannel.onbufferedamountlow property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.onclose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.onclose", 
        "params": [], 
        "path": "dom/rtcdatachannel/onclose", 
        "syntax": "RTCDataChannel.onclose property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.onerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.onerror", 
        "params": [], 
        "path": "dom/rtcdatachannel/onerror", 
        "syntax": "RTCDataChannel.onerror property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.onmessage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.onmessage", 
        "params": [], 
        "path": "dom/rtcdatachannel/onmessage", 
        "syntax": "RTCDataChannel.ommessage property stores an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.onopen": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.onopen", 
        "params": [], 
        "path": "dom/rtcdatachannel/onopen", 
        "syntax": "RTCDataChannel.onopen property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.ordered": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.ordered", 
        "params": [], 
        "path": "dom/rtcdatachannel/ordered", 
        "syntax": "The read-only RTCDataChannel property ordered indicates whether or not the data channel guarantees in-order delivery of messages; the default is true, which indicates that the data channel is indeed ordered. This is set when the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.protocol": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.protocol", 
        "params": [], 
        "path": "dom/rtcdatachannel/protocol", 
        "syntax": "RTCDataChannel property protocol returns a DOMString containing the name of the subprotocol in use. If no protocol was specified when the data channel was created, then this property's value is \"\" (the empty string).", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.readyState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.readyState", 
        "params": [], 
        "path": "dom/rtcdatachannel/readystate", 
        "syntax": "RTCDataChannel property readyState returns an enum of type RTCDataChannelState which indicates the state of the data channel's underlying data connection. Syntax var state = aDataChannel.readyState; Values A string which is one of the values in the RTCDataChannelState enum, indicating the current state of the underlying data transport. RTCDataChannelState enum The RTCDataChannelState enum defines string constants which reflect the current status of the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.reliable": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.reliable", 
        "params": [], 
        "path": "dom/rtcdatachannel/reliable", 
        "syntax": "RTCDataChannel property reliable indicates whether or not the data channel is reliable.  This property is obsolete. Use RTCDataChannel.ordered instead in any new code, and update existing code as soon as possible.  Syntax var reliable = aDataChannel.reliable; Value true if the RTCDataChannel", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.send": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannel.send", 
        "params": [
            {
                "descr": "The data to transmit across the connection. ", 
                "name": "data"
            }, 
            {
                "descr": "Since the data channel uses a separate transport channel from the media content, it must establish its own connection; if it hasn't finished doing so (that is, its readyState is \"connecting\"), this error occurs without sending or buffering the data.", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The specified data would need to be buffered, and there isn't room for it in the buffer. ", 
                "name": "NetworkError"
            }
        ], 
        "path": "dom/rtcdatachannel/send", 
        "syntax": "The send()", 
        "type": "WebRTC"
    }, 
    "RTCDataChannel.stream": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "RTCDataChannel.stream", 
        "params": [], 
        "path": "dom/rtcdatachannel/stream", 
        "syntax": "var stream = aDataChannel.stream; Value An unsigned short value (that is, an integer between 0 and 65,535) which uniquely identifies the data channel.", 
        "type": "WebRTC"
    }, 
    "RTCDataChannelEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannelEvent", 
        "params": [
            {
                "descr": "The RTCDataChannelEvent() constructor creates a new RTCDataChannelEvent.", 
                "name": "RTCDataChannelEvent()"
            }, 
            {
                "descr": "The read-only property RTCDataChannelEvent.channel returns the RTCDataChannel associated with the event.", 
                "name": "channel  Read only"
            }
        ], 
        "path": "dom/rtcdatachannelevent", 
        "syntax": "RTCDataChannelEvent()", 
        "type": "WebRTC"
    }, 
    "RTCDataChannelEvent.channel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannelEvent.channel", 
        "params": [], 
        "path": "dom/rtcdatachannelevent/channel", 
        "syntax": "RTCDataChannelEvent.channel returns the RTCDataChannel associated with the event. Syntax  var channel = RTCDataChannelEvent.channel; Value A RTCDataChannel object representing the data channel linking the receiving RTCPeerConnection to its remote peer. Example The first line of code in the datachannel event handler shown below takes the channel from the event object and saves it locally for use by the code handling data traffic. pc.ondatachannel = function(event) {\u00a0 inboundDataChannel = event.channel;\u00a0 inboundDataChannel.onmessage = handleIncomingMessage;\u00a0 inboundDataChannel.onopen = handleChannelOpen;\u00a0 inboundDataChannel.onclose = handleChannelClose;}", 
        "type": "WebRTC"
    }, 
    "RTCDataChannelEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCDataChannelEvent.constructor", 
        "params": [
            {
                "descr": "A DOMString which specifies the name of the event. ", 
                "name": "type"
            }, 
            {
                "descr": "A RTCDataChannelEventInit dictionary, which has following fields:  \"channel\" of type RTCDataChannel, representing the data channel being concerned by the event. ", 
                "name": "rtcDataChannelEventInit"
            }
        ], 
        "path": "dom/rtcdatachannelevent/rtcdatachannelevent", 
        "syntax": "RTCDataChannelEvent()", 
        "type": "WebRTC"
    }, 
    "RTCIceCandidate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIceCandidate", 
        "params": [
            {
                "descr": "Creates an RTCIceCandidate object.", 
                "name": "RTCIceCandidate()"
            }, 
            {
                "descr": "Returns a transport address for the candidate that can be used for connectivity checks. ", 
                "name": "RTCIceCandidate.candidate Read only"
            }, 
            {
                "descr": "Returns a unique identifier that allows ICE to correlate candidates that appear on multiple RTCIceTransport objects.", 
                "name": "RTCIceCandidate.foundation Read only"
            }, 
            {
                "descr": "Returns the IP address of the candidate.", 
                "name": "RTCIceCandidate.ip Read only"
            }, 
            {
                "descr": "Returns the port of the candidate.", 
                "name": "RTCIceCandidate.port Read only"
            }, 
            {
                "descr": "Returns the assigned priority of the candidate.", 
                "name": "RTCIceCandidate.priority Read only"
            }, 
            {
                "descr": "Returns the protocol used by the candidate, either udp or tcp.", 
                "name": "RTCIceCandidate.protocol Read only"
            }, 
            {
                "descr": "For a candidate that is derived from another, such as a relay or reflexive candidate, the relatedAddress is the IP address of the candidate that it is derived from. ", 
                "name": "RTCIceCandidate.relatedAddress Read only"
            }, 
            {
                "descr": "For a candidate that is derived from another, such as a relay or reflexive candidate, the relatedPort is the port of the candidate that it is derived from. ", 
                "name": "RTCIceCandidate.relatedPort Read only"
            }, 
            {
                "descr": "If not null, this contains the identifier of the \"media stream identification\" (as defined in RFC 5888) for the media component this candidate is associated with.", 
                "name": "RTCIceCandidate.sdpMid Read only"
            }, 
            {
                "descr": "If not null, this indicates the index (starting at zero) of the media description (as defined in RFC 4566) in the SDP this candidate is associated with.", 
                "name": "RTCIceCandidate.sdpMLineIndex Read only"
            }, 
            {
                "descr": "If protocol is tcp, tcpType represents the type of TCP candidate. ", 
                "name": "RTCIceCandidate.tcpType Read only"
            }, 
            {
                "descr": "One of host, srflx, prflx, or relay.", 
                "name": "RTCIceCandidate.type Read only"
            }
        ], 
        "path": "dom/rtcicecandidate", 
        "syntax": "RTCIceCandidate interface of the the WebRTC API represents a candidate internet connectivity establishment (ICE) server for establishing an RTCPeerConnection", 
        "type": "WebRTC"
    }, 
    "RTCIceServer": {
        "descr": "The RTCIceServer dictionary defines how to connect to a single ICE server (such as a STUN or TURN server). It includes both the URL and the necessary credentials, if any, to connect to the server.", 
        "name": "RTCIceServer", 
        "params": [
            {
                "descr": "The credential to use when logging into the server. ", 
                "name": "credential Optional"
            }, 
            {
                "descr": "If the RTCIceServer represents a TURN server, this attribute specifies what kind of credential is to be used when connecting. ", 
                "name": "credentialType Optional"
            }, 
            {
                "descr": "This obsolete property is a string specifies a single ICE server's URL. ", 
                "name": "url"
            }, 
            {
                "descr": "This required property is either a single DOMString or an array of DOMStrings, each specifying a URL which can be used to connect to the server.", 
                "name": "urls"
            }, 
            {
                "descr": "If the RTCIceServer is a TURN server, then this is the username to use during the authentication process.", 
                "name": "username Optional"
            }
        ], 
        "path": "dom/rtciceserver", 
        "syntax": "\"token\" The credential is an access token to be used with a third-party authentication system.    Example The configuration below establishes two ICE servers. The first one, stun:stun.services.mozilla.com, requires authentication, so the username and password are provided. The second server has two URLs: stun:stun.example.com and stun:stun-1.example.com. var configuration = { iceServers: [{                          urls: \"stun:stun.services.mozilla.com\",                          username: \"louis@mozilla.com\",                           credential: \"webrtcdemo\"                      }, {                          urls: [                                  \"stun:stun.example.com\",                                  \"stun:stun-1.example.com\"                          ]                      }]};var pc = new RTCPeerConnection(configuration);", 
        "type": "WebRTC"
    }, 
    "RTCIceServer.credential": {
        "descr": "Draft This page is not complete.", 
        "name": "RTCIceServer.credential", 
        "params": [], 
        "path": "dom/rtciceserver/credential", 
        "syntax": "RTCIceServer dictionary's credential property is a string providing the credential to use when connecting to the described server. This is typically a password, key, or other secret.  This value is used when the RTCIceServer describes a TURN server.", 
        "type": "WebRTC"
    }, 
    "RTCIceServer.credentialType": {
        "descr": "Draft This page is not complete.", 
        "name": "RTCIceServer.credentialType", 
        "params": [], 
        "path": "dom/rtciceserver/credentialtype", 
        "syntax": "RTCIceServer dictionary's credentialType property is a string value from the RTCIceCredentialType enum which indicates what type of credential the RTCIceServer.credential value is. The default is \"password\". Syntax var iceServer = {                  ...                  credentialType = [\"password\" | \"token\"],                  ...                };var credential = iceServer.credentialType;iceServer.credential = [\"password\" | \"token\"]; Constants RTCIceCredentialType enum The RTCIceCredentialType enum specifies values which can be returned by the credentialType property to define what kind of authentication credential is being provided in the RTCIceServer.credential property. This can be one of the values below. Constant Description \"password\" The credential is a long-term authentication password. See RFC 5389, section 10.2 for further details on this type of credential. \"token\" The credential is an access token to be used with a third-party authentication system.  Example This example creates a new RTCPeerConnection which will use a TURN server at turnserver.example.org", 
        "type": "WebRTC"
    }, 
    "RTCIceServer.url": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "RTCIceServer.url", 
        "params": [], 
        "path": "dom/rtciceserver/url", 
        "syntax": "RTCIceServer dictionary's url property specifies the URL of a single ICE server to be used while negotiating connections. It was removed from the specification in June 2013 but is still broadly used in older examples and books, so we include documentation here to help adapt old code to new browsers. This property has been removed from the specification; while it's still supported by many browsers, it should no longer be used. You should instead use the newer urls property, which allows you to optionally specify multiple URLs for the server. Try to update any existing code to use that property instead. Syntax var iceServer = {                  ...                  url = iceServerUrl,                  ...                };var serverUrl = iceServer.url;iceServer.url = iceServerUrl; The value of this property is a DOMString containing the full URL of a server to use during ICE negotiation. Example This example creates a new RTCPeerConnection which will use a STUN server at stunserver.example.org", 
        "type": "WebRTC"
    }, 
    "RTCIceServer.urls": {
        "descr": "Draft This page is not complete.", 
        "name": "RTCIceServer.urls", 
        "params": [], 
        "path": "dom/rtciceserver/urls", 
        "syntax": "RTCIceServer dictionary's urls property specifies the URL or URLs of the servers to be used for ICE negotiations. These are typically STUN and/or TURN servers. Syntax var iceServer = {                  ...                  urls = iceServerUrl | [ url1, ..., urlN ],                  ...                };var serverUrls = iceServer.urls;iceServer.urls = iceServerUrl | [ url1, ..., urlN ]; The value of this property may be specified as a single URL or as an array of multiple URLs. Examples Let's look a few examples of varying complexity. A single ICE server This example creates a new RTCPeerConnection which will use a STUN server at stunserver.example.org", 
        "type": "WebRTC"
    }, 
    "RTCIceServer.username": {
        "descr": "Draft This page is not complete.", 
        "name": "RTCIceServer.username", 
        "params": [], 
        "path": "dom/rtciceserver/username", 
        "syntax": "RTCIceServer dictionary's username property is a string which specifies the username to use when authenticating with the ICE server being described.", 
        "type": "WebRTC"
    }, 
    "RTCIdentityAssertion": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityAssertion", 
        "params": [
            {
                "descr": "Indicates the provider of the identity assertion.", 
                "name": "RTCIdentityAssertion.idp"
            }, 
            {
                "descr": "Indicates the name of the identity assertion provider.", 
                "name": "RTCIdentityAssertion.name"
            }
        ], 
        "path": "dom/rtcidentityassertion", 
        "syntax": "RTCIdentityAssertion interface of the the WebRTC API represents the identity of the a remote peer of the current connection. If no peer has yet been set and verified this interface returns null. Once set it can't be changed. Properties  RTCIdentityAssertion.idp Indicates the provider of the identity assertion. RTCIdentityAssertion.name Indicates the name of the identity assertion provider.  Specifications    Specification Status Comment   WebRTC 1.0: Real-time Communication Between Browser Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support Not supported                 Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support Not supported Not supported           Not supported          Edit this page on MDN", 
        "type": "WebRTC"
    }, 
    "RTCIdentityErrorEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityErrorEvent", 
        "params": [
            {
                "descr": "Is a DOMString describing the domain name of the identity provider (idp) generating the error response.", 
                "name": "RTCIdentityErrorEvent.idp Read only"
            }, 
            {
                "descr": "Is a DOMString giving the URL where the user can complete the authentication. ", 
                "name": "RTCIdentityErrorEvent.loginUrl Read only"
            }, 
            {
                "descr": "Is a DOMString describing the Idp protocol in use.", 
                "name": "RTCIdentityErrorEvent.protocol Read only"
            }
        ], 
        "path": "dom/rtcidentityerrorevent", 
        "syntax": "RTCIdentityErrorEvent interface represents an error associated with the identity provider (idP). This is usually for an RTCPeerConnection", 
        "type": "WebRTC"
    }, 
    "RTCIdentityErrorEvent.idp": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityErrorEvent.idp", 
        "params": [], 
        "path": "dom/rtcidentityerrorevent/idp", 
        "syntax": "RTCIdentityErrorEvent.idp returns the DOMString describing the domain name of the identity provider (idp) generating the error response event.", 
        "type": "WebRTC"
    }, 
    "RTCIdentityErrorEvent.loginUrl": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityErrorEvent.loginUrl", 
        "params": [], 
        "path": "dom/rtcidentityerrorevent/loginurl", 
        "syntax": "RTCIdentityErrorEvent.loginUrl is a DOMString giving the URL where the user can complete the authentication. It can be null and is provided by the identity provider (idp).", 
        "type": "WebRTC"
    }, 
    "RTCIdentityErrorEvent.protocol": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityErrorEvent.protocol", 
        "params": [], 
        "path": "dom/rtcidentityerrorevent/protocol", 
        "syntax": "RTCIdentityErrorEvent.protocol is a DOMString describing the Idp protocol in use.  Firefox implements the interface of this property under the following name: RTCPeerConnectionIdentityErrorEvent. It is likely that it will correct this name when it will unprefix RTCPeerConnection, once spec and implementation will have been stabilized.  Syntax var protocol = event.protocol;event.protocol = \"idp.html\"; Example pc.onidpassertionerror = function( ev ) {                           alert(\"The idp uses the following protocol '\" +                                  ev.protocol +                                  \".\");\n or                          });", 
        "type": "WebRTC"
    }, 
    "RTCIdentityEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityEvent", 
        "params": [
            {
                "descr": "Returns the DOMString containing a blob being the assertion generated.", 
                "name": "RTCIdentityEvent.assertion Read only"
            }
        ], 
        "path": "dom/rtcidentityevent", 
        "syntax": "RTCIdentityEvent interface represents an identity assertion generated by an identity provider (idP). This is usually for an RTCPeerConnection", 
        "type": "WebRTC"
    }, 
    "RTCIdentityEvent.assertion": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCIdentityEvent.assertion", 
        "params": [], 
        "path": "dom/rtcidentityevent/assertion", 
        "syntax": "RTCIdentityEvent.assertion returns the DOMString containing a blob being the coded assertion associated with the event.  Firefox implements the interface this property belongs to under the following name: RTCPeerConnectionIdentityEvent. It is likely that it will correct this name when it will unprefix RTCPeerConnection, once spec and implementation will have been stabilized.  Syntax  var blob = event.assertion; Example pc.onidentityresult = function( ev ) {                         alert(\"A new identity assertion (blob: '\" +                                ev.assertion +                                \"') has been generated.\");\n or                       });", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection": {
        "descr": "Draft This page is not complete.", 
        "name": "RTCPeerConnection", 
        "params": [
            {
                "descr": "The RTCPeerConnection() constructor returns a newly-created RTCPeerConnection, which represents a connection between the local device and a remote peer.", 
                "name": "RTCPeerConnection()"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates.", 
                "name": "canTrickleIceCandidates"
            }, 
            {
                "descr": "The read-only connectionState property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the string values specified by the enum RTCPeerConnectionState.", 
                "name": "connectionState"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.currentLocalDescription returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.", 
                "name": "currentLocalDescription"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.currentRemoteDescription returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.", 
                "name": "currentRemoteDescription"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.defaultIceServers returns an array of objects based on the RTCIceServer dictionary, which indicates what\u2014if any\u2014ICE servers the browser will use by default if none are provided to the RTCPeerConnection in its RTCConfiguration. However, browsers are not required to provide any default ICE servers at all.", 
                "name": "defaultIceServers"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.iceConnectionState returns an enum of type RTCIceConnectionState which state of the ICE agent associated with the RTCPeerConnection.", 
                "name": "iceConnectionState  Read only"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.iceGatheringState returns an enum of type RTCIceGatheringState that describes connection's ICE gathering state. ", 
                "name": "iceGatheringState  Read only"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.localDescription returns an RTCSessionDescription describing the session for the local end of the connection. ", 
                "name": "localDescription  Read only"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.peerIdentity returns an RTCIdentityAssertion, containing a DOMString once set and verified. ", 
                "name": "peerIdentity  Read only"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.pendingLocalDescription returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. ", 
                "name": "pendingLocalDescription"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.pendingRemoteDescription returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. ", 
                "name": "pendingRemoteDescription  Read only"
            }, 
            {
                "descr": "The read-only property RTCPeerConnection.remoteDescription returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection. If this hasn't been set yet, this is null.", 
                "name": "remoteDescription  Read only"
            }, 
            {
                "descr": "The read-only sctp property on the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received. ", 
                "name": "sctp"
            }, 
            {
                "descr": "The read-only signalingState property on the RTCPeerConnection interface returns one of the string values specified by the RTCSignalingState enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See \"Signaling\" in Lifetime of a WebRTC session for more details about the signaling process.", 
                "name": "signalingState  Read only"
            }, 
            {
                "descr": "The RTCPeerConnection.onaddstream event handler is a property containing the code to execute when the addstream event, of type MediaStreamEvent, is received by this RTCPeerConnection. ", 
                "name": "onaddstream"
            }, 
            {
                "descr": "The RTCPeerConnection.onconnectionstatechange property specifies an EventHandler which is called to handle the connectionstatechange event when it occurs on an instance of RTCPeerConnection. ", 
                "name": "onconnectionstatechange"
            }, 
            {
                "descr": "The RTCPeerConnection.ondatachannel property is an EventHandler which specifies a function which is called when the datachannel event occurs on an RTCPeerConnection. ", 
                "name": "ondatachannel"
            }, 
            {
                "descr": "The RTCPeerConnection.onicecandidate property is an EventHandler which specifies a function to be called when the icecandidate event occurs on an RTCPeerConnection instance. ", 
                "name": "onicecandidate"
            }, 
            {
                "descr": "The RTCPeerConnection.oniceconnectionstatechange property is an event handler which specifies a function to be called when the iceconnectionstatechange event is fired on an RTCPeerConnection instance. ", 
                "name": "oniceconnectionstatechange"
            }, 
            {
                "descr": "The RTCPeerConnection.onicegatheringstatechange property is an EventHandler which specifies a function to be called when the icegatheringstatechange event is sent to an RTCPeerConnection instance. ", 
                "name": "onicegatheringstatechange"
            }, 
            {
                "descr": "The RTCPeerConnection.onidentityresult event handler is a property containing the code to execute when the identityresult event, of type RTCIdentityEvent, is received by this RTCPeerConnection. ", 
                "name": "onidentityresult"
            }, 
            {
                "descr": "The RTCPeerConnection.onidpassertionerror event handler is a property containing the code to execute whent the idpassertionerror event, of type RTCIdentityErrorEvent, is received by this RTCPeerConnection. Such an event is sent when the associated identity provider (IdP) encounters an error while generating an identity assertion.", 
                "name": "onidpassertionerror"
            }, 
            {
                "descr": "The RTCPeerConnection.onidpvalidationerror event handler is a property containing the code to execute whent the idpvalidationerror event, of type RTCIdentityErrorEvent, is received by this RTCPeerConnection. Such an event is sent when the associated identity provider (IdP) encounters an error while validating an identity assertion.", 
                "name": "onidpvalidationerror"
            }, 
            {
                "descr": "The RTCPeerConnection.onnegotiationneeded property is an EventHandler which specifies a function which is called to handle the negotiationneeded event when it occurs on an RTCPeerConnection instance. ", 
                "name": "onnegotiationneeded"
            }, 
            {
                "descr": "The RTCPeerConnection.onpeeridentity event handler is a property containing the code to execute whent the peeridentity event, of type Event, is received by this RTCPeerConnection. ", 
                "name": "onpeeridentity"
            }, 
            {
                "descr": "The RTCPeerConnection.onremovestream event handler is a property containing the code to execute when the removestream event, of type MediaStreamEvent, is received by this RTCPeerConnection. ", 
                "name": "onremovestream"
            }, 
            {
                "descr": "The RTCPeerConnection.onsignalingstatechange property is an EventHandler which specifies a function to be called when the signalingstatechange event occurs on an RTCPeerConnection interface. ", 
                "name": "onsignalingstatechange"
            }, 
            {
                "descr": "The RTCPeerConnection.ontrack property is an EventHandler which specifies a function to be called when the track event occurs on an RTCPeerConnection interface. ", 
                "name": "ontrack"
            }, 
            {
                "descr": "When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate().", 
                "name": "addIceCandidate()"
            }, 
            {
                "descr": "The RTCPeerConnection.addStream() method adds a MediaStream as a local source of audio or video. ", 
                "name": "addStream()"
            }, 
            {
                "descr": "The RTCPeerConnection method addTrack() adds a new media track to the connection. ", 
                "name": "addTrack()"
            }, 
            {
                "descr": "The RTCPeerConnection.close() method closes the current peer connection.", 
                "name": "close()"
            }, 
            {
                "descr": "The createAnswer() method on the RTCPeerConnection interface creates an answer to an offer received from a remote peer during the offer/answer negotiation of a WebRTC connection. ", 
                "name": "createAnswer()"
            }, 
            {
                "descr": "The createOffer() method of the RTCPeerConnection interface initiates the creation of an SDP offer which includes information about any MediaStreamTracks already attached to the WebRTC session, codec and options supported by the browser, and any candidates already gathered by the ICE agent, for the purpose of being sent over the signaling channel to a potential peer to request a connection or to update the configuration of an existing connection.", 
                "name": "createOffer()"
            }, 
            {
                "descr": "The generateCertificate() method of the RTCPeerConnection interface creates and stores an X.509 certificate and corresponding private key then returns an RTCCertificate, providing access to it.", 
                "name": "generateCertificate()"
            }, 
            {
                "descr": "The RTCPeerConnection.getIdentityAssertion() method initiates the gathering of an identity assertion. ", 
                "name": "getIdentityAssertion()"
            }, 
            {
                "descr": "The RTCPeerConnection.getLocalStreams() method returns an array of MediaStream associated with the local end of the connection. ", 
                "name": "getLocalStreams()"
            }, 
            {
                "descr": "The RTCPeerConnection.getRemoteStreams() method returns an array of MediaStream associated with the remote end of the connection. ", 
                "name": "getRemoteStreams()"
            }, 
            {
                "descr": "The RTCPeerConnection.getStreamById() method returns the MediaStream with the given id that is associated with local or remote end of the connection. ", 
                "name": "getStreamById()"
            }, 
            {
                "descr": "The RTCPeerConnection.removeStream() method removes a MediaStream as a local source of audio or video. ", 
                "name": "removeStream()"
            }, 
            {
                "descr": "The RTCPeerConnection.setConfiguration() method sets the current configuration of the RTCPeerConnection based on the values included in the specified RTCConfiguration object. ", 
                "name": "setConfiguration()"
            }, 
            {
                "descr": "The RTCPeerConnection.setIdentityProvider() method sets the Identity Provider (IdP) to the triplet given in parameter: its name, the protocol used to communicate with it (optional) and an optional username. The IdP will be used only when an assertion is needed.", 
                "name": "setIdentityProvider()"
            }, 
            {
                "descr": "The RTCPeerConnection.setLocalDescription() method changes the local description associated with the connection. ", 
                "name": "setLocalDescription()"
            }, 
            {
                "descr": "The RTCPeerConnection.setRemoteDescription() method changes the remote description associated with the connection. ", 
                "name": "setRemoteDescription()"
            }, 
            {
                "descr": "Creates a new RTCDTMFSender, associated to a specific MediaStreamTrack, that will be able to send DTMF phone signaling over the connection.", 
                "name": "RTCPeerConnection.createDTMFSender()"
            }
        ], 
        "path": "dom/rtcpeerconnection", 
        "syntax": "The RTCPeerConnection interface represents a WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it's no longer needed.  RTCPeerConnection and RTCSessionDescription are currently prefixed in many browsers, and the navigator.getUserMedia()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.addIceCandidate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.addIceCandidate", 
        "params": [
            {
                "descr": "An RTCIceCandidate or RTCIceCandidateInit object which has been constructed from a message received over the signaling channel and is ready to be delivered to the local ICE agent.", 
                "name": "candidate"
            }, 
            {
                "descr": "A function to be called when the ICE candidate has been successfully added. ", 
                "name": "successCallback"
            }, 
            {
                "descr": "A function to be called if attempting to add the ICE candidate fails. ", 
                "name": "failureCallback"
            }
        ], 
        "path": "dom/rtcpeerconnection/addicecandidate", 
        "syntax": "When a web site or app using RTCPeerConnection receives a new ICE candidate from the remote peer over its signaling channel, it delivers the newly-received candidate to the browser's ICE agent by calling RTCPeerConnection.addIceCandidate()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.addTrack": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.addTrack", 
        "params": [
            {
                "descr": "A MediaStreamTrack object representing the media track to add to the peer connection.", 
                "name": "track"
            }, 
            {
                "descr": "One or more MediaStream objects in which the specified track are to be contained.", 
                "name": "stream..."
            }, 
            {
                "descr": "The specified track is already a member of the set of senders for the RTCPeerConnection.", 
                "name": "InvalidAccessError"
            }, 
            {
                "descr": "The RTCPeerConnection is closed.", 
                "name": "InvalidStateError"
            }
        ], 
        "path": "dom/rtcpeerconnection/addtrack", 
        "syntax": "RTCPeerConnection method addTrack()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.canTrickleIceCandidates": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.canTrickleIceCandidates", 
        "params": [], 
        "path": "dom/rtcpeerconnection/cantrickleicecandidates", 
        "syntax": "RTCPeerConnection.canTrickleIceCandidates returns a Boolean which indicates whether or not the remote peer can accept trickled ICE candidates. ICE trickling is the process of continuing to send candidates after the initial offer or answer has already been sent to the other peer. This property is only set after having called RTCPeerConnection.setRemoteDescription()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.close": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.close", 
        "params": [], 
        "path": "dom/rtcpeerconnection/close", 
        "syntax": "RTCPeerConnection.close()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.connectionState": {
        "descr": "The read-only connectionState property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the string values specified by the enum RTCPeerConnectionState.", 
        "name": "RTCPeerConnection.connectionState", 
        "params": [], 
        "path": "dom/rtcpeerconnection/connectionstate", 
        "syntax": "var connectionState = RTCPeerConnection.connectionState; Value The current state of the connection, as a value from the enum RTCPeerConnectionState. RTCPeerConnectionState enum The RTCPeerConnectionState enum defines string constants which describe states in which the RTCPeerConnection may be. These values are returned by the connectionState property. This state essentially represents the aggregate state of all ICE transports (which are of type RTCIceTransport or RTCDtlsTransport) being used by the connection.", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.constructor", 
        "params": [
            {
                "descr": "An RTCConfiguration dictionary providing options to configure the new connection.", 
                "name": "configuration Optional"
            }, 
            {
                "descr": "Specifies how to handle negotiation of candidates when the remote peer is not compatible with the SDP BUNDLE standard. ", 
                "name": "bundlePolicy Optional"
            }, 
            {
                "descr": "An Array of objects of type RTCCertificate which are used by the connection for authentication. ", 
                "name": "certificates Optional"
            }, 
            {
                "descr": "An unsigned 16-bit integer value which specifies the size of the prefetched ICE pool. ", 
                "name": "iceCandidatePoolSize Optional"
            }, 
            {
                "descr": "An array of RTCIceServer objects, each describing one server which may be used by the ICE agent; these are typically STUN and/or TURN servers.", 
                "name": "iceServers Optional"
            }, 
            {
                "descr": "The current ICE transport policy; this must be one of the values from the RTCIceTransportPolicy enum. ", 
                "name": "iceTransportPolicy Optional"
            }, 
            {
                "descr": "A DOMString which specifies the target peer identity for the RTCPeerConnection. ", 
                "name": "peerIdentity Optional"
            }, 
            {
                "descr": "The RTCP mux policy to use when gathering ICE candidates. ", 
                "name": "rtcpMuxPolicy Optional"
            }
        ], 
        "path": "dom/rtcpeerconnection/rtcpeerconnection", 
        "syntax": "RTCPeerConnection()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.createAnswer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.createAnswer", 
        "params": [
            {
                "descr": "An object which contains options which customize the answer; this is based on the RTCAnswerOptions dictionary.", 
                "name": "options Optional"
            }, 
            {
                "descr": "An RTCSessionDescriptionCallback which will be passed a single RTCSessionDescription object describing the newly-created answer.", 
                "name": "successCallback"
            }, 
            {
                "descr": "An RTCPeerConnectionErrorCallback which will be passed a single DOMError object explaining why the request to create an answer failed.", 
                "name": "failureCallback"
            }, 
            {
                "descr": "An optional RTCOfferOptions object providing options requested for the answer.", 
                "name": "options Optional"
            }, 
            {
                "descr": "The identity provider wasn't able to provide an identity assertion.", 
                "name": "NotReadableError"
            }, 
            {
                "descr": "Generation of the SDP failed for some reason; this is a general failure catch-all exception.", 
                "name": "OperationError"
            }
        ], 
        "path": "dom/rtcpeerconnection/createanswer", 
        "syntax": "createAnswer()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.createDataChannel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.createDataChannel", 
        "params": [
            {
                "descr": "A human-readable name for the channel. ", 
                "name": "label"
            }, 
            {
                "descr": "An RTCDataChannelInit dictionary providing configuration options for the data channel", 
                "name": "options Optional"
            }, 
            {
                "descr": "Indicates whether or not messages sent on the RTCDataChannel are required to arrive at their destination in the same order in which they were sent (true), or if they're allowed to arrive out-of-order (false). Default: true.", 
                "name": "ordered Optional"
            }, 
            {
                "descr": "The maximum number of milliseconds that attempts to transfer a message may take in unreliable mode. ", 
                "name": "maxPacketLifeTime Optional"
            }, 
            {
                "descr": "The maximum number of times the user agent should attempt to retransmit a message which fails the first time in unreliable mode. ", 
                "name": "maxRetransmits Optional"
            }, 
            {
                "descr": "The name of the sub-protocol being used on the RTCDataChannel, if any; otherwise, the empty string (\"\"). ", 
                "name": "protocol Optional"
            }, 
            {
                "descr": "Indicates whether or not the two peers negotiated when creating the data channel (true), or if the channel was simply created by one of the peers, letting the other peer choose to accept the connection or not when it receives the resulting RTCDataChannelEvent (false). Default: false.", 
                "name": "negotiated Optional"
            }, 
            {
                "descr": "A 16-bit numeric ID for the channel. ", 
                "name": "id Optional"
            }, 
            {
                "descr": "The RTCPeerConnection is closed.", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The label and/or protocol string is too long; these cannot be longer than 65,535 bytes (bytes, rather than characters).", 
                "name": "TypeError"
            }, 
            {
                "descr": "Values were specified for both the maxPacketLifeTime and maxRetransmits options. ", 
                "name": "SyntaxError"
            }, 
            {
                "descr": "An id was specified, but another RTCDataChannel is already using the same value.", 
                "name": "ResourceInUse"
            }
        ], 
        "path": "dom/rtcpeerconnection/createdatachannel", 
        "syntax": "createDataChannel()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.createOffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.createOffer", 
        "params": [
            {
                "descr": "An RTCOfferOptions dictionary providing options requested for the offer.", 
                "name": "options Optional"
            }, 
            {
                "descr": "To restart ICE on an active connection, set this to true. ", 
                "name": "iceRestart Optional"
            }, 
            {
                "descr": "Some codecs and hardware are able to detect when audio begins and ends by watching for \"silence\" (or relatively low sound levels) to occur. ", 
                "name": "voiceActivityDetection Optional"
            }, 
            {
                "descr": "An RTCSessionDescriptionCallback which will be passed a single RTCSessionDescription object describing the newly-created offer.", 
                "name": "Deprecated parameters   In older code and documentation, you may see a callback-based version of this function. This has been deprecated and its use is strongly discouraged. You should update any existing code to use the Promise-based version of createOffer() instead. The parameters for this form of createOffer() are described below, to aid in updating existing code.  successCallback"
            }, 
            {
                "descr": "An RTCPeerConnectionErrorCallback which will be passed a single DOMError object explaining why the request to create an offer failed.", 
                "name": "errorCallback"
            }, 
            {
                "descr": "An optional RTCOfferOptions dictionary providing options requested for the offer.", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/rtcpeerconnection/createoffer", 
        "syntax": "createOffer()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.currentLocalDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.currentLocalDescription", 
        "params": [], 
        "path": "dom/rtcpeerconnection/currentlocaldescription", 
        "syntax": "RTCPeerConnection.currentLocalDescription returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated. To change the currentLocalDescription, call RTCPeerConnection.setLocalDescription()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.currentRemoteDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.currentRemoteDescription", 
        "params": [], 
        "path": "dom/rtcpeerconnection/currentremotedescription", 
        "syntax": "RTCPeerConnection.currentRemoteDescription returns an RTCSessionDescription object describing the remote end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer. Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated. To change the currentRemoteDescription, call RTCPeerConnection.setRemoteDescription()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.defaultIceServers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.defaultIceServers", 
        "params": [], 
        "path": "dom/rtcpeerconnection/defaulticeservers", 
        "syntax": "RTCPeerConnection.defaultIceServers returns an array of objects based on the RTCIceServer", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.generateCertificate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.generateCertificate", 
        "params": [
            {
                "descr": "A DOMString identifying the algorithm to use in creating the key.", 
                "name": "keygenAlgorithm"
            }
        ], 
        "path": "dom/rtcpeerconnection/generatecertificate", 
        "syntax": "generateCertificate()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.getConfiguration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.getConfiguration", 
        "params": [], 
        "path": "dom/rtcpeerconnection/getconfiguration", 
        "syntax": "RTCPeerConnection.getConfiguration()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.getIdentityAssertion": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.getIdentityAssertion", 
        "params": [], 
        "path": "dom/rtcpeerconnection/getidentityassertion", 
        "syntax": "RTCPeerConnection.getIdentityAssertion()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.getLocalStreams": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.getLocalStreams", 
        "params": [], 
        "path": "dom/rtcpeerconnection/getlocalstreams", 
        "syntax": "RTCPeerConnection.getLocalStreams()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.getRemoteStreams": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.getRemoteStreams", 
        "params": [], 
        "path": "dom/rtcpeerconnection/getremotestreams", 
        "syntax": "RTCPeerConnection.getRemoteStreams()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.getStreamById": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.getStreamById", 
        "params": [
            {
                "descr": "Is a DOMString corresponding to the stream to return.", 
                "name": "id"
            }
        ], 
        "path": "dom/rtcpeerconnection/getstreambyid", 
        "syntax": "RTCPeerConnection.getStreamById()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.iceConnectionState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.iceConnectionState", 
        "params": [], 
        "path": "dom/rtcpeerconnection/iceconnectionstate", 
        "syntax": "RTCPeerConnection.iceConnectionState returns an enum of type RTCIceConnectionState which state of the ICE agent associated with the RTCPeerConnection. You can detect when this value has changed by watching for the iceconnectionstatechange event. Syntax  var state = peerConnection.iceConnectionState; Value The current state of the ICE agent and its connection. The value is one of the strings in the RTCIceConnectionState enum. RTCIceConnectionState enum The RTCIceConnectionState enum defines the string constants used to describe the current state of the ICE agent and its connection to the ICE server (that is, the STUN or TURN server).", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.iceGatheringState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.iceGatheringState", 
        "params": [], 
        "path": "dom/rtcpeerconnection/icegatheringstate", 
        "syntax": "RTCPeerConnection.iceGatheringState returns an enum of type RTCIceGatheringState that describes connection's ICE gathering state. This lets you detect, for example, when collection of ICE candidates has finished. You can detect when the value of this property changes by watching for an event of type icegatheringstatechange. Syntax  var state = RTCPeerConnection.iceGatheringState; Value The possible values are those of an enum of type RTCIceGatheringState. RTCIceGatheringState enum The RTCIceGatheringState enum defines string constants which reflect the current status of ICE gathering, as returned using the RTCPeerConnection.iceGatheringState property. You can detect when this value changes by watching for an event of type icegatheringstatechange. Constant Description \"new\" The peer connection was just created and hasn't done any networking yet. \"gathering\" The ICE agent is in the process of gathering candidates for the connection. \"complete\" The ICE agent has finished gathering candidates. If something happens that requires collecting new candidates, such as a new interface being added or the addition of a new ICE server, the state will revert to \"gathering\" to gather those candidates.  Example var pc = new RTCPeerConnection();\n or var state = pc.iceGatheringState;);", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.localDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.localDescription", 
        "params": [], 
        "path": "dom/rtcpeerconnection/localdescription", 
        "syntax": "RTCPeerConnection.localDescription returns an RTCSessionDescription describing the session for the local end of the connection. If it has not yet been set, this is null. Syntax  var sessionDescription = peerConnection.localDescription; On a more fundamental level, the returned value is the value of RTCPeerConnection.pendingLocalDescription if that property isn't null; otherwise, the value of RTCPeerConnection.currentLocalDescription is returned. See \"Pending and current descriptions\" in WebRTC connectivity for details on this algorithm and why it's used. Example This example looks at the localDescription and displays an alert containing the RTCSessionDescription object's type and sdp fields. var pc = new RTCPeerConnection();\n or \u2026var sd = pc.localDescription;if (sd) {  alert(\"Local session: type='\" +                 sd.type + \"'; sdp description='\" +        sd.sdp + \"'\");\n or }else {  alert(\"No local session yet.\");\n or });", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onconnectionstatechange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.onconnectionstatechange", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onconnectionstatechange", 
        "syntax": "The RTCPeerConnection.onconnectionstatechange property specifies an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.ondatachannel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.ondatachannel", 
        "params": [], 
        "path": "dom/rtcpeerconnection/ondatachannel", 
        "syntax": "RTCPeerConnection.ondatachannel property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onicecandidate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.onicecandidate", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onicecandidate", 
        "syntax": "The RTCPeerConnection.onicecandidate property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.oniceconnectionstatechange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.oniceconnectionstatechange", 
        "params": [], 
        "path": "dom/rtcpeerconnection/oniceconnectionstatechange", 
        "syntax": "RTCPeerConnection.oniceconnectionstatechange property is an event handler which specifies a function to be called when the iceconnectionstatechange event is fired on an RTCPeerConnection instance. This happens when the state of the connection's ICE agent, as represented by the iceConnectionState property, changes. Syntax RTCPeerConnection.oniceconnectionstatechange = eventHandler; Value This event handler can be set to function which is passed a single input parameter: an Event object describing the iceconnectionstatechange event which occurred. Your code can look at the value of RTCPeerConnection.iceconnectionstate to determine what the new state is. Example The example below watches the state of the ICE agent for a failure or unexpected closure and takes appropriate action, such as presenting an error message or attempting to restart the ICE agent. pc.oniceconnectionstatechange = function(event) {  if (pc.iceconnectionstate === \"failed\" ||      pc.iceconnectionstate === \"disconnected\" ||      pc.iceconnectionstate === \"closed\") {    // Handle the failure};", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onicegatheringstatechange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.onicegatheringstatechange", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onicegatheringstatechange", 
        "syntax": "RTCPeerConnection.onicegatheringstatechange property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onidentityresult": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.onidentityresult", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onidentityresult", 
        "syntax": "RTCPeerConnection.onidentityresult event handler is a property containing the code to execute when the identityresult event, of type RTCIdentityEvent", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onidpassertionerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.onidpassertionerror", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onidpassertionerror", 
        "syntax": "RTCPeerConnection.onidpassertionerror event handler is a property containing the code to execute whent the idpassertionerror event, of type RTCIdentityErrorEvent", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onidpvalidationerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.onidpvalidationerror", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onidpvalidationerror", 
        "syntax": "RTCPeerConnection.onidpvalidationerror event handler is a property containing the code to execute whent the idpvalidationerror event, of type RTCIdentityErrorEvent", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onnegotiationneeded": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.onnegotiationneeded", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onnegotiationneeded", 
        "syntax": "RTCPeerConnection.onnegotiationneeded property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onpeeridentity": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.onpeeridentity", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onpeeridentity", 
        "syntax": "RTCPeerConnection.onpeeridentity event handler is a property containing the code to execute whent the peeridentity event, of type Event, is received by this RTCPeerConnection. Such an event is sent when an identity assertion, received from a peer, has been successfully validated. Syntax peerconnection.onpeeridentity = function; Values  function is the name of a user-defined function, without the ()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onremovestream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.onremovestream", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onremovestream", 
        "syntax": "RTCPeerConnection.onremovestream event handler is a property containing the code to execute when the removestream event, of type MediaStreamEvent, is received by this RTCPeerConnection. Such an event is sent when a MediaStream is removed from this connection. Syntax peerconnection.onremovestream = function; Values  function is the name of a user-defined function, without the ()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.onsignalingstatechange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.onsignalingstatechange", 
        "params": [], 
        "path": "dom/rtcpeerconnection/onsignalingstatechange", 
        "syntax": "RTCPeerConnection.onsignalingstatechange property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.ontrack": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.ontrack", 
        "params": [], 
        "path": "dom/rtcpeerconnection/ontrack", 
        "syntax": "RTCPeerConnection.ontrack property is an EventHandler", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.peerIdentity": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.peerIdentity", 
        "params": [
            {
                "descr": "Is a RTCIdentityAssertion, a dictionary of two values:  \"idp\", a DOMString representing the domain name of the Identity Provider who produced the assertion. ", 
                "name": "identity"
            }
        ], 
        "path": "dom/rtcpeerconnection/peeridentity", 
        "syntax": "RTCPeerConnection.peerIdentity returns an RTCIdentityAssertion", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.pendingLocalDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.pendingLocalDescription", 
        "params": [], 
        "path": "dom/rtcpeerconnection/pendinglocaldescription", 
        "syntax": "RTCPeerConnection.pendingLocalDescription returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentLocalDescription or RTCPeerConnection.localDescription to get the current state of the endpoint. For details on the difference, see \"Pending and current descriptions\" in WebRTC connectivity. Syntax  var sessionDescription = peerConnection.pendingLocalDescription; Return value If a local description change is in progress, this is an RTCSessionDescription describing the proposed configuration. Otherwise, this returns null. Example This example looks at the pendingLocalDescription to determine whether or not there's a description change being processed. var pc = new RTCPeerConnection();\n or \u2026var sd = pc.pendingLocalDescription;if (sd) {  // There's a description change underway!}else {  // No description change pending});", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.pendingRemoteDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.pendingRemoteDescription", 
        "params": [], 
        "path": "dom/rtcpeerconnection/pendingremotedescription", 
        "syntax": "RTCPeerConnection.pendingRemoteDescription returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection. This does not describe the connection as it currently stands, but as it may exist in the near future. Use RTCPeerConnection.currentRemoteDescription or RTCPeerConnection.remoteDescription", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.remoteDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.remoteDescription", 
        "params": [], 
        "path": "dom/rtcpeerconnection/remotedescription", 
        "syntax": "RTCPeerConnection.remoteDescription returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection. If this hasn't been set yet, this is null", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.removeStream": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.removeStream", 
        "params": [
            {
                "descr": "Is a MediaStream is the stream to remove.", 
                "name": "mediaStream"
            }
        ], 
        "path": "dom/rtcpeerconnection/removestream", 
        "syntax": "RTCPeerConnection.removeStream()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.sctp": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.sctp", 
        "params": [], 
        "path": "dom/rtcpeerconnection/sctp", 
        "syntax": "sctp property on the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received. If SCTP hasn't been negotiated, this value is null", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.setConfiguration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.setConfiguration", 
        "params": [
            {
                "descr": "An RTCConfiguration object which provides the options to be set. ", 
                "name": "configuration"
            }, 
            {
                "descr": "One or more of the URLs specified in configuration.iceServers is a TURN server, but complete login information is not provided (that is, either the RTCIceServer.username or RTCIceServer.credentials is missing). This prevents successful login to the server.", 
                "name": "InvalidAccessError"
            }, 
            {
                "descr": "The configuration includes changed identity information, but the connection already has identity information specified. ", 
                "name": "InvalidModificationError"
            }, 
            {
                "descr": "The RTCPeerConnection is closed.", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "One or more of the URLs provided in the configuration.iceServers list is invalid.", 
                "name": "SyntaxError"
            }
        ], 
        "path": "dom/rtcpeerconnection/setconfiguration", 
        "syntax": "RTCPeerConnection.setConfiguration()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.setIdentityProvider": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnection.setIdentityProvider", 
        "params": [
            {
                "descr": "Is a DOMString is the domain name where the IdP is.", 
                "name": "domainname"
            }, 
            {
                "descr": "Is a DOMString representing the protocol used to communicate with the IdP. ", 
                "name": "protocol Optional"
            }, 
            {
                "descr": "Is a DOMString representing the username associated with the IdP.", 
                "name": "username Optional"
            }
        ], 
        "path": "dom/rtcpeerconnection/setidentityprovider", 
        "syntax": "RTCPeerConnection.setIdentityProvider()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.setLocalDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.setLocalDescription", 
        "params": [
            {
                "descr": "An RTCSessionDescriptionInit or RTCSessionDescription which specifies the configuration to be applied to the local end of the connection.", 
                "name": "sessionDescription"
            }, 
            {
                "descr": "A JavaScript Function which accepts no input parameters to be be called once the description has been successfully set. ", 
                "name": "successCallback"
            }, 
            {
                "descr": "A function matching the signautre RTCPeerConnectionErrorCallback which gets called if the description can't be set. ", 
                "name": "errorCallback"
            }, 
            {
                "descr": "The connection's signalingState is \"closed\", indicating that the connection is not currently open, so negotiation cannot take place.", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The RTCSessionDescription specified by the sessionDescription parameter is invalid.", 
                "name": "InvalidSessionDescriptionError"
            }
        ], 
        "path": "dom/rtcpeerconnection/setlocaldescription", 
        "syntax": "The RTCPeerConnection.setLocalDescription()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.setRemoteDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.setRemoteDescription", 
        "params": [
            {
                "descr": "An RTCSessionDescriptionInit or RTCSessionDescription which specifies the configuration of the remote end of the connection.", 
                "name": "sessionDescription"
            }, 
            {
                "descr": "A JavaScript Function which accepts no input parameters to be be called once the description has been successfully set. ", 
                "name": "successCallback"
            }, 
            {
                "descr": "A function matching the signautre RTCPeerConnectionErrorCallback which gets called if the description can't be set. ", 
                "name": "errorCallback"
            }, 
            {
                "descr": "The connection's signalingState is \"closed\", indicating that the connection is not currently open, so negotiation cannot take place.", 
                "name": "InvalidStateError"
            }, 
            {
                "descr": "The RTCSessionDescription specified by the sessionDescription parameter is invalid.", 
                "name": "InvalidSessionDescriptionError"
            }
        ], 
        "path": "dom/rtcpeerconnection/setremotedescription", 
        "syntax": "The RTCPeerConnection.setRemoteDescription()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnection.signalingState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnection.signalingState", 
        "params": [], 
        "path": "dom/rtcpeerconnection/signalingstate", 
        "syntax": "signalingState property on the RTCPeerConnection interface returns one of the string values specified by the RTCSignalingState enum; these values describe the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer. See \"Signaling\" in Lifetime of a WebRTC session for more details about the signaling process. Because the signaling process is a state machine, being able to verify that your code is in the expected state when messages arrive can help avoid unexpected and avoidable failures. For example, if you receive an answer while the signalingState isn't \"have-local-offer\", you know that something is wrong, since you should only receive answers after creating an offer but before an answer has been received and passed into RTCPeerConnection.setLocalDescription()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnectionIceEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnectionIceEvent", 
        "params": [
            {
                "descr": "Contains the RTCIceCandidate containing the candidate associated with the event.", 
                "name": "RTCPeerConnectionIceEvent.candidate Read only"
            }, 
            {
                "descr": "Returns a new RTCPeerConnectionIceEvent. ", 
                "name": "RTCPeerConnectionIceEvent()"
            }
        ], 
        "path": "dom/rtcpeerconnectioniceevent", 
        "syntax": "RTCPeerConnectionIceEvent interface represents events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate. Properties A RTCPeerConnectionIceEvent being an Event, this event also implements these properties.  RTCPeerConnectionIceEvent.candidate Read only  Contains the RTCIceCandidate containing the candidate associated with the event.  Constructors  RTCPeerConnectionIceEvent()", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnectionIceEvent.candidate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCPeerConnectionIceEvent.candidate", 
        "params": [], 
        "path": "dom/rtcpeerconnectioniceevent/candidate", 
        "syntax": "RTCPeerConnectionIceEvent.candidate returns the RTCIceCandidate associated with the event. Syntax  var candidate = event.candidate; Example pc.onicecandidate = function( ev ) {                      alert(\"The ICE candidate (transport address: '\" +                             ev.candidate.candidate +                             \"') has been added to this connection.\");\n or                    });", 
        "type": "WebRTC"
    }, 
    "RTCPeerConnectionIceEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCPeerConnectionIceEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the event, like \"icecandidate\".", 
                "name": "type"
            }, 
            {
                "descr": "A dictionary of type RTCPeerConnectionInit, which may contain one or more of the following fields:  \"candidate\" (optional, default is null): A RTCIceCandidate representing the ICE candidate being concerned by the event. If null, the event indicates the end of candidate gathering. \"url\" (optional, default is null): The URL of the STUN or TURN server which was used to gather the candidate. If the candidate was not gathered by a STUN or TURN server, this value must be null. \"bubbles\" (optional, default is false): Inherited from EventInit(), this Boolean option indicates whether or not the event must bubble. \"cancelable\" (optional, default is false, inherited from EventInit(), this Boolean indicates whether or not the event can be canceled.", 
                "name": "options"
            }
        ], 
        "path": "dom/rtcpeerconnectioniceevent/rtcpeerconnectioniceevent", 
        "syntax": "RTCPeerConnectionIceEvent()", 
        "type": "WebRTC"
    }, 
    "RTCSctpTransport": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCSctpTransport", 
        "params": [
            {
                "descr": "An integer value indicating the maximum size, in bytes, of a message which can be sent using the RTCDataChannel.send() method.", 
                "name": "RTCSctpTransport.maxMessageSize Read only"
            }, 
            {
                "descr": "An RTCDtlsTransport object representing the DTLS transport used for the transmission and receipt of data packets.", 
                "name": "RTCSctpTransport.transport Read only"
            }
        ], 
        "path": "dom/rtcsctptransport", 
        "syntax": "RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (DTLS) transport over which SCTP packets for all of an RTCPeerConnection", 
        "type": "WebRTC"
    }, 
    "RTCSessionDescription": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCSessionDescription", 
        "params": [
            {
                "descr": "An enum of type RTCSdpType describing the session description's type.", 
                "name": "RTCSessionDescription.type Read only"
            }, 
            {
                "descr": "A DOMString containing the SDP describing the session.", 
                "name": "RTCSessionDescription.sdp Read only"
            }, 
            {
                "descr": "This constructor returns a new RTCSessionDescription. ", 
                "name": "RTCSessionDescription()"
            }, 
            {
                "descr": "Returns a JSON description of the object. ", 
                "name": "RTCSessionDescription.toJSON()"
            }
        ], 
        "path": "dom/rtcsessiondescription", 
        "syntax": "RTCSessionDescription interface represents the parameters of a session. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session.", 
        "type": "WebRTC"
    }, 
    "RTCSessionDescription.sdp": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCSessionDescription.sdp", 
        "params": [], 
        "path": "dom/rtcsessiondescription/sdp", 
        "syntax": "RTCSessionDescription.sdp is a read-only DOMString containing the SDP which describes the session.", 
        "type": "WebRTC"
    }, 
    "RTCSessionDescription.toJSON": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCSessionDescription.toJSON", 
        "params": [], 
        "path": "dom/rtcsessiondescription/tojson", 
        "syntax": "RTCPeerConnection.toJSON()", 
        "type": "WebRTC"
    }, 
    "RTCSessionDescription.type": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCSessionDescription.type", 
        "params": [], 
        "path": "dom/rtcsessiondescription/type", 
        "syntax": "RTCSessionDescription.type is a read-only value of type RTCSdpType which describes the description's type. Syntax var value = sessionDescription.type;sessionDescription.type = value;  Value The possible values are defined by an enum of type RTCSdpType. The allowed values are those of an enum of type RTCSdpType:  \"offer\", the description is the initial proposal in an offer/answer exchange. \"answer\", the description is the definitive choice in an offer/answer exchange. \"pranswer\", the description is a provisional answer and may be changed when the definitive choice will be given.  Example // The remote description has been set previously on pc, a RTCPeerconnectionalert(pc.remoteDescription.type);", 
        "type": "WebRTC"
    }, 
    "RTCSessionDescriptionCallback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "RTCSessionDescriptionCallback", 
        "params": [], 
        "path": "dom/rtcsessiondescriptioncallback", 
        "syntax": "var pc = new RTCPeerConnection();\n or var descriptionCallback = function(offer) {  pc.setLocalDescription(offer);\n or }pc.createOffer(descriptionCallback);", 
        "type": "WebRTC"
    }, 
    "RTCStatsReport": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "RTCStatsReport", 
        "params": [], 
        "path": "dom/rtcstatsreport", 
        "syntax": "RTCPeerConnection.getStats()", 
        "type": "WebRTC"
    }, 
    "RadioNodeList": {
        "descr": "The RadioNodeList interface represents a collection of elements in a <form> or a <fieldset> element.", 
        "name": "RadioNodeList", 
        "params": [
            {
                "descr": "If the underlying element collection contains radio buttons, the value property represents the checked radio button. ", 
                "name": "RadioNodeList.value"
            }
        ], 
        "path": "dom/radionodelist", 
        "syntax": "<form> or a <fieldset>", 
        "type": "Node"
    }, 
    "RadioNodeList.value": {
        "descr": "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.", 
        "name": "RadioNodeList.value", 
        "params": [], 
        "path": "dom/radionodelist/value", 
        "syntax": "value = radioNodeList.value;radioNodeList.value = string; Example var form = document.forms[0];var radios = form.elements['myRadio'];console.log(radios.value);\n or radios.value = 'Mr.';);", 
        "type": "Node"
    }, 
    "RandomSource.getRandomValues": {
        "descr": "The RandomSource.getRandomValues() method lets you get cryptographically random values. The array given as the parameter is filled with random numbers (random in its cryptographic meaning).", 
        "name": "RandomSource.getRandomValues", 
        "params": [
            {
                "descr": "Is an integer-based TypedArray, that is an Int8Array, a Uint8Array, an Int16Array, a Uint16Array, an Int32Array, or a Uint32Array. ", 
                "name": "typedArray"
            }
        ], 
        "path": "dom/randomsource/getrandomvalues", 
        "syntax": "cryptoObj.getRandomValues(typedArray);", 
        "type": "Web Cryptography"
    }, 
    "Range.cloneContents": {
        "descr": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.", 
        "name": "Range.cloneContents", 
        "params": [], 
        "path": "dom/range/clonecontents", 
        "syntax": "documentFragment = range.cloneContents();", 
        "type": "Range"
    }, 
    "Range.cloneRange": {
        "descr": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.", 
        "name": "Range.cloneRange", 
        "params": [], 
        "path": "dom/range/clonerange", 
        "syntax": "clone = range.cloneRange();", 
        "type": "Range"
    }, 
    "Range.collapse": {
        "descr": "The Range.collapse() method collapses the Range to one of its boundary points.", 
        "name": "Range.collapse", 
        "params": [
            {
                "descr": "A boolean value: true collapses the Range to its start, false to its end. ", 
                "name": "toStart Optional"
            }
        ], 
        "path": "dom/range/collapse", 
        "syntax": "range.collapse(toStart);", 
        "type": "Range"
    }, 
    "Range.collapsed": {
        "descr": "The Range.collapsed read-only property returns a Boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.", 
        "name": "Range.collapsed", 
        "params": [], 
        "path": "dom/range/collapsed", 
        "syntax": "isCollapsed = range.collapsed; Example var range = document.createRange();\n or  range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or isCollapsed = range.collapsed;);", 
        "type": "Range"
    }, 
    "Range.commonAncestorContainer": {
        "descr": "The Range.commonAncestorContainerread-only property returns the deepest \u2014 or furthest down the document tree \u2014 Node that contains both boundary points of the range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the commonAncestorContainer.", 
        "name": "Range.commonAncestorContainer", 
        "params": [], 
        "path": "dom/range/commonancestorcontainer", 
        "syntax": "rangeAncestor = range.commonAncestorContainer; Example var range = document.createRange();\n or range.setStart(startNode,startOffset);\n or range.setEnd(endNode,endOffset);\n or rangeAncestor = range.commonAncestorContainer;);", 
        "type": "Range"
    }, 
    "Range.compareBoundaryPoints": {
        "descr": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with another one.", 
        "name": "Range.compareBoundaryPoints", 
        "params": [
            {
                "descr": "A number, -1, 0, or 1, indicating whether the corresponding boundary-point of the Range is respectively before, equal to, or after the corresponding boundary-point of sourceRange.", 
                "name": "compare"
            }, 
            {
                "descr": "A constant describing the comparison method:  Range.END_TO_END compares the end boundary-point of sourceRange to the end boundary-point of Range. ", 
                "name": "how"
            }, 
            {
                "descr": "A Range to compare boundary points with the range.", 
                "name": "sourceRange"
            }
        ], 
        "path": "dom/range/compareboundarypoints", 
        "syntax": "compare = range.compareBoundaryPoints(how, sourceRange);", 
        "type": "Range"
    }, 
    "Range.comparePoint": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.comparePoint", 
        "params": [
            {
                "descr": "The Node to compare with the Range.", 
                "name": "referenceNode"
            }, 
            {
                "descr": "An integer greater than or equal to zero representing the offset inside the referenceNode.", 
                "name": "offset"
            }
        ], 
        "path": "dom/range/comparepoint", 
        "syntax": "Range.comparePoint()", 
        "type": "Range"
    }, 
    "Range.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Range.constructor", 
        "params": [], 
        "path": "dom/range/range", 
        "syntax": "Range()", 
        "type": "Range"
    }, 
    "Range.createContextualFragment": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.createContextualFragment", 
        "params": [
            {
                "descr": "Text that contains text and tags to be converted to a document fragment.", 
                "name": "tagString"
            }
        ], 
        "path": "dom/range/createcontextualfragment", 
        "syntax": "Range.createContextualFragment()", 
        "type": "Range"
    }, 
    "Range.deleteContents": {
        "descr": "The Range.deleteContents() removes the contents of the Range from the Document.", 
        "name": "Range.deleteContents", 
        "params": [], 
        "path": "dom/range/deletecontents", 
        "syntax": "range.deleteContents()", 
        "type": "Range"
    }, 
    "Range.detach": {
        "descr": "The Range.detach() method releases a Range from use. This lets the browser choose to release resources associated with this Range. Subsequent attempts to use the detached range will result in a DOMException being thrown with an error code of INVALID_STATE_ERR.", 
        "name": "Range.detach", 
        "params": [], 
        "path": "dom/range/detach", 
        "syntax": "range.detach();", 
        "type": "Range"
    }, 
    "Range.endContainer": {
        "descr": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.", 
        "name": "Range.endContainer", 
        "params": [], 
        "path": "dom/range/endcontainer", 
        "syntax": "endRangeNode = range.endContainer; Example var range = document.createRange();\n or range.setStart(startNode,startOffset);\n or  range.setEnd(endNode,endOffset);\n or endRangeNode = range.endContainer;);", 
        "type": "Range"
    }, 
    "Range.endOffset": {
        "descr": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.", 
        "name": "Range.endOffset", 
        "params": [], 
        "path": "dom/range/endoffset", 
        "syntax": "CDATASEction, then the offset is the number of characters from the start of the endContainer to the boundary point of the Range. For other Node", 
        "type": "Range"
    }, 
    "Range.extractContents": {
        "descr": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.", 
        "name": "Range.extractContents", 
        "params": [], 
        "path": "dom/range/extractcontents", 
        "syntax": "documentFragment = range.extractContents();", 
        "type": "Range"
    }, 
    "Range.getBoundingClientRect": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Range.getBoundingClientRect", 
        "params": [], 
        "path": "dom/range/getboundingclientrect", 
        "syntax": "Range.getBoundingClientRect()", 
        "type": "Range"
    }, 
    "Range.getClientRects": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.getClientRects", 
        "params": [], 
        "path": "dom/range/getclientrects", 
        "syntax": "Range.getClientRects()", 
        "type": "Range"
    }, 
    "Range.insertNode": {
        "descr": "The Range.insertNode() method inserts a node at the start of the Range.", 
        "name": "Range.insertNode", 
        "params": [
            {
                "descr": "The Node to insert at the start of the range.", 
                "name": "newNode"
            }
        ], 
        "path": "dom/range/insertnode", 
        "syntax": "range.insertNode(newNode);", 
        "type": "Range"
    }, 
    "Range.intersectsNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.intersectsNode", 
        "params": [
            {
                "descr": "The Node to compare with the Range.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/intersectsnode", 
        "syntax": "Range.intersectsNode()", 
        "type": "Range"
    }, 
    "Range.isPointInRange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Range.isPointInRange", 
        "params": [
            {
                "descr": "The Node to compare with the Range.", 
                "name": "referenceNode"
            }, 
            {
                "descr": "The offset into Node of the point to compare with the Range.", 
                "name": "offset"
            }
        ], 
        "path": "dom/range/ispointinrange", 
        "syntax": "Range.isPointInRange()", 
        "type": "Range"
    }, 
    "Range.selectNode": {
        "descr": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.", 
        "name": "Range.selectNode", 
        "params": [
            {
                "descr": "The Node to select within a Range.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/selectnode", 
        "syntax": "range.selectNode(referenceNode);", 
        "type": "Range"
    }, 
    "Range.selectNodeContents": {
        "descr": "The Range.selectNodeContents() sets the Range to contain the contents of a Node.", 
        "name": "Range.selectNodeContents", 
        "params": [
            {
                "descr": "The Node whose contents will be selected within a Range.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/selectnodecontents", 
        "syntax": "range.selectNodeContents(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setEnd": {
        "descr": "The Range.setEnd() method sets the end position of a Range.", 
        "name": "Range.setEnd", 
        "params": [
            {
                "descr": "The Node where the Range should end.", 
                "name": "endNode"
            }, 
            {
                "descr": "An integer greater than or equal to zero representing the offset for the end of the Range from the start of endNode.", 
                "name": "endOffset"
            }
        ], 
        "path": "dom/range/setend", 
        "syntax": "range.setEnd(endNode, endOffset);", 
        "type": "Range"
    }, 
    "Range.setEndAfter": {
        "descr": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setEndAfter", 
        "params": [
            {
                "descr": "The Node to end the Range after.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/setendafter", 
        "syntax": "range.setEndAfter(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setEndBefore": {
        "descr": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setEndBefore", 
        "params": [
            {
                "descr": "The Node to end the Range before.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/setendbefore", 
        "syntax": "range.setEndBefore(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setStart": {
        "descr": "The Range.setStart() method sets the start position of a Range.", 
        "name": "Range.setStart", 
        "params": [
            {
                "descr": "The Node where the Range should start.", 
                "name": "startNode"
            }, 
            {
                "descr": "An integer greater than or equal to zero representing the offset for the start of the Range from the start of startNode.", 
                "name": "startOffset"
            }
        ], 
        "path": "dom/range/setstart", 
        "syntax": "range.setStart(startNode, startOffset);", 
        "type": "Range"
    }, 
    "Range.setStartAfter": {
        "descr": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setStartAfter", 
        "params": [
            {
                "descr": "The Node to start the Range after.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/setstartafter", 
        "syntax": "range.setStartAfter(referenceNode);", 
        "type": "Range"
    }, 
    "Range.setStartBefore": {
        "descr": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.", 
        "name": "Range.setStartBefore", 
        "params": [
            {
                "descr": "The Node before which the Range should start.", 
                "name": "referenceNode"
            }
        ], 
        "path": "dom/range/setstartbefore", 
        "syntax": "range.setStartBefore(referenceNode);", 
        "type": "Range"
    }, 
    "Range.startContainer": {
        "descr": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.", 
        "name": "Range.startContainer", 
        "params": [], 
        "path": "dom/range/startcontainer", 
        "syntax": "startRangeNode = range.startContainer; Example range = document.createRange();\n or range.setStart(startNode,startOffset);\n or range.setEnd(endNode,endOffset);\n or startRangeNode = range.startContainer;);", 
        "type": "Range"
    }, 
    "Range.startOffset": {
        "descr": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.", 
        "name": "Range.startOffset", 
        "params": [], 
        "path": "dom/range/startoffset", 
        "syntax": "CDATASection, then the offset is the number of characters from the start of the startContainer to the boundary point of the Range. For other Node", 
        "type": "Range"
    }, 
    "Range.surroundContents": {
        "descr": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.", 
        "name": "Range.surroundContents", 
        "params": [
            {
                "descr": "A Node to split based on the range.", 
                "name": "newNode"
            }
        ], 
        "path": "dom/range/surroundcontents", 
        "syntax": "range.surroundContents(newNode);", 
        "type": "Range"
    }, 
    "Range.toString": {
        "descr": "The Range.toString() method is a stringifier returning the text of the Range.", 
        "name": "Range.toString", 
        "params": [], 
        "path": "dom/range/tostring", 
        "syntax": "text = range.toString();", 
        "type": "Range"
    }, 
    "RangeError": {
        "descr": "The RangeError object indicates an error when a value is not in the set or range of allowed values.", 
        "name": "RangeError", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an RangeError object.", 
                "name": "RangeError.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "RangeError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that RangeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "RangeError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "RangeError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "RangeError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "RangeError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "RangeError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "RangeError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/rangeerror", 
        "syntax": "new RangeError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "ReferenceError": {
        "descr": "The ReferenceError object represents an error when a non-existent variable is referenced.", 
        "name": "ReferenceError", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to an ReferenceError object.", 
                "name": "ReferenceError.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "ReferenceError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that ReferenceError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "ReferenceError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "ReferenceError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "ReferenceError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "ReferenceError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "ReferenceError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "ReferenceError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/referenceerror", 
        "syntax": "new ReferenceError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "Reflect.apply": {
        "descr": "The static Reflect.apply() method calls a target function with arguments as specified.", 
        "name": "Reflect.apply", 
        "params": [
            {
                "descr": "The target function to call.", 
                "name": "target"
            }, 
            {
                "descr": "The value of this provided for the call to target.", 
                "name": "thisArgument"
            }, 
            {
                "descr": "An array-like object specifying the arguments with which target should be called.", 
                "name": "argumentsList"
            }
        ], 
        "path": "javascript/global_objects/reflect/apply", 
        "syntax": "Reflect.apply(target, thisArgument, argumentsList)", 
        "type": "Reflect"
    }, 
    "Reflect.construct": {
        "descr": "The static Reflect.construct() method acts like the new operator as a function. It is equivalent to calling new target(...args).", 
        "name": "Reflect.construct", 
        "params": [
            {
                "descr": "The target function to call.", 
                "name": "target"
            }, 
            {
                "descr": "An array-like object specifying the arguments with which target should be called.", 
                "name": "argumentsList"
            }, 
            {
                "descr": "The constructor to be used. See also the new.target operator. ", 
                "name": "newTarget Optional"
            }
        ], 
        "path": "javascript/global_objects/reflect/construct", 
        "syntax": "Reflect.construct(target, argumentsList[, newTarget])", 
        "type": "Reflect"
    }, 
    "Reflect.defineProperty": {
        "descr": "The static Reflect.defineProperty() method is like Object.defineProperty() but returns a Boolean.", 
        "name": "Reflect.defineProperty", 
        "params": [
            {
                "descr": "The target object on which to define the property.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to be defined or modified.", 
                "name": "propertyKey"
            }, 
            {
                "descr": "The attributes for the property being defined or modified.", 
                "name": "attributes"
            }
        ], 
        "path": "javascript/global_objects/reflect/defineproperty", 
        "syntax": "Reflect.defineProperty(target, propertyKey, attributes)", 
        "type": "Reflect"
    }, 
    "Reflect.deleteProperty": {
        "descr": "The static Reflect.deleteProperty() method allows to delete properties. It is like the delete operator as a function.", 
        "name": "Reflect.deleteProperty", 
        "params": [
            {
                "descr": "The target object on which to delete the property.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to be deleted.", 
                "name": "propertyKey"
            }
        ], 
        "path": "javascript/global_objects/reflect/deleteproperty", 
        "syntax": "Reflect.deleteProperty(target, propertyKey)", 
        "type": "Reflect"
    }, 
    "Reflect.get": {
        "descr": "The static Reflect.get() method works like getting a property from an object (target[propertyKey]) as a function.", 
        "name": "Reflect.get", 
        "params": [
            {
                "descr": "The target object on which to get the property.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to get.", 
                "name": "propertyKey"
            }, 
            {
                "descr": "The value of this provided for the call to target if a getter is encountered.", 
                "name": "receiver"
            }
        ], 
        "path": "javascript/global_objects/reflect/get", 
        "syntax": "Reflect.get(target, propertyKey[, receiver])", 
        "type": "Reflect"
    }, 
    "Reflect.getOwnPropertyDescriptor": {
        "descr": "The static Reflect.getOwnPropertyDescriptor() method is similar to Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.", 
        "name": "Reflect.getOwnPropertyDescriptor", 
        "params": [
            {
                "descr": "The target object in which to look for the property.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to get an own property descriptor for.", 
                "name": "propertyKey"
            }
        ], 
        "path": "javascript/global_objects/reflect/getownpropertydescriptor", 
        "syntax": "Reflect.getOwnPropertyDescriptor(target, propertyKey)", 
        "type": "Reflect"
    }, 
    "Reflect.getPrototypeOf": {
        "descr": "The static Reflect.getPrototypeOf() method is the same method as Object.getPrototypeOf(). It returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.", 
        "name": "Reflect.getPrototypeOf", 
        "params": [
            {
                "descr": "The target object of which to get the prototype.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/reflect/getprototypeof", 
        "syntax": "Reflect.getPrototypeOf(target)", 
        "type": "Reflect"
    }, 
    "Reflect.has": {
        "descr": "The static Reflect.has() method works like the in operator as a function.", 
        "name": "Reflect.has", 
        "params": [
            {
                "descr": "The target object in which to look for the property.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to check.", 
                "name": "propertyKey"
            }
        ], 
        "path": "javascript/global_objects/reflect/has", 
        "syntax": "Reflect.has(target, propertyKey)", 
        "type": "Reflect"
    }, 
    "Reflect.isExtensible": {
        "descr": "The static Reflect.isExtensible() method determines if an object is extensible (whether it can have new properties added to it). It is similar to Object.isExtensible(), but with some differences.", 
        "name": "Reflect.isExtensible", 
        "params": [
            {
                "descr": "The target object which to check if it is extensible.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/reflect/isextensible", 
        "syntax": "Reflect.isExtensible(target)", 
        "type": "Reflect"
    }, 
    "Reflect.ownKeys": {
        "descr": "The static Reflect.ownKeys() method returns an array of the target object's own property keys.", 
        "name": "Reflect.ownKeys", 
        "params": [
            {
                "descr": "The target object from which to get the own keys.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/reflect/ownkeys", 
        "syntax": "Reflect.ownKeys(target)", 
        "type": "Reflect"
    }, 
    "Reflect.preventExtensions": {
        "descr": "The static Reflect.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It is similar to Object.preventExtensions(), but with some differences.", 
        "name": "Reflect.preventExtensions", 
        "params": [
            {
                "descr": "The target object on which to prevent extensions.", 
                "name": "target"
            }
        ], 
        "path": "javascript/global_objects/reflect/preventextensions", 
        "syntax": "Reflect.preventExtensions(target)", 
        "type": "Reflect"
    }, 
    "Reflect.set": {
        "descr": "The static Reflect.set() method works like setting a property on an object.", 
        "name": "Reflect.set", 
        "params": [
            {
                "descr": "The target object on which to set the property.", 
                "name": "target"
            }, 
            {
                "descr": "The name of the property to set.", 
                "name": "propertyKey"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "The value of this provided for the call to target if a setter is encountered.", 
                "name": "receiver"
            }
        ], 
        "path": "javascript/global_objects/reflect/set", 
        "syntax": "Reflect.set(target, propertyKey, value[, receiver])", 
        "type": "Reflect"
    }, 
    "Reflect.setPrototypeOf": {
        "descr": "The static Reflect.setPrototypeOf() method is the same method as Object.setPrototypeOf(). It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or to null.", 
        "name": "Reflect.setPrototypeOf", 
        "params": [
            {
                "descr": "The target object of which to set the prototype.", 
                "name": "target"
            }, 
            {
                "descr": "The object's new prototype (an object or null).", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/reflect/setprototypeof", 
        "syntax": "Reflect.setPrototypeOf(target, prototype)", 
        "type": "Reflect"
    }, 
    "RegExp": {
        "descr": "The RegExp constructor creates a regular expression object for matching text with a pattern.", 
        "name": "RegExp", 
        "params": [
            {
                "descr": "The text of the regular expression.", 
                "name": "pattern"
            }, 
            {
                "descr": "If specified, flags can have any combination of the following values:  g global match", 
                "name": "flags"
            }, 
            {
                "descr": "ignore case", 
                "name": "i"
            }, 
            {
                "descr": "multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of each line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)", 
                "name": "m"
            }, 
            {
                "descr": "unicode; treat pattern as a sequence of unicode code points", 
                "name": "u"
            }, 
            {
                "descr": "sticky; matches only from the index indicated by the lastIndex property of this regular expression in the target string (and does not attempt to match from any later indexes).", 
                "name": "y"
            }, 
            {
                "descr": "Allows the addition of properties to all objects.", 
                "name": "RegExp.prototype"
            }, 
            {
                "descr": "The value of RegExp.length is 2.", 
                "name": "RegExp.length"
            }, 
            {
                "descr": "The constructor function that is used to create derived objects.", 
                "name": "get RegExp[@@species]"
            }, 
            {
                "descr": "The index at which to start the next match.", 
                "name": "RegExp.lastIndex"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "RegExp.prototype.constructor"
            }, 
            {
                "descr": "A string that contains the flags of the RegExp object.", 
                "name": "RegExp.prototype.flags"
            }, 
            {
                "descr": "Whether to test the regular expression against all possible matches in a string, or only against the first.", 
                "name": "RegExp.prototype.global"
            }, 
            {
                "descr": "Whether to ignore case while attempting a match in a string.", 
                "name": "RegExp.prototype.ignoreCase"
            }, 
            {
                "descr": "Whether or not to search in strings across multiple lines.", 
                "name": "RegExp.prototype.multiline"
            }, 
            {
                "descr": "The text of the pattern.", 
                "name": "RegExp.prototype.source"
            }, 
            {
                "descr": "Whether or not the search is sticky.", 
                "name": "RegExp.prototype.sticky"
            }, 
            {
                "descr": "Whether or not Unicode features are enabled.", 
                "name": "RegExp.prototype.unicode"
            }, 
            {
                "descr": "(Re-)compiles a regular expression during execution of a script.", 
                "name": "RegExp.prototype.compile()"
            }, 
            {
                "descr": "Executes a search for a match in its string parameter.", 
                "name": "RegExp.prototype.exec()"
            }, 
            {
                "descr": "Tests for a match in its string parameter.", 
                "name": "RegExp.prototype.test()"
            }, 
            {
                "descr": "Performs match to given string and returns match result.", 
                "name": "RegExp.prototype[@@match]()"
            }, 
            {
                "descr": "Replaces matches in given string with new substring.", 
                "name": "RegExp.prototype[@@replace]()"
            }, 
            {
                "descr": "Searches the match in given string and returns the index the pattern found in the string.", 
                "name": "RegExp.prototype[@@search]()"
            }, 
            {
                "descr": "Splits given string into an array by separating the string into substring.", 
                "name": "RegExp.prototype[@@split]()"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "RegExp.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "RegExp.prototype.toString()"
            }
        ], 
        "path": "javascript/global_objects/regexp", 
        "syntax": "/pattern/flagsnew RegExp(pattern[, flags])", 
        "type": "RegExp"
    }, 
    "RegExp.@@species": {
        "descr": "The RegExp[@@species] accessor property returns the RegExp constructor.", 
        "name": "RegExp.@@species", 
        "params": [], 
        "path": "javascript/global_objects/regexp/@@species", 
        "syntax": "RegExp[Symbol.species] Description The species accessor property returns the default constructor for RegExp objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the RegExp constructor for RegExp objects: RegExp[Symbol.species]; // function RegExp()", 
        "type": "RegExp"
    }, 
    "Request": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request", 
        "params": [
            {
                "descr": "Creates a new Request object.", 
                "name": "Request.Request()"
            }, 
            {
                "descr": "Contains the request's method (GET, POST, etc.)", 
                "name": "Request.method Read only"
            }, 
            {
                "descr": "Contains the URL of the request.", 
                "name": "Request.url Read only"
            }, 
            {
                "descr": "Contains the associated Headers object of the request.", 
                "name": "Request.headers Read only"
            }, 
            {
                "descr": "Contains the context of the request (e.g., audio, image, iframe, etc.)", 
                "name": "Request.context Read only"
            }, 
            {
                "descr": "Contains the referrer of the request (e.g., client).", 
                "name": "Request.referrer Read only"
            }, 
            {
                "descr": "Contains the referrer policy of the request (e.g., no-referrer).", 
                "name": "Request.referrerPolicy Read only"
            }, 
            {
                "descr": "Contains the mode of the request (e.g., cors, no-cors, same-origin, navigate.)", 
                "name": "Request.mode Read only"
            }, 
            {
                "descr": "Contains the credentials of the request (e.g., omit, same-origin).", 
                "name": "Request.credentials Read only"
            }, 
            {
                "descr": "Contains the mode for how redirects are handled. ", 
                "name": "Request.redirect Read only"
            }, 
            {
                "descr": "Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).", 
                "name": "Request.integrity Read only"
            }, 
            {
                "descr": "Contains the cache mode of the request (e.g., default, reload, no-cache).", 
                "name": "Request.cache Read only"
            }, 
            {
                "descr": "Stores a Boolean that declares whether the body has been used in a response yet.", 
                "name": "Body.bodyUsed Read only"
            }, 
            {
                "descr": "Creates a copy of the current Request object.", 
                "name": "Request.clone()"
            }, 
            {
                "descr": "Returns a promise that resolves with an ArrayBuffer representation of the request body.", 
                "name": "Body.arrayBuffer()"
            }, 
            {
                "descr": "Returns a promise that resolves with a Blob representation of the request body.", 
                "name": "Body.blob()"
            }, 
            {
                "descr": "Returns a promise that resolves with a FormData representation of the request body.", 
                "name": "Body.formData()"
            }, 
            {
                "descr": "Returns a promise that resolves with a JSON representation of the request body.", 
                "name": "Body.json()"
            }, 
            {
                "descr": "Returns a promise that resolves with an USVString (text) representation of the request body.", 
                "name": "Body.text()"
            }
        ], 
        "path": "dom/request", 
        "syntax": "Request interface of the Fetch API represents a resource request. You can create a new Request object using the Request.Request()", 
        "type": "Fetch"
    }, 
    "Request.cache": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.cache", 
        "params": [], 
        "path": "dom/request/cache", 
        "syntax": "cache read-only property of the Request interface contains the cache mode of the request. Syntax var currentCacheMode = request.cache; Value A RequestCache value. The available values are:  default no-store reload no-cache force-cache  Example In the following snippet, we create a new request using the Request.Request()", 
        "type": "Fetch"
    }, 
    "Request.clone": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.clone", 
        "params": [], 
        "path": "dom/request/clone", 
        "syntax": "clone()", 
        "type": "Fetch"
    }, 
    "Request.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.constructor", 
        "params": [
            {
                "descr": "Defines the resource that you wish to fetch. ", 
                "name": "input"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the request. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/request/request", 
        "syntax": "Request()", 
        "type": "Fetch"
    }, 
    "Request.credentials": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.credentials", 
        "params": [], 
        "path": "dom/request/credentials", 
        "syntax": "credentials read-only property of the Request interface indicates whether the user agent should send cookies from the other domain in the case of cross-origin requests. This is similar to XHR\u2019s withCredentials flag, but with three available values (instead of two):", 
        "type": "Fetch"
    }, 
    "Request.headers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Request.headers", 
        "params": [], 
        "path": "dom/request/headers", 
        "syntax": "headers read-only property of the Request interface contains the Headers", 
        "type": "Fetch"
    }, 
    "Request.method": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Request.method", 
        "params": [], 
        "path": "dom/request/method", 
        "syntax": "method read-only property of the Request interface contains the request's method (GET, POST, etc.)", 
        "type": "Fetch"
    }, 
    "Request.mode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.mode", 
        "params": [], 
        "path": "dom/request/mode", 
        "syntax": "mode read-only property of the Request interface contains the mode of the request (e.g., cors, no-cors, cors-with-forced-preflight, same-origin, or navigate.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable:", 
        "type": "Fetch"
    }, 
    "Request.referrer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.referrer", 
        "params": [], 
        "path": "dom/request/referrer", 
        "syntax": "referrer read-only property of the Request interface is set by the user agent to be the referrer of the Request. (e.g., about:client, no-referrer, or a URL.)", 
        "type": "Fetch"
    }, 
    "Request.referrerPolicy": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Request.referrerPolicy", 
        "params": [], 
        "path": "dom/request/referrerpolicy", 
        "syntax": "referrerPolicy read-only property of the Request interface contains the referrer policy governing the referrer for the request.  Note: The referrer is set in the HTTP Referer header, see the Referrer policy spec for more details about referrer policy.  Syntax var myReferrerPolicy = request.referrerPolicy; Value A DOMString representing the request's referrerPolicy, as defined in ReffererPolicy. Possible values are:  An empty string if there is no referrer policy set. no-referrer no-referrer-when-downgrade origin-only origin-when-cross-origin unsafe-url  Example In the following snippet, we create a new request using the Request.Request()", 
        "type": "Fetch"
    }, 
    "Request.url": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Request.url", 
        "params": [], 
        "path": "dom/request/url", 
        "syntax": "url read-only property of the Request interface contains the URL of the request. Syntax var myURL = request.url; Value A USVString indicating the url of the request. Example In the following snippet, we create a new request using the Request.Request()", 
        "type": "Fetch"
    }, 
    "Reserved Words": {
        "descr": "This page describes JavaScript's lexical grammar. The source text of ECMAScript scripts gets scanned from left to right and is converted into a sequence of input elements which are tokens, control characters, line terminators, comments or white space. ECMAScript also defines certain keywords and literals and has rules for automatic insertion of semicolons to end statements.", 
        "name": "Reserved Words", 
        "params": [], 
        "path": "javascript/reserved_words", 
        "syntax": "0b or 0B). Because this syntax is new in ECMAScript 6, see the browser compatibility table, below. If the digits after the 0b", 
        "type": "Miscellaneous"
    }, 
    "Resource Timing API": {
        "descr": "The Resource Timing interfaces enable retrieving and analyzing detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to load a specific resource, such as an XMLHttpRequest, <SVG>, image, or script.", 
        "name": "Resource Timing API", 
        "params": [], 
        "path": "dom/resource_timing_api", 
        "syntax": "PerformanceResourceTiming interface extends the PerformanceEntry", 
        "type": "Web Performance"
    }, 
    "Resource Timing API: Using the Resource Timing API": {
        "descr": "The Resource Timing interfaces enable retrieving and analyzing detailed network timing data regarding the loading of an application's resource(s). An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource such as an XMLHttpRequest, <SVG>, image, script, etc.).", 
        "name": "Resource Timing API: Using the Resource Timing API", 
        "params": [], 
        "path": "dom/resource_timing_api/using_the_resource_timing_api", 
        "syntax": "redirectStart and redirectEnd ), DNS lookup (domainLookupStart", 
        "type": "Web Performance"
    }, 
    "Response": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Response", 
        "params": [
            {
                "descr": "Creates a new Response object.", 
                "name": "Response.Response()"
            }, 
            {
                "descr": "Contains the Headers object associated with the response.", 
                "name": "Response.headers Read only"
            }, 
            {
                "descr": "Contains a boolean stating whether the response was successful (status in the range 200-299) or not.", 
                "name": "Response.ok Read only"
            }, 
            {
                "descr": "Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.", 
                "name": "Response.redirected Read only"
            }, 
            {
                "descr": "Contains the status code of the response (e.g., 200 for a success).", 
                "name": "Response.status Read only"
            }, 
            {
                "descr": "Contains the status message corresponding to the status code (e.g., OK for 200).", 
                "name": "Response.statusText Read only"
            }, 
            {
                "descr": "Contains the type of the response (e.g., basic, cors).", 
                "name": "Response.type Read only"
            }, 
            {
                "descr": "Contains the URL of the response.", 
                "name": "Response.url Read only"
            }, 
            {
                "descr": "Contains a boolean stating whether this is the final URL of the response.", 
                "name": "Response.useFinalURL"
            }, 
            {
                "descr": "Stores a Boolean that declares whether the body has been used in a response yet.", 
                "name": "Body.bodyUsed Read only"
            }, 
            {
                "descr": "Creates a clone of a Response object.", 
                "name": "Response.clone()"
            }, 
            {
                "descr": "Returns a new Response object associated with a network error.", 
                "name": "Response.error()"
            }, 
            {
                "descr": "Creates a new response with a different URL.", 
                "name": "Response.redirect()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.arrayBuffer()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.blob()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.formData()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.json()"
            }, 
            {
                "descr": "Takes a Response stream and reads it to completion. ", 
                "name": "Body.text()"
            }
        ], 
        "path": "dom/response", 
        "syntax": "Response interface of the Fetch API represents the response to a request. You can create a new Response object using the Response.Response()", 
        "type": "Fetch"
    }, 
    "Response.clone": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.clone", 
        "params": [], 
        "path": "dom/response/clone", 
        "syntax": "clone()", 
        "type": "Fetch"
    }, 
    "Response.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.constructor", 
        "params": [
            {
                "descr": "An object defining a body for the response. ", 
                "name": "body Optional"
            }, 
            {
                "descr": "An options object containing any custom settings that you want to apply to the response. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/response/response", 
        "syntax": "Response()", 
        "type": "Fetch"
    }, 
    "Response.error": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Response.error", 
        "params": [], 
        "path": "dom/response/error", 
        "syntax": "error()", 
        "type": "Fetch"
    }, 
    "Response.headers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.headers", 
        "params": [], 
        "path": "dom/response/headers", 
        "syntax": "headers read-only property of the Response interface contains the Headers", 
        "type": "Fetch"
    }, 
    "Response.ok": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Response.ok", 
        "params": [], 
        "path": "dom/response/ok", 
        "syntax": "ok read-only property of the Response interface contains a boolean stating whether the response was successful (status in the range 200-299) or not.", 
        "type": "Fetch"
    }, 
    "Response.redirect": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Response.redirect", 
        "params": [
            {
                "descr": "The URL that the new response is to originate from.", 
                "name": "url"
            }, 
            {
                "descr": "An optional status code for the response (e.g., 302.)", 
                "name": "status Optional"
            }
        ], 
        "path": "dom/response/redirect", 
        "syntax": "redirect()", 
        "type": "Fetch"
    }, 
    "Response.status": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.status", 
        "params": [], 
        "path": "dom/response/status", 
        "syntax": "status read-only property of the Response interface contains the status code of the response (e.g., 200 for a success).", 
        "type": "Fetch"
    }, 
    "Response.statusText": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.statusText", 
        "params": [], 
        "path": "dom/response/statustext", 
        "syntax": "statusText read-only property of the Response interface contains the status message corresponding to the status code (e.g., OK for 200).", 
        "type": "Fetch"
    }, 
    "Response.type": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.type", 
        "params": [], 
        "path": "dom/response/type", 
        "syntax": "type read-only property of the Response interface contains the type of the response. It can be one of the following:  basic: Normal, same origin response, with all headers exposed except \u201cSet-Cookie\u201d and \u201cSet-Cookie2\u2033. cors: Response was received from a valid cross-origin request. Certain headers and the body may be accessed. error: Network error. No useful information describing the error is available. The Response\u2019s status is 0, headers are empty and immutable. This is the type for a Response obtained from Response.error()", 
        "type": "Fetch"
    }, 
    "Response.url": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Response.url", 
        "params": [], 
        "path": "dom/response/url", 
        "syntax": "url read-only property of the Response interface contains the URL of the response. Syntax var myURL = response.url; Value A USVString. Example In our Fetch Response example (see Fetch Response live) we create a new Request", 
        "type": "Fetch"
    }, 
    "Response.useFinalURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Response.useFinalURL", 
        "params": [], 
        "path": "dom/response/usefinalurl", 
        "syntax": "useFinalURL property of the Response interface contains a boolean stating whether this is the final URL of the response.  This property applies only to ServiceWorkers. In other contexts it will return undefined.  Syntax var isfinalURL = Response.useFinalURL; Value A Boolean indicating whether or not the URL is final rather than a redirect. Example Consider a script residing in page index.html: fetch('/test').then((r) => console.log(r.url))", 
        "type": "Fetch"
    }, 
    "SIMD": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD", 
        "params": [
            {
                "descr": "128-bits divided into 16 lanes storing boolean values.", 
                "name": "SIMD.Bool8x16"
            }, 
            {
                "descr": "128-bits divided into 8 lanes storing boolean values.", 
                "name": "SIMD.Bool16x8"
            }, 
            {
                "descr": "128-bits divided into 4 lanes storing boolean values.", 
                "name": "SIMD.Bool32x4"
            }, 
            {
                "descr": "128-bits divided into 2 lanes storing boolean values.", 
                "name": "SIMD.Bool64x2"
            }, 
            {
                "descr": "128-bits divided into 16 lanes storing 8-bit signed integer values.", 
                "name": "SIMD.Int8x16"
            }, 
            {
                "descr": "128-bits divided into 8 lanes storing 16-bit signed integer values.", 
                "name": "SIMD.Int16x8"
            }, 
            {
                "descr": "128-bits divided into 4 lanes storing 32-bit signed integer values.", 
                "name": "SIMD.Int32x4"
            }, 
            {
                "descr": "128-bits divided into 16 lanes storing 8-bit unsigned integer values.", 
                "name": "SIMD.Uint8x16"
            }, 
            {
                "descr": "128-bits divided into 8 lanes storing 16-bit unsigned integer values.", 
                "name": "SIMD.Uint16x8"
            }, 
            {
                "descr": "128-bits divided into 4 lanes storing 32-bit unsigned integer values.", 
                "name": "SIMD.Uint32x4"
            }, 
            {
                "descr": "128-bits divided into 4 lanes storing single precision floating point values.", 
                "name": "SIMD.Float32x4"
            }, 
            {
                "descr": "128-bits divided into 2 lanes storing double precision floating point values.", 
                "name": "SIMD.Float64x2"
            }, 
            {
                "descr": "Creates SIMD data type with all lanes set to a given value.", 
                "name": "SIMD.%type%.splat()"
            }, 
            {
                "descr": "Returns a new instance if the parameter is a valid SIMD data type and the same as %type%. ", 
                "name": "SIMD.%type%.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.%type%.extractLane()"
            }, 
            {
                "descr": "Returns a new instance with the given lane value replaced.", 
                "name": "SIMD.%type%.replaceLane()"
            }, 
            {
                "descr": "Returns a new instance with the lane values loaded from a typed array.", 
                "name": "SIMD.%type%.load() SIMD.%type%.load1() SIMD.%type%.load2() SIMD.%type%.load3()"
            }, 
            {
                "descr": "Store a SIMD data type into a typed array.", 
                "name": "SIMD.%type%.store() SIMD.%type%.store1() SIMD.%type%.store2() SIMD.%type%.store3()"
            }, 
            {
                "descr": "Returns a new instance with the absolute lane values.", 
                "name": "SIMD.%FloatType%.abs()"
            }, 
            {
                "descr": "Returns a new instance with the lane values added (a + b).", 
                "name": "SIMD.%type%.add()"
            }, 
            {
                "descr": "Returns a new instance with the lane values added (a + b) and saturating behavior on overflow.", 
                "name": "SIMD.%type%.addSaturate()"
            }, 
            {
                "descr": "Returns a new instance with the lane values divided (a / b).", 
                "name": "SIMD.%FloatType%.div()"
            }, 
            {
                "descr": "Returns a new instance with the lane values multiplied (a * b).", 
                "name": "SIMD.%type%.mul()"
            }, 
            {
                "descr": "Returns a new instance with the negated lane values.", 
                "name": "SIMD.%type%.neg()"
            }, 
            {
                "descr": "Returns a new instance with an approximation of the reciprocal lane values.", 
                "name": "SIMD.%FloatType%.reciprocalApproximation()"
            }, 
            {
                "descr": "Returns a new instance with an approximation of the reciprocal square root lane values.", 
                "name": "SIMD.%FloatType%.reciprocalSqrtApproximation()"
            }, 
            {
                "descr": "Returns a new instance with the lane values subtracted (a - b).", 
                "name": "SIMD.%type%.sub()"
            }, 
            {
                "descr": "Returns a new instance with the lane values subtracted (a - b) and saturating behavior on overflow.", 
                "name": "SIMD.%type%.subSaturate()"
            }, 
            {
                "descr": "Returns a new instance with the square root of the lane values.", 
                "name": "SIMD.%FloatType%.sqrt()"
            }, 
            {
                "descr": "Returns a new instance with the lane values shuffled.", 
                "name": "SIMD.%type%.shuffle()"
            }, 
            {
                "descr": "Returns a new instance with the lane values swizzled.", 
                "name": "SIMD.%type%.swizzle()"
            }, 
            {
                "descr": "Returns a new instance with the maximum of the lane values.", 
                "name": "SIMD.%FloatType%.max()"
            }, 
            {
                "descr": "Returns a new instance with the maximum of the lane values, preferring numbers over NaN.", 
                "name": "SIMD.%FloatType%.maxNum()"
            }, 
            {
                "descr": "Returns a new instance with the minimum of the lane values.", 
                "name": "SIMD.%FloatType%.min()"
            }, 
            {
                "descr": "Returns a new instance with the minimum of the lane values, preferring numbers over NaN.", 
                "name": "SIMD.%FloatType%.minNum()"
            }, 
            {
                "descr": "Returns a new instance with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.%type%.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.%type%.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.%type%.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.%type%.lessThan()"
            }, 
            {
                "descr": "Returns selection mask depending on a <= b.", 
                "name": "SIMD.%type%.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.%type%.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.%type%.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new instance with the logical AND of the lane values (a & b).", 
                "name": "SIMD.%type%.and()"
            }, 
            {
                "descr": "Returns a new instance with the logical OR of the lane values (a | b).", 
                "name": "SIMD.%type%.or()"
            }, 
            {
                "descr": "Returns a new instance with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.%type%.xor()"
            }, 
            {
                "descr": "Returns a new instance with the logical NOT of the lane values (~a).", 
                "name": "SIMD.%type%.not()"
            }, 
            {
                "descr": "Returns a new instance with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.%IntegerType%.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new instance with the lane values shifted right. ", 
                "name": "SIMD.%IntegerType%.shiftRightByScalar()"
            }, 
            {
                "descr": "Checks if all lanes hold a true value.", 
                "name": "SIMD.%BooleanType%.allTrue()"
            }, 
            {
                "descr": "Checks if any of the lanes hold a true value.", 
                "name": "SIMD.%BooleanType%.anyTrue()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a float conversion from a Float32x4.", 
                "name": "SIMD.%type%.fromFloat32x4()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.%type%.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.%type%.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with an integer conversion from an In32x4.", 
                "name": "SIMD.%type%.fromInt32x4()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.%type%.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.%type%.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.%type%.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with an integer conversion from a Uin32x4.", 
                "name": "SIMD.%type%.fromUint32x4()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.%type%.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from a Uint16x8.", 
                "name": "SIMD.%type%.fromUint16x8Bits()"
            }, 
            {
                "descr": "Creates a new SIMD data type with a bit-wise copy from a Uint8x16.", 
                "name": "SIMD.%type%.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.%type%.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.%type%.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.%type%.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.%type%.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.%type%.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/simd", 
        "syntax": "SIMD module. Unlike the other global objects, SIMD is not a constructor. You can not use it with a new operator or invoke the SIMD object as a function. All properties and methods of SIMD are static (as is the case with the Math object).", 
        "type": "SIMD"
    }, 
    "SIMD.Bool16x8": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Bool16x8", 
        "params": [
            {
                "descr": "A boolean specifying the value of the lane. ", 
                "name": "s[0-7] Optional"
            }, 
            {
                "descr": "Creates an Bool6x8 with all lanes set to a given value.", 
                "name": "SIMD.Bool16x8.splat()"
            }, 
            {
                "descr": "Returns a new Bool16x8 if the parameter is a valid Bool16x8 data type. ", 
                "name": "SIMD.Bool16x8.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Bool16x8.extractLane()"
            }, 
            {
                "descr": "Returns a new Bool16x8 with the given lane value replaced.", 
                "name": "SIMD.Bool16x8.replaceLane()"
            }, 
            {
                "descr": "Checks if all lanes hold a true value.", 
                "name": "Boolean operations  SIMD.Bool16x8.allTrue()"
            }, 
            {
                "descr": "Checks if any of the lanes hold a true value.", 
                "name": "SIMD.Bool16x8.anyTrue()"
            }, 
            {
                "descr": "Returns a new Bool16x8 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Bool16x8.and()"
            }, 
            {
                "descr": "Returns a new Bool16x8 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Bool16x8.or()"
            }, 
            {
                "descr": "Returns a new Bool16x8 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Bool16x8.xor()"
            }, 
            {
                "descr": "Returns a new Bool16x8 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Bool16x8.not()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Bool16x8.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool16x8.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool16x8.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Bool16x8.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Bool16x8.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/bool16x8", 
        "syntax": "SIMD.Bool16x8 data type is a 128-bit vector divided into 8 lanes storing boolean values. Syntax SIMD.Bool16x8(s0, s1, s2, s3, s4, s5, s6, s7);", 
        "type": "SIMD"
    }, 
    "SIMD.Bool32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Bool32x4", 
        "params": [
            {
                "descr": "A boolean specifying the value of the first lane. ", 
                "name": "x Optional"
            }, 
            {
                "descr": "A boolean specifying the value of the second lane. ", 
                "name": "y Optional"
            }, 
            {
                "descr": "A boolean specifying the value of the third lane. ", 
                "name": "z Optional"
            }, 
            {
                "descr": "A boolean specifying the value of the fourth lane. ", 
                "name": "w Optional"
            }, 
            {
                "descr": "Creates an Bool32x4 with all lanes set to a given value.", 
                "name": "SIMD.Bool32x4.splat()"
            }, 
            {
                "descr": "Returns a new Bool32x4 if the parameter is a valid Bool32x4 data type. ", 
                "name": "SIMD.Bool32x4.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Bool32x4.extractLane()"
            }, 
            {
                "descr": "Returns a new Bool16x8 with the given lane value replaced.", 
                "name": "SIMD.Bool32x4.replaceLane()"
            }, 
            {
                "descr": "Checks if all lanes hold a true value.", 
                "name": "Boolean operations  SIMD.Bool32x4.allTrue()"
            }, 
            {
                "descr": "Checks if any of the lanes hold a true value.", 
                "name": "SIMD.Bool32x4.anyTrue()"
            }, 
            {
                "descr": "Returns a new Bool32x4 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Bool32x4.and()"
            }, 
            {
                "descr": "Returns a new Bool32x4 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Bool32x4.or()"
            }, 
            {
                "descr": "Returns a new Bool32x4 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Bool32x4.xor()"
            }, 
            {
                "descr": "Returns a new Bool32x4 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Bool32x4.not()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Bool32x4.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool32x4.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool32x4.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Bool32x4.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Bool32x4.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/bool32x4", 
        "syntax": "SIMD.Bool32x4 data type is a 128-bit vector divided into 4 lanes storing boolean values. Syntax SIMD.Bool32x4(x, y, z, w);", 
        "type": "SIMD"
    }, 
    "SIMD.Bool64x2": {
        "descr": "Note: The Bool64x2 type is currently not part of the SIMD specification draft.", 
        "name": "SIMD.Bool64x2", 
        "params": [
            {
                "descr": "A boolean specifying the value of the first lane. ", 
                "name": "x Optional"
            }, 
            {
                "descr": "An boolean specifying the value of the second lane. ", 
                "name": "y Optional"
            }, 
            {
                "descr": "Creates a Bool64x2 with all lanes set to a given value.", 
                "name": "SIMD.Bool64x2.splat()"
            }, 
            {
                "descr": "Returns a new Bool64x2 if the parameter is a valid Bool64x2 data type. ", 
                "name": "SIMD.Bool64x2.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Bool64x2.extractLane()"
            }, 
            {
                "descr": "Returns a new Bool64x2 with the given lane value replaced.", 
                "name": "SIMD.Bool64x2.replaceLane()"
            }, 
            {
                "descr": "Checks if all lanes hold a true value.", 
                "name": "SIMD.Bool64x2.allTrue()"
            }, 
            {
                "descr": "Checks if any of the lanes hold a true value.", 
                "name": "SIMD.Bool64x2.anyTrue()"
            }, 
            {
                "descr": "Returns a new Bool64x2 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Bool64x2.and()"
            }, 
            {
                "descr": "Returns a new Bool64x2 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Bool64x2.or()"
            }, 
            {
                "descr": "Returns a new Bool64x2 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Bool64x2.xor()"
            }, 
            {
                "descr": "Returns a new Bool64x2 with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Bool64x2.not()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Bool64x2.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool64x2.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool64x2.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Bool64x2.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Bool64x2.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/bool64x2", 
        "syntax": "SIMD.Bool64x2(x, y);", 
        "type": "SIMD"
    }, 
    "SIMD.Bool8x16": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Bool8x16", 
        "params": [
            {
                "descr": "A boolean specifying the value of the lane. ", 
                "name": "s[0-15] Optional"
            }, 
            {
                "descr": "Creates an Bool8x16 with all lanes set to a given value.", 
                "name": "SIMD.Bool8x16.splat()"
            }, 
            {
                "descr": "Returns a new Bool8x16 if the parameter is a valid Bool8x16 data type. ", 
                "name": "SIMD.Bool8x16.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Bool8x16.extractLane()"
            }, 
            {
                "descr": "Returns a new Bool8x16 with the given lane value replaced.", 
                "name": "SIMD.Bool8x16.replaceLane()"
            }, 
            {
                "descr": "Checks if all lanes hold a true value.", 
                "name": "Boolean operations  SIMD.Bool8x16.allTrue()"
            }, 
            {
                "descr": "Checks if any of the lanes hold a true value.", 
                "name": "SIMD.Bool8x16.anyTrue()"
            }, 
            {
                "descr": "Returns a new Bool8x16 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Bool8x16.and()"
            }, 
            {
                "descr": "Returns a new Bool8x16 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Bool8x16.or()"
            }, 
            {
                "descr": "Returns a new Bool8x16 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Bool8x16.xor()"
            }, 
            {
                "descr": "Returns a new Bool8x16 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Bool8x16.not()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Bool8x16.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool8x16.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Bool8x16.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Bool8x16.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Bool8x16.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/bool8x16", 
        "syntax": "SIMD.Bool8x16 data type is a 128-bit vector divided into 16 lanes storing boolean values. Syntax SIMD.Bool8x16(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);", 
        "type": "SIMD"
    }, 
    "SIMD.Float32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Float32x4", 
        "params": [
            {
                "descr": "A double specifying the value of the first lane. ", 
                "name": "x Optional"
            }, 
            {
                "descr": "A double specifying the value of the second lane. ", 
                "name": "y Optional"
            }, 
            {
                "descr": "A double specifying the value of the third lane. ", 
                "name": "z Optional"
            }, 
            {
                "descr": "A double specifying the value of the fourth lane. ", 
                "name": "w Optional"
            }, 
            {
                "descr": "Creates an Float32x4 with all lanes set to a given value.", 
                "name": "SIMD.Float32x4.splat()"
            }, 
            {
                "descr": "Returns a new Float32x4 if the parameter is a valid Float32x4 data type. ", 
                "name": "SIMD.Float32x4.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Float32x4.extractLane()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the given lane value replaced.", 
                "name": "SIMD.Float32x4.replaceLane()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values loaded from a typed array.", 
                "name": "SIMD.Float32x4.load() SIMD.Float32x4.load1() SIMD.Float32x4.load2() SIMD.Float32x4.load3()"
            }, 
            {
                "descr": "Stores an Float32x4 into a typed array.", 
                "name": "SIMD.Float32x4.store() SIMD.Float32x4.store1() SIMD.Float32x4.store2() SIMD.Float32x4.store3()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the absolute lane values.", 
                "name": "SIMD.Float32x4.abs()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values added (a + b).", 
                "name": "SIMD.Float32x4.add()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values divided (a / b).", 
                "name": "SIMD.Float32x4.div()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values multiplied (a * b).", 
                "name": "SIMD.Float32x4.mul()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the negated lane values.", 
                "name": "SIMD.Float32x4.neg()"
            }, 
            {
                "descr": "Returns a new Float32x4 with an approximation of the reciprocal lane values.", 
                "name": "SIMD.Float32x4.reciprocalApproximation()"
            }, 
            {
                "descr": "Returns a new Float32x4 with an approximation of the reciprocal square root lane values.", 
                "name": "SIMD.Float32x4.reciprocalSqrtApproximation()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values subtracted (a - b).", 
                "name": "SIMD.Float32x4.sub()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the square root of the lane values.", 
                "name": "SIMD.Float32x4.sqrt()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values shuffled.", 
                "name": "SIMD.Float32x4.shuffle()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values swizzled.", 
                "name": "SIMD.Float32x4.swizzle()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the maximum of the lane values.", 
                "name": "SIMD.Float32x4.max()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the maximum of the lane values, preferring numbers over NaN.", 
                "name": "SIMD.Float32x4.maxNum()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the minimum of the lane values.", 
                "name": "SIMD.Float32x4.min()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the minimum of the lane values, preferring numbers over NaN.", 
                "name": "SIMD.Float32x4.minNum()"
            }, 
            {
                "descr": "Returns a new Float32x4 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Float32x4.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Float32x4.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Float32x4.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Float32x4.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Float32x4.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Float32x4.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Float32x4.greaterThanOrEqual()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.Float32x4.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a Float conversion from an Int32x4.", 
                "name": "SIMD.Float32x4.fromInt32x4()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.Float32x4.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Float32x4.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Float32x4.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a Float conversion from a Uint32x4.", 
                "name": "SIMD.Float32x4.fromUint32x4()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.Float32x4.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from a Uint16x8.", 
                "name": "SIMD.Float32x4.fromUint16x8Bits()"
            }, 
            {
                "descr": "Creates a new Float32x4 data type with a bit-wise copy from a Uint8x16.", 
                "name": "SIMD.Float32x4.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Float32x4.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Float32x4.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Float32x4.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Float32x4.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Float32x4.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/float32x4", 
        "syntax": "SIMD.Float32x4 data type is a 128-bit vector divided into 4 lanes storing single precision floating point values.  Figure 1: SIMD.Float32x4 in a 128-bit SIMD register.  Syntax SIMD.Float32x4(x, y, z, w);", 
        "type": "SIMD"
    }, 
    "SIMD.Float64x2": {
        "descr": "Note: The Float64x2 type is currently not part of the SIMD specification draft.", 
        "name": "SIMD.Float64x2", 
        "params": [
            {
                "descr": "A double specifying the value of the first lane. ", 
                "name": "x Optional"
            }, 
            {
                "descr": "A double specifying the value of the second lane. ", 
                "name": "y Optional"
            }, 
            {
                "descr": "Creates a Float64x2 with all lanes set to a given value.", 
                "name": "SIMD.Float64x2.splat()"
            }, 
            {
                "descr": "Returns a new Float64x2 if the parameter is a valid Float64x2 data type. ", 
                "name": "SIMD.Float64x2.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Float64x2.extractLane()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the given lane value replaced.", 
                "name": "SIMD.Float64x2.replaceLane()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the lane values loaded from a typed array.", 
                "name": "SIMD.Float64x2.load() SIMD.Float64x2.load1()"
            }, 
            {
                "descr": "Stores a Float64x2 into a typed array.", 
                "name": "SIMD.Float64x2.store() SIMD.Float64x2.store1()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the absolute lane values.", 
                "name": "SIMD.Float64x2.abs()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the lane values added (a + b).", 
                "name": "SIMD.Float64x2.add()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the lane values divided (a / b).", 
                "name": "SIMD.Float64x2.div()"
            }, 
            {
                "descr": "Returns a new loat64x2 with the lane values multiplied (a * b).", 
                "name": "SIMD.Float64x2.mul()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the negated lane values.", 
                "name": "SIMD.Float64x2.neg()"
            }, 
            {
                "descr": "Returns a new Float64x2 with an approximation of the reciprocal lane values.", 
                "name": "SIMD.Float64x2.reciprocalApproximation()"
            }, 
            {
                "descr": "Returns a new Float64x2 with an approximation of the reciprocal square root lane values.", 
                "name": "SIMD.Float64x2.reciprocalSqrtApproximation()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the lane values subtracted (a - b).", 
                "name": "SIMD.Float64x2.sub()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the square root of the lane values.", 
                "name": "SIMD.Float64x2.sqrt()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the lane values shuffled.", 
                "name": "SIMD.Float64x2.shuffle()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the lane values swizzled.", 
                "name": "SIMD.Float64x2.swizzle()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the maximum of the lane values.", 
                "name": "SIMD.Float64x2.max()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the maximum of the lane values, preferring numbers over NaN.", 
                "name": "SIMD.Float64x2.maxNum()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the minimum of the lane values.", 
                "name": "SIMD.Float64x2.min()"
            }, 
            {
                "descr": "Returns a new Float64x2 with the minimum of the lane values, preferring numbers over NaN.", 
                "name": "SIMD.Float64x2.minNum()"
            }, 
            {
                "descr": "Returns a new loat64x2 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Float64x2.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Float64x2.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Float64x2.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Float64x2.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Float64x2.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Float64x2.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Float64x2.greaterThanOrEqual()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.Float64x2.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.Float64x2.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Float64x2.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Float64x2.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.Float64x2.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from a Uint16x8.", 
                "name": "SIMD.Float64x2.fromUint16x8Bits()"
            }, 
            {
                "descr": "Creates a new Float64x2 data type with a bit-wise copy from a Uint8x16.", 
                "name": "SIMD.Float64x2.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Float64x2.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Float64x2.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Float64x2.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Float64x2.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Float64x2.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/float64x2", 
        "syntax": "SIMD.Float64x2(x, y);", 
        "type": "SIMD"
    }, 
    "SIMD.Int16x8": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Int16x8", 
        "params": [
            {
                "descr": "An integer specifying the value of the lane. ", 
                "name": "s[0-7] Optional"
            }, 
            {
                "descr": "Creates an Int16x8 with all lanes set to a given value.", 
                "name": "SIMD.Int16x8.splat()"
            }, 
            {
                "descr": "Returns a new Int16x8 if the parameter is a valid Int16x8 data type. ", 
                "name": "SIMD.Int16x8.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Int16x8.extractLane()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the given lane value replaced.", 
                "name": "SIMD.Int16x8.replaceLane()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values loaded from a typed array.", 
                "name": "SIMD.Int16x8.load()"
            }, 
            {
                "descr": "Stores an Int16x8 into a typed array.", 
                "name": "SIMD.Int16x8.store()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values added (a + b).", 
                "name": "SIMD.Int16x8.add()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values added (a + b) and saturating behavior on overflow.", 
                "name": "SIMD.Int16x8.addSaturate()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values multiplied (a * b).", 
                "name": "SIMD.Int16x8.mul()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the negated lane values.", 
                "name": "SIMD.Int16x8.neg()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values subtracted (a - b).", 
                "name": "SIMD.Int16x8.sub()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values subtracted (a - b) and saturating behavior on overflow.", 
                "name": "SIMD.Int16x8.subSaturate()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values shuffled.", 
                "name": "Shuffling and swizzling  SIMD.Int16x8.shuffle()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values swizzled.", 
                "name": "SIMD.Int16x8.swizzle()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Int16x8.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Int16x8.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Int16x8.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Int16x8.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Int16x8.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Int16x8.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Int16x8.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Int16x8.and()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Int16x8.or()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Int16x8.xor()"
            }, 
            {
                "descr": "Returns a new Int16x8 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Int16x8.not()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.Int16x8.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new Int16x8 with the lane values shifted right.", 
                "name": "SIMD.Int16x8.shiftRightByScalar()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.Int16x8.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.Int16x8.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.Int16x8.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Int16x8.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.Int16x8.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from a Uint16x8.", 
                "name": "SIMD.Int16x8.fromUint16x8Bits()"
            }, 
            {
                "descr": "Creates a new Int16x8 data type with a bit-wise copy from a Uint8x16.", 
                "name": "SIMD.Int16x8.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Int16x8.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Int16x8.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Int16x8.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Int16x8.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Int16x8.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/int16x8", 
        "syntax": "SIMD.Int16x8 data type is a 128-bit vector divided into 8 lanes storing 16-bit signed integer values.  Figure 1: SIMD.Int16x8 in a 128-bit SIMD register  Syntax SIMD.Int16x8(s0, s1, s2, s3, s4, s5, s6, s7);", 
        "type": "SIMD"
    }, 
    "SIMD.Int32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Int32x4", 
        "params": [
            {
                "descr": "An integer specifying the value of the first lane. ", 
                "name": "x Optional"
            }, 
            {
                "descr": "An integer specifying the value of the second lane. ", 
                "name": "y Optional"
            }, 
            {
                "descr": "An integer specifying the value of the third lane. ", 
                "name": "z Optional"
            }, 
            {
                "descr": "An integer specifying the value of the fourth lane. ", 
                "name": "w Optional"
            }, 
            {
                "descr": "Creates an Int32x4 with all lanes set to a given value.", 
                "name": "SIMD.Int32x4.splat()"
            }, 
            {
                "descr": "Returns a new Int32x4 if the parameter is a valid Int32x4 data type. ", 
                "name": "SIMD.Int32x4.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Int32x4.extractLane()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the given lane value replaced.", 
                "name": "SIMD.Int32x4.replaceLane()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values loaded from a typed array.", 
                "name": "SIMD.Int32x4.load() SIMD.Int32x4.load1() SIMD.Int32x4.load2() SIMD.Int32x4.load3()"
            }, 
            {
                "descr": "Stores an Int32x4 into a typed array.", 
                "name": "SIMD.Int32x4.store() SIMD.Int32x4.store1() SIMD.Int32x4.store2() SIMD.Int32x4.store3()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values added (a + b).", 
                "name": "SIMD.Int32x4.add()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values multiplied (a * b).", 
                "name": "SIMD.Int32x4.mul()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the negated lane values.", 
                "name": "SIMD.Int32x4.neg()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values subtracted (a - b).", 
                "name": "SIMD.Int32x4.sub()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values shuffled.", 
                "name": "Shuffling and swizzling  SIMD.Int32x4.shuffle()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values swizzled.", 
                "name": "SIMD.Int32x4.swizzle()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Int32x4.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Int32x4.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Int32x4.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Int32x4.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Int32x4.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Int32x4.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Int32x4.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Int32x4.and()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Int32x4.or()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Int32x4.xor()"
            }, 
            {
                "descr": "Returns a new Int32x4 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Int32x4.not()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.Int32x4.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new Int32x4 with the lane values shifted right.", 
                "name": "SIMD.Int32x4.shiftRightByScalar()"
            }, 
            {
                "descr": "Creates a new Int32x4 data type with a float conversion from a float32x4.", 
                "name": "SIMD.Int32x4.fromFloat32x4()"
            }, 
            {
                "descr": "Creates a new Int32x4 data type with a bit-wise copy from a float32x4.", 
                "name": "SIMD.Int32x4.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int32x4 data type with a bit-wise copy from a float64x2.", 
                "name": "SIMD.Int32x4.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Int32x4 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Int32x4.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Int32x4 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Int32x4.fromInt8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Int32x4.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Int32x4.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Int32x4.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Int32x4.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Int32x4.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/int32x4", 
        "syntax": "SIMD.Int32x4 data type is a 128-bit vector divided into 4 lanes storing 32-bit signed integer values.  Figure 1: SIMD.Int32x4 in a 128-bit SIMD register.  Syntax SIMD.Int32x4(x, y, z, w);", 
        "type": "SIMD"
    }, 
    "SIMD.Int8x16": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Int8x16", 
        "params": [
            {
                "descr": "An integer specifying the value of the lane. ", 
                "name": "s[0-15] Optional"
            }, 
            {
                "descr": "Creates an Int8x16 with all lanes set to a given value.", 
                "name": "SIMD.Int8x16.splat()"
            }, 
            {
                "descr": "Returns a new Int8x16 if the parameter is a valid Int8x16 data type. ", 
                "name": "SIMD.Int8x16.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Int8x16.extractLane()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the given lane value replaced.", 
                "name": "SIMD.Int8x16.replaceLane()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values loaded from a typed array.", 
                "name": "SIMD.Int8x16.load()"
            }, 
            {
                "descr": "Stores an Int8x16 into a typed array.", 
                "name": "SIMD.Int8x16.store()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values added (a + b).", 
                "name": "SIMD.Int8x16.add()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values added (a + b) and saturating behavior on overflow.", 
                "name": "SIMD.Int8x16.addSaturate()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values multiplied (a * b).", 
                "name": "SIMD.Int8x16.mul()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the negated lane values.", 
                "name": "SIMD.Int8x16.neg()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values subtracted (a - b).", 
                "name": "SIMD.Int8x16.sub()"
            }, 
            {
                "descr": "Returns a Int8x16 instance with the lane values subtracted (a - b) and saturating behavior on overflow.", 
                "name": "SIMD.Int8x16.subSaturate()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values shuffled.", 
                "name": "SIMD.Int8x16.shuffle()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values swizzled.", 
                "name": "SIMD.Int8x16.swizzle()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Int8x16.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Int8x16.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Int8x16.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Int8x16.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Int8x16.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Int8x16.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Int8x16.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Int8x16.and()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Int8x16.or()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Int8x16.xor()"
            }, 
            {
                "descr": "Returns a new Int8x16 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Int8x16.not()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.Int8x16.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new Int8x16 with the lane values shifted right.", 
                "name": "SIMD.Int8x16.shiftRightByScalar()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.Int8x16.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.Int8x16.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.Int8x16.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Int8x16.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.Int8x16.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from a Uint16x8.", 
                "name": "SIMD.Int8x16.fromUint16x8Bits()"
            }, 
            {
                "descr": "Creates a new Int8x16 data type with a bit-wise copy from an Uint8x16.", 
                "name": "SIMD.Int8x16.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Int8x16.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Int8x16.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Int8x16.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Int8x16.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Int8x16.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/int8x16", 
        "syntax": "SIMD.Int8x16 data type is a 128-bit vector divided into 16 lanes storing 8-bit signed integer values.  Figure 1: SIMD.Int8x16 in a 128-bit SIMD register.  Syntax SIMD.Int8x16(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);", 
        "type": "SIMD"
    }, 
    "SIMD.Uint16x8": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Uint16x8", 
        "params": [
            {
                "descr": "An integer specifying the value of the lane. ", 
                "name": "s[0-7] Optional"
            }, 
            {
                "descr": "Creates a Uint16x8 with all lanes set to a given value.", 
                "name": "SIMD.Uint16x8.splat()"
            }, 
            {
                "descr": "Returns a new Uint16x8 if the parameter is a valid Int16x8 data type. ", 
                "name": "SIMD.Uint16x8.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Uint16x8.extractLane()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the given lane value replaced.", 
                "name": "SIMD.Uint16x8.replaceLane()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values loaded from a typed array.", 
                "name": "SIMD.Uint16x8.load()"
            }, 
            {
                "descr": "Stores an Uint16x8 into a typed array.", 
                "name": "SIMD.Uint16x8.store()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values added (a + b).", 
                "name": "SIMD.Uint16x8.add()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values added (a + b) and saturating behavior on overflow.", 
                "name": "SIMD.Uint16x8.addSaturate()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values multiplied (a * b).", 
                "name": "SIMD.Uint16x8.mul()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the negated lane values.", 
                "name": "SIMD.Uint16x8.neg()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values subtracted (a - b).", 
                "name": "SIMD.Uint16x8.sub()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values subtracted (a - b) and saturating behavior on overflow.", 
                "name": "SIMD.Uint16x8.subSaturate()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values shuffled.", 
                "name": "Shuffling and swizzling  SIMD.Uint16x8.shuffle()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values swizzled.", 
                "name": "SIMD.Uint16x8.swizzle()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Uint16x8.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Uint16x8.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Uint16x8.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Uint16x8.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Uint16x8.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Uint16x8.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Uint16x8.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Uint16x8.and()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Uint16x8.or()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Uint16x8.xor()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Uint16x8.not()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.Uint16x8.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new Uint16x8 with the lane values shifted right.", 
                "name": "SIMD.Uint16x8.shiftRightByScalar()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.Uint16x8.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.Uint16x8.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.Uint16x8.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Uint16x8.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Uint16x8.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.Uint16x8.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint16x8 data type with a bit-wise copy from a Uint8x16.", 
                "name": "SIMD.Uint16x8.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Uint16x8.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Uint16x8.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Uint16x8.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Uint16x8.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Uint16x8.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/uint16x8", 
        "syntax": "SIMD.Uint16x8 data type is a 128-bit vector divided into 8 lanes storing 16-bit unsigned integer values. Syntax SIMD.Uint16x8(s0, s1, s2, s3, s4, s5, s6, s7);", 
        "type": "SIMD"
    }, 
    "SIMD.Uint32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Uint32x4", 
        "params": [
            {
                "descr": "An integer specifying the value of the first lane. ", 
                "name": "x Optional"
            }, 
            {
                "descr": "An integer specifying the value of the second lane. ", 
                "name": "y Optional"
            }, 
            {
                "descr": "An integer specifying the value of the third lane. ", 
                "name": "z Optional"
            }, 
            {
                "descr": "An integer specifying the value of the fourth lane. ", 
                "name": "w Optional"
            }, 
            {
                "descr": "Creates a Uint32x4 with all lanes set to a given value.", 
                "name": "SIMD.Uint32x4.splat()"
            }, 
            {
                "descr": "Returns a new Uint32x4 if the parameter is a valid Uint32x4 data type. ", 
                "name": "SIMD.Uint32x4.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Uint32x4.extractLane()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the given lane value replaced.", 
                "name": "SIMD.Uint32x4.replaceLane()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values loaded from a typed array.", 
                "name": "SIMD.Uint32x4.load() SIMD.Uint32x4.load1() SIMD.Uint32x4.load2() SIMD.Uint32x4.load3()"
            }, 
            {
                "descr": "Stores a Uint32x4 into a typed array.", 
                "name": "SIMD.Uint32x4.store() SIMD.Uint32x4.store1() SIMD.Uint32x4.store2() SIMD.Uint32x4.store3()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values added (a + b).", 
                "name": "SIMD.Uint32x4.add()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values multiplied (a * b).", 
                "name": "SIMD.Uint32x4.mul()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the negated lane values.", 
                "name": "SIMD.Uint32x4.neg()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values subtracted (a - b).", 
                "name": "SIMD.Uint32x4.sub()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values shuffled.", 
                "name": "Shuffling and swizzling  SIMD.Uint32x4.shuffle()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values swizzled.", 
                "name": "SIMD.Uint32x4.swizzle()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Uint32x4.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Uint32x4.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Uint32x4.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Uint32x4.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Uint32x4.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Uint32x4.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Uint32x4.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Uint32x4.and()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Uint32x4.or()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Uint32x4.xor()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Uint32x4.not()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.Uint32x4.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new Uint32x4 with the lane values shifted right.", 
                "name": "SIMD.Uint32x4.shiftRightByScalar()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a float conversion from a Float32x4.", 
                "name": "SIMD.Uint32x4.fromFloat32x4()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.Uint32x4.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.Uint32x4.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from a Int32x4.", 
                "name": "SIMD.Uint32x4.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Uint32x4.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Uint32x4.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from an Uint16x8.", 
                "name": "SIMD.Uint32x4.fromUint16x8Bits()"
            }, 
            {
                "descr": "Creates a new Uint32x4 data type with a bit-wise copy from an Uint8x16.", 
                "name": "SIMD.Uint32x4.fromUint8x16Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Uint32x4.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Uint32x4.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Uint32x4.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Uint32x4.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Uint32x4.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/uint32x4", 
        "syntax": "SIMD.Uint32x4 data type is a 128-bit vector divided into 4 lanes storing 32-bit unsigned integer values. Syntax SIMD.Uint32x4(x, y, z, w);", 
        "type": "SIMD"
    }, 
    "SIMD.Uint8x16": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.Uint8x16", 
        "params": [
            {
                "descr": "An integer specifying the value of the lane. ", 
                "name": "s[0-15] Optional"
            }, 
            {
                "descr": "Creates a Uint8x16 with all lanes set to a given value.", 
                "name": "SIMD.Int8x16.splat()"
            }, 
            {
                "descr": "Returns a new Uint8x16 if the parameter is a valid Int8x16 data type. ", 
                "name": "SIMD.Uint8x16.check()"
            }, 
            {
                "descr": "Returns the value of the given lane.", 
                "name": "SIMD.Uint8x16.extractLane()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the given lane value replaced.", 
                "name": "SIMD.Uint8x16.replaceLane()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values loaded from a typed array.", 
                "name": "SIMD.Uint8x16.load()"
            }, 
            {
                "descr": "Stores a Uint8x16 into a typed array.", 
                "name": "SIMD.Uint8x16.store()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values added (a + b).", 
                "name": "SIMD.Uint8x16.add()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values added (a + b) and saturating behavior on overflow.", 
                "name": "SIMD.Uint8x16.addSaturate()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values multiplied (a * b).", 
                "name": "SIMD.Uint8x16.mul()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the negated lane values.", 
                "name": "SIMD.Uint8x16.neg()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values subtracted (a - b).", 
                "name": "SIMD.Uint8x16.sub()"
            }, 
            {
                "descr": "Returns a Uint8x16 instance with the lane values subtracted (a - b) and saturating behavior on overflow.", 
                "name": "SIMD.Uint8x16.subSaturate()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values shuffled.", 
                "name": "SIMD.Uint8x16.shuffle()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values swizzled.", 
                "name": "SIMD.Uint8x16.swizzle()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values being a mix of the lanes depending on the selector mask.", 
                "name": "SIMD.Uint8x16.select()"
            }, 
            {
                "descr": "Returns a selection mask depending on a == b.", 
                "name": "SIMD.Uint8x16.equal()"
            }, 
            {
                "descr": "Returns a selection mask depending on a != b.", 
                "name": "SIMD.Uint8x16.notEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a < b.", 
                "name": "SIMD.Uint8x16.lessThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a <= b.", 
                "name": "SIMD.Uint8x16.lessThanOrEqual()"
            }, 
            {
                "descr": "Returns a selection mask depending on a > b.", 
                "name": "SIMD.Uint8x16.greaterThan()"
            }, 
            {
                "descr": "Returns a selection mask depending on a >= b.", 
                "name": "SIMD.Uint8x16.greaterThanOrEqual()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the logical AND of the lane values (a & b).", 
                "name": "SIMD.Uint8x16.and()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the logical OR of the lane values (a | b).", 
                "name": "SIMD.Uint8x16.or()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the logical XOR of the lane values (a ^ b).", 
                "name": "SIMD.Uint8x16.xor()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with lane with the logical NOT of the lane values (~a).", 
                "name": "SIMD.Uint8x16.not()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values shifted left by a given bit count (a << bits).", 
                "name": "SIMD.Uint8x16.shiftLeftByScalar()"
            }, 
            {
                "descr": "Returns a new Uint8x16 with the lane values shifted right.", 
                "name": "SIMD.Uint8x16.shiftRightByScalar()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from a Float32x4.", 
                "name": "SIMD.Uint8x16.fromFloat32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from a Float64x2.", 
                "name": "SIMD.Uint8x16.fromFloat64x2Bits()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from an Int32x4.", 
                "name": "SIMD.Uint8x16.fromInt32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from an Int16x8.", 
                "name": "SIMD.Uint8x16.fromInt16x8Bits()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from an Int8x16.", 
                "name": "SIMD.Uint8x16.fromInt8x16Bits()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from a Uint32x4.", 
                "name": "SIMD.Uint8x16.fromUint32x4Bits()"
            }, 
            {
                "descr": "Creates a new Uint8x16 data type with a bit-wise copy from a Uint16x8.", 
                "name": "SIMD.Uint8x16.fromUint16x8Bits()"
            }, 
            {
                "descr": "Specifies the function that creates a SIMD object's prototype.", 
                "name": "SIMD.Uint8x16.prototype.constructor"
            }, 
            {
                "descr": "Returns a localized string representing the SIMD type and its elements. ", 
                "name": "SIMD.Uint8x16.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the SIMD type and its elements. ", 
                "name": "SIMD.Uint8x16.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of a SIMD object.", 
                "name": "SIMD.Uint8x16.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a string representing the source code of the object. ", 
                "name": "SIMD.Uint8x16.prototype.toSource()"
            }
        ], 
        "path": "javascript/global_objects/uint8x16", 
        "syntax": "SIMD.Uint8x16 data type is a 128-bit vector divided into 16 lanes storing 8-bit unsigned integer values. Syntax SIMD.Uint8x16(s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15);", 
        "type": "SIMD"
    }, 
    "SIMD.abs": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.abs", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/abs", 
        "syntax": "SIMD.%type%.abs()", 
        "type": "SIMD"
    }, 
    "SIMD.add": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.add", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/add", 
        "syntax": "SIMD.%type%.add()", 
        "type": "SIMD"
    }, 
    "SIMD.addSaturate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.addSaturate", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/addsaturate", 
        "syntax": "SIMD.%type%.addSaturate()", 
        "type": "SIMD"
    }, 
    "SIMD.allTrue": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.allTrue", 
        "params": [
            {
                "descr": "The value to check whether it only holds true values.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/simd/alltrue", 
        "syntax": "SIMD.%BooleanType%.allTrue()", 
        "type": "SIMD"
    }, 
    "SIMD.and": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.and", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/and", 
        "syntax": "SIMD.%type%.and()", 
        "type": "SIMD"
    }, 
    "SIMD.anyTrue": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.anyTrue", 
        "params": [
            {
                "descr": "The value to check whether its lanes holds any true values.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/simd/anytrue", 
        "syntax": "SIMD.%BooleanType%.anyTrue()", 
        "type": "SIMD"
    }, 
    "SIMD.check": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.check", 
        "params": [
            {
                "descr": "The value to check whether it is a corresponding SIMD data type.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/simd/check", 
        "syntax": "SIMD.%type%.check()", 
        "type": "SIMD"
    }, 
    "SIMD.div": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.div", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/div", 
        "syntax": "SIMD.%type%.div()", 
        "type": "SIMD"
    }, 
    "SIMD.equal": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.equal", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/equal", 
        "syntax": "SIMD.%type%.equal()", 
        "type": "SIMD"
    }, 
    "SIMD.extractLane": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.extractLane", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }, 
            {
                "descr": "An index number for which lane to extract. ", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/simd/extractlane", 
        "syntax": "SIMD.%type%.extractLane()", 
        "type": "SIMD"
    }, 
    "SIMD.fromFloat32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromFloat32x4", 
        "params": [
            {
                "descr": "A Float32x4 SIMD type to convert from.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromfloat32x4", 
        "syntax": "SIMD.%type%.fromFloat32x4()", 
        "type": "SIMD"
    }, 
    "SIMD.fromFloat32x4Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromFloat32x4Bits", 
        "params": [
            {
                "descr": "A Float32x4 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromfloat32x4bits", 
        "syntax": "SIMD.%type%.fromFloat32x4Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.fromFloat64x2Bits": {
        "descr": "Note: The Float64x2 type is currently not part of the SIMD specification draft.", 
        "name": "SIMD.fromFloat64x2Bits", 
        "params": [
            {
                "descr": "A Float64x2 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromfloat64x2bits", 
        "syntax": "SIMD.Float32x4.fromFloat64x2Bits(t)SIMD.Int32x4.fromFloat64x2Bits(t)SIMD.Int16x8.fromFloat64x2Bits(t)SIMD.Int8x16.fromFloat64x2Bits(t)SIMD.Uint32x4.fromFloat64x2Bits(t)SIMD.Uint16x8.fromFloat64x2Bits(t)SIMD.Uint8x16.fromFloat64x2Bits(t)", 
        "type": "SIMD"
    }, 
    "SIMD.fromInt16x8Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromInt16x8Bits", 
        "params": [
            {
                "descr": "An Int16x8 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromint16x8bits", 
        "syntax": "SIMD.%type%.fromInt16x8Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.fromInt32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromInt32x4", 
        "params": [
            {
                "descr": "An Int32x4 SIMD type to convert from.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromint32x4", 
        "syntax": "SIMD.%type%.fromInt32x4()", 
        "type": "SIMD"
    }, 
    "SIMD.fromInt32x4Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromInt32x4Bits", 
        "params": [
            {
                "descr": "An Int32x4 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromint32x4bits", 
        "syntax": "SIMD.%type%.fromInt32x4Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.fromInt8x16Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromInt8x16Bits", 
        "params": [
            {
                "descr": "An Int8x16 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromint8x16bits", 
        "syntax": "SIMD.%type%.fromInt8x16Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.fromUint16x8Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromUint16x8Bits", 
        "params": [
            {
                "descr": "A Uint16x8 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromuint16x8bits", 
        "syntax": "SIMD.%type%.fromUint16x8Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.fromUint32x4": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromUint32x4", 
        "params": [
            {
                "descr": "A Uint32x4 SIMD type to convert from.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromuint32x4", 
        "syntax": "SIMD.%type%.fromUint32x4()", 
        "type": "SIMD"
    }, 
    "SIMD.fromUint32x4Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromUint32x4Bits", 
        "params": [
            {
                "descr": "A Uint32x4 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromuint32x4bits", 
        "syntax": "SIMD.%type%.fromUint32x4Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.fromUint8x16Bits": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.fromUint8x16Bits", 
        "params": [
            {
                "descr": "A Uint8x16 SIMD type to convert from (bitwise).", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/fromuint8x16bits", 
        "syntax": "SIMD.%type%.fromUint8x16Bits()", 
        "type": "SIMD"
    }, 
    "SIMD.greaterThan": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.greaterThan", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/greaterthan", 
        "syntax": "SIMD.%type%.greaterThan()", 
        "type": "SIMD"
    }, 
    "SIMD.greaterThanOrEqual": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.greaterThanOrEqual", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/greaterthanorequal", 
        "syntax": "SIMD.%type%.greaterThanOrEqual()", 
        "type": "SIMD"
    }, 
    "SIMD.lessThan": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.lessThan", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/lessthan", 
        "syntax": "SIMD.%type%.lessThan()", 
        "type": "SIMD"
    }, 
    "SIMD.lessThanOrEqual": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.lessThanOrEqual", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/lessthanorequal", 
        "syntax": "SIMD.%type%.lessThanOrEqual()", 
        "type": "SIMD"
    }, 
    "SIMD.load": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.load", 
        "params": [
            {
                "descr": "An instance of a typed array. This can be one of:  Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, or Float64Array.", 
                "name": "tarray"
            }, 
            {
                "descr": "A number for the index from where to start loading in the typed array.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/simd/load", 
        "syntax": "SIMD.%type%.load()", 
        "type": "SIMD"
    }, 
    "SIMD.max": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.max", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/max", 
        "syntax": "SIMD.%type%.max()", 
        "type": "SIMD"
    }, 
    "SIMD.maxNum": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.maxNum", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/maxnum", 
        "syntax": "SIMD.%type%.maxNum()", 
        "type": "SIMD"
    }, 
    "SIMD.min": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.min", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/min", 
        "syntax": "SIMD.%type%.min()", 
        "type": "SIMD"
    }, 
    "SIMD.minNum": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.minNum", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/minnum", 
        "syntax": "SIMD.%type%.minNum()", 
        "type": "SIMD"
    }, 
    "SIMD.mul": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.mul", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/mul", 
        "syntax": "SIMD.%type%.mul()", 
        "type": "SIMD"
    }, 
    "SIMD.neg": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.neg", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/neg", 
        "syntax": "SIMD.%type%.mul()", 
        "type": "SIMD"
    }, 
    "SIMD.not": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.not", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }
        ], 
        "path": "javascript/global_objects/simd/not", 
        "syntax": "SIMD.%type%.not()", 
        "type": "SIMD"
    }, 
    "SIMD.notEqual": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.notEqual", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/notequal", 
        "syntax": "SIMD.%type%.notEqual()", 
        "type": "SIMD"
    }, 
    "SIMD.or": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.or", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/or", 
        "syntax": "SIMD.%type%.or()", 
        "type": "SIMD"
    }, 
    "SIMD.reciprocalApproximation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.reciprocalApproximation", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/reciprocalapproximation", 
        "syntax": "SIMD.%type%.reciprocalApproximation()", 
        "type": "SIMD"
    }, 
    "SIMD.reciprocalSqrtApproximation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.reciprocalSqrtApproximation", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/reciprocalsqrtapproximation", 
        "syntax": "SIMD.%type%.reciprocalSqrtApproximation()", 
        "type": "SIMD"
    }, 
    "SIMD.replaceLane": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.replaceLane", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }, 
            {
                "descr": "An index number for which lane to replace.", 
                "name": "index"
            }, 
            {
                "descr": "A new value to be used for the lane.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/simd/replacelane", 
        "syntax": "SIMD.%type%.replaceLane()", 
        "type": "SIMD"
    }, 
    "SIMD.select": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.select", 
        "params": [
            {
                "descr": "An int32x4, int16x8 or int8x16 that is used as the selector mask.", 
                "name": "mask"
            }, 
            {
                "descr": "If the selector mask lane is true, pick the corresponding lane value from here.", 
                "name": "trueValue"
            }, 
            {
                "descr": "If the selector mask lane is false, pick the corresponding lane value from here.", 
                "name": "falseValue"
            }
        ], 
        "path": "javascript/global_objects/simd/select", 
        "syntax": "SIMD.%type%.select()", 
        "type": "SIMD"
    }, 
    "SIMD.shiftLeftByScalar": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.shiftLeftByScalar", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Bit count to shift by.", 
                "name": "bits"
            }
        ], 
        "path": "javascript/global_objects/simd/shiftleftbyscalar", 
        "syntax": "SIMD.%type%.shiftLeftByScalar()", 
        "type": "SIMD"
    }, 
    "SIMD.shiftRightArithmeticByScalar": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.shiftRightArithmeticByScalar", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Bit count to shift by.", 
                "name": "bits"
            }
        ], 
        "path": "javascript/global_objects/simd/shiftrightarithmeticbyscalar", 
        "syntax": "SIMD.%type%.shiftRightByScalar()", 
        "type": "SIMD"
    }, 
    "SIMD.shiftRightByScalar": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.shiftRightByScalar", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Bit count to shift by.", 
                "name": "bits"
            }
        ], 
        "path": "javascript/global_objects/simd/shiftrightbyscalar", 
        "syntax": "SIMD.%type%.shiftRightByScalar()", 
        "type": "SIMD"
    }, 
    "SIMD.shiftRightLogicalByScalar": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.shiftRightLogicalByScalar", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Bit count to shift by.", 
                "name": "bits"
            }
        ], 
        "path": "javascript/global_objects/simd/shiftrightlogicalbyscalar", 
        "syntax": "SIMD.%type%.shiftRightByScalar()", 
        "type": "SIMD"
    }, 
    "SIMD.shuffle": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.shuffle", 
        "params": [
            {
                "descr": "An instance of a SIMD type to be shuffled.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type to be shuffled.", 
                "name": "b"
            }, 
            {
                "descr": "Concatenated index of a and b for lane s0-s15.", 
                "name": "s0-s15"
            }
        ], 
        "path": "javascript/global_objects/simd/shuffle", 
        "syntax": "SIMD.%type%.shuffle()", 
        "type": "SIMD"
    }, 
    "SIMD.splat": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.splat", 
        "params": [
            {
                "descr": "The value to set all lanes to. This is an integer for int types and a double for float types.", 
                "name": "s Optional"
            }
        ], 
        "path": "javascript/global_objects/simd/splat", 
        "syntax": "SIMD.%type%.splat()", 
        "type": "SIMD"
    }, 
    "SIMD.sqrt": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.sqrt", 
        "params": [
            {
                "descr": "An instance of a corresponding SIMD type.", 
                "name": "t"
            }
        ], 
        "path": "javascript/global_objects/simd/sqrt", 
        "syntax": "SIMD.%type%.sqrt()", 
        "type": "SIMD"
    }, 
    "SIMD.store": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.store", 
        "params": [
            {
                "descr": "An instance of a typed array. This can be one of:  Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, or Float64Array.", 
                "name": "tarray"
            }, 
            {
                "descr": "A number for the index from where to start storing in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "An instance of a SIMD data type to store into the typed array.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/simd/store", 
        "syntax": "SIMD.%type%.store()", 
        "type": "SIMD"
    }, 
    "SIMD.sub": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.sub", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/sub", 
        "syntax": "SIMD.%type%.sub()", 
        "type": "SIMD"
    }, 
    "SIMD.subSaturate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.subSaturate", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/subsaturate", 
        "syntax": "SIMD.%type%.subSaturate()", 
        "type": "SIMD"
    }, 
    "SIMD.swizzle": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.swizzle", 
        "params": [
            {
                "descr": "An instance of a SIMD type to be swizzled / re-ordered.", 
                "name": "t"
            }, 
            {
                "descr": "index in t for lanes s0-s15.", 
                "name": "s0-s15"
            }
        ], 
        "path": "javascript/global_objects/simd/swizzle", 
        "syntax": "SIMD.%type%.swizzle()", 
        "type": "SIMD"
    }, 
    "SIMD.xor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SIMD.xor", 
        "params": [
            {
                "descr": "An instance of a SIMD type.", 
                "name": "a"
            }, 
            {
                "descr": "Another instance of a SIMD type.", 
                "name": "b"
            }
        ], 
        "path": "javascript/global_objects/simd/xor", 
        "syntax": "SIMD.%type%.xor()", 
        "type": "SIMD"
    }, 
    "SVGAElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SVGAElement", 
        "params": [
            {
                "descr": "It corresponds to attribute target on the given <a> element.", 
                "name": "SVGAElement.target Read only"
            }
        ], 
        "path": "dom/svgaelement", 
        "syntax": "SVGAElement interface provides access to the properties of <a>", 
        "type": "SVG"
    }, 
    "SVGAElement.SVGAlement.target": {
        "descr": "The SVGAElement.target read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated.", 
        "name": "SVGAElement.SVGAlement.target", 
        "params": [], 
        "path": "dom/svgaelement/svgalement.target", 
        "syntax": "myLink.target = 'value'; Value An SVGAnimatedString indicating the ending resource target that opens the document when the link is activated. Values for target can be seen here Example The code is taken from the \"SVGAElement example code\" ...var linkRef = document.querySelector('a');\n or  linkRef.target ='_blank';...);", 
        "type": "SVG"
    }, 
    "SVGAElement.target": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SVGAElement.target", 
        "params": [], 
        "path": "dom/svgaelement/target", 
        "syntax": "SVGAElement.target read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated. This property is used when there are multiple possible targets for the ending resource, like when the parent document is a mlti-frame HTML or XHTML document. Syntax myLink.target = 'value'; Value An SVGAnimatedString indicating the ending resource target that opens the document when the link is activated. Sample values can be found here Example The code is taken from the \"SVGAElement example code\" ...var linkRef = document.querySelector('a');\n or  linkRef.target ='_blank';...);", 
        "type": "SVG"
    }, 
    "SVGAnimatedString.animVal": {
        "descr": "AnimVal attribute or animVal property contains the same value as the baseVal property.If the given attribute or property is being animated, contains the current animated value of the attribute or property. If the given attribute or property is not currently being animated, then it contains the same value as baseVal", 
        "name": "SVGAnimatedString.animVal", 
        "params": [], 
        "path": "dom/svganimatedstring/animval", 
        "syntax": "var = object.animVal Specifications    Specification Status Comment   Scalable Vector Graphics (SVG) 1.1 (Second Edition) Recommendation     Scalable Vector Graphics (SVG) 2 Working Draft      Browser compatibility", 
        "type": "SVG"
    }, 
    "SVGSVGElement": {
        "descr": "The SVGSVGElement interface provides access to the properties of <svg> elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.", 
        "name": "SVGSVGElement", 
        "params": [], 
        "path": "dom/svgsvgelement", 
        "syntax": "SVGRect rect, in SVGElement referenceElement)", 
        "type": "SVG"
    }, 
    "ScriptProcessorNode.bufferSize": {
        "descr": "Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by Audio Workers.", 
        "name": "ScriptProcessorNode.bufferSize", 
        "params": [], 
        "path": "dom/scriptprocessornode/buffersize", 
        "syntax": "var audioCtx = new AudioContext();\n or var scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\n or console.log(scriptNode.bufferSize);", 
        "type": "Web Audio"
    }, 
    "ScriptProcessorNode.onaudioprocess": {
        "descr": "Note: As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by Audio Workers.", 
        "name": "ScriptProcessorNode.onaudioprocess", 
        "params": [], 
        "path": "dom/scriptprocessornode/onaudioprocess", 
        "syntax": "var audioCtx = new AudioContext();\n or var scriptNode = audioCtx.createScriptProcessor(4096, 1, 1);\n or scriptNode.onaudioprocess = function() { ... });", 
        "type": "Web Audio"
    }, 
    "Selection": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Selection", 
        "params": [
            {
                "descr": "Returns the Node in which the selection begins.", 
                "name": "Selection.anchorNode Read only"
            }, 
            {
                "descr": "Returns a number representing the offset of the selection's anchor within the anchorNode. ", 
                "name": "Selection.anchorOffset Read only"
            }, 
            {
                "descr": "Returns the Node in which the selection ends.", 
                "name": "Selection.focusNode Read only"
            }, 
            {
                "descr": "Returns a number representing the offset of the selection's anchor within the focusNode. ", 
                "name": "Selection.focusOffset Read only"
            }, 
            {
                "descr": "Returns a Boolean indicating whether the selection's start and end points are at the same position.", 
                "name": "Selection.isCollapsed Read only"
            }, 
            {
                "descr": "Returns the number of ranges in the selection.", 
                "name": "Selection.rangeCount Read only"
            }, 
            {
                "descr": "Returns a Range object representing one of the ranges currently selected.", 
                "name": "Selection.getRangeAt()"
            }, 
            {
                "descr": "Collapses the current selection to a single point.", 
                "name": "Selection.collapse()"
            }, 
            {
                "descr": "Moves the focus of the selection to a specified point.", 
                "name": "Selection.extend()"
            }, 
            {
                "descr": "Changes the current selection.", 
                "name": "Selection.modify()"
            }, 
            {
                "descr": "Collapses the selection to the start of the first range in the selection.", 
                "name": "Selection.collapseToStart()"
            }, 
            {
                "descr": "Collapses the selection to the end of the last range in the selection.", 
                "name": "Selection.collapseToEnd()"
            }, 
            {
                "descr": "Adds all the children of the specified node to the selection.", 
                "name": "Selection.selectAllChildren()"
            }, 
            {
                "descr": "A Range object that will be added to the selection.", 
                "name": "Selection.addRange()"
            }, 
            {
                "descr": "Removes a range from the selection.", 
                "name": "Selection.removeRange()"
            }, 
            {
                "descr": "Removes all ranges from the selection.", 
                "name": "Selection.removeAllRanges()"
            }, 
            {
                "descr": "Deletes the selection's content from the document.", 
                "name": "Selection.deleteFromDocument()"
            }, 
            {
                "descr": "Returns a string currently being represented by the selection object, i.e. ", 
                "name": "Selection.toString()"
            }, 
            {
                "descr": "Indicates if a certain node is part of the selection.", 
                "name": "Selection.containsNode()"
            }, 
            {
                "descr": "The anchor of a selection is the beginning point of the selection. ", 
                "name": "anchor"
            }, 
            {
                "descr": "The focus of a selection is the end point of the selection. ", 
                "name": "focus of a selection"
            }, 
            {
                "descr": "A range is a contiguous part of a document. ", 
                "name": "range"
            }
        ], 
        "path": "dom/selection", 
        "syntax": "Selection object represents the range of text selected by the user or the current position of the caret. To obtain a Selection object for examination or modification, call window.getSelection()", 
        "type": "Selection"
    }, 
    "Selection.addRange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.addRange", 
        "params": [
            {
                "descr": "A Range object that will be added to the Selection.", 
                "name": "range"
            }
        ], 
        "path": "dom/selection/addrange", 
        "syntax": "Selection.addRange()", 
        "type": "Selection"
    }, 
    "Selection.anchorNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.anchorNode", 
        "params": [], 
        "path": "dom/selection/anchornode", 
        "syntax": "Selection.anchorNode read-only property returns the Node", 
        "type": "Selection"
    }, 
    "Selection.anchorOffset": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.anchorOffset", 
        "params": [], 
        "path": "dom/selection/anchoroffset", 
        "syntax": "Selection.anchorOffset read-only property returns the number of characters that the selection's anchor is offset within the Selection.anchorNode. This number is zero-based. If the selection begins with the first character in the Selection.anchorNode, 0 is returned. Syntax number = sel.anchorOffset Specifications    Specification Status Comment   HTML Editing APIsThe definition of 'Selection.anchorOffset' in that specification. Editor's Draft Initial definition   Selection APIThe definition of 'Selection.anchorOffset' in that specification. Working Draft Current    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Yes) ? ? ?         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support ? (Yes) 1.0 ? ? ?     See also", 
        "type": "Selection"
    }, 
    "Selection.collapse": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Selection.collapse", 
        "params": [
            {
                "descr": "The caret location will be within this node.", 
                "name": "parentNode"
            }, 
            {
                "descr": "The offset in parentNode to which the selection will be collapsed.", 
                "name": "offset"
            }
        ], 
        "path": "dom/selection/collapse", 
        "syntax": "Selection.collapse()", 
        "type": "Selection"
    }, 
    "Selection.collapseToEnd": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.collapseToEnd", 
        "params": [], 
        "path": "dom/selection/collapsetoend", 
        "syntax": "Selection.collapseToEnd()", 
        "type": "Selection"
    }, 
    "Selection.collapseToStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.collapseToStart", 
        "params": [], 
        "path": "dom/selection/collapsetostart", 
        "syntax": "Selection.collapseToStart()", 
        "type": "Selection"
    }, 
    "Selection.containsNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.containsNode", 
        "params": [
            {
                "descr": "The node that is being looked for whether it is part of the selection", 
                "name": "aNode"
            }, 
            {
                "descr": "When true, containsNode() returns true when a part of the node is part of the selection. ", 
                "name": "aPartlyContained"
            }
        ], 
        "path": "dom/selection/containsnode", 
        "syntax": "Selection.containsNode()", 
        "type": "Selection"
    }, 
    "Selection.deleteFromDocument": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.deleteFromDocument", 
        "params": [], 
        "path": "dom/selection/deletefromdocument", 
        "syntax": "Selection.deleteFromDocument()", 
        "type": "Selection"
    }, 
    "Selection.extend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Selection.extend", 
        "params": [
            {
                "descr": "The node within which the focus will be moved.", 
                "name": "parentNode"
            }, 
            {
                "descr": "The offset position within parentNode where the focus will be moved to.", 
                "name": "offset"
            }
        ], 
        "path": "dom/selection/extend", 
        "syntax": "Selection.extend()", 
        "type": "Selection"
    }, 
    "Selection.focusNode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.focusNode", 
        "params": [], 
        "path": "dom/selection/focusnode", 
        "syntax": "Selection.focusNode read-only property returns the Node, in which selection ends. A user may make a selection from left to right (in document order) or right to left (reverse of document order). The focus is where the user ended the selection. This can be visualized by holding the Shift key and pressing the arrow keys on your keyboard to modify the current selection. The selection's focus moves, but the selection's anchor, the other end of the selection, does not move.", 
        "type": "Selection"
    }, 
    "Selection.focusOffset": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.focusOffset", 
        "params": [], 
        "path": "dom/selection/focusoffset", 
        "syntax": "Selection.focusOffset read-only property returns the number of characters that the selection's focus is offset within the Selection.focusNode. This number is zero-based. If the selection ends with the first character in the Selection.focusNode, 0 is returned. Syntax offset = sel.focusOffset Specifications    Specification Status Comment   HTML Editing APIsThe definition of 'Selection.focusOffset' in that specification. Editor's Draft Initial definition   Selection APIThe definition of 'Selection.focusOffset' in that specification. Working Draft Current    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Yes) ? ? ?         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support ? (Yes) 1.0 ? ? ?     See also", 
        "type": "Selection"
    }, 
    "Selection.getRangeAt": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.getRangeAt", 
        "params": [
            {
                "descr": "The Range object that will be returned.", 
                "name": "range"
            }, 
            {
                "descr": "The zero-based index of the range to return. ", 
                "name": "index"
            }
        ], 
        "path": "dom/selection/getrangeat", 
        "syntax": "Selection.getRangeAt()", 
        "type": "Selection"
    }, 
    "Selection.isCollapsed": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.isCollapsed", 
        "params": [], 
        "path": "dom/selection/iscollapsed", 
        "syntax": "Selection.isCollapsed read-only property returns a Boolean which indicates whether or not there is currently any text selected; That is to say that the selection's start and end points are at the same position in the content. Keep in mind that a collapsed selection may still have one (or more, in Gecko) Range", 
        "type": "Selection"
    }, 
    "Selection.rangeCount": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.rangeCount", 
        "params": [], 
        "path": "dom/selection/rangecount", 
        "syntax": "Selection.rangeCount read-only property returns the number of ranges in the selection. Before the user has clicked a freshly loaded page, the rangeCount is 0. After the user clicks on the page, rangeCount is 1, even if no selection is visible. A user can normally only select one range at a time, so the rangeCount will usually be 1. Scripting can be used to make the selection contain more than 1 range. Gecko browsers allow multiple selections across table cells. Syntax value = sel.rangeCount Example The following example will show the rangeCount every second. Select text in the browser to see it change. HTML Content Open the console to see how many ranges are in the selection.In Gecko browsers, you can select multiple ranges across tablecells by holding down Ctrl while dragging with the mouse.<table>  <tr><td>a.1<td>a.2  <tr><td>b.1<td>b.2 JavaScript Content window.setInterval(function () {  console.log(window.getSelection().rangeCount);\n or }, 1000);", 
        "type": "Selection"
    }, 
    "Selection.removeAllRanges": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Selection.removeAllRanges", 
        "params": [], 
        "path": "dom/selection/removeallranges", 
        "syntax": "Selection.removeAllRanges()", 
        "type": "Selection"
    }, 
    "Selection.removeRange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.removeRange", 
        "params": [
            {
                "descr": "A range object that will be removed to the selection.", 
                "name": "range"
            }
        ], 
        "path": "dom/selection/removerange", 
        "syntax": "Selection.removeRange()", 
        "type": "Selection"
    }, 
    "Selection.selectAllChildren": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Selection.selectAllChildren", 
        "params": [
            {
                "descr": "All children ofparentNode will be selected.parentNode itself is not part of the selection.", 
                "name": "parentNode"
            }
        ], 
        "path": "dom/selection/selectallchildren", 
        "syntax": "Selection.selectAllChildren()", 
        "type": "Selection"
    }, 
    "Selection.toString": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Selection.toString", 
        "params": [], 
        "path": "dom/selection/tostring", 
        "syntax": "Selection.toString()", 
        "type": "Selection"
    }, 
    "Server-sent events.Using server-sent events": {
        "descr": "Developing a web application that uses server-sent events is quite easy. You'll need a bit of code on the server to stream the events to the web application, but the web application side of things works nearly identical to handling any other type of event.", 
        "name": "Server-sent events.Using server-sent events", 
        "params": [
            {
                "descr": "The event's type. If this is specified, an event will be dispatched on the browser to the listener for the specified event name; the web site source code should use addEventListener() to listen for named events. The onmessage handler is called if no event name is specified for a message.", 
                "name": "event"
            }, 
            {
                "descr": "The data field for the message. ", 
                "name": "data"
            }, 
            {
                "descr": "The event ID to set the EventSource object's last event ID value.", 
                "name": "id"
            }, 
            {
                "descr": "The reconnection time to use when attempting to send the event. ", 
                "name": "retry"
            }
        ], 
        "path": "dom/server-sent_events/using_server-sent_events", 
        "syntax": "evtSource.onmessage = function(e) {  var newElement = document.createElement(\"li\");\n or     newElement.innerHTML = \"message: \" + e.data;  eventList.appendChild(newElement);\n or });", 
        "type": "Server-Sent Events"
    }, 
    "Service Worker API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Service Worker API", 
        "params": [
            {
                "descr": "Represents the storage for Request / Response object pairs that are cached as part of the ServiceWorker life cycle.", 
                "name": "Cache"
            }, 
            {
                "descr": "Represents the storage for Cache objects. ", 
                "name": "CacheStorage"
            }, 
            {
                "descr": "Represents the scope of a service worker client. ", 
                "name": "Client"
            }, 
            {
                "descr": "Represents a container for a list of Client objects; the main way to access the active service worker clients at the current origin.", 
                "name": "Clients"
            }, 
            {
                "descr": "Extends the lifetime of the install and activate events dispatched on the ServiceWorkerGlobalScope as part of the service worker lifecycle. ", 
                "name": "ExtendableEvent"
            }, 
            {
                "descr": "The event object of a message event fired on a service worker (when a channel message is received on the ServiceWorkerGlobalScope from another context) \u2014 extends the lifetime of such events.", 
                "name": "ExtendableMessageEvent"
            }, 
            {
                "descr": "The parameter passed into the ServiceWorkerGlobalScope.onfetch handler, FetchEvent represents a fetch action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. ", 
                "name": "FetchEvent"
            }, 
            {
                "descr": "The parameter passed into the oninstall handler, the InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. ", 
                "name": "InstallEvent"
            }, 
            {
                "descr": "Returns a ServiceWorkerContainer object, which provides access to registration, removal, upgrade, and communication with the ServiceWorker objects for the associated document.", 
                "name": "Navigator.serviceWorker"
            }, 
            {
                "descr": "The parameter passed into the onnotificationclick handler, the NotificationEvent interface represents a notification click event that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.", 
                "name": "NotificationEvent"
            }, 
            {
                "descr": "Represents a service worker. Multiple browsing contexts (e.g. ", 
                "name": "ServiceWorker"
            }, 
            {
                "descr": "Provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.", 
                "name": "ServiceWorkerContainer"
            }, 
            {
                "descr": "Represents the global execution context of a service worker.", 
                "name": "ServiceWorkerGlobalScope"
            }, 
            {
                "descr": "Contains information about an event sent to a ServiceWorkerContainer target.", 
                "name": "ServiceWorkerMessageEvent"
            }, 
            {
                "descr": "Represents a service worker registration.", 
                "name": "ServiceWorkerRegistration"
            }, 
            {
                "descr": "The SyncEvent interface represents a sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.", 
                "name": "SyncEvent"
            }, 
            {
                "descr": "Provides an interface for registering and listing sync registrations.", 
                "name": "SyncManager"
            }, 
            {
                "descr": "Represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. ", 
                "name": "WindowClient"
            }
        ], 
        "path": "dom/service_worker_api", 
        "syntax": "ServiceWorkerContainer.register()", 
        "type": "Web Workers"
    }, 
    "Service Worker API: Using Service Workers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Service Worker API: Using Service Workers", 
        "params": [], 
        "path": "dom/service_worker_api/using_service_workers", 
        "syntax": "about:config and set dom.serviceWorkers.enabled to true; restart browser. Chrome Canary: Go to chrome://flags and turn on experimental-web-platform-features; restart browser (note that some features are now enabled by default in Chrome.) Opera: Go to opera://flags", 
        "type": "Web Workers"
    }, 
    "ServiceWorker": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorker", 
        "params": [
            {
                "descr": "Returns the ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. ", 
                "name": "ServiceWorker.scriptURL Read only"
            }, 
            {
                "descr": "Returns the state of the service worker. ", 
                "name": "ServiceWorker.state Read only"
            }, 
            {
                "descr": "An EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes.", 
                "name": "ServiceWorker.onstatechange Read only"
            }
        ], 
        "path": "dom/serviceworker", 
        "syntax": "ServiceWorker interface of the ServiceWorker API provides a reference to a service worker. Multiple browsing contexts (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorker.onstatechange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorker.onstatechange", 
        "params": [], 
        "path": "dom/serviceworker/onstatechange", 
        "syntax": "EventListener property called whenever an event of type statechange is fired; it is basically fired anytime the ServiceWorker.state changes. Syntax ServiceWorker.onstatechange = function(statechangeevent) { ... }ServiceWorker.addEventListener('statechange',\u00a0function(statechangeevent) { ... } )", 
        "type": "Service Workers"
    }, 
    "ServiceWorker.scriptURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorker.scriptURL", 
        "params": [], 
        "path": "dom/serviceworker/scripturl", 
        "syntax": "ServiceWorker serialized script URL defined as part of ServiceWorkerRegistration. Must be on the same origin as the document that registers the ServiceWorker. Syntax someURL = ServiceWorker.scriptURL  Value A USVString (see the WebIDL definition of USVString.)", 
        "type": "Service Workers"
    }, 
    "ServiceWorker.state": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorker.state", 
        "params": [], 
        "path": "dom/serviceworker/state", 
        "syntax": "state read-only property of the ServiceWorker interface returns a string representing the current state of the service worker. It can be one of the following values: installing, installed, activating, activated, or redundant. Syntax someURL = ServiceWorker.state  Value A ServiceWorkerState definition (see the spec.)", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer", 
        "params": [
            {
                "descr": "Returns a ServiceWorker object if its state is activated (the same object returned by ServiceWorkerRegistration.active). ", 
                "name": "ServiceWorkerContainer.controller Read only"
            }, 
            {
                "descr": "Defines whether a service worker is ready to control a page or not. ", 
                "name": "ServiceWorkerContainer.ready Read only"
            }, 
            {
                "descr": "An event handler fired whenever a controllerchange event occurs \u2014 when the document's associated ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker.", 
                "name": "ServiceWorkerContainer.oncontrollerchange"
            }, 
            {
                "descr": "An event handler fired whenever an error event occurs in the associated service workers.", 
                "name": "ServiceWorkerContainer.onerror"
            }, 
            {
                "descr": "An event handler fired whenever a message event occurs \u2014 when incoming messages are received to the ServiceWorkerContainer object (e.g. ", 
                "name": "ServiceWorkerContainer.onmessage"
            }, 
            {
                "descr": "Creates or updates a ServiceWorkerRegistration for the given scriptURL.", 
                "name": "ServiceWorkerContainer.register()"
            }, 
            {
                "descr": "Gets a ServiceWorkerRegistration object whose scope URL matches the provided document URL. ", 
                "name": "ServiceWorkerContainer.getRegistration()"
            }, 
            {
                "descr": "Returns all ServiceWorkerRegistrations associated with a ServiceWorkerContainer in an array. ", 
                "name": "ServiceWorkerContainer.getRegistrations()"
            }
        ], 
        "path": "dom/serviceworkercontainer", 
        "syntax": "ServiceWorkerContainer interface of the ServiceWorker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations. Most importantly, it exposes the ServiceWorkerContainer.register(scriptURL, scope[, base])", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.controller": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.controller", 
        "params": [], 
        "path": "dom/serviceworkercontainer/controller", 
        "syntax": "controller read-only property of the ServiceWorkerContainer interface returns a ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.getRegistration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.getRegistration", 
        "params": [
            {
                "descr": "A unique identifier for a service worker registration \u2014 the scope URL of the registration object you want to return. ", 
                "name": "scope Optional"
            }
        ], 
        "path": "dom/serviceworkercontainer/getregistration", 
        "syntax": "getRegistration()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.getRegistrations": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.getRegistrations", 
        "params": [], 
        "path": "dom/serviceworkercontainer/getregistrations", 
        "syntax": "getRegistrations()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.oncontrollerchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.oncontrollerchange", 
        "params": [], 
        "path": "dom/serviceworkercontainer/oncontrollerchange", 
        "syntax": "oncontrollerchange property of the ServiceWorkerContainer interface is an event handler fired whenever a controllerchange event occurs \u2014 when the document's associated ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker. Syntax ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.onerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.onerror", 
        "params": [], 
        "path": "dom/serviceworkercontainer/onerror", 
        "syntax": "onerror property of the ServiceWorkerContainer interface is an event handler fired whenever an error event occurs in the associated service workers. Syntax ServiceWorkerContainer.onerror = function(errorevent) { ... }", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.onmessage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.onmessage", 
        "params": [], 
        "path": "dom/serviceworkercontainer/onmessage", 
        "syntax": "onmessage property of the ServiceWorkerContainer interface is an event handler fired whenever a message event occurs \u2014 when incoming messages are received to the ServiceWorkerContainer object (e.g., via a MessagePort.postMessage()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.ready": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.ready", 
        "params": [], 
        "path": "dom/serviceworkercontainer/ready", 
        "syntax": "The ready read-only property of the ServiceWorkerContainer interface defines whether a service worker is ready to control a page or not. It returns a Promise that will never reject, which resolves to a ServiceWorkerRegistration with an ServiceWorkerRegistration.active worker. Syntax navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerContainer.register": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerContainer.register", 
        "params": [
            {
                "descr": "The URL of the service worker script.", 
                "name": "scriptURL"
            }, 
            {
                "descr": "An options object to provide options upon registration. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/serviceworkercontainer/register", 
        "syntax": "register()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope", 
        "params": [
            {
                "descr": "Contains the Clients object associated with the service worker.", 
                "name": "ServiceWorkerGlobalScope.clients Read only"
            }, 
            {
                "descr": "Contains the ServiceWorkerRegistration object that represents the service worker's registration.", 
                "name": "ServiceWorkerGlobalScope.registration Read only"
            }, 
            {
                "descr": "Contains the CacheStorage object associated with the service worker.", 
                "name": "ServiceWorkerGlobalScope.caches Read only"
            }, 
            {
                "descr": "An event handler fired whenever an activate event occurs \u2014 when a ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.active worker.", 
                "name": "ServiceWorkerGlobalScope.onactivate"
            }, 
            {
                "descr": "An event handler fired whenever a fetch event occurs \u2014 when a fetch() is called.", 
                "name": "ServiceWorkerGlobalScope.onfetch"
            }, 
            {
                "descr": "An event handler fired whenever an install event occurs \u2014 when a ServiceWorkerRegistration acquires a new ServiceWorkerRegistration.installing worker.", 
                "name": "ServiceWorkerGlobalScope.oninstall"
            }, 
            {
                "descr": "An event handler fired whenever a message event occurs \u2014 when incoming messages are received. ", 
                "name": "ServiceWorkerGlobalScope.onmessage"
            }, 
            {
                "descr": "An event handler fired whenever a notificationclick event occurs \u2014 when a user clicks on a displayed notification.", 
                "name": "ServiceWorkerGlobalScope.onnotificationclick"
            }, 
            {
                "descr": "An event handler fired whenever a notificationclose event occurs \u2014 when a user closes a displayed notification.", 
                "name": "ServiceWorkerGlobalScope.onnotificationclose"
            }, 
            {
                "descr": "An event handler fired whenever a push event occurs \u2014 when a server push notification is received.", 
                "name": "ServiceWorkerGlobalScope.onpush"
            }, 
            {
                "descr": "An event handler fired whenever a pushsubscriptionchange event occurs \u2014 when a push subscription has been invalidated, or is about to be invalidated (e.g. ", 
                "name": "ServiceWorkerGlobalScope.onpushsubscriptionchange"
            }, 
            {
                "descr": "An event handler fired whenever a SyncEvent event occurs. ", 
                "name": "ServiceWorkerGlobalScope.onsync"
            }, 
            {
                "descr": "Allows the current service worker registration to progress from waiting to active state while service worker clients are using it.", 
                "name": "ServiceWorkerGlobalScope.skipWaiting()"
            }, 
            {
                "descr": "Starts the process of fetching a resource. ", 
                "name": "GlobalFetch.fetch()"
            }
        ], 
        "path": "dom/serviceworkerglobalscope", 
        "syntax": "ServiceWorkerGlobalScope interface of the ServiceWorker API represents the global execution context of a service worker. Developers should keep in mind that the ServiceWorker.state is not persisted across the termination/restart cycle, so each event handler should assume it's being invoked with a bare, default global state. Once successfully registered, a service worker can and will be terminated when idle to conserve memory and processor power. An active service worker is automatically restarted to respond to events, such as ServiceWorkerGlobalScope.onfetch", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.caches": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.caches", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/caches", 
        "syntax": "ServiceWorkerGlobalScope.caches read-only property returns the CacheStorage object associated with the service worker. Syntax var myCacheStorage = self.caches; Value A CacheStorage object. Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerGlobalScope.caches' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 40.0 44.0 (44.0)[1] No support ? No support         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? 44.0 (44.0) (Yes) No support ? No support ?     [1] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.clients": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.clients", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/clients", 
        "syntax": "clients read-only property of the ServiceWorkerGlobalScope interface returns the Clients object associated with the service worker. Syntax swClients = self.clients  Value The Clients object associated with the specific worker. Specifications     Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.clients' in that specification. Working Draft Initial definition.     Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) 44.0 (44.0)[1] No support ? No support         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? 44.0 (44.0) (Yes) No support ? No support ?     [1] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onactivate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onactivate", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onactivate", 
        "syntax": "ServiceWorkerGlobalScope interface is an event handler fired whenever an activate event occurs (when the service worker activates). This happens after installation, when the page to be controlled by the service worker refreshes.", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onfetch": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onfetch", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onfetch", 
        "syntax": "ServiceWorkerGlobalScope interface is an event handler fired whenever a fetch event occurs (usually when the ServiceWorkerGlobalScope.fetch", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.oninstall": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.oninstall", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/oninstall", 
        "syntax": "ServiceWorkerGlobalScope interface is an event handler fired whenever an install event occurs (when the service worker installs). This happens before activation.", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onmessage": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onmessage", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onmessage", 
        "syntax": "ServiceWorkerGlobalScope interface is called whenever incoming messages are received. Syntax ServiceWorkerGlobalScope.onmessage = function(MessageEvent) { ... }", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onnotificationclick": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onnotificationclick", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onnotificationclick", 
        "syntax": "notificationclick event is dispatched on the ServiceWorkerGlobalScope object, that is when a user clicks on a displayed notification spawned by ServiceWorkerRegistration.showNotification()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onnotificationclose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onnotificationclose", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onnotificationclose", 
        "syntax": "ServiceWorkerGlobalScope.onnotificationclose property is an event handler called whenever the notificationclose event is dispatched on the ServiceWorkerGlobalScope object, that is when a user closes a displayed notification spawned by ServiceWorkerRegistration.showNotification()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onpush": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onpush", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onpush", 
        "syntax": "ServiceWorkerGlobalScope.onpush event of the ServiceWorkerGlobalScope interface is fired whenever a push message is received by a service worker via a push server. Syntax ServiceWorkerGlobalScope.onpush = function(PushEvent) { ... }self.addEventListener('push', function(PushEvent) { ... })", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onpushsubscriptionchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onpushsubscriptionchange", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onpushsubscriptionchange", 
        "syntax": "ServiceWorkerGlobalScope.onpushsubscriptionchange event of the ServiceWorkerGlobalScope interface is fired whenever a push subscription has been invalidated (or is about to become so). This offers an opportunity to resubscribe in order to continue receiving push messages, if desired. This might happen if, for example, the push service sets an expiration time a subscription.", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.onsync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.onsync", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/onsync", 
        "syntax": "ServiceWorkerGlobalScope.onsync event of the ServiceWorkerGlobalScope interface is fired whenever a SyncEvent event occurs. This is triggered when a call to SyncManager.register is made from a service worker client page. The attempt to sync is made either immediately if the network is available or as soon as the network becomes available.  Syntax ServiceWorkerGlobalScope.onsync = function(SyncEvent) { ... }self.addEventListener('sync', function(SyncEvent) { ... })", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.registration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.registration", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/registration", 
        "syntax": "registration read-only property of the ServiceWorkerGlobalScope interface returns a reference to the ServiceWorkerRegistration object, which represents the service worker's registration. Syntax serviceWorkerRegistration = self.registration Value A ServiceWorkerRegistration object. Specifications     Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerGlobalScope.registration' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 42.0 44.0 (44.0)[1] No support ? No support         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? 44.0 (44.0) (Yes) No support ? No support ?     [1] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerGlobalScope.skipWaiting": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerGlobalScope.skipWaiting", 
        "params": [], 
        "path": "dom/serviceworkerglobalscope/skipwaiting", 
        "syntax": "ServiceWorkerGlobalScope.skipWaiting()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent", 
        "params": [
            {
                "descr": "Creates a new ServiceWorkerMessageEvent object instance.", 
                "name": "ServiceWorkerMessageEvent.ServiceWorkerMessageEvent()"
            }, 
            {
                "descr": "Returns the event's data. It can be any data type.", 
                "name": "ServiceWorkerMessageEvent.data Read only"
            }, 
            {
                "descr": "Returns the origin of the service worker's environment settings object.", 
                "name": "ServiceWorkerMessageEvent.origin Read only"
            }, 
            {
                "descr": "Represents, in server-sent events, the last event ID of the event source.", 
                "name": "ServiceWorkerMessageEvent.lastEventId Read only"
            }, 
            {
                "descr": "Returns a reference to the service worker that sent the message.", 
                "name": "ServiceWorkerMessageEvent.source Read only"
            }, 
            {
                "descr": "Returns an array of MessagePort objects.", 
                "name": "ServiceWorkerMessageEvent.ports Read only"
            }
        ], 
        "path": "dom/serviceworkermessageevent", 
        "syntax": "ServiceWorkerMessageEvent interface of the ServiceWorker API contains information about an event sent to a ServiceWorkerContainer target. This extends the default message event to allow setting a ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent.constructor", 
        "params": [
            {
                "descr": "A DOMString that defines the type of the message event being created.", 
                "name": "type"
            }, 
            {
                "descr": "An initialisation object, which should contain the following parameters:  data: The event's data \u2014 this can be any type. ", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/serviceworkermessageevent/serviceworkermessageevent", 
        "syntax": "ServiceWorkerMessageEvent()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent.data": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent.data", 
        "params": [], 
        "path": "dom/serviceworkermessageevent/data", 
        "syntax": "data read-only property of the ServiceWorkerMessageEvent interface returns the event's data. It can be any data type. Syntax var myData = ServiceWorkerMessageEventInstance.data; Value Any data type. Examples When the following code is used inside the main thread to set up a message channel between it and a service worker for sending messages between the two, the event object of onmessage will be a ServiceWorkerMessageEvent. navigator.serviceWorker.ready.then(function(reg) {    ...      // set up a message channel to communicate with the SW      var channel = new MessageChannel();\n or       channel.port1.onmessage = function(e) {        console.log(e);\n or         handleChannelMessage(e.data);\n or       }            mySW = reg.active;      mySW.postMessage('hello', [channel.port2]);\n or   });", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent.lastEventId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent.lastEventId", 
        "params": [], 
        "path": "dom/serviceworkermessageevent/lasteventid", 
        "syntax": "lastEventID read-only property of the ServiceWorkerMessageEvent interface represents, in server-sent events, the last event ID of the event source. Syntax var myLastEventId = ServiceWorkerMessageEventInstance.lastEventId; Value A DOMString. Examples When the following code is used inside the main thread to set up a message channel between it and a service worker for sending messages between the two, the event object of onmessage will be a ServiceWorkerMessageEvent. navigator.serviceWorker.ready.then(function(reg) {    ...      // set up a message channel to communicate with the SW      var channel = new MessageChannel();\n or       channel.port1.onmessage = function(e) {        console.log(e.lastEventId);\n or         handleChannelMessage(e.data);\n or       }            mySW = reg.active;      mySW.postMessage('hello', [channel.port2]);\n or   });", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent.origin": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent.origin", 
        "params": [], 
        "path": "dom/serviceworkermessageevent/origin", 
        "syntax": "ServiceWorkerMessageEvent interface returns the origin of the service worker's environment settings object. Syntax var myOrigin = ServiceWorkerMessageEventInstance.origin; Value A DOMString. Examples When the following code is used inside the main thread to set up a message channel between it and a service worker for sending messages between the two, the event object of onmessage will be a ServiceWorkerMessageEvent. navigator.serviceWorker.ready.then(function(reg) {    ...      // set up a message channel to communicate with the SW      var channel = new MessageChannel();\n or       channel.port1.onmessage = function(e) {        console.log(e.origin);\n or         handleChannelMessage(e.data);\n or       }            mySW = reg.active;      mySW.postMessage('hello', [channel.port2]);\n or   });", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent.ports": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent.ports", 
        "params": [], 
        "path": "dom/serviceworkermessageevent/ports", 
        "syntax": "ServiceWorkerMessageEvent interface returns an array of MessagePort objects connected with the message channel the message is being sent through. Syntax var myPorts = ServiceWorkerMessageEventInstance.ports; Value An array of MessagePort objects. Examples When the following code is used inside the main thread to set up a message channel between it and a service worker for sending messages between the two, the event object of onmessage will be a ServiceWorkerMessageEvent. navigator.serviceWorker.ready.then(function(reg) {    ...      // set up a message channel to communicate with the SW      var channel = new MessageChannel();\n or       channel.port1.onmessage = function(e) {        console.log(e.ports);\n or         handleChannelMessage(e.data);\n or       }            mySW = reg.active;      mySW.postMessage('hello', [channel.port2]);\n or   });", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerMessageEvent.source": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerMessageEvent.source", 
        "params": [], 
        "path": "dom/serviceworkermessageevent/source", 
        "syntax": "ServiceWorkerMessageEvent returns a reference to the ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration", 
        "params": [
            {
                "descr": "Returns a unique identifier for a service worker registration. ", 
                "name": "ServiceWorkerRegistration.scope Read only"
            }, 
            {
                "descr": "Returns a service worker whose state is installing. ", 
                "name": "ServiceWorkerRegistration.installing Read only"
            }, 
            {
                "descr": "Returns a service worker whose state is installed. ", 
                "name": "ServiceWorkerRegistration.waiting Read only"
            }, 
            {
                "descr": "Returns a service worker whose state is either activating or activated. ", 
                "name": "ServiceWorkerRegistration.active Read only"
            }, 
            {
                "descr": "Returns a reference to the PeriodicSyncManager interface, which manages periodic background synchronization processes.", 
                "name": "serviceWorkerRegistration.periodicSync  Read only"
            }, 
            {
                "descr": "Returns a reference to the PushManager interface for managing push subscriptions including subscribing, getting an active subscription, and accessing push permission status.", 
                "name": "ServiceWorkerRegistration.pushManager Read only"
            }, 
            {
                "descr": "Returns a reference to the SyncManager interface, which manages background synchronization processes.", 
                "name": "ServiceWorkerRegistration.sync Read only"
            }, 
            {
                "descr": "An EventListener property called whenever an event of type updatefound is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker.", 
                "name": "ServiceWorkerRegistration.onupdatefound Read only"
            }, 
            {
                "descr": "Returns a Promise that resolves to an array of Notification objects.", 
                "name": "ServiceWorkerRegistration.getNotifications()"
            }, 
            {
                "descr": "Displays the notification with the requested title.", 
                "name": "ServiceWorkerRegistration.showNotification()"
            }, 
            {
                "descr": "Checks the server for an updated version of the service worker without consulting caches.", 
                "name": "ServiceWorkerRegistration.update()"
            }, 
            {
                "descr": "Unregisters the service worker registration and returns a promise (see Promise). ", 
                "name": "ServiceWorkerRegistration.unregister()"
            }
        ], 
        "path": "dom/serviceworkerregistration", 
        "syntax": "ServiceWorkerRegistion interface of the ServiceWorker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin. The lifetime of a service worker registration is beyond that of the ServiceWorkerRegistration objects that represent them within the lifetime of their corresponding service worker clients. The browser maintains a persistent list of active ServiceWorkerRegistration objects.  Note: This feature is available in Web Workers.  Properties Also implements properties from its parent interface, EventTarget.  ServiceWorkerRegistration.scope Read only  Returns a unique identifier for a service worker registration. This must be on the same origin as the document that registers the ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.active": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.active", 
        "params": [], 
        "path": "dom/serviceworkerregistration/active", 
        "syntax": "active property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is activating or activated. This property is initially set to null. An active worker controls a ServiceWorkerClient if the client's URL falls within the scope of the registration (the scope option set when ServiceWorkerContainer.register", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.getNotifications": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.getNotifications", 
        "params": [
            {
                "descr": "An options object that can contain options to filter the notifications returned. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/serviceworkerregistration/getnotifications", 
        "syntax": "getNotifications()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.installing": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.installing", 
        "params": [], 
        "path": "dom/serviceworkerregistration/installing", 
        "syntax": "installing property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installing. This property is initially set to null.  Note: This feature is available in Web Workers.  Syntax sw = ServiceWorker.installing  Value A ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.onupdatefound": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.onupdatefound", 
        "params": [], 
        "path": "dom/serviceworkerregistration/onupdatefound", 
        "syntax": "onupdatefound property of the ServiceWorkerRegistration interface is an EventListener property called whenever an event of type statechange is fired; it is fired any time the ServiceWorkerRegistration.installing property acquires a new service worker.  Note: This feature is available in Web Workers.  Syntax ServiceWorkerRegistration.onupdatefound = function() { ... };", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.pushManager": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.pushManager", 
        "params": [], 
        "path": "dom/serviceworkerregistration/pushmanager", 
        "syntax": "pushManager property of the ServiceWorkerRegistration interface returns a reference to the PushManager interface for managing push subscriptions; this includes support for subscribing, getting an active subscription, and accessing push permission status. Syntax myPushManager = ServiceWorker.pushManager  Value A PushManager object. Examples this.onpush = function(event) {  console.log(event.data);\n or   // From here we can write the data to IndexedDB, send it to any open  // windows, display a notification, etc.}navigator.serviceWorker.register('serviceworker.js').then(  function(serviceWorkerRegistration) {    serviceWorkerRegistration.pushManager.subscribe().then(      function(pushSubscription) {        console.log(pushSubscription.subscriptionId);\n or         console.log(pushSubscription.endpoint);\n or         // The push subscription details needed by the application        // server are now available, and can be sent to it using,        // for example, an XMLHttpRequest.      }, function(error) {        // During development it often helps to log errors to the        // console. In a production environment it might make sense to        // also report information about errors back to the        // application server.        console.log(error);\n or       }    );\n or   });", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.scope": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.scope", 
        "params": [], 
        "path": "dom/serviceworkerregistration/scope", 
        "syntax": "scope read-only property of the ServiceWorkerRegistration interface returns a unique identifier for a service worker registration. The service worker must be on the same origin as the document that registers the ServiceWorker.  Note: This feature is available in Web Workers.  Syntax swScope = ServiceWorkerRegistration.scope; Specifications    Specification Status Comment   Service WorkersThe definition of 'ServiceWorkerRegistration.scope' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 40.0 44.0 (44.0)[1] No support ? No support   Available in web workers (Yes) 44.0 (44.0)[1] No support ? No support         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? 44.0 (44.0) (Yes) No support ? No support ?   Available in web workers ? (Yes) ? No support ? No support ?     [1] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.showNotification": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.showNotification", 
        "params": [
            {
                "descr": "The title that must be shown within the notification", 
                "name": "title"
            }, 
            {
                "descr": "An object that allows to configure the notification. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/serviceworkerregistration/shownotification", 
        "syntax": "showNotification()", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.unregister": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.unregister", 
        "params": [], 
        "path": "dom/serviceworkerregistration/unregister", 
        "syntax": "unregister method of the ServiceWorkerRegistration interface unregisters the service worker registration and returns a Promise. The promise will resolve to false if no registration was found, otherwise it resolves to true irrespective of whether unregistration happened or not (it may not unregister if someone else just called ServiceWorkerContainer.register", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.update": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.update", 
        "params": [], 
        "path": "dom/serviceworkerregistration/update", 
        "syntax": "update method of the ServiceWorkerRegistration interface attempts to update the service worker. It fetches the worker's script URL, and if the new worker is not byte-by-byte identical to the current worker, it installs the new worker. The fetch of the worker bypasses any browser caches if the previous fetch occurred over 24 hours ago.  Note: This feature is available in Web Workers.  Syntax ServiceWorkerRegistration.update();", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerRegistration.waiting": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerRegistration.waiting", 
        "params": [], 
        "path": "dom/serviceworkerregistration/waiting", 
        "syntax": "waiting property of the ServiceWorkerRegistration interface returns a service worker whose ServiceWorker.state is installed. This property is initially set to null.  Note: This feature is available in Web Workers.  Syntax sw = ServiceWorker.waiting  Value A ServiceWorker", 
        "type": "Service Workers"
    }, 
    "ServiceWorkerState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "ServiceWorkerState", 
        "params": [
            {
                "descr": "The service worker in this state is considered an installing worker. ", 
                "name": "installing"
            }, 
            {
                "descr": "The service worker in this state is considered a waiting worker.", 
                "name": "installed"
            }, 
            {
                "descr": "The service worker in this state is considered an active worker. ", 
                "name": "activating"
            }, 
            {
                "descr": "The service worker in this state is considered an active worker ready to handle functional events.", 
                "name": "activated"
            }, 
            {
                "descr": "A new service worker is replacing the current service worker, or the current service worker is being discarded due to an install failure.", 
                "name": "redundant"
            }
        ], 
        "path": "dom/serviceworkerstate", 
        "syntax": "ServiceWorkerState is associated with its ServiceWorker", 
        "type": "Service Workers"
    }, 
    "Set": {
        "descr": "The Set object lets you store unique values of any type, whether primitive values or object references.", 
        "name": "Set", 
        "params": [
            {
                "descr": "If an iterable object is passed, all of its elements will be added to the new Set. ", 
                "name": "iterable"
            }, 
            {
                "descr": "The value of the length property is 0.", 
                "name": "Set.length"
            }, 
            {
                "descr": "The constructor function that is used to create derived objects.", 
                "name": "get Set[@@species]"
            }, 
            {
                "descr": "Represents the prototype for the Set constructor. ", 
                "name": "Set.prototype"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Set.prototype.constructor"
            }, 
            {
                "descr": "Returns the number of values in the Set object.", 
                "name": "Set.prototype.size"
            }, 
            {
                "descr": "Appends a new element with the given value to the Set object. ", 
                "name": "Set.prototype.add(value)"
            }, 
            {
                "descr": "Removes all elements from the Set object.", 
                "name": "Set.prototype.clear()"
            }, 
            {
                "descr": "Removes the element associated to the value and returns the value that Set.prototype.has(value) would have previously returned. ", 
                "name": "Set.prototype.delete(value)"
            }, 
            {
                "descr": "Returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. ", 
                "name": "Set.prototype.entries()"
            }, 
            {
                "descr": "Calls callbackFn once for each value present in the Set object, in insertion order. ", 
                "name": "Set.prototype.forEach(callbackFn[, thisArg])"
            }, 
            {
                "descr": "Returns a boolean asserting whether an element is present with the given value in the Set object or not.", 
                "name": "Set.prototype.has(value)"
            }, 
            {
                "descr": "Is the same function as the values() function and returns a new Iterator object that contains the values for each element in the Set object in insertion order.", 
                "name": "Set.prototype.keys()"
            }, 
            {
                "descr": "Returns a new Iterator object that contains the values for each element in the Set object in insertion order.", 
                "name": "Set.prototype.values()"
            }, 
            {
                "descr": "Returns a new Iterator object that contains the values for each element in the Set object in insertion order.", 
                "name": "Set.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/set", 
        "syntax": "new Set([iterable]);", 
        "type": "Set"
    }, 
    "Set.@@species": {
        "descr": "The Set[@@species] accessor property returns the Set constructor.", 
        "name": "Set.@@species", 
        "params": [], 
        "path": "javascript/global_objects/set/@@species", 
        "syntax": "Set[Symbol.species] Description The species accessor property returns the default constructor for Set objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is the Set constructor for Set objects: Set[Symbol.species]; // function Set()", 
        "type": "Set"
    }, 
    "SharedArrayBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SharedArrayBuffer", 
        "params": [
            {
                "descr": "The size, in bytes, of the array buffer to create.", 
                "name": "length"
            }, 
            {
                "descr": "The SharedArrayBuffer constructor's length property whose value is 1.", 
                "name": "SharedArrayBuffer.length"
            }, 
            {
                "descr": "Allows the addition of properties to all SharedArrayBuffer objects.", 
                "name": "SharedArrayBuffer.prototype"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype. ", 
                "name": "SharedArrayBuffer.prototype.constructor"
            }, 
            {
                "descr": "The size, in bytes, of the array. ", 
                "name": "SharedArrayBuffer.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. ", 
                "name": "SharedArrayBuffer.prototype.slice(begin, end)"
            }
        ], 
        "path": "javascript/global_objects/sharedarraybuffer", 
        "syntax": "SharedArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. Unlike an ArrayBuffer, a SharedArrayBuffer cannot become detached. Syntax new SharedArrayBuffer(length)", 
        "type": "SharedArrayBuffer"
    }, 
    "SharedArrayBuffer.prototype": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SharedArrayBuffer.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype. ", 
                "name": "SharedArrayBuffer.prototype.constructor"
            }, 
            {
                "descr": "The size, in bytes, of the array. ", 
                "name": "SharedArrayBuffer.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. ", 
                "name": "SharedArrayBuffer.prototype.slice(begin, end)"
            }
        ], 
        "path": "javascript/global_objects/sharedarraybuffer/prototype", 
        "syntax": "SharedArrayBuffer.prototype property represents the prototype for the SharedArrayBuffer object.    Property attributes of SharedArrayBuffer.prototype     Writable no   Enumerable no   Configurable no    Description SharedArrayBuffer instances inherit from SharedArrayBuffer.prototype. As with all constructors, you can change the constructor's prototype object to make changes to all SharedArrayBuffer instances. Properties  SharedArrayBuffer.prototype.constructor Specifies the function that creates an object's prototype. The initial value is the standard built-in SharedArrayBuffer constructor. SharedArrayBuffer.prototype.byteLength Read only  The size, in bytes, of the array. This is established when the array is constructed and cannot be changed. Read only.  Methods  SharedArrayBuffer.prototype.slice(begin, end)", 
        "type": "SharedArrayBuffer"
    }, 
    "SharedKeyframeList": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SharedKeyframeList", 
        "params": [
            {
                "descr": "Creates a new SharedKeyframeList object.", 
                "name": "SharedKeyframeList.SharedKeyframeList()"
            }
        ], 
        "path": "dom/sharedkeyframelist", 
        "syntax": "SharedKeyframeList interface of the Web Animations API represents a sequence of keyframes that can be shared between KeyframeEffect", 
        "type": "Animation"
    }, 
    "SharedKeyframeList.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SharedKeyframeList.constructor", 
        "params": [
            {
                "descr": "An object representing a set of keyframes to be contained in the object. ", 
                "name": "keyframes"
            }
        ], 
        "path": "dom/sharedkeyframelist/sharedkeyframelist", 
        "syntax": "SharedKeyframeList()", 
        "type": "Animation"
    }, 
    "SharedWorker.constructor": {
        "descr": "The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.", 
        "name": "SharedWorker.constructor", 
        "params": [
            {
                "descr": "A DOMString representing the URL of the script the worker will execute. ", 
                "name": "aURL"
            }, 
            {
                "descr": "An optional argument that specifies an existing SharedWorkerGlobalScope.name \u2014 if this is specified then that SharedWorkerGlobalScope will be used as the scope for this shared worker.", 
                "name": "name"
            }
        ], 
        "path": "dom/sharedworker/sharedworker", 
        "syntax": "DOMException of type SECURITY_ERR is thrown.  Note: there is disagreement among browser manufacturers about whether a data URI is of the same origin or not. Although Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.", 
        "type": "Web Workers"
    }, 
    "SharedWorker.port": {
        "descr": "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.", 
        "name": "SharedWorker.port", 
        "params": [], 
        "path": "dom/sharedworker/port", 
        "syntax": "myWorker.port; Value A MessagePort object. Example The following code snippet shows creation of a SharedWorker object using the SharedWorker()", 
        "type": "Web Workers"
    }, 
    "SharedWorkerGlobalScope.applicationCache": {
        "descr": "The applicationCache read-only property of the SharedWorkerGlobalScope interface returns the ApplicationCache object for the worker (see Using the application cache).", 
        "name": "SharedWorkerGlobalScope.applicationCache", 
        "params": [], 
        "path": "dom/sharedworkerglobalscope/applicationcache", 
        "syntax": "var nameObj = self.applicationCache; Value An ApplicationCache. Example If a shared worker has an AppCache associated with it, you can return a reference to the cache using self.applicationCache from inside the shared worker. Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'applicationCache' in that specification. Living Standard No change from Web Workers.   Web WorkersThe definition of 'applicationCache' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Support 3 29.0 (29.0) Not supported 10.60 Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Mobile Opera Mobile Safari Mobile   Support ? Not supported 29.0 (29.0) 1.4 ? ? ?     See also", 
        "type": "Web Workers"
    }, 
    "SharedWorkerGlobalScope.name": {
        "descr": "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope.", 
        "name": "SharedWorkerGlobalScope.name", 
        "params": [], 
        "path": "dom/sharedworkerglobalscope/name", 
        "syntax": "var nameObj = self.name; Value A DOMString. Example If a shared worker is created using a constructor with two arguments: var myWorker = new SharedWorker(\"worker.js\", \"mySharedWorker\");", 
        "type": "Web Workers"
    }, 
    "SharedWorkerGlobalScope.onconnect": {
        "descr": "The onconnect property of the SharedWorkerGlobalScope interface is an EventHandler representing the code to be called when the connect event is raised \u2014 that is, when a MessagePort connection is opened between the associated SharedWorker and the main thread.", 
        "name": "SharedWorkerGlobalScope.onconnect", 
        "params": [], 
        "path": "dom/sharedworkerglobalscope/onconnect", 
        "syntax": "onconnect = function() { ... };", 
        "type": "Web Workers"
    }, 
    "SourceBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer", 
        "params": [
            {
                "descr": "Controls how the order of media segments in the SourceBuffer is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence.", 
                "name": "SourceBuffer.mode"
            }, 
            {
                "descr": "Indicates whether the SourceBuffer is currently being updated \u2014 i.e. ", 
                "name": "SourceBuffer.updating Read only"
            }, 
            {
                "descr": "Returns the time ranges that are currently buffered in the SourceBuffer.", 
                "name": "SourceBuffer.buffered Read only"
            }, 
            {
                "descr": "Controls the offset applied to timestamps inside media segments that are subsequently appended to the SourceBuffer.", 
                "name": "SourceBuffer.timestampOffset"
            }, 
            {
                "descr": "A list of the audio tracks currently contained inside the SourceBuffer.", 
                "name": "SourceBuffer.audioTracks Read only"
            }, 
            {
                "descr": "A list of the video tracks currently contained inside the SourceBuffer.", 
                "name": "SourceBuffer.videoTracks Read only"
            }, 
            {
                "descr": "A list of the text tracks currently contained inside the SourceBuffer.", 
                "name": "SourceBuffer.textTracks Read only"
            }, 
            {
                "descr": "Controls the timestamp for the start of the append window. ", 
                "name": "SourceBuffer.appendWindowStart"
            }, 
            {
                "descr": "Controls the timestamp for the end of the append window.", 
                "name": "SourceBuffer.appendWindowEnd"
            }, 
            {
                "descr": "Specifies the default values to use if kind, label, and/or language information is not available in the initialization segment of the media to be appended to the SourceBuffer.", 
                "name": "SourceBuffer.trackDefaults"
            }, 
            {
                "descr": "Appends media segment data from an ArrayBuffer or ArrayBufferView object to the SourceBuffer.", 
                "name": "SourceBuffer.appendBuffer()"
            }, 
            {
                "descr": "Appends media segment data from a ReadableStream object to the SourceBuffer.", 
                "name": "SourceBuffer.appendStream()"
            }, 
            {
                "descr": "Aborts the current segment and resets the segment parser.", 
                "name": "SourceBuffer.abort()"
            }, 
            {
                "descr": "Removes media segments within a specific time range from the SourceBuffer.", 
                "name": "SourceBuffer.remove()"
            }
        ], 
        "path": "dom/sourcebuffer", 
        "syntax": "SourceBuffer interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments. Properties Inherits properties from its parent interface, EventTarget.  SourceBuffer.mode Controls how the order of media segments in the SourceBuffer is handled, in terms of whether they can be appended in any order, or they have to be kept in a strict sequence. SourceBuffer.updating", 
        "type": "Media"
    }, 
    "SourceBuffer.abort": {
        "descr": "Draft This page is not complete.", 
        "name": "SourceBuffer.abort", 
        "params": [], 
        "path": "dom/sourcebuffer/abort", 
        "syntax": "abort()", 
        "type": "Media"
    }, 
    "SourceBuffer.appendBuffer": {
        "descr": "Draft This page is not complete.", 
        "name": "SourceBuffer.appendBuffer", 
        "params": [
            {
                "descr": "The ArrayBuffer that is the source of the media segment data you want to append to the SourceBuffer.", 
                "name": "ArrayBuffer"
            }, 
            {
                "descr": "The ArrayBufferView that is the source of the media segment data you want to append to the SourceBuffer.", 
                "name": "ArrayBufferView"
            }
        ], 
        "path": "dom/sourcebuffer/appendbuffer", 
        "syntax": "appendBuffer()", 
        "type": "Media"
    }, 
    "SourceBuffer.appendStream": {
        "descr": "Draft This page is not complete.", 
        "name": "SourceBuffer.appendStream", 
        "params": [
            {
                "descr": "The ReadableStream that is the source of the media segment data you want to append to the SourceBuffer.", 
                "name": "stream"
            }, 
            {
                "descr": "An unsigned long value indicating the maximum number of bytes that can be appended in this operation.", 
                "name": "maxSize"
            }
        ], 
        "path": "dom/sourcebuffer/appendstream", 
        "syntax": "appendStream()", 
        "type": "Media"
    }, 
    "SourceBuffer.appendWindowEnd": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SourceBuffer.appendWindowEnd", 
        "params": [], 
        "path": "dom/sourcebuffer/appendwindowend", 
        "syntax": "appendWindowEnd property of the SourceBuffer interface controls the timestamp for the end of the append window, a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out. The default value of appendWindowEnd is positive infinity. Syntax var myAppendWindowEnd = sourceBuffer.appendWindowEnd;sourceBuffer.appendWindowEnd = 120.0; Value A double, indicating the end time of the append window, in seconds. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set the value to less than or equal to SourceBuffer.appendWindowStart, or NaN.   InvalidStateError One or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating", 
        "type": "Media"
    }, 
    "SourceBuffer.appendWindowStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.appendWindowStart", 
        "params": [], 
        "path": "dom/sourcebuffer/appendwindowstart", 
        "syntax": "appendWindowStart property of the SourceBuffer interface controls the timestamp for the start of the append window, a timestamp range that can be used to filter what media data is appended to the SourceBuffer. Coded media frames with timestamps wthin this range will be appended, whereas those outside the range will be filtered out. The default value of appendWindowStart is the presentation start time, which is the beginning time of the playable media. Syntax var myAppendWindowStart = sourceBuffer.appendWindowStart;sourceBuffer.appendWindowStart = 2.0; Value A double, indicating the start time of the append window, in seconds. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidAccessError An attempt was made to set the value to less than 0, or a value greater than or equal to SourceBuffer.appendWindowEnd.   InvalidStateError One or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating", 
        "type": "Media"
    }, 
    "SourceBuffer.audioTracks": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.audioTracks", 
        "params": [], 
        "path": "dom/sourcebuffer/audiotracks", 
        "syntax": "audioTracks read-only property of the SourceBuffer interface returns a list of the audio tracks currently contained inside the SourceBuffer. Syntax var myAudioTracks = sourceBuffer.audioTracks; Value An AudioTrackList object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'audioTracks' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 23 25.0 (25.0)[1] 42.0 (42.0) 11[2] 15 8         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 4.4.4  Not supported", 
        "type": "Web Audio"
    }, 
    "SourceBuffer.buffered": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.buffered", 
        "params": [], 
        "path": "dom/sourcebuffer/buffered", 
        "syntax": "buffered read-only property of the SourceBuffer interface returns the time ranges that are currently buffered in the SourceBuffer. Syntax var myBufferedRange = sourceBuffer.buffered; Value A TimeRanges object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'buffered' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 23 25.0 (25.0)[1] 42.0 (42.0) 11[2] 15 8         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 4.4.4  Not supported", 
        "type": "Media"
    }, 
    "SourceBuffer.mode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SourceBuffer.mode", 
        "params": [], 
        "path": "dom/sourcebuffer/mode", 
        "syntax": "mode property of the SourceBuffer interface controls whether media segments can be appended to the SourceBuffer in any order, or in a strict sequence. The two available values are:  segments: The media segment timestamps determine the order in which the segments are played. The segments can be appended to the SourceBuffer in any order. sequence: The order in which the segments are appended to the SourceBuffer determines the order in which they are played. Segment timestamps are generated automatically for the segments that observe this order.  The mode value is initially set when the SourceBuffer is created using MediaSource.addSourceBuffer()", 
        "type": "Media"
    }, 
    "SourceBuffer.remove": {
        "descr": "Draft This page is not complete.", 
        "name": "SourceBuffer.remove", 
        "params": [
            {
                "descr": "A double representing the start of the time range, in seconds.", 
                "name": "start"
            }, 
            {
                "descr": "A double representing the end of the time range, in seconds.", 
                "name": "end"
            }
        ], 
        "path": "dom/sourcebuffer/remove", 
        "syntax": "remove()", 
        "type": "Media"
    }, 
    "SourceBuffer.textTracks": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.textTracks", 
        "params": [], 
        "path": "dom/sourcebuffer/texttracks", 
        "syntax": "textTracks read-only property of the SourceBuffer interface returns a list of the text tracks currently contained inside the SourceBuffer. Syntax var myTextTracks = sourceBuffer.textTracks; Value An TextTrackList object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'textTracks' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 23 25.0 (25.0)[1] 42.0 (42.0) 11[2] 15 8         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 4.4.4  Not supported", 
        "type": "Media"
    }, 
    "SourceBuffer.timestampOffset": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.timestampOffset", 
        "params": [], 
        "path": "dom/sourcebuffer/timestampoffset", 
        "syntax": "timestampOffset property of the SourceBuffer interface controls the offset applied to timestamps inside media segments that are appended to the SourceBuffer. The initial value of timestampOffset is 0. Syntax var myOffset = sourceBuffer.timestampOffset;sourceBuffer.timestampOffset = 2.5; Value A double, with the offset amount expressed in seconds. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidStateError One or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating", 
        "type": "Media"
    }, 
    "SourceBuffer.trackDefaults": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.trackDefaults", 
        "params": [], 
        "path": "dom/sourcebuffer/trackdefaults", 
        "syntax": "trackDefaults property of the SourceBuffer interface specifies the default values to use if kind, label, and/or language information is not available in the initialization segment of the media to be appended to the SourceBuffer. Syntax var myTrackDefaults = sourceBuffer.trackDefaults;sourceBuffer.trackDefaults = myTrackDefaultList; Value A TrackDefaultList object. Errors The following errors may be thrown when setting a new value for this property.    Error Explanation     InvalidStateError One or more of the SourceBuffer objects in MediaSource.sourceBuffers are being updated (i.e. their SourceBuffer.updating", 
        "type": "Media"
    }, 
    "SourceBuffer.updating": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.updating", 
        "params": [], 
        "path": "dom/sourcebuffer/updating", 
        "syntax": "updating read-only property of the SourceBuffer interface indicates whether the SourceBuffer is currently being updated \u2014 i.e. whether an SourceBuffer.appendBuffer()", 
        "type": "Media"
    }, 
    "SourceBuffer.videoTracks": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBuffer.videoTracks", 
        "params": [], 
        "path": "dom/sourcebuffer/videotracks", 
        "syntax": "videoTracks read-only property of the SourceBuffer interface returns a list of the video tracks currently contained inside the SourceBuffer. Syntax var myVideoTracks = sourceBuffer.videoTracks; Value An VideoTrackList object. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'videoTracks' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 23 25.0 (25.0)[1] 42.0 (42.0) 11[2] 15 8         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 4.4.4  Not supported", 
        "type": "Media"
    }, 
    "SourceBufferList": {
        "descr": "Draft This page is not complete.", 
        "name": "SourceBufferList", 
        "params": [
            {
                "descr": "Returns the number of SourceBuffer objects in the list.", 
                "name": "SourceBufferList.length Read only"
            }, 
            {
                "descr": "This getter allows the SourceBuffer objects in the list to be accessed with an array operator (i.e. ", 
                "name": "SourceBufferList.SourceBuffer()"
            }
        ], 
        "path": "dom/sourcebufferlist", 
        "syntax": "SourceBufferList interface represents a simple container list for multiple SourceBuffer objects. The source buffer list containing the SourceBuffers appended to a particular MediaSource can be retrieved using the MediaSource.sourceBuffers property. Properties Inherits properties from its parent interface, EventTarget.  SourceBufferList.length Read only  Returns the number of SourceBuffer objects in the list.    Methods Inherits properties from its parent interface, EventTarget.  SourceBufferList.SourceBuffer()", 
        "type": "Media"
    }, 
    "SourceBufferList.SourceBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SourceBufferList.SourceBuffer", 
        "params": [
            {
                "descr": "The index position of the SourceBuffer object you want to return.", 
                "name": "index"
            }
        ], 
        "path": "dom/sourcebufferlist/sourcebuffer", 
        "syntax": "SourceBuffer()", 
        "type": "Media"
    }, 
    "SourceBufferList.length": {
        "descr": "Draft This page is not complete.", 
        "name": "SourceBufferList.length", 
        "params": [], 
        "path": "dom/sourcebufferlist/length", 
        "syntax": "length read-only property of the SourceBufferList interface returns the number of SourceBuffer objects in the list. Syntax var myListLength = SourceBufferList.length; Value An unsigned long number. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'length' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 23 25.0 (25.0)[1] 42.0 (42.0) 11[2] 15 8         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support 4.4.4  Not supported", 
        "type": "Media"
    }, 
    "SpeechGrammar": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammar", 
        "params": [
            {
                "descr": "Creates a new SpeechGrammar object.", 
                "name": "SpeechGrammar.SpeechGrammar()"
            }, 
            {
                "descr": "Sets and returns a string containing the grammar from within in the SpeechGrammar object instance.", 
                "name": "SpeechGrammar.src"
            }, 
            {
                "descr": "Sets and returns the weight of the SpeechGrammar object.", 
                "name": "SpeechGrammar.weight Optional"
            }
        ], 
        "path": "dom/speechgrammar", 
        "syntax": "SpeechGrammar interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize. Grammar is defined using JSpeech Grammar Format (JSGF.) Other formats may also be supported in the future.", 
        "type": "Web Speech"
    }, 
    "SpeechGrammar.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammar.constructor", 
        "params": [], 
        "path": "dom/speechgrammar/speechgrammar", 
        "syntax": "SpeechGrammar constructor of the SpeechGrammar interface creates a new SpeechGrammar object instance. Syntax var mySpeechGrammar = new SpeechGrammar();", 
        "type": "Web Speech"
    }, 
    "SpeechGrammar.src": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammar.src", 
        "params": [], 
        "path": "dom/speechgrammar/src", 
        "syntax": "src property of the SpeechGrammar interface sets and returns a string containing the grammar from within in the SpeechGrammar object. Syntax var myGrammar = speechGrammarInstance.src; Value A DOMString representing the grammar. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;console.log(speechRecognitionList[0].src);\n or  // should return the same as the contents of the grammar variableconsole.log(speechRecognitionList[0].weight);\n or  // should return 1 - the same as the weight set in line 4.);", 
        "type": "Web Speech"
    }, 
    "SpeechGrammar.weight": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammar.weight", 
        "params": [], 
        "path": "dom/speechgrammar/weight", 
        "syntax": "weight property of the SpeechGrammar interface sets and returns the weight of the SpeechGrammar object. Syntax var myGrammarWeight = speechGrammarInstance.weight; Value A float representing the weight of the grammar, in the range 0.0\u20131.0. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;console.log(speechRecognitionList[0].src);\n or  // should return the same as the contents of the grammar variableconsole.log(speechRecognitionList[0].weight);\n or  // should return 1 - the same as the weight set in line 4.);", 
        "type": "Web Speech"
    }, 
    "SpeechGrammarList": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammarList", 
        "params": [
            {
                "descr": "Creates a new SpeechGrammarList object.", 
                "name": "SpeechGrammarList.SpeechGrammarList()"
            }, 
            {
                "descr": "Returns the number of SpeechGrammar objects contained in the SpeechGrammarList.", 
                "name": "SpeechGrammarList.length Read only"
            }, 
            {
                "descr": "Standard getter \u2014 allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax.", 
                "name": "SpeechGrammarList.item()"
            }, 
            {
                "descr": "Takes a grammar present at a specific URI and adds it to the SpeechGrammarList as a new SpeechGrammar object.", 
                "name": "SpeechGrammarList.addFromURI()"
            }, 
            {
                "descr": "Takes a grammar present in a specific DOMString within the code base (e.g. ", 
                "name": "SpeechGrammarList.addFromString()"
            }
        ], 
        "path": "dom/speechgrammarlist", 
        "syntax": "SpeechGrammarList interface of the Web Speech API represents a list of SpeechGrammar objects containing words or patterns of words that we want the recognition service to recognize. Grammar is defined using JSpeech Grammar Format (JSGF.) Other formats may also be supported in the future.", 
        "type": "Web Speech"
    }, 
    "SpeechGrammarList.addFromString": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammarList.addFromString", 
        "params": [
            {
                "descr": "A DOMString representing the grammar to be added.", 
                "name": "string"
            }, 
            {
                "descr": "A float representing the weight of the grammar relative to other grammars present in the SpeechGrammarList. ", 
                "name": "weight Optional"
            }
        ], 
        "path": "dom/speechgrammarlist/addfromstring", 
        "syntax": "addFromString()", 
        "type": "Web Speech"
    }, 
    "SpeechGrammarList.addFromURI": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammarList.addFromURI", 
        "params": [
            {
                "descr": "A DOMString representing the URI of the grammar to be added.", 
                "name": "src"
            }, 
            {
                "descr": "A float representing the weight of the grammar relative to other grammars present in the SpeechGrammarList. ", 
                "name": "weight Optional"
            }
        ], 
        "path": "dom/speechgrammarlist/addfromuri", 
        "syntax": "addFromURI()", 
        "type": "Web Speech"
    }, 
    "SpeechGrammarList.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammarList.constructor", 
        "params": [], 
        "path": "dom/speechgrammarlist/speechgrammarlist", 
        "syntax": "SpeechGrammarList()", 
        "type": "Web Speech"
    }, 
    "SpeechGrammarList.item": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammarList.item", 
        "params": [], 
        "path": "dom/speechgrammarlist/item", 
        "syntax": "item getter of the SpeechGrammarList interface is a standard getter \u2014 it allows individual SpeechGrammar objects to be retrieved from the SpeechGrammarList using array syntax. Syntax var myFirstGrammar = speechGrammarListInstance[0]; Returns A SpeechGrammar object. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;var myFirstGrammar = speechRecognitionList[0]; // var should contain the SpeechGrammar object created in line 4.);", 
        "type": "Web Speech"
    }, 
    "SpeechGrammarList.length": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechGrammarList.length", 
        "params": [], 
        "path": "dom/speechgrammarlist/length", 
        "syntax": "length read-only property of the SpeechGrammarList interface returns the number of SpeechGrammar objects contained in the SpeechGrammarList. Syntax var myListLength = speechGrammarListInstance.length; Value A number indicating the number of SpeechGrammar objects contained in the SpeechGrammarList. Examples var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;speechRecognitionList.length; // should return 1.);", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition", 
        "params": [
            {
                "descr": "Creates a new SpeechRecognition object.", 
                "name": "SpeechRecognition.SpeechRecognition()"
            }, 
            {
                "descr": "Returns and sets a collection of SpeechGrammar objects that represent the grammars that will be understood by the current SpeechRecognition.", 
                "name": "SpeechRecognition.grammars"
            }, 
            {
                "descr": "Returns and sets the language of the current SpeechRecognition. ", 
                "name": "SpeechRecognition.lang"
            }, 
            {
                "descr": "Controls whether continuous results are returned for each recognition, or only a single result. ", 
                "name": "SpeechRecognition.continuous"
            }, 
            {
                "descr": "Controls whether interim results should be returned (true) or not (false.) Interim results are results that are not yet final (e.g. ", 
                "name": "SpeechRecognition.interimResults"
            }, 
            {
                "descr": "Sets the maximum number of SpeechRecognitionAlternatives provided per result. ", 
                "name": "SpeechRecognition.maxAlternatives"
            }, 
            {
                "descr": "Specifies the location of the speech recognition service used by the current SpeechRecognition to handle the actual recognition. ", 
                "name": "SpeechRecognition.serviceURI"
            }, 
            {
                "descr": "Fired when the user agent has started to capture audio.", 
                "name": "SpeechRecognition.onaudiostart"
            }, 
            {
                "descr": "Fired when the user agent has finished capturing audio.", 
                "name": "SpeechRecognition.onaudioend"
            }, 
            {
                "descr": "Fired when the speech recognition service has disconnected.", 
                "name": "SpeechRecognition.onend"
            }, 
            {
                "descr": "Fired when a speech recognition error occurs.", 
                "name": "SpeechRecognition.onerror"
            }, 
            {
                "descr": "Fired when the speech recognition service returns a final result with no significant recognition. ", 
                "name": "SpeechRecognition.onnomatch"
            }, 
            {
                "descr": "Fired when the speech recognition service returns a result \u2014 a word or phrase has been positively recognized and this has been communicated back to the app.", 
                "name": "SpeechRecognition.onresult"
            }, 
            {
                "descr": "Fired when any sound \u2014 recognisable speech or not \u2014 has been detected.", 
                "name": "SpeechRecognition.onsoundstart"
            }, 
            {
                "descr": "Fired when any sound \u2014 recognisable speech or not \u2014 has stopped being detected.", 
                "name": "SpeechRecognition.onsoundend"
            }, 
            {
                "descr": "Fired when sound that is recognised by the speech recognition service as speech has been detected.", 
                "name": "SpeechRecognition.onspeechstart"
            }, 
            {
                "descr": "Fired when speech recognised by the speech recognition service has stopped being detected.", 
                "name": "SpeechRecognition.onspeechend"
            }, 
            {
                "descr": "Fired when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.", 
                "name": "SpeechRecognition.onstart"
            }, 
            {
                "descr": "Stops the speech recognition service from listening to incoming audio, and doesn't attempt to return a SpeechRecognitionResult.", 
                "name": "SpeechRecognition.abort()"
            }, 
            {
                "descr": "Starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition.", 
                "name": "SpeechRecognition.start()"
            }, 
            {
                "descr": "Stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far.", 
                "name": "SpeechRecognition.stop()"
            }
        ], 
        "path": "dom/speechrecognition", 
        "syntax": "SpeechRecognition interface of the Web Speech API is the controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service. Constructor  SpeechRecognition.SpeechRecognition()", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.abort": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.abort", 
        "params": [], 
        "path": "dom/speechrecognition/abort", 
        "syntax": "abort()", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.constructor", 
        "params": [], 
        "path": "dom/speechrecognition/speechrecognition", 
        "syntax": "SpeechRecognition()", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.continuous": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.continuous", 
        "params": [], 
        "path": "dom/speechrecognition/continuous", 
        "syntax": "continuous property of the SpeechRecognition interface controls whether continuous results are returned for each recognition, or only a single result. It defaults to single results (false.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.grammars": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.grammars", 
        "params": [], 
        "path": "dom/speechrecognition/grammars", 
        "syntax": "grammars property of the SpeechRecognition interface returns and sets a collection of SpeechGrammar objects that represent the grammars that will be understood by the current SpeechRecognition. Syntax var myGrammars = mySpeechRecognition.grammars;mySpeechRecognition.grammars = mySpeechGrammarList; Value A SpeechGrammarList containing the SpeechGrammar objects that represent your grammar for your app. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;//recognition.continuous = false;recognition.lang = 'en-US';recognition.interimResults = false;recognition.maxAlternatives = 1;...);", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.interimResults": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.interimResults", 
        "params": [], 
        "path": "dom/speechrecognition/interimresults", 
        "syntax": "interimResults property of the SpeechRecognition interface controls whether interim results should be returned (true) or not (false", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.lang": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.lang", 
        "params": [], 
        "path": "dom/speechrecognition/lang", 
        "syntax": "lang property of the SpeechRecognition interface returns and sets the language of the current SpeechRecognition. If not specified, this defaults to the HTML lang attribute value, or the user agent's language setting if that isn't set either. Syntax var myLang = mySpeechRecognition.lang;mySpeechRecognition.lang = 'en-US'; Value A DOMString representing the BCP 47 language tag for the current SpeechRecognition. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;//recognition.continuous = false;recognition.lang = 'en-US';recognition.interimResults = false;recognition.maxAlternatives = 1;...);", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.maxAlternatives": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.maxAlternatives", 
        "params": [], 
        "path": "dom/speechrecognition/maxalternatives", 
        "syntax": "maxAlternatives property of the SpeechRecognition interface sets the maximum number of SpeechRecognitionAlternatives provided per SpeechRecognitionResult. The default value is 1. Syntax var myMaxAlternativeNumber = mySpeechRecognition.maxAlternatives;mySpeechRecognition.maxAlternatives = 2; Value A number representing the maximum returned alternatives for each result. Examples This code is excerpted from our Speech color changer example. var grammar = '#JSGF V1.0; grammar colors; public <color> = aqua | azure | beige | bisque | black | blue | brown | chocolate | coral | crimson | cyan | fuchsia | ghostwhite | gold | goldenrod | gray | green | indigo | ivory | khaki | lavender | lime | linen | magenta | maroon | moccasin | navy | olive | orange | orchid | peru | pink | plum | purple | red | salmon | sienna | silver | snow | tan | teal | thistle | tomato | turquoise | violet | white | yellow ;'var recognition = new SpeechRecognition();\n or var speechRecognitionList = new SpeechGrammarList();\n or speechRecognitionList.addFromString(grammar, 1);\n or recognition.grammars = speechRecognitionList;//recognition.continuous = false;recognition.lang = 'en-US';recognition.interimResults = false;recognition.maxAlternatives = 1;...);", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onaudioend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onaudioend", 
        "params": [], 
        "path": "dom/speechrecognition/onaudioend", 
        "syntax": "onaudioend property of the SpeechRecognition interface represents an event handler that will run when the user agent has finished capturing audio (when the audioend event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onaudiostart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onaudiostart", 
        "params": [], 
        "path": "dom/speechrecognition/onaudiostart", 
        "syntax": "onaudiostart property of the SpeechRecognition interface represents an event handler that will run when the user agent has started to capture audio (when the audiostart event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onend", 
        "params": [], 
        "path": "dom/speechrecognition/onend", 
        "syntax": "onend property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has disconnected (when the end", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onerror", 
        "params": [], 
        "path": "dom/speechrecognition/onerror", 
        "syntax": "onerror property of the SpeechRecognition interface represents an event handler that will run when a speech recognition error occurs (when the error event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onnomatch": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onnomatch", 
        "params": [], 
        "path": "dom/speechrecognition/onnomatch", 
        "syntax": "onnomatch property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a final result with no significant recognition (when the nomatch event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onresult": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onresult", 
        "params": [], 
        "path": "dom/speechrecognition/onresult", 
        "syntax": "onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result \u2014 a word or phrase has been positively recognized and this has been communicated back to the app (when the result event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onsoundend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onsoundend", 
        "params": [], 
        "path": "dom/speechrecognition/onsoundend", 
        "syntax": "onsoundend property of the SpeechRecognition interface represents an event handler that will run when any sound \u2014 recognisable speech or not \u2014 has stopped being detected (when the soundend event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onsoundstart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onsoundstart", 
        "params": [], 
        "path": "dom/speechrecognition/onsoundstart", 
        "syntax": "onsoundstart property of the SpeechRecognition interface represents an event handler that will run when any sound \u2014 recognisable speech or not \u2014 has been detected (when the soundstart event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onspeechend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onspeechend", 
        "params": [], 
        "path": "dom/speechrecognition/onspeechend", 
        "syntax": "onspeechend property of the SpeechRecognition interface represents an event handler that will run when speech recognised by the speech recognition service has stopped being detected (when the speechend event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onspeechstart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onspeechstart", 
        "params": [], 
        "path": "dom/speechrecognition/onspeechstart", 
        "syntax": "onspeechstart property of the SpeechRecognition interface represents an event handler that will run when sound recognised by the speech recognition service as speech has been detected (when the speechstart event fires.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.onstart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.onstart", 
        "params": [], 
        "path": "dom/speechrecognition/onstart", 
        "syntax": "onstart property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service has begun listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition (when the start", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.serviceURI": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.serviceURI", 
        "params": [], 
        "path": "dom/speechrecognition/serviceuri", 
        "syntax": "serviceURI property of the SpeechRecognition interface specifies the location of the speech recognition service used by the current SpeechRecognition to handle the actual recognition. The default is the user agent's default speech service. Syntax var myServiceURI = mySpeechRecognition.serviceURI;mySpeechRecognition.serviceURI = 'path/to/my/service/'; Value A DOMString representing the URI of the speech recognition service. Examples var recognition = new SpeechRecognition();\n or recognition.speechURI = 'http://www.example.com';...);", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.start": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechRecognition.start", 
        "params": [], 
        "path": "dom/speechrecognition/start", 
        "syntax": "start()", 
        "type": "Web Speech"
    }, 
    "SpeechRecognition.stop": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognition.stop", 
        "params": [], 
        "path": "dom/speechrecognition/stop", 
        "syntax": "start()", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionAlternative": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionAlternative", 
        "params": [
            {
                "descr": "Returns a string containing the transcript of the recognised word.", 
                "name": "SpeechRecognitionAlternative.transcript Read only"
            }, 
            {
                "descr": "Returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.", 
                "name": "SpeechRecognitionAlternative.confidence Read only"
            }
        ], 
        "path": "dom/speechrecognitionalternative", 
        "syntax": "SpeechRecognitionAlternative interface of the Web Speech API represents a single word that has been recognised by the speech recognition service. Properties  SpeechRecognitionAlternative.transcript", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionAlternative.confidence": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionAlternative.confidence", 
        "params": [], 
        "path": "dom/speechrecognitionalternative/confidence", 
        "syntax": "confidence read-only property of the SpeechRecognitionResult interface returns a numeric estimate of how confident the speech recognition system is that the recognition is correct.  Note: Mozilla's implementation of confidence is still being worked on \u2014 at the moment, it always seems to return 1.  Syntax var myConfidence = speechRecognitionAlternativeInstance.confidence; Returns A number betwen 0 and 1. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) {\u00a0 // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object\u00a0 // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects.\u00a0 // It has a getter so it can be accessed like an array\u00a0 // The first [0] returns the SpeechRecognitionResult at position 0.\u00a0 // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results.\u00a0 // These also have getters so they can be accessed like arrays.\u00a0 // The second [0] returns the SpeechRecognitionAlternative at position 0.\u00a0 // We then return the transcript property of the SpeechRecognitionAlternative object\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;  console.log('Confidence: ' + event.results[0][0].confidence);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionAlternative.transcript": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionAlternative.transcript", 
        "params": [], 
        "path": "dom/speechrecognitionalternative/transcript", 
        "syntax": "transcript read-only property of the SpeechRecognitionResult interface returns a string containing the transcript of the recognised word(s).", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionError": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionError", 
        "params": [
            {
                "descr": "Returns the type of error raised.", 
                "name": "SpeechRecognitionError.error Read only"
            }, 
            {
                "descr": "Returns a message describing the error in more detail.", 
                "name": "SpeechRecognitionError.message Read only"
            }
        ], 
        "path": "dom/speechrecognitionerror", 
        "syntax": "SpeechRecognitionError interface of the Web Speech API represents error messages from the recognition service. Properties SpeechRecognitionError also inherits properties from its parent interface, Event.  SpeechRecognitionError.error Read only  Returns the type of error raised. SpeechRecognitionError.message Read only  Returns a message describing the error in more detail.  Examples var recognition = new SpeechRecognition();\n or recognition.onerror = function(event) {  console.log('Speech recognition error detected: ' + event.error);\n or   console.log('Additional information: ' + event.message);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionError.error": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionError.error", 
        "params": [
            {
                "descr": "No speech was detected.", 
                "name": "no-speech"
            }, 
            {
                "descr": "Speech input was aborted in some manner, perhaps by some user-agent-specific behavior like a button the user can press to cancel speech input.", 
                "name": "aborted"
            }, 
            {
                "descr": "Audio capture failed.", 
                "name": "audio-capture"
            }, 
            {
                "descr": "Network communication required for completing the recognition failed.", 
                "name": "network"
            }, 
            {
                "descr": "The user agent disallowed any speech input from occurring for reasons of security, privacy or user preference.", 
                "name": "not-allowed"
            }, 
            {
                "descr": "The user agent disallowed the requested speech recognition service, either because the user agent doesn't support it or because of reasons of security, privacy or user preference. ", 
                "name": "service-not-allowed"
            }, 
            {
                "descr": "There was an error in the speech recognition grammar or semantic tags, or the chosen grammar format or semantic tag format was unsupported.", 
                "name": "bad-grammar"
            }, 
            {
                "descr": "The language was not supported.", 
                "name": "language-not-supported"
            }
        ], 
        "path": "dom/speechrecognitionerror/error", 
        "syntax": "error read-only property of the SpeechRecognitionError interface returns the type of error raised. Syntax var myError = event.error; Value A DOMString naming the type of error. The possible error types are:  no-speech No speech was detected. aborted Speech input was aborted in some manner, perhaps by some user-agent-specific behavior like a button the user can press to cancel speech input. audio-capture Audio capture failed. network Network communication required for completing the recognition failed. not-allowed The user agent disallowed any speech input from occurring for reasons of security, privacy or user preference. service-not-allowed The user agent disallowed the requested speech recognition service, either because the user agent doesn't support it or because of reasons of security, privacy or user preference. In this case it would allow another more suitable speech recognition service to be used instead. bad-grammar There was an error in the speech recognition grammar or semantic tags, or the chosen grammar format or semantic tag format was unsupported. language-not-supported The language was not supported.  Examples var recognition = new SpeechRecognition();\n or recognition.onerror = function(event) {  console.log('Speech recognition error detected: ' + event.error);\n or   console.log('Additional information: ' + event.message);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionError.message": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionError.message", 
        "params": [], 
        "path": "dom/speechrecognitionerror/message", 
        "syntax": "message read-only property of the SpeechRecognitionError interface returns a message describing the error in more detail. Syntax var myErrorMsg = event.message; Value A DOMString containing more details about the error that was raised. Note that the spec does not define the exact wording of these messages \u2014 this is up to the implementors to decide upon. Examples var recognition = new SpeechRecognition();\n or recognition.onerror = function(event) {  console.log('Speech recognition error detected: ' + event.error);\n or   console.log('Additional information: ' + event.message);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechRecognitionEvent", 
        "params": [
            {
                "descr": "Returns an Extensible MultiModal Annotation markup language (EMMA) \u2014 XML \u2014 representation of the result.", 
                "name": "SpeechRecognitionEvent.emma Read only"
            }, 
            {
                "descr": "Returns the semantic meaning of what the user said.", 
                "name": "SpeechRecognitionEvent.interpretation Read only"
            }, 
            {
                "descr": "Returns the lowest index value result in the SpeechRecognitionResultList \"array\" that has actually changed.", 
                "name": "SpeechRecognitionEvent.resultIndex Read only"
            }, 
            {
                "descr": "Returns a SpeechRecognitionResultList object representing all the speech recognition results for the current session.", 
                "name": "SpeechRecognitionEvent.results Read only"
            }
        ], 
        "path": "dom/speechrecognitionevent", 
        "syntax": "SpeechRecognitionEvent interface of the Web Speech API represents the event object for the result and nomatch events, and contains all the data associated with an interim or final speech recognition result. Properties SpeechRecognitionEvent also inherits properties from its parent interface, Event.  SpeechRecognitionEvent.emma", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionEvent.emma": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionEvent.emma", 
        "params": [], 
        "path": "dom/speechrecognitionevent/emma", 
        "syntax": "emma read-only property of the SpeechRecognitionEvent interface returns an Extensible MultiModal Annotation markup language (EMMA) \u2014 XML \u2014 representation of the result.", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionEvent.interpretation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionEvent.interpretation", 
        "params": [], 
        "path": "dom/speechrecognitionevent/interpretation", 
        "syntax": "interpretation read-only property of the SpeechRecognitionEvent interface returns the semantic meaning of what the user said. This might be determined, for instance, through the SISR specification of semantics in a grammar (see Semantic Interpretation for Speech Recognition (SISR) Version 1.0 for specification and examples.)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionEvent.resultIndex": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionEvent.resultIndex", 
        "params": [], 
        "path": "dom/speechrecognitionevent/resultindex", 
        "syntax": "resultIndex read-only property of the SpeechRecognitionEvent interface returns the lowest index value result in the SpeechRecognitionResultList \"array\" that has actually changed. The SpeechRecognitionResultList object is not an array, but it has a getter that allows it to be accessed by array syntax. Syntax var myResultIndex = event.resultIndex; Value A number. Examples recognition.onresult = function(event) {\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;  console.log(event.resultIndex);\n or  // returns 0 if there is only one result});", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionEvent.results": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionEvent.results", 
        "params": [], 
        "path": "dom/speechrecognitionevent/results", 
        "syntax": "results read-only property of the SpeechRecognitionEvent interface returns a SpeechRecognitionResultList object representing all the speech recognition results for the current session. Specifically this object will contain all final results that have been returned, followed by the current best hypothesis for all interim results. When subsequent result events are fired, interim results may be overwritten by a newer interim result or by a final result \u2014 they may even be removed, if they are at the end of the \"results\" array and the array length decreases. Final results on the other hand will not be overwritten or removed. Syntax var myResults = event.results; Value A SpeechRecognitionResultList object. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) {\u00a0 // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object\u00a0 // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects.\u00a0 // It has a getter so it can be accessed like an array\u00a0 // The first [0] returns the SpeechRecognitionResult at position 0.\u00a0 // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results.\u00a0 // These also have getters so they can be accessed like arrays.\u00a0 // The second [0] returns the SpeechRecognitionAlternative at position 0.\u00a0 // We then return the transcript property of the SpeechRecognitionAlternative object\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;}", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResult": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResult", 
        "params": [
            {
                "descr": "A Boolean that states whether this result is final (true) or not (false) \u2014 if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.", 
                "name": "SpeechRecognitionResult.isFinal Read only"
            }, 
            {
                "descr": "Returns the length of the \"array\" \u2014 the number of SpeechRecognitionAlternative objects contained in the result (also referred to as \"n-best alternatives\".)", 
                "name": "SpeechRecognitionResult.length Read only"
            }, 
            {
                "descr": "A standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax.", 
                "name": "SpeechRecognitionResult.item"
            }
        ], 
        "path": "dom/speechrecognitionresult", 
        "syntax": "SpeechRecognitionResult interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects. Properties  SpeechRecognitionResult.isFinal", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResult.isFinal": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResult.isFinal", 
        "params": [], 
        "path": "dom/speechrecognitionresult/isfinal", 
        "syntax": "isFinal read-only property of the SpeechRecognitionResult interface is a Boolean that states whether this result is final (true) or not (false", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResult.item": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResult.item", 
        "params": [], 
        "path": "dom/speechrecognitionresult/item", 
        "syntax": "item getter of the SpeechRecognitionResult interface is a standard getter that allows SpeechRecognitionAlternative objects within the result to be accessed via array syntax. Syntax var myAlternative = speechRecognitionResultInstance[0]; Returns A SpeechRecognitionAlternative object. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) {\u00a0 // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object\u00a0 // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects.\u00a0 // It has a getter so it can be accessed like an array\u00a0 // The first [0] returns the SpeechRecognitionResult at position 0.\u00a0 // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results.\u00a0 // These also have getters so they can be accessed like arrays.\u00a0 // The second [0] returns the SpeechRecognitionAlternative at position 0.\u00a0 // We then return the transcript property of the SpeechRecognitionAlternative object\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;}", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResult.length": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResult.length", 
        "params": [], 
        "path": "dom/speechrecognitionresult/length", 
        "syntax": "length read-only property of the SpeechRecognitionResult interface returns the length of the \"array\" \u2014 the number of SpeechRecognitionAlternative objects contained in the result (also referred to as \"n-best alternatives\".)", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResultList": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResultList", 
        "params": [
            {
                "descr": "Returns the length of the \"array\" \u2014 the number of SpeechRecognitionResult objects in the list.", 
                "name": "SpeechRecognitionResultList.length Read only"
            }, 
            {
                "descr": "A standard getter that allows SpeechRecognitionResult objects in the list to be accessed via array syntax.", 
                "name": "SpeechRecognitionResultList.item"
            }
        ], 
        "path": "dom/speechrecognitionresultlist", 
        "syntax": "SpeechRecognitionResultList interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in continuous mode. Properties  SpeechRecognitionResultList.length Read only  Returns the length of the \"array\" \u2014 the number of SpeechRecognitionResult objects in the list.  Methods  SpeechRecognitionResultList.item A standard getter that allows SpeechRecognitionResult objects in the list to be accessed via array syntax.  Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) {\u00a0 // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object\u00a0 // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects.\u00a0 // It has a getter so it can be accessed like an array\u00a0 // The first [0] returns the SpeechRecognitionResult at position 0.\u00a0 // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results.\u00a0 // These also have getters so they can be accessed like arrays.\u00a0 // The second [0] returns the SpeechRecognitionAlternative at position 0.\u00a0 // We then return the transcript property of the SpeechRecognitionAlternative object\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;}", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResultList.item": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResultList.item", 
        "params": [], 
        "path": "dom/speechrecognitionresultlist/item", 
        "syntax": "item getter of the SpeechRecognitionResultList interface is a standard getter \u2014 it allows SpeechRecognitionResult objects in the list to be accessed via array syntax. Syntax var myResult = speechRecognitionResultListInstance[0]; Returns A SpeechRecognitionResult object. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) {\u00a0 // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object\u00a0 // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects.\u00a0 // It has a getter so it can be accessed like an array\u00a0 // The first [0] returns the SpeechRecognitionResult at position 0.\u00a0 // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results.\u00a0 // These also have getters so they can be accessed like arrays.\u00a0 // The second [0] returns the SpeechRecognitionAlternative at position 0.\u00a0 // We then return the transcript property of the SpeechRecognitionAlternative object\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;}", 
        "type": "Web Speech"
    }, 
    "SpeechRecognitionResultList.length": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "SpeechRecognitionResultList.length", 
        "params": [], 
        "path": "dom/speechrecognitionresultlist/length", 
        "syntax": "length read-only property of the SpeechRecognitionResultList interface returns the length of the \"array\" \u2014 the number of SpeechRecognitionResult objects in the list. Syntax var myLength = speechRecognitionResultListInstance.length; Returns A number. Examples This code is excerpted from our Speech color changer example. recognition.onresult = function(event) {\u00a0 // The SpeechRecognitionEvent results property returns a SpeechRecognitionResultList object\u00a0 // The SpeechRecognitionResultList object contains SpeechRecognitionResult objects.\u00a0 // It has a getter so it can be accessed like an array\u00a0 // The first [0] returns the SpeechRecognitionResult at position 0.\u00a0 // Each SpeechRecognitionResult object contains SpeechRecognitionAlternative objects that contain individual results.\u00a0 // These also have getters so they can be accessed like arrays.\u00a0 // The second [0] returns the SpeechRecognitionAlternative at position 0.\u00a0 // We then return the transcript property of the SpeechRecognitionAlternative object\u00a0 var color = event.results[0][0].transcript;\u00a0 diagnostic.textContent = 'Result received: ' + color + '.';\u00a0 bg.style.backgroundColor = color;  console.log(event.results.length);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis", 
        "params": [
            {
                "descr": "A Boolean that returns true if the SpeechSynthesis object is in a paused state.", 
                "name": "SpeechSynthesis.paused Read only"
            }, 
            {
                "descr": "A Boolean that returns true if the utterance queue contains as-yet-unspoken utterances.", 
                "name": "SpeechSynthesis.pending Read only"
            }, 
            {
                "descr": "A Boolean that returns true if an utterance is currently in the process of being spoken \u2014 even if SpeechSynthesis is in a paused state.", 
                "name": "SpeechSynthesis.speaking Read only"
            }, 
            {
                "descr": "Fired when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices() method has changed.", 
                "name": "SpeechSynthesis.onvoiceschanged"
            }, 
            {
                "descr": "Removes all utterances from the utterance queue.", 
                "name": "SpeechSynthesis.cancel()"
            }, 
            {
                "descr": "Returns a list of SpeechSynthesisVoice objects representing all the available voices on the current device.", 
                "name": "SpeechSynthesis.getVoices()"
            }, 
            {
                "descr": "Puts the SpeechSynthesis object into a paused state.", 
                "name": "SpeechSynthesis.pause()"
            }, 
            {
                "descr": "Puts the SpeechSynthesis object into a non-paused state: resumes it if it was already paused.", 
                "name": "SpeechSynthesis.resume()"
            }, 
            {
                "descr": "Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.", 
                "name": "SpeechSynthesis.speak()"
            }
        ], 
        "path": "dom/speechsynthesis", 
        "syntax": "SpeechSynthesis interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides. Properties SpeechSynthesis also inherits properties from its parent interface, EventTarget.  SpeechSynthesis.paused Read only  A Boolean that returns true if the SpeechSynthesis object is in a paused state. SpeechSynthesis.pending Read only  A Boolean that returns true if the utterance queue contains as-yet-unspoken utterances. SpeechSynthesis.speaking Read only  A Boolean that returns true if an utterance is currently in the process of being spoken \u2014 even if SpeechSynthesis is in a paused state.  Event handlers  SpeechSynthesis.onvoiceschanged", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.cancel": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.cancel", 
        "params": [], 
        "path": "dom/speechsynthesis/cancel", 
        "syntax": "cancel()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.getVoices": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.getVoices", 
        "params": [], 
        "path": "dom/speechsynthesis/getvoices", 
        "syntax": "getVoices()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.onvoiceschanged": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.onvoiceschanged", 
        "params": [], 
        "path": "dom/speechsynthesis/onvoiceschanged", 
        "syntax": "onvoiceschanged property of the SpeechSynthesis interface represents an event handler that will run when the list of SpeechSynthesisVoice objects that would be returned by the SpeechSynthesis.getVoices()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.pause": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.pause", 
        "params": [], 
        "path": "dom/speechsynthesis/pause", 
        "syntax": "pause()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.paused": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.paused", 
        "params": [], 
        "path": "dom/speechsynthesis/paused", 
        "syntax": "paused read-only property of the SpeechSynthesis interface is a Boolean that returns true if the SpeechSynthesis object is in a paused state, or false if not. It can be set to paused", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.pending": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.pending", 
        "params": [], 
        "path": "dom/speechsynthesis/pending", 
        "syntax": "pending read-only property of the SpeechSynthesis interface is a Boolean that returns true if the utterance queue contains as-yet-unspoken utterances. Syntax var amIPending = speechSynthesisInstance.pending; Value A Boolean. Examples var synth = window.speechSynthesis;var utterance1 = new SpeechSynthesisUtterance('How about we say this now? This is quite a long sentence to say.');\n or var utterance2 = new SpeechSynthesisUtterance('We should say another sentence too, just to be on the safe side.');\n or synth.speak(utterance1);\n or synth.speak(utterance2);\n or var amIPending = synth.pending; // will return true if utterance 1 is still being spoken and utterance 2 is in the queue);", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.resume": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.resume", 
        "params": [], 
        "path": "dom/speechsynthesis/resume", 
        "syntax": "resume()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.speak": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.speak", 
        "params": [
            {
                "descr": "A SpeechSynthesisUtterance object.", 
                "name": "utterance"
            }
        ], 
        "path": "dom/speechsynthesis/speak", 
        "syntax": "speak()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesis.speaking": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesis.speaking", 
        "params": [], 
        "path": "dom/speechsynthesis/speaking", 
        "syntax": "speaking read-only property of the SpeechSynthesis interface is a Boolean that returns true if an utterance is currently in the process of being spoken \u2014 even if SpeechSynthesis is in a paused", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisErrorEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisErrorEvent", 
        "params": [
            {
                "descr": "Returns an error code indicating what has gone wrong with a speech synthesis attempt.", 
                "name": "SpeechSynthesisErrorEvent.error Read only"
            }
        ], 
        "path": "dom/speechsynthesiserrorevent", 
        "syntax": "SpeechSynthesisErrorEvent interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisErrorEvent.error": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisErrorEvent.error", 
        "params": [
            {
                "descr": "A SpeechSynthesis.cancel method call caused the SpeechSynthesisUtterance to be removed from the queue before it had begun being spoken.", 
                "name": "canceled"
            }, 
            {
                "descr": "A SpeechSynthesis.cancel method call caused the SpeechSynthesisUtterance to be interrupted after it had begun being spoken and before it completed.", 
                "name": "interrupted"
            }, 
            {
                "descr": "The operation couldn't be completed at this time because the user-agent couldn't access the audio output device (for example, the user may need to correct this by closing another application.)", 
                "name": "audio-busy"
            }, 
            {
                "descr": "The operation couldn't be completed at this time because the user-agent couldn't identify an audio output device (for example, the user may need to connect a speaker or configure system settings.)", 
                "name": "audio-hardware"
            }, 
            {
                "descr": "The operation couldn't be completed at this time because some required network communication failed.", 
                "name": "network"
            }, 
            {
                "descr": "The operation couldn't be completed at this time because no synthesis engine was available (For example, the user may need to install or configure a synthesis engine.)", 
                "name": "synthesis-unavailable"
            }, 
            {
                "descr": "The operation failed because the synthesis engine raised an error.", 
                "name": "synthesis-failed"
            }, 
            {
                "descr": "No appropriate voice was available for the language set in SpeechSynthesisUtterance.lang.", 
                "name": "language-unavailable"
            }, 
            {
                "descr": "The voice set in SpeechSynthesisUtterance.voice was not available.", 
                "name": "voice-unavailable"
            }, 
            {
                "descr": "The contents of the SpeechSynthesisUtterance.text attribute was too long to synthesize.", 
                "name": "text-too-long"
            }, 
            {
                "descr": "The content of the SpeechSynthesisUtterance.rate, SpeechSynthesisUtterance.pitch or SpeechSynthesisUtterance.volume property was not valid.", 
                "name": "invalid-argument"
            }
        ], 
        "path": "dom/speechsynthesiserrorevent/error", 
        "syntax": "error property of the SpeechSynthesisErrorEvent interface returns an error code indicating what has gone wrong with a speech synthesis attempt. Syntax myError = event.error; Value A DOMString containing an error code. Possible codes are:  canceled A SpeechSynthesis.cancel", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisEvent", 
        "params": [
            {
                "descr": "Returns the index position of the character in the SpeechSynthesisUtterance.text that was being spoken when the event was triggered.", 
                "name": "SpeechSynthesisEvent.charIndex Read only"
            }, 
            {
                "descr": "Returns the elapsed time in milliseconds after the SpeechSynthesisUtterance.text started being spoken that the event was triggered at.", 
                "name": "SpeechSynthesisEvent.elapsedTime Read only"
            }, 
            {
                "descr": "Returns the name associated with certain types of events occuring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a mark event, or the type of boundary reached in the case of a boundary event.", 
                "name": "SpeechSynthesisEvent.name Read only"
            }, 
            {
                "descr": "Returns the SpeechSynthesisUtterance instance that the event was triggered on.", 
                "name": "SpeechSynthesisEvent.utterance Read only"
            }
        ], 
        "path": "dom/speechsynthesisevent", 
        "syntax": "SpeechSynthesisEvent interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisEvent.charIndex": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisEvent.charIndex", 
        "params": [], 
        "path": "dom/speechsynthesisevent/charindex", 
        "syntax": "charIndex read-only property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisEvent.elapsedTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisEvent.elapsedTime", 
        "params": [], 
        "path": "dom/speechsynthesisevent/elapsedtime", 
        "syntax": "elapsedTime read-only property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisEvent.name": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisEvent.name", 
        "params": [], 
        "path": "dom/speechsynthesisevent/name", 
        "syntax": "name read-only property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisEvent.utterance": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisEvent.utterance", 
        "params": [], 
        "path": "dom/speechsynthesisevent/utterance", 
        "syntax": "utterance read-only property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance", 
        "params": [
            {
                "descr": "Returns a new SpeechSynthesisUtterance object instance.", 
                "name": "SpeechSynthesisUtterance.SpeechSynthesisUtterance()"
            }, 
            {
                "descr": "Gets and sets the language of the utterance.", 
                "name": "SpeechSynthesisUtterance.lang"
            }, 
            {
                "descr": "Gets and sets the pitch at which the utterance will be spoken at.", 
                "name": "SpeechSynthesisUtterance.pitch"
            }, 
            {
                "descr": "Gets and sets the speed at which the utterance will be spoken at.", 
                "name": "SpeechSynthesisUtterance.rate"
            }, 
            {
                "descr": "Gets and sets the text that will be synthesised when the utterance is spoken.", 
                "name": "SpeechSynthesisUtterance.text"
            }, 
            {
                "descr": "Gets and sets the voice that will be used to speak the utterance.", 
                "name": "SpeechSynthesisUtterance.voice"
            }, 
            {
                "descr": "Gets and sets the volume that the utterance will be spoken at.", 
                "name": "SpeechSynthesisUtterance.volume"
            }, 
            {
                "descr": "Fired when the spoken utterance reaches a word or sentence boundary.", 
                "name": "SpeechSynthesisUtterance.onboundary"
            }, 
            {
                "descr": "Fired when the utterance has finished being spoken.", 
                "name": "SpeechSynthesisUtterance.onend"
            }, 
            {
                "descr": "Fired when an error occurs that prevents the utterance from being succesfully spoken.", 
                "name": "SpeechSynthesisUtterance.onerror"
            }, 
            {
                "descr": "Fired when the spoken utterance reaches a named SSML \"mark\" tag.", 
                "name": "SpeechSynthesisUtterance.onmark"
            }, 
            {
                "descr": "Fired when the utterance is paused part way through.", 
                "name": "SpeechSynthesisUtterance.onpause"
            }, 
            {
                "descr": "Fired when a paused utterance is resumed.", 
                "name": "SpeechSynthesisUtterance.onresume"
            }, 
            {
                "descr": "Fired when the utterance has begun to be spoken.", 
                "name": "SpeechSynthesisUtterance.onstart"
            }
        ], 
        "path": "dom/speechsynthesisutterance", 
        "syntax": "SpeechSynthesisUtterance interface of the Web Speech API represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. language, pitch and volume.)", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.constructor", 
        "params": [
            {
                "descr": "A DOMString containing the text that will be synthesised when the utterance is spoken..", 
                "name": "text"
            }
        ], 
        "path": "dom/speechsynthesisutterance/speechsynthesisutterance", 
        "syntax": "SpeechSynthesisUtterance()", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.lang": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.lang", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/lang", 
        "syntax": "lang property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onboundary": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onboundary", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onboundary", 
        "syntax": "onboundary property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onend": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onend", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onend", 
        "syntax": "onend property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onerror": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onerror", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onerror", 
        "syntax": "onerror property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onmark": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onmark", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onmark", 
        "syntax": "onmark property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onpause": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onpause", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onpause", 
        "syntax": "onpause property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onresume": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onresume", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onresume", 
        "syntax": "onresume property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.onstart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.onstart", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/onstart", 
        "syntax": "onstart property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.pitch": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.pitch", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/pitch", 
        "syntax": "pitch property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.rate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.rate", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/rate", 
        "syntax": "rate property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.text": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.text", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/text", 
        "syntax": "text property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.voice": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.voice", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/voice", 
        "syntax": "voice property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisUtterance.volume": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisUtterance.volume", 
        "params": [], 
        "path": "dom/speechsynthesisutterance/volume", 
        "syntax": "volume property of the SpeechSynthesisUtterance", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisVoice": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisVoice", 
        "params": [
            {
                "descr": "A Boolean indicating whether the voice is the default voice for the current app language (true), or not (false.)", 
                "name": "SpeechSynthesisVoice.default Read only"
            }, 
            {
                "descr": "Returns a BCP 47 language tag indicating the language of the voice.", 
                "name": "SpeechSynthesisVoice.lang Read only"
            }, 
            {
                "descr": "A Boolean indicating whether the voice is supplied by a local speech synthesizer service (true), or a remote speech synthesizer service (false.)", 
                "name": "SpeechSynthesisVoice.localService Read only"
            }, 
            {
                "descr": "Returns a human-readable name that represents the voice.", 
                "name": "SpeechSynthesisVoice.name Read only"
            }, 
            {
                "descr": "Returns the type of URI and location of the speech synthesis service for this voice.", 
                "name": "SpeechSynthesisVoice.voiceURI Read only"
            }
        ], 
        "path": "dom/speechsynthesisvoice", 
        "syntax": "SpeechSynthesisVoice interface of the Web Speech API represents a voice that the system supports. Every SpeechSynthesisVoice has its own relative speech service including information about language, name and URI. Properties  SpeechSynthesisVoice.default", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisVoice.default": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisVoice.default", 
        "params": [], 
        "path": "dom/speechsynthesisvoice/default", 
        "syntax": "default read-only property of the SpeechSynthesisVoice interface returns a Boolean indicating whether the voice is the default voice for the current app (true), or not (false", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisVoice.lang": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisVoice.lang", 
        "params": [], 
        "path": "dom/speechsynthesisvoice/lang", 
        "syntax": "lang read-only property of the SpeechSynthesisVoice interface returns a BCP 47 language tag indicating the language of the voice. Syntax var myLang = speechSynthesisVoiceInstance.lang; Value A DOMString representing the language of the device. Examples for(i = 0; i < voices.length ; i++) {  var option = document.createElement('option');\n or   option.textContent = voices[i].name + ' (' + voices[i].lang + ')';   if(voices[i].default) {    option.textContent += ' -- DEFAULT';  }  option.setAttribute('data-lang', voices[i].lang);\n or   option.setAttribute('data-name', voices[i].name);\n or   voiceSelect.appendChild(option);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisVoice.localService": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisVoice.localService", 
        "params": [], 
        "path": "dom/speechsynthesisvoice/localservice", 
        "syntax": "localService read-only property of the SpeechSynthesisVoice interface returns a Boolean indicating whether the voice is supplied by a local speech synthesizer service (true), or a remote speech synthesizer service (false", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisVoice.name": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisVoice.name", 
        "params": [], 
        "path": "dom/speechsynthesisvoice/name", 
        "syntax": "name read-only property of the SpeechSynthesisVoice interface returns a human-readable name that represents the voice. Syntax var voiceName = speechSynthesisVoiceInstance.name; Value A DOMString representing the name of the voice. Examples for(i = 0; i < voices.length ; i++) {  var option = document.createElement('option');\n or   option.textContent = voices[i].name + ' (' + voices[i].lang + ')';   if(voices[i].default) {    option.textContent += ' -- DEFAULT';  }  option.setAttribute('data-lang', voices[i].lang);\n or   option.setAttribute('data-name', voices[i].name);\n or   voiceSelect.appendChild(option);\n or });", 
        "type": "Web Speech"
    }, 
    "SpeechSynthesisVoice.voiceURI": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "SpeechSynthesisVoice.voiceURI", 
        "params": [], 
        "path": "dom/speechsynthesisvoice/voiceuri", 
        "syntax": "voiceURI read-only property of the SpeechSynthesisVoice interface returns the type of URI and location of the speech synthesis service for this voice. Syntax var myVoiceURI = speechSynthesisVoiceInstance.voiceURI; Value A DOMString representing the URI of the voice. This is a generic URI and can point to local or remote services, e.g. it could be a proprietary system URN or a a URL to a remote service. Examples for(i = 0; i < voices.length ; i++) {  var option = document.createElement('option');\n or   option.textContent = voices[i].name + ' (' + voices[i].lang + ')';   if(voices[i].default) {    option.textContent += ' -- DEFAULT';  }  console.log(voices[i].voiceURI);\n or   // On Mac, this returns URNs, for example 'urn:moz-tts:osx:com.apple.speech.synthesis.voice.daniel'  option.setAttribute('data-lang', voices[i].lang);\n or   option.setAttribute('data-name', voices[i].name);\n or   voiceSelect.appendChild(option);\n or }');", 
        "type": "Web Speech"
    }, 
    "Spread operator": {
        "descr": "The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) or multiple variables (for destructuring assignment) are expected.", 
        "name": "Spread operator", 
        "params": [], 
        "path": "javascript/operators/spread_operator", 
        "syntax": "myFunction(...iterableObj);", 
        "type": "Operators"
    }, 
    "StereoPannerNode.pan": {
        "descr": "The pan property of the StereoPannerNode interface is an a-rate AudioParam representing the amount of panning to apply. The value can range between -1 (full left pan) and 1 (full right pan).", 
        "name": "StereoPannerNode.pan", 
        "params": [], 
        "path": "dom/stereopannernode/pan", 
        "syntax": "var audioCtx = new AudioContext();\n or var panNode = audioCtx.createStereoPanner();\n or panNode.pan.value = -0.5;);", 
        "type": "Web Audio"
    }, 
    "Storage.clear": {
        "descr": "The clear() method of the Storage interface, when invoked, will empty all keys out of the storage.", 
        "name": "Storage.clear", 
        "params": [], 
        "path": "dom/storage/clear", 
        "syntax": "storage.clear();", 
        "type": "Web Storage"
    }, 
    "Storage.getItem": {
        "descr": "The getItem() method of the Storage interface, when passed a key name, will return that key's value.", 
        "name": "Storage.getItem", 
        "params": [
            {
                "descr": "A DOMString containing the name of the key you want to retrieve the value of.", 
                "name": "keyName"
            }
        ], 
        "path": "dom/storage/getitem", 
        "syntax": "var aValue = storage.getItem(keyName);", 
        "type": "Web Storage"
    }, 
    "Storage.key": {
        "descr": "The key() method of the Storage interface, when passed a number n, returns the name of the nth key in the storage. The order of keys is user-agent defined, so you should not rely on it.", 
        "name": "Storage.key", 
        "params": [
            {
                "descr": "An integer representing the number of the key you want to get the name of. ", 
                "name": "key"
            }
        ], 
        "path": "dom/storage/key", 
        "syntax": "var aKeyName = storage.key(key);", 
        "type": "Web Storage"
    }, 
    "Storage.length": {
        "descr": "The length read-only property of the Storage interface returns an integer representing the number of data items stored in the Storage object.", 
        "name": "Storage.length", 
        "params": [], 
        "path": "dom/storage/length", 
        "syntax": "var aLength = storage.length; Return value An integer Example The following function adds three data items to the local storage for the current domain, then returns the number of items in the storage: function populateStorage() {  localStorage.setItem('bgcolor', 'yellow');\n or   localStorage.setItem('font', 'Helvetica');\n or   localStorage.setItem('image', 'cats.png');\n or   localStorage.length; // should return 3});", 
        "type": "Web Storage"
    }, 
    "Storage.removeItem": {
        "descr": "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the storage.", 
        "name": "Storage.removeItem", 
        "params": [
            {
                "descr": "A DOMString containing the name of the key you want to remove.", 
                "name": "keyName"
            }
        ], 
        "path": "dom/storage/removeitem", 
        "syntax": "storage.removeItem(keyName);", 
        "type": "Web Storage"
    }, 
    "Storage.setItem": {
        "descr": "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the storage, or update that key's value if it already exists.", 
        "name": "Storage.setItem", 
        "params": [
            {
                "descr": "A DOMString containing the name of the key you want to create/update.", 
                "name": "keyName"
            }, 
            {
                "descr": "A DOMString containing the value you want to give the key you are creating/updating.", 
                "name": "keyValue"
            }
        ], 
        "path": "dom/storage/setitem", 
        "syntax": "storage.setItem(keyName, keyValue);", 
        "type": "Web Storage"
    }, 
    "Strict mode": {
        "descr": "ECMAScript 5's strict mode is a way to opt in to a restricted variant of JavaScript. Strict mode isn't just a subset: it intentionally has different semantics from normal code. Browsers not supporting strict mode will run strict mode code with different behavior from browsers that do, so don't rely on strict mode without feature-testing for support for the relevant aspects of strict mode. Strict mode code and non-strict mode code can coexist, so scripts can opt into strict mode incrementally.", 
        "name": "Strict mode", 
        "params": [], 
        "path": "javascript/strict_mode", 
        "syntax": "{} braces; attempting to apply it to such contexts does nothing. eval code, Function code, event handler attributes, strings passed to WindowTimers.setTimeout()", 
        "type": "Miscellaneous"
    }, 
    "Strict mode: Transitioning to strict mode": {
        "descr": "ECMAScript 5 introduced strict mode which is now implemented in all major browsers (including IE10). While making web browsers interpret code as strict is easy (just add \"use strict\"; at the top of your source code), transitioning an existing code base to strict mode requires a bit more work.", 
        "name": "Strict mode: Transitioning to strict mode", 
        "params": [], 
        "path": "javascript/strict_mode/transitioning_to_strict_mode", 
        "syntax": "\"use strict\";, the following cases will throw a SyntaxError before the script is executing:  Octal syntax var n = 023; with statement Using delete on a variable name delete myVariable; Using eval or arguments as variable or function argument name Using one of the newly reserved keywords (in prevision for ECMAScript 6): implements", 
        "type": "Miscellaneous"
    }, 
    "String": {
        "descr": "The String global object is a constructor for strings, or a sequence of characters.", 
        "name": "String", 
        "params": [
            {
                "descr": "Anything to be converted to a string.", 
                "name": "thing"
            }, 
            {
                "descr": "Allows the addition of properties to a String object.", 
                "name": "String.prototype"
            }, 
            {
                "descr": "Returns a string created by using the specified sequence of Unicode values.", 
                "name": "String.fromCharCode()"
            }, 
            {
                "descr": "Returns a string created by using the specified sequence of code points.", 
                "name": "String.fromCodePoint()"
            }, 
            {
                "descr": "Returns a string created from a raw template string.", 
                "name": "String.raw()"
            }, 
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "String.prototype.constructor"
            }, 
            {
                "descr": "Reflects the length of the string.", 
                "name": "String.prototype.length"
            }, 
            {
                "descr": "Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. ", 
                "name": "N"
            }, 
            {
                "descr": "Returns the character at the specified index.", 
                "name": "String.prototype.charAt()"
            }, 
            {
                "descr": "Returns a number indicating the Unicode value of the character at the given index.", 
                "name": "String.prototype.charCodeAt()"
            }, 
            {
                "descr": "Returns a non-negative integer that is the UTF-16 encoded code point value at the given position.", 
                "name": "String.prototype.codePointAt()"
            }, 
            {
                "descr": "Combines the text of two strings and returns a new string.", 
                "name": "String.prototype.concat()"
            }, 
            {
                "descr": "Determines whether one string may be found within another string.", 
                "name": "String.prototype.includes()"
            }, 
            {
                "descr": "Determines whether a string ends with the characters of another string.", 
                "name": "String.prototype.endsWith()"
            }, 
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.", 
                "name": "String.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.", 
                "name": "String.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
                "name": "String.prototype.localeCompare()"
            }, 
            {
                "descr": "Used to match a regular expression against a string.", 
                "name": "String.prototype.match()"
            }, 
            {
                "descr": "Returns the Unicode Normalization Form of the calling string value.", 
                "name": "String.prototype.normalize()"
            }, 
            {
                "descr": "Pads the current string from the end with a given string to create a new string from a given length.", 
                "name": "String.prototype.padEnd()"
            }, 
            {
                "descr": "Pads the current string from the start with a given string to create a new string from a given length.", 
                "name": "String.prototype.padStart()"
            }, 
            {
                "descr": "Wraps the string in double quotes (\"\"\").", 
                "name": "String.prototype.quote()"
            }, 
            {
                "descr": "Returns a string consisting of the elements of the object repeated the given times.", 
                "name": "String.prototype.repeat()"
            }, 
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.", 
                "name": "String.prototype.replace()"
            }, 
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.", 
                "name": "String.prototype.search()"
            }, 
            {
                "descr": "Extracts a section of a string and returns a new string.", 
                "name": "String.prototype.slice()"
            }, 
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
                "name": "String.prototype.split()"
            }, 
            {
                "descr": "Determines whether a string begins with the characters of another string.", 
                "name": "String.prototype.startsWith()"
            }, 
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
                "name": "String.prototype.substr()"
            }, 
            {
                "descr": "Returns the characters in a string between two indexes into the string.", 
                "name": "String.prototype.substring()"
            }, 
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ", 
                "name": "String.prototype.toLocaleLowerCase()"
            }, 
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ", 
                "name": "String.prototype.toLocaleUpperCase()"
            }, 
            {
                "descr": "Returns the calling string value converted to lower case.", 
                "name": "String.prototype.toLowerCase()"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "String.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "String.prototype.toString()"
            }, 
            {
                "descr": "Returns the calling string value converted to uppercase.", 
                "name": "String.prototype.toUpperCase()"
            }, 
            {
                "descr": "Trims whitespace from the beginning and end of the string. ", 
                "name": "String.prototype.trim()"
            }, 
            {
                "descr": "Trims whitespace from the left side of the string.", 
                "name": "String.prototype.trimLeft()"
            }, 
            {
                "descr": "Trims whitespace from the right side of the string.", 
                "name": "String.prototype.trimRight()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "String.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.", 
                "name": "String.prototype[@@iterator]()"
            }, 
            {
                "descr": "<a name=\"name\"> (hypertext target)", 
                "name": "String.prototype.anchor()"
            }, 
            {
                "descr": "<big>", 
                "name": "String.prototype.big()"
            }, 
            {
                "descr": "<blink>", 
                "name": "String.prototype.blink()"
            }, 
            {
                "descr": "<b>", 
                "name": "String.prototype.bold()"
            }, 
            {
                "descr": "<tt>", 
                "name": "String.prototype.fixed()"
            }, 
            {
                "descr": "<font color=\"color\">", 
                "name": "String.prototype.fontcolor()"
            }, 
            {
                "descr": "<font size=\"size\">", 
                "name": "String.prototype.fontsize()"
            }, 
            {
                "descr": "<i>", 
                "name": "String.prototype.italics()"
            }, 
            {
                "descr": "<a href=\"url\"> (link to URL)", 
                "name": "String.prototype.link()"
            }, 
            {
                "descr": "<small>", 
                "name": "String.prototype.small()"
            }, 
            {
                "descr": "<strike>", 
                "name": "String.prototype.strike()"
            }, 
            {
                "descr": "<sub>", 
                "name": "String.prototype.sub()"
            }, 
            {
                "descr": "<sup>", 
                "name": "String.prototype.sup()"
            }
        ], 
        "path": "javascript/global_objects/string", 
        "syntax": "'string text'\"string text\"\"\u4e2d\u6587 espa\u00f1ol deutsch English \u0939\u093f\u0928\u094d\u0926\u0940 \u0627\u0644\u0639\u0631\u0628\u064a\u0629 portugu\u00eas \u09ac\u09be\u0982\u09b2\u09be \u0440\u0443\u0441\u0441\u043a\u0438\u0439 \u65e5\u672c\u8a9e \u0a2a\u0a70\u0a1c\u0a3e\u0a2c\u0a40 \ud55c\uad6d\uc5b4 \u0ba4\u0bae\u0bbf\u0bb4\u0bcd\" Strings can also be created using the String global object directly: String(thing)", 
        "type": "String"
    }, 
    "String Operators": {
        "descr": "Arithmetic operators take numerical values (either literals or variables) as their operands and return a single numerical value. The standard arithmetic operators are addition (+), subtraction (-), multiplication (*), and division (/).", 
        "name": "String Operators", 
        "params": [], 
        "path": "javascript/operators/string_operators", 
        "syntax": "Operator: x + y Examples // Number + Number -> addition1 + 2 // 3// Boolean + Number -> additiontrue + 1 // 2// Boolean + Boolean -> additionfalse + false // 0// Number + String -> concatenation5 + \"foo\" // \"5foo\"// String + Boolean -> concatenation\"foo\" + false // \"foofalse\"// String + String -> concatenation\"foo\" + \"bar\" // \"foobar\" Subtraction (-)", 
        "type": "Operators"
    }, 
    "String.fromCharCode": {
        "descr": "The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.", 
        "name": "String.fromCharCode", 
        "params": [
            {
                "descr": "A sequence of numbers that are Unicode values.", 
                "name": "num1, ..., numN"
            }
        ], 
        "path": "javascript/global_objects/string/fromcharcode", 
        "syntax": "String.fromCharCode(num1[, ...[, numN]])", 
        "type": "String"
    }, 
    "String.fromCodePoint": {
        "descr": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.", 
        "name": "String.fromCodePoint", 
        "params": [
            {
                "descr": "A sequence of code points.", 
                "name": "num1, ..., numN"
            }
        ], 
        "path": "javascript/global_objects/string/fromcodepoint", 
        "syntax": "String.fromCodePoint(num1[, ...[, numN]])", 
        "type": "String"
    }, 
    "String.prototype": {
        "descr": "The String.prototype property represents the String prototype object.", 
        "name": "String.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "String.prototype.constructor"
            }, 
            {
                "descr": "Reflects the length of the string.", 
                "name": "String.prototype.length"
            }, 
            {
                "descr": "Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. ", 
                "name": "N"
            }, 
            {
                "descr": "Returns the character at the specified index.", 
                "name": "String.prototype.charAt()"
            }, 
            {
                "descr": "Returns a number indicating the Unicode value of the character at the given index.", 
                "name": "String.prototype.charCodeAt()"
            }, 
            {
                "descr": "Returns a non-negative integer that is the UTF-16 encoded code point value at the given position.", 
                "name": "String.prototype.codePointAt()"
            }, 
            {
                "descr": "Combines the text of two strings and returns a new string.", 
                "name": "String.prototype.concat()"
            }, 
            {
                "descr": "Determines whether one string may be found within another string.", 
                "name": "String.prototype.includes()"
            }, 
            {
                "descr": "Determines whether a string ends with the characters of another string.", 
                "name": "String.prototype.endsWith()"
            }, 
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.", 
                "name": "String.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.", 
                "name": "String.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
                "name": "String.prototype.localeCompare()"
            }, 
            {
                "descr": "Used to match a regular expression against a string.", 
                "name": "String.prototype.match()"
            }, 
            {
                "descr": "Returns the Unicode Normalization Form of the calling string value.", 
                "name": "String.prototype.normalize()"
            }, 
            {
                "descr": "Pads the current string from the end with a given string to create a new string from a given length.", 
                "name": "String.prototype.padEnd()"
            }, 
            {
                "descr": "Pads the current string from the start with a given string to create a new string from a given length.", 
                "name": "String.prototype.padStart()"
            }, 
            {
                "descr": "Wraps the string in double quotes (\"\"\").", 
                "name": "String.prototype.quote()"
            }, 
            {
                "descr": "Returns a string consisting of the elements of the object repeated the given times.", 
                "name": "String.prototype.repeat()"
            }, 
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.", 
                "name": "String.prototype.replace()"
            }, 
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.", 
                "name": "String.prototype.search()"
            }, 
            {
                "descr": "Extracts a section of a string and returns a new string.", 
                "name": "String.prototype.slice()"
            }, 
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
                "name": "String.prototype.split()"
            }, 
            {
                "descr": "Determines whether a string begins with the characters of another string.", 
                "name": "String.prototype.startsWith()"
            }, 
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
                "name": "String.prototype.substr()"
            }, 
            {
                "descr": "Returns the characters in a string between two indexes into the string.", 
                "name": "String.prototype.substring()"
            }, 
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ", 
                "name": "String.prototype.toLocaleLowerCase()"
            }, 
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ", 
                "name": "String.prototype.toLocaleUpperCase()"
            }, 
            {
                "descr": "Returns the calling string value converted to lower case.", 
                "name": "String.prototype.toLowerCase()"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "String.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "String.prototype.toString()"
            }, 
            {
                "descr": "Returns the calling string value converted to uppercase.", 
                "name": "String.prototype.toUpperCase()"
            }, 
            {
                "descr": "Trims whitespace from the beginning and end of the string. ", 
                "name": "String.prototype.trim()"
            }, 
            {
                "descr": "Trims whitespace from the left side of the string.", 
                "name": "String.prototype.trimLeft()"
            }, 
            {
                "descr": "Trims whitespace from the right side of the string.", 
                "name": "String.prototype.trimRight()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "String.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.", 
                "name": "String.prototype[@@iterator]()"
            }, 
            {
                "descr": "<a name=\"name\"> (hypertext target)", 
                "name": "String.prototype.anchor()"
            }, 
            {
                "descr": "<big>", 
                "name": "String.prototype.big()"
            }, 
            {
                "descr": "<blink>", 
                "name": "String.prototype.blink()"
            }, 
            {
                "descr": "<b>", 
                "name": "String.prototype.bold()"
            }, 
            {
                "descr": "<tt>", 
                "name": "String.prototype.fixed()"
            }, 
            {
                "descr": "<font color=\"color\">", 
                "name": "String.prototype.fontcolor()"
            }, 
            {
                "descr": "<font size=\"size\">", 
                "name": "String.prototype.fontsize()"
            }, 
            {
                "descr": "<i>", 
                "name": "String.prototype.italics()"
            }, 
            {
                "descr": "<a href=\"url\"> (link to URL)", 
                "name": "String.prototype.link()"
            }, 
            {
                "descr": "<small>", 
                "name": "String.prototype.small()"
            }, 
            {
                "descr": "<strike>", 
                "name": "String.prototype.strike()"
            }, 
            {
                "descr": "<sub>", 
                "name": "String.prototype.sub()"
            }, 
            {
                "descr": "<sup>", 
                "name": "String.prototype.sup()"
            }
        ], 
        "path": "javascript/global_objects/string/prototype", 
        "syntax": "String.prototype.slice()", 
        "type": "String"
    }, 
    "String.raw": {
        "descr": "The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings (that is, the original, uninterpreted text).", 
        "name": "String.raw", 
        "params": [
            {
                "descr": "Well-formed template call site object, like { raw: 'string' }.", 
                "name": "callSite"
            }, 
            {
                "descr": "Contains substitution values.", 
                "name": "...substitutions"
            }, 
            {
                "descr": "A template string, optionally with substitutions (${...}).", 
                "name": "templateString"
            }, 
            {
                "descr": "A TypeError is thrown if the first argument is not a well formed object.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/string/raw", 
        "syntax": "String.raw(callSite, ...substitutions)String.raw`templateString`", 
        "type": "String"
    }, 
    "StyleSheet.disabled": {
        "descr": "The StyleSheet.disabled property indicates whether the style sheet is prevented from applying to the document. A style sheet may be disabled by manually setting this property to true or if it's an inactive alternative style sheet. Note that disabled == false does not guarantee the style sheet is applied (it could be removed from the document, for instance).", 
        "name": "StyleSheet.disabled", 
        "params": [], 
        "path": "dom/stylesheet/disabled", 
        "syntax": "bool = stylesheet.disabled  Example // if the stylesheet is disabled... if (stylesheet.disabled) {   // apply style in-line }", 
        "type": "CSS"
    }, 
    "StyleSheet.href": {
        "descr": "Returns the location of the stylesheet.", 
        "name": "StyleSheet.href", 
        "params": [], 
        "path": "dom/stylesheet/href", 
        "syntax": "uri = stylesheet.href  Parameters  uri is a string containing the stylesheet's URI.  Example  // on a local machine:  <html>   <head>    <link rel=\"StyleSheet\" href=\"example.css\" type=\"text/css\" />    <script>     function sref() {      alert(document.styleSheets[0].href);\n or      }   </script>   </head>   <body>    <div class=\"thunder\">Thunder</div>   <button onclick=\"sref()\">ss</button>  </body>  </html>// returns \"file:////C:/Windows/Desktop/example.css);", 
        "type": "CSS"
    }, 
    "StyleSheet.ownerNode": {
        "descr": "ownerNode returns the node that associates this style sheet with the document.", 
        "name": "StyleSheet.ownerNode", 
        "params": [], 
        "path": "dom/stylesheet/ownernode", 
        "syntax": "objRef = stylesheet.ownerNode  Example <html> <head>  <link rel=\"StyleSheet\" href=\"example.css\" type=\"text/css\" />  <script>   function stilo() {    alert(document.styleSheets[0].ownerNode);\n or    }  </script>  </head> <body>   <button onclick=\"stilo()\">ss</button> </body></html>// displays \"object HTMLLinkElement\");", 
        "type": "CSS"
    }, 
    "StyleSheet.parentStyleSheet": {
        "descr": "Returns the stylesheet that is including this one, if any.", 
        "name": "StyleSheet.parentStyleSheet", 
        "params": [], 
        "path": "dom/stylesheet/parentstylesheet", 
        "syntax": "objRef = stylesheet.parentStyleSheet  Example // find the top level stylesheetif (stylesheet.parentStyleSheet) {    sheet = stylesheet.parentStyleSheet;} else {    sheet = stylesheet;}", 
        "type": "CSS"
    }, 
    "SubtleCrypto.decrypt": {
        "descr": "The SubtleCrypto.decrypt() method returns a Promise of the cleartext corresponding to the ciphertext, algorithm and key given as parameters.", 
        "name": "SubtleCrypto.decrypt", 
        "params": [], 
        "path": "dom/subtlecrypto/decrypt", 
        "syntax": "var result = crypto.decrypt(algo, key, ciphertext);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.deriveKey": {
        "descr": "The SubtleCrypto.deriveKey() method returns a Promise of a newly generated CryptoKey derivated from a master key and a specific algorithm given as parameters.", 
        "name": "SubtleCrypto.deriveKey", 
        "params": [], 
        "path": "dom/subtlecrypto/derivekey", 
        "syntax": "var result = crypto.deriveKey(algo, masterKey, derivedKeyAlgo, extractable, keyUsages);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.digest": {
        "descr": "The SubtleCrypto.digest() method returns a Promise of a digest generated from the hash function and text given as parameters.", 
        "name": "SubtleCrypto.digest", 
        "params": [], 
        "path": "dom/subtlecrypto/digest", 
        "syntax": "var hash = crypto.subtle.digest(algo, buffer);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.encrypt": {
        "descr": "The SubtleCrypto.encrypt() method returns a Promise of the encrypted data corresponding to the cleartext, algorithm and key given as parameters.", 
        "name": "SubtleCrypto.encrypt", 
        "params": [], 
        "path": "dom/subtlecrypto/encrypt", 
        "syntax": "var result = crypto.encrypt(algo, key, cleartext);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.exportKey": {
        "descr": "The SubtleCrypto.exportKey() method returns a Promise of the key encrypted in the requested format. If the key is not extractable, that is if CryptoKey.extractable returns false, the promise fails with an InvalidAccessError exception; it the format is unknown, the promive fails with a NotSupported exception.", 
        "name": "SubtleCrypto.exportKey", 
        "params": [], 
        "path": "dom/subtlecrypto/exportkey", 
        "syntax": "var result = crypto.exportKey(format, key);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.generateKey": {
        "descr": "The SubtleCrypto.generateKey() method returns a Promise of a newly generated CryptoKey, for symmetrical algorithms, or a CryptoKeyPair, containing two newly generated keys, for asymmetrical algorithm, that matches the algorithm, the usages and the extractability given as parameters.", 
        "name": "SubtleCrypto.generateKey", 
        "params": [], 
        "path": "dom/subtlecrypto/generatekey", 
        "syntax": "var result = crypto.generateKey(algo, extractable, keyUsages);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.importKey": {
        "descr": "The SubtleCrypto.importKey() method returns a Promise of the CryptoKey generated from the data given in parameters.", 
        "name": "SubtleCrypto.importKey", 
        "params": [], 
        "path": "dom/subtlecrypto/importkey", 
        "syntax": "var result = crypto.importKey(format, keyData, algo, extractable, usages);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.sign": {
        "descr": "The SubtleCrypto.sign() method returns a Promise containing the signature corresponding to the text, algorithm and key given as parameters.", 
        "name": "SubtleCrypto.sign", 
        "params": [], 
        "path": "dom/subtlecrypto/sign", 
        "syntax": "var signature = crypto.sign(algo, key, text2sign);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.unwrapKey": {
        "descr": "The SubtleCrypto.unwrapKey() method returns a Promise of a CryptoKey corresponding to the wrapped key given in parameter.", 
        "name": "SubtleCrypto.unwrapKey", 
        "params": [], 
        "path": "dom/subtlecrypto/unwrapkey", 
        "syntax": "var result = crypto.unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgo, unwrappedKeyAlgo, extractable, keyUsages);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.verify": {
        "descr": "The SubtleCrypto.verify() method returns a Promise of a Boolean value indicating if the signature given as parameter matches the text, algorithm and key also given as parameters.", 
        "name": "SubtleCrypto.verify", 
        "params": [], 
        "path": "dom/subtlecrypto/verify", 
        "syntax": "var result = crypto.verify(algo, key, signature, text2verify);", 
        "type": "Web Cryptography"
    }, 
    "SubtleCrypto.wrapKey": {
        "descr": "The SubtleCrypto.wrapKey() method returns a Promise of a wrapped symmetric key for usage (transfer, storage) in unsecure environments. The wrapped buffer returned is in the format given in parameters, and contained the key wrapped by the give wrapping key with the given algorithm.", 
        "name": "SubtleCrypto.wrapKey", 
        "params": [], 
        "path": "dom/subtlecrypto/wrapkey", 
        "syntax": "var result = crypto.wrapKey(format, key, wrappingKey, wrapAlgo);", 
        "type": "Web Cryptography"
    }, 
    "Symbol": {
        "descr": "A symbol is a unique and immutable data type and may be used as an identifier for object properties. The Symbol object is an implicit object wrapper for the symbol primitive data type.", 
        "name": "Symbol", 
        "params": [
            {
                "descr": "Optional, string. A description of the symbol which can be used for debugging but not to access the symbol itself.", 
                "name": "description Optional"
            }, 
            {
                "descr": "Length property whose value is 0.", 
                "name": "Symbol.length"
            }, 
            {
                "descr": "Represents the prototype for the Symbol constructor.", 
                "name": "Symbol.prototype"
            }, 
            {
                "descr": "A method returning the default iterator for an object. ", 
                "name": "Symbol.iterator"
            }, 
            {
                "descr": "A method that matches against a string, also used to determine if an object may be used as a regular expression. ", 
                "name": "Symbol.match"
            }, 
            {
                "descr": "A method that replaces matched substrings of a string. ", 
                "name": "Symbol.replace"
            }, 
            {
                "descr": "A method that returns the index within a string that matches the regular expression. ", 
                "name": "Symbol.search"
            }, 
            {
                "descr": "A method that splits a string at the indices that match a regular expression. ", 
                "name": "Symbol.split"
            }, 
            {
                "descr": "A method determining if a constructor object recognizes an object as its instance. ", 
                "name": "Symbol.hasInstance"
            }, 
            {
                "descr": "A Boolean value indicating if an object should be flattened to its array elements. ", 
                "name": "Symbol.isConcatSpreadable"
            }, 
            {
                "descr": "An object value of whose own and inherited property names are excluded from the with environment bindings of the associated object.", 
                "name": "Symbol.unscopables"
            }, 
            {
                "descr": "A constructor function that is used to create derived objects.", 
                "name": "Symbol.species"
            }, 
            {
                "descr": "A method converting an object to a primitive value.", 
                "name": "Symbol.toPrimitive"
            }, 
            {
                "descr": "A string value used for the default description of an object. ", 
                "name": "Symbol.toStringTag"
            }, 
            {
                "descr": "Searches for existing symbols with the given key and returns it if found. ", 
                "name": "Symbol.for(key)"
            }, 
            {
                "descr": "Retrieves a shared symbol key from the global symbol registry for the given symbol.", 
                "name": "Symbol.keyFor(sym)"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Symbol.prototype.constructor"
            }, 
            {
                "descr": "Returns a string containing the source of the Symbol object. ", 
                "name": "Symbol.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string of containing the description of the Symbol. ", 
                "name": "Symbol.prototype.toString()"
            }, 
            {
                "descr": "Returns the primitive value of the Symbol object. ", 
                "name": "Symbol.prototype.valueOf()"
            }, 
            {
                "descr": "Returns the primitive value of the Symbol object.", 
                "name": "Symbol.prototype[@@toPrimitive]"
            }
        ], 
        "path": "javascript/global_objects/symbol", 
        "syntax": "Symbol([description])", 
        "type": "Symbol"
    }, 
    "Symbol.for": {
        "descr": "The Symbol.for(key) method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.", 
        "name": "Symbol.for", 
        "params": [
            {
                "descr": "String, required. The key for the symbol (and also used for the description of the symbol).", 
                "name": "key"
            }
        ], 
        "path": "javascript/global_objects/symbol/for", 
        "syntax": "Symbol.for(key);", 
        "type": "Symbol"
    }, 
    "Symbol.keyFor": {
        "descr": "The Symbol.keyFor(sym) method retrieves a shared symbol key from the global symbol registry for the given symbol.", 
        "name": "Symbol.keyFor", 
        "params": [
            {
                "descr": "Symbol, required. The symbol to find a key for.", 
                "name": "sym"
            }
        ], 
        "path": "javascript/global_objects/symbol/keyfor", 
        "syntax": "Symbol.keyFor(sym);", 
        "type": "Symbol"
    }, 
    "SyntaxError": {
        "descr": "The SyntaxError object represents an error when trying to interpret syntactically invalid code.", 
        "name": "SyntaxError", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to a SyntaxError object.", 
                "name": "SyntaxError.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "SyntaxError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "SyntaxError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "SyntaxError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "SyntaxError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "SyntaxError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "SyntaxError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "SyntaxError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/syntaxerror", 
        "syntax": "SyntaxError object represents an error when trying to interpret syntactically invalid code. Description A SyntaxError is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code. Syntax new SyntaxError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "SyntaxError.prototype": {
        "descr": "The SyntaxError.prototype property represents the prototype for the SyntaxError constructor.", 
        "name": "SyntaxError.prototype", 
        "params": [
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "SyntaxError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "SyntaxError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "SyntaxError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "SyntaxError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "SyntaxError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "SyntaxError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "SyntaxError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/syntaxerror/prototype", 
        "syntax": "SyntaxError.prototype property represents the prototype for the SyntaxError constructor. Description All SyntaxError instances inherit from SyntaxError.prototype. You can use the prototype to add properties or methods to all instances. Properties  SyntaxError.prototype.constructor Specifies the function that created an instance's prototype. SyntaxError.prototype.message Error message. Although ECMA-262 specifies that SyntaxError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message. SyntaxError.prototype.name Error name. Inherited from Error. SyntaxError.prototype.fileName Path to file that raised this error. Inherited from Error. SyntaxError.prototype.lineNumber Line number in file that raised this error. Inherited from Error. SyntaxError.prototype.columnNumber Column number in line that raised this error. Inherited from Error. SyntaxError.prototype.stack Stack trace. Inherited from Error.  Methods Although the SyntaxError prototype object does not contain any methods of its own, SyntaxError instances do inherit some methods through the prototype chain. Specifications    Specification Status Comment   ECMAScript 3rd Edition (ECMA-262) Standard Initial definition.   ECMAScript 5.1 (ECMA-262)The definition of 'NativeError.prototype' in that specification. Standard Defined as NativeError.prototype", 
        "type": "Errors"
    }, 
    "Template literals": {
        "descr": "Template literals are string literals allowing embedded expressions. You can use multi-line strings and string interpolation features with them. They were called \"template strings\" in prior editions of the ES2015 / ES6 specification.", 
        "name": "Template literals", 
        "params": [], 
        "path": "javascript/template_literals", 
        "syntax": "`string text``string text line 1 string text line 2``string text ${expression} string text`tag `string text ${expression} string text` Description Template literals are enclosed by the back-tick (` `) (grave accent) character instead of double or single quotes. Template literals can contain place holders. These are indicated by the Dollar sign and curly braces (${expression}", 
        "type": "Miscellaneous"
    }, 
    "Text.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Text.constructor", 
        "params": [], 
        "path": "dom/text/text", 
        "syntax": "Text()", 
        "type": "Miscellaneous"
    }, 
    "Text.isElementContentWhitespace": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "Text.isElementContentWhitespace", 
        "params": [], 
        "path": "dom/text/iselementcontentwhitespace", 
        "syntax": "b = textnode.isElementContentWhitespace; Example In the example below, we create a node with mixed display and whitespace characters and the attribute is false. var tn = document.createTextNode(\"Hello world\");\n or tn.isElementContentWhitespace; /* evaluates to false */);", 
        "type": "Miscellaneous"
    }, 
    "Text.replaceWholeText": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "Text.replaceWholeText", 
        "params": [], 
        "path": "dom/text/replacewholetext", 
        "syntax": "replacementNode = textnode.replaceWholeText(content)", 
        "type": "Miscellaneous"
    }, 
    "Text.splitText": {
        "descr": "The Text.splitText() method breaks the Textnode into two nodes at the specified offset, keeping both nodes in the tree as siblings.", 
        "name": "Text.splitText", 
        "params": [], 
        "path": "dom/text/splittext", 
        "syntax": "replacementNode = textnode.splitText(offset)", 
        "type": "Miscellaneous"
    }, 
    "Text.wholeText": {
        "descr": "The Text.wholeText read-only property returns all text of all Text nodes logically adjacent to the node. The text is concatenated in document order. This allows to specify any text node and obtain all adjacent text as a single string.", 
        "name": "Text.wholeText", 
        "params": [], 
        "path": "dom/text/wholetext", 
        "syntax": "str = textnode.wholeText; Notes and example Suppose you have the following simple paragraph within your webpage (with some whitespace added to aid formatting throughout the code samples here), whose DOM node is stored in the variable para", 
        "type": "Miscellaneous"
    }, 
    "TextDecoder": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the decoder, that is a string describing the method the TextDecoder will use.", 
                "name": "TextDecoder.encoding Read only"
            }, 
            {
                "descr": "Is a Boolean indicating whether the error mode is fatal.", 
                "name": "TextDecoder.fatal Read only"
            }, 
            {
                "descr": "Is a Boolean indicating whether the byte order marker is ignored.", 
                "name": "TextDecoder.ignoreBOM Read only"
            }, 
            {
                "descr": "Returns a newly constructed TextDecoder that will generate a code point stream with the decoding method specified in parameters.", 
                "name": "TextDecoder()"
            }, 
            {
                "descr": "Returns a DOMString containing the text decoded with the method of the specific TextDecoder object.", 
                "name": "TextDecoder.decode()"
            }
        ], 
        "path": "dom/textdecoder", 
        "syntax": "TextDecoder interface represents a decoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, ... A decoder takes a stream of bytes as input and emits a stream of code points. For a more scalable, non-native library, see StringView \u2013 a C-like representation of strings based on typed arrays. Properties The TextDecoder interface doesn't inherit any properties.  TextDecoder.encoding Read only  Is a DOMString containing the name of the decoder, that is a string describing the method the TextDecoder will use. TextDecoder.fatal Read only  Is a Boolean indicating whether the error mode is fatal. TextDecoder.ignoreBOM Read only  Is a Boolean indicating whether the byte order marker is ignored.  Constructor  TextDecoder()", 
        "type": "Encoding"
    }, 
    "TextDecoder.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "TextDecoder.constructor", 
        "params": [
            {
                "descr": "Is a DOMString, defaulting to \"utf-8\", containing the label of the encoder. ", 
                "name": "utfLabel Optional"
            }, 
            {
                "descr": "Is a TextDecoderOptions dictionary with the property:", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/textdecoder/textdecoder", 
        "syntax": "TextDecoder()", 
        "type": "Encoding"
    }, 
    "TextDecoder.decode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder.decode", 
        "params": [
            {
                "descr": "Is an ArrayBufferView containing the text to decode.", 
                "name": "buffer Optional"
            }, 
            {
                "descr": "Is a TextDecodeOptions dictionary with the property:", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/textdecoder/decode", 
        "syntax": "TextDecoder.decode method returns a DOMString containing the text, given in parameters, decoded with the specific method for that TextDecoder object. Syntax b1 = decoder.decode(buffer, options);\n or b2 = decoder.decode(buffer);\n or b3 = decoder.decode();", 
        "type": "Encoding"
    }, 
    "TextDecoder.encoding": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextDecoder.encoding", 
        "params": [], 
        "path": "dom/textdecoder/encoding", 
        "syntax": "TextDecoder.encoding read-only property returns a DOMString containing the name of the decoding algorithm used by the specific decoder. It can be one of the following values:  The recommended encoding for the Web: 'utf-8'. The legacy single-byte encodings: 'ibm866', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4', 'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8'', 'iso-8859-8i', 'iso-8859-10', 'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'iso-8859-16', 'koi8-r', 'koi8-u', 'macintosh', 'windows-874', 'windows-1250', 'windows-1251', 'windows-1252', 'windows-1253', 'windows-1254', 'windows-1255', 'windows-1256', 'windows-1257', 'windows-1258', or 'x-mac-cyrillic'. The legacy multi-byte Chinese (simplified) encodings: 'gbk'", 
        "type": "Encoding"
    }, 
    "TextEncoder": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder", 
        "params": [
            {
                "descr": "Is a DOMString containing the name of the encoder, that is a string describing the method the TextEncoder will use.", 
                "name": "TextEncoder.encoding Read only"
            }, 
            {
                "descr": "Returns a newly constructed TextEncoder that will generate a byte stream with the encoding method specified in parameters.", 
                "name": "TextEncoder()"
            }, 
            {
                "descr": "Returns a Uint8Array containing the text encoded with the method for this specific TextEncoder object.", 
                "name": "TextEncoder.encode()"
            }
        ], 
        "path": "dom/textencoder", 
        "syntax": "TextEncoder interface represents an encoder for a specific method, that is a specific character encoding, like utf-8, iso-8859-2, koi8, cp1261, gbk, ... An encoder takes a stream of code points as input and emits a stream of bytes. For a more scalable, non-native library, see StringView \u2013 a C-like representation of strings based on typed arrays. Properties The TextEncoder interface doesn't inherit any property.  TextEncoder.encoding Read only  Is a DOMString containing the name of the encoder, that is a string describing the method the TextEncoder will use.  Constructor  TextEncoder()", 
        "type": "Encoding"
    }, 
    "TextEncoder.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder.constructor", 
        "params": [
            {
                "descr": "Is a DOMString containing the label of the encoder. ", 
                "name": "utfLabel"
            }
        ], 
        "path": "dom/textencoder/textencoder", 
        "syntax": "TextEncoder()", 
        "type": "Encoding"
    }, 
    "TextEncoder.encode": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder.encode", 
        "params": [
            {
                "descr": "Is a DOMString containing the text to encode.", 
                "name": "buffer"
            }, 
            {
                "descr": "Is a TextEncodeOptions dictionary with the property:", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/textencoder/encode", 
        "syntax": "TextEncoder.encode method returns a Uint8Array containing the text given in parameters encoded with the specific method for that TextEncoder object. Syntax b1 = encoder.encode(buffer, options);\n or b2 = encoder.encode(buffer);", 
        "type": "Encoding"
    }, 
    "TextEncoder.encoding": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TextEncoder.encoding", 
        "params": [], 
        "path": "dom/textencoder/encoding", 
        "syntax": "TextEncoder.encoding read-only property returns a DOMString containing the name of the encoding algorithm used by the specific encoder. It can only have the following value 'utf-8'. Syntax b = encoder.encoding; Specifications    Specification Status Comment   EncodingThe definition of 'TextEncoder.encoding' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 38 19.0 (19.0) [1] Not supported 25 Not supported   Available in Web Workers 38 20.0 (20.0) Not supported 25 Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support Not supported 19.0 (19.0) [1] 1.0.1 (19.0) Not supported ? Not supported   Available in Web Workers Not supported 20.0 (20.0) 1.0.1 (20.0) Not supported ? Not supported     [1] An earlier, and slightly different, version of the specification was implemented in Firefox 18.", 
        "type": "Encoding"
    }, 
    "TextMetrics.width": {
        "descr": "The readonly TextMetrics.width property contains the text's advance width (the width of that inline box) in CSS pixels.", 
        "name": "TextMetrics.width", 
        "params": [], 
        "path": "dom/textmetrics/width", 
        "syntax": "readonly metrics.width; Examples Given this <canvas>", 
        "type": "Canvas"
    }, 
    "TimeRanges.end": {
        "descr": "Returns the time offset at which a specified time range ends.", 
        "name": "TimeRanges.end", 
        "params": [
            {
                "descr": "A DOMException thrown if the specified index doesn't correspond to an existing range.", 
                "name": "INDEX_SIZE_ERR"
            }
        ], 
        "path": "dom/timeranges/end", 
        "syntax": "endTime = TimeRanges.end(index)", 
        "type": "Miscellaneous"
    }, 
    "TimeRanges.length": {
        "descr": "The TimeRanges.length read-only property returns the number of ranges in the object.", 
        "name": "TimeRanges.length", 
        "params": [], 
        "path": "dom/timeranges/length", 
        "syntax": "length = TimeRanges.length; Example Given a video element with the ID \"myVideo\": var v = document.GetElementById(\"myVideo\");\n or var buf = v.buffered;var numRanges = buf.length;if (buf.length == 1) {  // only one range  if (buf.start(0) == 0 && buf.end(0) == v.duration) {    // The one range starts at the beginning and ends at    // the end of the video, so the whole thing is loaded  }});", 
        "type": "Miscellaneous"
    }, 
    "TimeRanges.start": {
        "descr": "Returns the time offset at which a specified time range begins.", 
        "name": "TimeRanges.start", 
        "params": [
            {
                "descr": "A DOMException thrown if the specified index doesn't correspond to an existing range.", 
                "name": "INDEX_SIZE_ERR"
            }
        ], 
        "path": "dom/timeranges/start", 
        "syntax": "startTime = TimeRanges.start(index)", 
        "type": "Miscellaneous"
    }, 
    "Touch": {
        "descr": "The Touch interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.", 
        "name": "Touch", 
        "params": [
            {
                "descr": "Creates a Touch object.", 
                "name": "Touch()"
            }, 
            {
                "descr": "Returns a unique identifier for this Touch object. ", 
                "name": "Touch.identifier Read only"
            }, 
            {
                "descr": "Returns the X coordinate of the touch point relative to the left edge of the screen.", 
                "name": "Touch.screenX Read only"
            }, 
            {
                "descr": "Returns the Y coordinate of the touch point relative to the top edge of the screen.", 
                "name": "Touch.screenY Read only"
            }, 
            {
                "descr": "Returns the X coordinate of the touch point relative to the left edge of the browser viewport, not including any scroll offset.", 
                "name": "Touch.clientX Read only"
            }, 
            {
                "descr": "Returns the Y coordinate of the touch point relative to the top edge of the browser viewport, not including any scroll offset.", 
                "name": "Touch.clientY Read only"
            }, 
            {
                "descr": "Returns the X coordinate of the touch point relative to the left edge of the document. ", 
                "name": "Touch.pageX Read only"
            }, 
            {
                "descr": "Returns the Y coordinate of the touch point relative to the top of the document. ", 
                "name": "Touch.pageY Read only"
            }, 
            {
                "descr": "Returns the Element on which the touch point started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.", 
                "name": "Touch.target Read only"
            }, 
            {
                "descr": "Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. ", 
                "name": "Touch.radiusX Read only"
            }, 
            {
                "descr": "Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. ", 
                "name": "Touch.radiusY Read only"
            }, 
            {
                "descr": "Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface.", 
                "name": "Touch.rotationAngle Read only"
            }, 
            {
                "descr": "Returns the amount of pressure being applied to the surface by the user, as a float between 0.0 (no pressure) and 1.0 (maximum pressure).", 
                "name": "Touch.forceRead only"
            }
        ], 
        "path": "dom/touch", 
        "syntax": "Touch.radiusX Read only   Returns the X radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenX. Touch.radiusY Read only   Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the screen. The value is in pixels of the same scale as screenY. Touch.rotationAngle Read only   Returns the angle (in degrees) that the ellipse described by radiusX and radiusY must be rotated, clockwise, to most accurately cover the area of contact between the user and the surface. Touch.force", 
        "type": "Touch Events"
    }, 
    "Touch events": {
        "descr": "In order to provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.", 
        "name": "Touch events", 
        "params": [
            {
                "descr": "The touch-sensitive surface. This may be a screen or trackpad.", 
                "name": "Surface"
            }, 
            {
                "descr": "A point of contact with the surface. ", 
                "name": "Touch point"
            }, 
            {
                "descr": "Represents an event that occurs when the state of touches on the surface changes.", 
                "name": "TouchEvent"
            }, 
            {
                "descr": "Represents a single point of contact between the user and the touch surface.", 
                "name": "Touch"
            }, 
            {
                "descr": "Represents a group of touches; this is used when the user has, for example, multiple fingers on the surface at the same time.", 
                "name": "TouchList"
            }
        ], 
        "path": "dom/touch_events", 
        "syntax": "preventDefault()", 
        "type": "Touch Events"
    }, 
    "Touch events.Supporting both TouchEvent and MouseEvent": {
        "descr": "The touch interfaces enable applications to create enhanced user experiences on touch enabled devices. However, the reality is the vast majority of today's web content is designed only to work with mouse input. Consequently, even if a browser supports touch, the browser must still emulate mouse events so content that assumes mouse-only input will work as is without direct modification.", 
        "name": "Touch events.Supporting both TouchEvent and MouseEvent", 
        "params": [], 
        "path": "dom/touch_events/supporting_both_touchevent_and_mouseevent", 
        "syntax": "touchstart before any mouse events. Consequently, if an application does not want mouse events fired on a specific touch target", 
        "type": "Touch Events"
    }, 
    "Touch events.Using Touch Events": {
        "descr": "Today, most Web content is designed for keyboard and mouse input. However, devices with touch screens (especially portable devices) are mainstream and Web applications can either directly process touch-based input by using Touch Events or the application can use interpreted mouse events for the application input. A disadvantage to using mouse events is that they do not support concurrent user input, whereas touch events support multiple simultaneous inputs (possibly at different locations on the touch surface), thus enhancing user experiences.", 
        "name": "Touch events.Using Touch Events", 
        "params": [], 
        "path": "dom/touch_events/using_touch_events", 
        "syntax": "Touch Events Overview for a more detailed example. Register an event handler for each touch event type. // Register touch event handlerssomeElement.addEventListener('touchstart', process_touchstart, false);\n or someElement.addEventListener('touchmove', process_touchmove, false);\n or someElement.addEventListener('touchcancel', process_touchcancel, false);\n or someElement.addEventListener('touchend', process_touchend, false);", 
        "type": "Touch Events"
    }, 
    "Touch.clientX": {
        "descr": "The Touch.clientX read-only property returns the X coordinate of the touch point relative to the viewport, not including any scroll offset.", 
        "name": "Touch.clientX", 
        "params": [], 
        "path": "dom/touch/clientx", 
        "syntax": "touchItem.clientX; Return value A long representing the X coordinate of the touch point relative to the viewport, not including any scroll offset. Example This example illustrates using the Touch object's Touch.clientX and Touch.clientY properties. The Touch.clientX property is the horizontal coordinate of a touch point relative to the browser's viewport excluding any scroll offset. The Touch.clientY property is the vertical coordinate of the touch point relative to the browser's viewport excluding any scroll offset . In this example, we assume the user initiates a touch on an element with an id of source, moves within the element or out of the element and then releases contact with the surface. When the touchend event handler is invoked, the changes in the Touch.clientX and Touch.clientY coordinates, from the starting touch point to the ending touch point, are calculated. // Register touchstart and touchend listeners for element 'source'var src = document.getElementById(\"source\");\n or var clientX, clientY;src.addEventListener('touchstart', function(e) {  // Cache the client X/Y coordinates  clientX = e.touches[0].clientX;  clientY = e.touches[0].clientY;}, false);\n or src.addEventListener('touchend', function(e) {  var deltaX, deltaY;  // Compute the change in X and Y coordinates.   // The first touch point in the changedTouches  // list is the touch point that was just removed from the surface.  deltaX = e.changedTouches[0].clientX - clientX;  deltaY = e.changedTouches[0].clientY - clientY;  // Process the data ... }, false);", 
        "type": "Touch Events"
    }, 
    "Touch.clientY": {
        "descr": "The Touch.clientYread-only property returns the Y coordinate of the touch point relative to the browser's viewport, not including any scroll offset.", 
        "name": "Touch.clientY", 
        "params": [], 
        "path": "dom/touch/clienty", 
        "syntax": "touchItem.clientY; Return value A long value representing the Y coordinate of the touch point relative to the viewport, not including any scroll offset. Example This example illustrates using the Touch object's Touch.clientX and Touch.clientY properties. The Touch.clientX property is the horizontal coordinate of a touch point relative to the browser's viewport excluding any scroll offset. The Touch.clientY property is the vertical coordinate of the touch point relative to the browser's viewport excluding any scroll offset . In this example, we assume the user initiates a touch on an element with an id of source, moves within the element or out of the element and then releases contact with the surface. When the touchend event handler is invoked, the changes in the Touch.clientX and Touch.clientY coordinates, from the starting touch point to the ending touch point, are calculated. // Register touchstart and touchend listeners for element 'source'var src = document.getElementById(\"source\");\n or var clientX, clientY;src.addEventListener('touchstart', function(e) {  // Cache the client X/Y coordinates  clientX = e.touches[0].clientX;  clientY = e.touches[0].clientY;}, false);\n or src.addEventListener('touchend', function(e) {  var deltaX, deltaY;  // Compute the change in X and Y coordinates.   // The first touch point in the changedTouches  // list is the touch point that was just removed from the surface.  deltaX = e.changedTouches[0].clientX - clientX;  deltaY = e.changedTouches[0].clientY - clientY;  // Process the data ... }, false);", 
        "type": "Touch Events"
    }, 
    "Touch.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Touch.constructor", 
        "params": [
            {
                "descr": "Is a TouchInit dictionary, having the following fields:", 
                "name": "touchInit"
            }
        ], 
        "path": "dom/touch/touch", 
        "syntax": "Touch()", 
        "type": "Touch Events"
    }, 
    "Touch.force": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Touch.force", 
        "params": [], 
        "path": "dom/touch/force", 
        "syntax": "Touch.force read-only property returns the amount of pressure the user is applying to the touch surface for a Touch point. Syntax touchItem.force; Return value A float that represents the amount of pressure the user is applying to the touch surface. This is a value between 0.0 (no pressure) and 1.0", 
        "type": "Touch Events"
    }, 
    "Touch.identifier": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "Touch.identifier", 
        "params": [], 
        "path": "dom/touch/identifier", 
        "syntax": "Touch.identifierreturns a value uniquely identifying this point of contact with the touch surface. This value remains consistent for every event involving this finger's (or stylus's) movement on the surface until it is lifted off the surface.", 
        "type": "Touch Events"
    }, 
    "Touch.pageX": {
        "descr": "The Touch.pageX read-only property returns the X coordinate of the touch point relative to the viewport, including any scroll offset.", 
        "name": "Touch.pageX", 
        "params": [], 
        "path": "dom/touch/pagex", 
        "syntax": "touchItem.pageX; Return value A long representing the X coordinate of the touch point relative to the viewport, including any scroll offset. Example This example illustrates how to access the Touch object's Touch.pageX and Touch.pageY properties. The Touch.pageX property is the horizontal coordinate of a touch point relative to the viewport (in CSS pixels), including any scroll offset. The Touch.pageY", 
        "type": "Touch Events"
    }, 
    "Touch.pageY": {
        "descr": "The Touch.pageY read-only property returns the Y coordinate of the touch point relative to the viewport, including any scroll offset.", 
        "name": "Touch.pageY", 
        "params": [], 
        "path": "dom/touch/pagey", 
        "syntax": "touchItem.pageY; Return value A long value that representes the Y coordinate of the touch point relative to the viewport, including any scroll offset. Example This example illustrates how to access the Touch object's Touch.pageX and Touch.pageY properties. The Touch.pageX property is the horizontal coordinate of a touch point relative to the viewport (in CSS pixels), including any scroll offset. The Touch.pageY", 
        "type": "Touch Events"
    }, 
    "Touch.radiusX": {
        "descr": "Returns the X radius of the ellipse that most closely circumscribes the area of contact with the touch surface. The value is in CSS pixels of the same scale as Touch.screenX.", 
        "name": "Touch.radiusX", 
        "params": [
            {
                "descr": "The X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.", 
                "name": "xRadius"
            }
        ], 
        "path": "dom/touch/radiusx", 
        "syntax": "var xRadius = touchItem.radiusX; Return value  xRadius The X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.  Example This example illustrates using the Touch interface's Touch.radiusX, Touch.radiusX and Touch.rotationAngle properties. The Touch.radiusX property is the radius of the ellipse which most closely circumscribes the touching area (e.g. finger, stylus) along the axis indicated by the touch point's Touch.rotationAngle", 
        "type": "Touch Events"
    }, 
    "Touch.radiusY": {
        "descr": "Returns the Y radius of the ellipse that most closely circumscribes the area of contact with the touch surface. The value is in CSS pixels of the same scale as Touch.screenX.", 
        "name": "Touch.radiusY", 
        "params": [
            {
                "descr": "The Y radius of the ellipse that most closely circumscribes the area of contact with the screen.", 
                "name": "yRadius"
            }
        ], 
        "path": "dom/touch/radiusy", 
        "syntax": "var yRadius = touchItem.radiusY; Return value  yRadius The Y radius of the ellipse that most closely circumscribes the area of contact with the screen.  Example The Touch.radiusX example includes an example of this property's usage. Specifications    Specification Status Comment   Touch Events \u2013 Level 2 Editor's Draft Non-stable version.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support                   Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support                          Edit this page on MDN", 
        "type": "Touch Events"
    }, 
    "Touch.rotationAngle": {
        "descr": "Returns the rotation angle, in degrees, of the contact area ellipse defined by Touch.radiusX and Touch.radiusY. The value may be between 0 and 90. Together, these three values describe an ellipse that approximates the size and shape of the area of contact between the user and the screen. This may be a relatively large ellipse representing the contact between a fingertip and the screen or a small area representing the tip of a stylus, for example.", 
        "name": "Touch.rotationAngle", 
        "params": [
            {
                "descr": "The number of degrees of rotation to apply to the described ellipse to align with the contact area between the user and the touch surface.", 
                "name": "angle"
            }
        ], 
        "path": "dom/touch/rotationangle", 
        "syntax": "var angle = touchItem.rotationAngle; Return value  angle The number of degrees of rotation to apply to the described ellipse to align with the contact area between the user and the touch surface.  Example The Touch.radiusX example includes an example of this property's usage. Specifications    Specification Status Comment   Touch Events \u2013 Level 2 Editor's Draft Non-stable version.    Browser Compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 39.0 -webkit 43.0 ? ? ? ?         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 39.0 -webkit 43.0 39.0 -webkit 43.0 ? ? ? ? ?          Edit this page on MDN", 
        "type": "Touch Events"
    }, 
    "Touch.screenX": {
        "descr": "Returns the X coordinate of the touch point relative to the screen, not including any scroll offset.", 
        "name": "Touch.screenX", 
        "params": [
            {
                "descr": "The X coordinate of the touch point relative to the screen, not including any scroll offset.", 
                "name": "x"
            }
        ], 
        "path": "dom/touch/screenx", 
        "syntax": "var x = touchItem.screenX; Return value  x The X coordinate of the touch point relative to the screen, not including any scroll offset.  Example This example illustrates how to access the Touch object's Touch.screenX and Touch.screenY properties. The Touch.screenX property is the horizontal (x) coordinate of a touch point relative to the screen in CSS pixels. The Touch.screenY", 
        "type": "Touch Events"
    }, 
    "Touch.screenY": {
        "descr": "Returns the Y coordinate of the touch point relative to the screen, not including any scroll offset.", 
        "name": "Touch.screenY", 
        "params": [
            {
                "descr": "The Y coordinate of the touch point relative to the screen, not including any scroll offset.", 
                "name": "y"
            }
        ], 
        "path": "dom/touch/screeny", 
        "syntax": "var y = touchItem.screenY; Return value  y The Y coordinate of the touch point relative to the screen, not including any scroll offset.  Example The Touch.screenX example includes an example of this property's usage. Specifications    Specification Status Comment   Touch Events \u2013 Level 2 Editor's Draft Non-stable version.   Touch Events Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 22.0 18.0 (18.0) Not supported Not supported Not supported         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) 6.0 (6.0) (Yes) 11 (Yes) (Yes)          Edit this page on MDN", 
        "type": "Touch Events"
    }, 
    "Touch.target": {
        "descr": "Returns the Element (EventTarget) on which the touch contact started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document. Note that if the target element is removed from the document, events will still be targeted at it, and hence won't necessarily bubble up to the window or document anymore. If there is any risk of an element being removed while it is being touched, the best practice is to attach the touch listeners directly to the target.", 
        "name": "Touch.target", 
        "params": [
            {
                "descr": "The target element of the Touch object.", 
                "name": "el"
            }
        ], 
        "path": "dom/touch/target", 
        "syntax": "var el = touchPoint.target; Return value  el The target element of the Touch object.  Example This example illustrates how to access the Touch object's Touch.target", 
        "type": "Touch Events"
    }, 
    "TouchEvent": {
        "descr": "The TouchEvent interface represents an event sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.", 
        "name": "TouchEvent", 
        "params": [
            {
                "descr": "Creates a TouchEvent object.", 
                "name": "TouchEvent()"
            }, 
            {
                "descr": "A Boolean value indicating whether or not the alt key was down when the touch event was fired.", 
                "name": "TouchEvent.altKey Read only"
            }, 
            {
                "descr": "A TouchList of all the Touch objects representing individual points of contact whose states changed between the previous touch event and this one.", 
                "name": "TouchEvent.changedTouches Read only"
            }, 
            {
                "descr": "A Boolean value indicating whether or not the control key was down when the touch event was fired.", 
                "name": "TouchEvent.ctrlKey Read only"
            }, 
            {
                "descr": "A Boolean value indicating whether or not the meta key was down when the touch event was fired.", 
                "name": "TouchEvent.metaKey Read only"
            }, 
            {
                "descr": "A Boolean value indicating whether or not the shift key was down when the touch event was fired.", 
                "name": "TouchEvent.shiftKey Read only"
            }, 
            {
                "descr": "A TouchList of all the Touch objects that are both currently in contact with the touch surface and were also started on the same element that is the target of the event.", 
                "name": "TouchEvent.targetTouchesRead only"
            }, 
            {
                "descr": "A TouchList of all the Touch objects representing all current points of contact with the surface, regardless of target or changed status.", 
                "name": "TouchEvent.touches Read only"
            }, 
            {
                "descr": "A global event handler for the touchstart event.", 
                "name": "GlobalEventHandlers.ontouchstart"
            }, 
            {
                "descr": "A global event handler for the touchend event.", 
                "name": "GlobalEventHandlers.ontouchend"
            }, 
            {
                "descr": "A global event handler for the touchmove event.", 
                "name": "GlobalEventHandlers.ontouchmove"
            }, 
            {
                "descr": "A global event handler for the touchcancel event.", 
                "name": "GlobalEventHandlers.ontouchcancel"
            }
        ], 
        "path": "dom/touchevent", 
        "syntax": "GlobalEventHandlers.ontouchstart  A global event handler for the touchstart event. GlobalEventHandlers.ontouchend  A global event handler for the touchend event. GlobalEventHandlers.ontouchmove  A global event handler for the touchmove event. GlobalEventHandlers.ontouchcancel  A global event handler for the touchcancel event.  Example See the example on the main Touch events article. Specifications    Specification Status Comment   Touch Events \u2013 Level 2The definition of 'TouchEvent' in that specification. Editor's Draft Added ontouchstart, ontouchend, ontouchmove, ontouchend global attribute handlers   Touch EventsThe definition of 'TouchEvent' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 22.0 18.0 (18.0) Not supported Not supported Not supported         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) 6.0 (6.0) (Yes) 11 (Yes) (Yes)   TouchEvent() (Yes) (Yes) (Yes) (Yes) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "Touch Events"
    }, 
    "TouchEvent.altKey": {
        "descr": "A Boolean value indicating whether or not the alt (Alternate) key is enabled when the touch event is created. If the alt key is enabled, the attribute's value is true. Otherwise, it is false.", 
        "name": "TouchEvent.altKey", 
        "params": [
            {
                "descr": "true if the alt key is enabled for this event; and false if the alt is not enabled.", 
                "name": "altEnabled"
            }
        ], 
        "path": "dom/touchevent/altkey", 
        "syntax": "var altEnabled = touchEvent.altKey; Return value  altEnabled true if the alt key is enabled for this event; and false if the alt is not enabled.  Example This example illustrates how to access the TouchEvent key modifier properties: TouchEvent.altKey", 
        "type": "Touch Events"
    }, 
    "TouchEvent.changedTouches": {
        "descr": "A TouchList whose touch points (Touch objects) varies depending on the event type, as follows:", 
        "name": "TouchEvent.changedTouches", 
        "params": [
            {
                "descr": "A TouchList whose Touch objects include all the touch points that contributed to this touch event.", 
                "name": "changes"
            }
        ], 
        "path": "dom/touchevent/changedtouches", 
        "syntax": "var changes = touchEvent.changedTouches; Return value  changes A TouchList", 
        "type": "Touch Events"
    }, 
    "TouchEvent.constructor": {
        "descr": "The TouchEvent() constructor creates a new TouchEvent.", 
        "name": "TouchEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a TouchEventInit dictionary, having the following fields:  \"touches\", optional and defaulting to [], of type Touch[], that is a list of objects for every point of contact currently touching the surface. \"targetTouches\", optional and defaulting to [], of type Touch[], that is a list of objects for every point of contact that is touching the surface and started on the element that is the target of the current event. \"changedTouches\", optional and defaulting to [], of type Touch[], that is a list of objects for every point of contact which contributed to the event. \"ctrlKey\", optional and defaulting to false, of type Boolean, that indicates if the ctrl key was simultaneously pressed. \"shiftKey\", optional and defaulting to false, of type Boolean, that indicates if the shift key was simultaneously pressed. \"altKey\", optional and defaulting to false, of type Boolean, that indicates if the alt key was simultaneously pressed. \"metaKey\", optional and defaulting to false, of type Boolean, that indicates if the meta key was simultaneously pressed.  The TouchEventInit dictionary also accepts fields from UIEventInit and from EventInit dictionaries.", 
                "name": "touchEventInit Optional"
            }
        ], 
        "path": "dom/touchevent/touchevent", 
        "syntax": "event = new TouchEvent(typeArg, touchEventInit);", 
        "type": "Touch Events"
    }, 
    "TouchEvent.ctrlKey": {
        "descr": "A Boolean value indicating whether the control (Control) key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is false.", 
        "name": "TouchEvent.ctrlKey", 
        "params": [
            {
                "descr": "true if the control key is enabled for this event; and false if the control is not enabled.", 
                "name": "ctrlEnabled"
            }
        ], 
        "path": "dom/touchevent/ctrlkey", 
        "syntax": "var ctrlEnabled = touchEvent.ctrlKey; Return value  ctrlEnabled true if the control key is enabled for this event; and false if the control is not enabled.  Example The TouchEvent.altKey example includes an example of this property's usage. Specifications    Specification Status Comment   Touch Events \u2013 Level 2 Editor's Draft Non-stable version.   Touch Events Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 22.0 18.0 (18.0) No support No support No support         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) 6.0 (6.0) (Yes) 11 (Yes) (Yes)          Edit this page on MDN", 
        "type": "Touch Events"
    }, 
    "TouchEvent.metaKey": {
        "descr": "A Boolean value indicating whether or not the Meta key is enabled when the touch event is created. If this key is enabled, the attribute's value is true. Otherwise, it is false.", 
        "name": "TouchEvent.metaKey", 
        "params": [
            {
                "descr": "true if the Meta key is enabled for this event; and false if the Meta is not enabled.", 
                "name": "metaEnabled"
            }
        ], 
        "path": "dom/touchevent/metakey", 
        "syntax": "var metaEnabled = touchEvent.metaKey; Return value  metaEnabled true if the Meta key is enabled for this event; and false if the Meta is not enabled.  Example The TouchEvent.altKey example includes an example of this property's usage. Specifications    Specification Status Comment   Touch Events \u2013 Level 2 Editor's Draft Non-stable version.   Touch Events Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 22.0 18.0 (18.0) No support No support No support         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) 6.0 (6.0) (Yes) 11 (Yes) (Yes)          Edit this page on MDN", 
        "type": "Touch Events"
    }, 
    "TouchEvent.shiftKey": {
        "descr": "..", 
        "name": "TouchEvent.shiftKey", 
        "params": [
            {
                "descr": "true if the shift key is enabled for this event; and false if the shift key is not enabled.", 
                "name": "shiftEnabled"
            }
        ], 
        "path": "dom/touchevent/shiftkey", 
        "syntax": "var shiftEnabled = touchEvent.shiftKey; Return value  shiftEnabled true if the shift key is enabled for this event; and false if the shift key is not enabled.  Example The TouchEvent.altKey example includes an example of this property's usage. Specifications    Specification Status Comment   Touch Events \u2013 Level 2 Editor's Draft Non-stable version.   Touch Events Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 22.0 18.0 (18.0) No support No support No support         Feature Android Android Webview Chrome for Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) 6.0 (6.0) (Yes) 11 (Yes) (Yes)          Edit this page on MDN", 
        "type": "Touch Events"
    }, 
    "TouchEvent.targetTouches": {
        "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.", 
        "name": "TouchEvent.targetTouches", 
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface and whose touchstart event occurred inside the same target element as the current target element.", 
                "name": "touches"
            }
        ], 
        "path": "dom/touchevent/targettouches", 
        "syntax": "var touches = touchEvent.targetTouches; Return value  touches A TouchList", 
        "type": "Touch Events"
    }, 
    "TouchEvent.touches": {
        "descr": "A TouchList listing all the Touch objects for touch points that are currently in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.", 
        "name": "TouchEvent.touches", 
        "params": [
            {
                "descr": "A TouchList listing all the Touch objects for touch points that are still in contact with the touch surface, regardless of whether or not they've changed or what their target element was at touchstart time.", 
                "name": "touches"
            }
        ], 
        "path": "dom/touchevent/touches", 
        "syntax": "var touches = touchEvent.touches; Return value  touches A TouchList", 
        "type": "Touch Events"
    }, 
    "TouchList.identifiedTouch": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "TouchList.identifiedTouch", 
        "params": [
            {
                "descr": "An integer value identifying the Touch object to retrieve from the list.", 
                "name": "id"
            }, 
            {
                "descr": "A Touch object matching the specified id.", 
                "name": "touchItem"
            }
        ], 
        "path": "dom/touchlist/identifiedtouch", 
        "syntax": "var touchItem = touchList.identifiedTouch(id);", 
        "type": "Touch Events"
    }, 
    "TouchList.item": {
        "descr": "Returns the Touch object at the specified index in the TouchList.", 
        "name": "TouchList.item", 
        "params": [
            {
                "descr": "The index of the Touch object to retrieve. ", 
                "name": "index"
            }, 
            {
                "descr": "The requested Touch object from the TouchList. ", 
                "name": "touchPoint"
            }
        ], 
        "path": "dom/touchlist/item", 
        "syntax": "var touchPoint = touchList.item(index);", 
        "type": "Touch Events"
    }, 
    "TouchList.length": {
        "descr": "This read-only property indicates the number of items (touch points) in a TouchList.", 
        "name": "TouchList.length", 
        "params": [
            {
                "descr": "The number of touch points in touchList.", 
                "name": "numTouches"
            }
        ], 
        "path": "dom/touchlist/length", 
        "syntax": "var numTouches = touchList.length; Return value  numTouches The number of touch points in touchList.  Example This code example illustrates the use of the TouchList", 
        "type": "Touch Events"
    }, 
    "TrackDefault": {
        "descr": "Draft This page is not complete.", 
        "name": "TrackDefault", 
        "params": [
            {
                "descr": "Constructs and returns a new TrackDefault object.", 
                "name": "TrackDefault()"
            }, 
            {
                "descr": "Returns the type of track that this SourceBuffer's media segment data relates to (i.e. ", 
                "name": "TrackDefault.type Read only"
            }, 
            {
                "descr": "Returns the ID of the specific track that the SourceBuffer should apply to.", 
                "name": "TrackDefault.byteStreamTrackID Read only"
            }, 
            {
                "descr": "Returns the default language to use when an initialization segment does not contain language information for a new track.", 
                "name": "TrackDefault.language Read only"
            }, 
            {
                "descr": "Returns the default label to use when an initialization segment does not contain label information for a new track.", 
                "name": "TrackDefault.label Read only"
            }, 
            {
                "descr": "Returns the default kinds used when an initialization segment does not contain kind information for a new track.", 
                "name": "TrackDefault.kinds Read only"
            }
        ], 
        "path": "dom/trackdefault", 
        "syntax": "TrackDefault interface provides a SourceBuffer with kind, label, and language information for tracks that do not contain this information in the initialization segments of a media chunk. A TrackDefault object is provided to a SourceBuffer object by setting its SourceBuffer.trackDefaults property. Constructor  TrackDefault()", 
        "type": "Media"
    }, 
    "TrackDefault.byteStreamTrackID": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefault.byteStreamTrackID", 
        "params": [], 
        "path": "dom/trackdefault/bytestreamtrackid", 
        "syntax": "byteStreamTrackID read-only property of the TrackDefault interface returns the ID of the specific track that the SourceBuffer should apply to. If not specified in the constructor, this value will be an empty string and the SourceBuffer can contain any tracks of the specified TrackDefault.type", 
        "type": "Media"
    }, 
    "TrackDefault.constructor": {
        "descr": "Draft This page is not complete.", 
        "name": "TrackDefault.constructor", 
        "params": [
            {
                "descr": "A DOMString specifying a media segment data type for the SourceBuffer to contain. ", 
                "name": "type"
            }, 
            {
                "descr": "A DOMString specifying a default language for the SourceBuffer to use when an initialization segment does not contain language information for a new track.", 
                "name": "language"
            }, 
            {
                "descr": "A DOMString specifying a default label for the SourceBuffer to use when an initialization segment does not contain label information for a new track.", 
                "name": "label"
            }, 
            {
                "descr": "An array (sequence) of DOMStrings specifying default kinds for the SourceBuffer to use when an initialization segment does not contain kind information for a new track.", 
                "name": "kinds"
            }, 
            {
                "descr": "A DOMString specifying the ID of the specific track that the SourceBuffer should apply to. ", 
                "name": "byteStreamTrackID Optional"
            }
        ], 
        "path": "dom/trackdefault/trackdefault", 
        "syntax": "TrackDefault()", 
        "type": "Media"
    }, 
    "TrackDefault.kinds": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefault.kinds", 
        "params": [], 
        "path": "dom/trackdefault/kinds", 
        "syntax": "kinds read-only property of the TrackDefault interface returns default kinds for an associated SourceBuffer to use when an initialization segment does not contain label information for a new track. Syntax var mykinds = TrackDefault.kinds; Value An array of DOMStrings. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'kinds' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? Not supported ? ? ?         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ?  Not supported", 
        "type": "Media"
    }, 
    "TrackDefault.label": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefault.label", 
        "params": [], 
        "path": "dom/trackdefault/label", 
        "syntax": "label read-only property of the TrackDefault interface returns the default label for an associated SourceBuffer to use when an initialization segment does not contain label information for a new track. Syntax var mylabel = TrackDefault.label; Value A DOMString. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'label' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? Not supported ? ? ?         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ?  Not supported", 
        "type": "Media"
    }, 
    "TrackDefault.language": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefault.language", 
        "params": [], 
        "path": "dom/trackdefault/language", 
        "syntax": "language read-only property of the TrackDefault interface returns a default language for an associated SourceBuffer to use when an initialization segment does not contain language information for a new track. This should be a valid language code, e.g. en-US. Syntax var mylanguage = TrackDefault.language; Value A DOMString. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'language' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? Not supported ? ? ?         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ?  Not supported", 
        "type": "Media"
    }, 
    "TrackDefault.type": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefault.type", 
        "params": [], 
        "path": "dom/trackdefault/type", 
        "syntax": "type read-only property of the TrackDefault interface returns the type of track that this SourceBuffer's media segment data relates to (i.e. audio, video, or text track.)", 
        "type": "Media"
    }, 
    "TrackDefaultList": {
        "descr": "Draft This page is not complete.", 
        "name": "TrackDefaultList", 
        "params": [
            {
                "descr": "Constructs and returns a new TrackDefaultList object.", 
                "name": "TrackDefaultList()"
            }, 
            {
                "descr": "Returns the number of TrackDefault objects in the list.", 
                "name": "TrackDefaultList.length Read only"
            }, 
            {
                "descr": "This getter allows the TrackDefault objects in the list to be accessed with an array operator (i.e. ", 
                "name": "TrackDefaultList.TrackDefault()"
            }
        ], 
        "path": "dom/trackdefaultlist", 
        "syntax": "TrackDefaultList interface represents a simple container list for multiple TrackDefault objects. The TrackDefaultList associated with a particular SourceBuffer can be retrieved using the SourceBuffer.trackDefaults property. Constructor  TrackDefaultList()", 
        "type": "Media"
    }, 
    "TrackDefaultList.TrackDefault": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefaultList.TrackDefault", 
        "params": [
            {
                "descr": "The index position of the TrackDefault object you want to return.", 
                "name": "index"
            }
        ], 
        "path": "dom/trackdefaultlist/trackdefault", 
        "syntax": "TrackDefault()", 
        "type": "Media"
    }, 
    "TrackDefaultList.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TrackDefaultList.constructor", 
        "params": [
            {
                "descr": "A sequence (array) of TrackDefault objects.", 
                "name": "trackDefaults"
            }
        ], 
        "path": "dom/trackdefaultlist/trackdefaultlist", 
        "syntax": "TrackDefaultList()", 
        "type": "Media"
    }, 
    "TrackDefaultList.length": {
        "descr": "Draft This page is not complete.", 
        "name": "TrackDefaultList.length", 
        "params": [], 
        "path": "dom/trackdefaultlist/length", 
        "syntax": "length read-only property of the TrackDefaultList interface returns the number of TrackDefault objects in the list. Syntax var myListLength = TrackDefaultList.length; Value An unsigned long number. Example TBD Specifications    Specification Status Comment   Media Source ExtensionsThe definition of 'length' in that specification. Candidate Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? Not supported ? ? ?         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ?  Not supported", 
        "type": "Media"
    }, 
    "TransitionEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent", 
        "params": [
            {
                "descr": "Is a DOMString containing the name CSS property associated with the transition.", 
                "name": "TransitionEvent.propertyName Read only"
            }, 
            {
                "descr": "Is a float giving the amount of time the transtion has been running, in seconds, when this event fired. ", 
                "name": "TransitionEvent.elapsedTime Read only"
            }, 
            {
                "descr": "Is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. ", 
                "name": "TransitionEvent.pseudoElement Read only"
            }, 
            {
                "descr": "Creates a TransitionEvent event with the given parameters.", 
                "name": "TransitionEvent()"
            }, 
            {
                "descr": "Initializes a TransitionEvent created using the deprecated Document.createEvent(\"TransitionEvent\") method.", 
                "name": "TransitionEvent.initTransitionEvent()"
            }
        ], 
        "path": "dom/transitionevent", 
        "syntax": "TransitionEvent interface represents events providing information related to transitions. Properties Also inherits properties from its parent Event.  TransitionEvent.propertyName Read only  Is a DOMString containing the name CSS property associated with the transition. TransitionEvent.elapsedTime Read only  Is a float giving the amount of time the transtion has been running, in seconds, when this event fired. This value is not affected by the transition-delay property. TransitionEvent.pseudoElement Read only  Is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''.  Constructor  TransitionEvent()", 
        "type": "Events"
    }, 
    "TransitionEvent.animationName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.animationName", 
        "params": [], 
        "path": "dom/transitionevent/animationname", 
        "syntax": "TransitionEvent.transitionName read-only property is a DOMString containing the name of the CSS property associated with the transition. Syntax name = TransitionEvent.transitionName Specifications    Specification Status Comment     CSS TransitionsThe definition of 'TransitionEvent.transitionName' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)     See also", 
        "type": "Events"
    }, 
    "TransitionEvent.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "TransitionEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the type of the TransitionEvent. ", 
                "name": "type"
            }, 
            {
                "descr": "Is a DOMString containing the value of the animation-name CSS property associated with the transition. ", 
                "name": "animationName Optional"
            }, 
            {
                "descr": "Is float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. ", 
                "name": "elapsedTime Optional"
            }, 
            {
                "descr": "Is a DOMString, starting with \"::\", containing the name of the pseudo-element the animation runs on. ", 
                "name": "pseudoElement Optional"
            }
        ], 
        "path": "dom/transitionevent/transitionevent", 
        "syntax": "TransitionEvent()", 
        "type": "Events"
    }, 
    "TransitionEvent.elapsedTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.elapsedTime", 
        "params": [], 
        "path": "dom/transitionevent/elapsedtime", 
        "syntax": "TransitionEvent.elapsedTime read-only property is a float giving the amount of time the animation has been running, in seconds, when this event fired. This value is not affected by the transition-delay property. Syntax name = TransitionEvent.elapsedTime Specifications    Specification Status Comment     CSS TransitionsThe definition of 'TransitionEvent.elapsedTime' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) 4.0 (2.0) 10.0 (Yes) (Yes)     See also", 
        "type": "Events"
    }, 
    "TransitionEvent.pseudoElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "TransitionEvent.pseudoElement", 
        "params": [], 
        "path": "dom/transitionevent/pseudoelement", 
        "syntax": "TransitionEvent.pseudoElement read-only property is a DOMString, starting with '::', containing the name of the pseudo-element the animation runs on. If the transition doesn't run on a pseudo-element but on the element, an empty string: ''. Syntax name = TransitionEvent.pseudoElement Specifications    Specification Status Comment     CSS TransitionsThe definition of 'TransitionEvent.pseudoElement' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported 23.0 (23.0) Not supported Not supported Not supported     See also", 
        "type": "Events"
    }, 
    "TreeWalker": {
        "descr": "The TreeWalker object represents the nodes of a document subtree and a position within them.", 
        "name": "TreeWalker", 
        "params": [
            {
                "descr": "Returns a Node representing the root node as specified when the TreeWalker was created.", 
                "name": "TreeWalker.root Read only"
            }, 
            {
                "descr": "Returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. ", 
                "name": "TreeWalker.whatToShow Read only"
            }, 
            {
                "descr": "Returns a NodeFilter used to select the relevant nodes.", 
                "name": "TreeWalker.filter Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if, when discarding an EntityReference its whole sub-tree must be discarded at the same time.", 
                "name": "TreeWalker.expandEntityReferences Read only"
            }, 
            {
                "descr": "Is the Node on which the TreeWalker is currently pointing at.", 
                "name": "TreeWalker.currentNode"
            }, 
            {
                "descr": "Moves the current Node to the first visible ancestor node in the document order, and returns the found node. ", 
                "name": "TreeWalker.parentNode()"
            }, 
            {
                "descr": "Moves the current Node to the first visible child of the current node, and returns the found child. ", 
                "name": "TreeWalker.firstChild()"
            }, 
            {
                "descr": "Moves the current Node to the last visible child of the current node, and returns the found child. ", 
                "name": "TreeWalker.lastChild()"
            }, 
            {
                "descr": "Moves the current Node to its previous sibling, if any, and returns the found sibling. ", 
                "name": "TreeWalker.previousSibling()"
            }, 
            {
                "descr": "Moves the current Node to its next sibling, if any, and returns the found sibling. ", 
                "name": "TreeWalker.nextSibling()"
            }, 
            {
                "descr": "Moves the current Node to the previous visible node in the document order, and returns the found node. ", 
                "name": "TreeWalker.previousNode()"
            }, 
            {
                "descr": "Moves the current Node to the next visible node in the document order, and returns the found node. ", 
                "name": "TreeWalker.nextNode()"
            }
        ], 
        "path": "dom/treewalker", 
        "syntax": "CDATASection nodes.   NodeFilter.SHOW_COMMENT 128 Shows '. In XML, the character sequence '--' cannot be used within a comment.\" href=\"comment\">Comment nodes.   NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes.   NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes.   NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes.   NodeFilter.SHOW_ELEMENT 1 Shows Element nodes.   NodeFilter.SHOW_ENTITY  32 Shows Entity nodes. This is meaningful only when creating a TreeWalker with an Entity node as its root; in this case, it means that the Entity node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.   NodeFilter.SHOW_ENTITY_REFERENCE  16 Shows EntityReference nodes.   NodeFilter.SHOW_NOTATION  2048 Shows Notation", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.currentNode": {
        "descr": "The TreeWalker.currentNode property represents the Node on which the TreeWalker is currently pointing at.", 
        "name": "TreeWalker.currentNode", 
        "params": [], 
        "path": "dom/treewalker/currentnode", 
        "syntax": "node = treeWalker.currentNode;treeWalker.currentNode = node; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or root = treeWalker.currentNode; // the root element as it is the first element!);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.expandEntityReferences": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "TreeWalker.expandEntityReferences", 
        "params": [], 
        "path": "dom/treewalker/expandentityreferences", 
        "syntax": "expand = treeWalker.expandEntityReferences; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or expand = treeWalker.expandEntityReferences;);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.filter": {
        "descr": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.", 
        "name": "TreeWalker.filter", 
        "params": [], 
        "path": "dom/treewalker/filter", 
        "syntax": "nodeFilter = treeWalker.filter; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or nodeFilter = treeWalker.filter; // document.body in this case);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.firstChild": {
        "descr": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.", 
        "name": "TreeWalker.firstChild", 
        "params": [], 
        "path": "dom/treewalker/firstchild", 
        "syntax": "node = treeWalker.firstChild; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or var node = treeWalker.firstChild();\n or  // returns the first child of the root element, or null if none);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.lastChild": {
        "descr": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. It also moves the current node to this child. If no such child exists, returns null and the current node is not changed.", 
        "name": "TreeWalker.lastChild", 
        "params": [], 
        "path": "dom/treewalker/lastchild", 
        "syntax": "node = treeWalker.lastChild();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.nextNode": {
        "descr": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists, returns null and the current node is not changed.", 
        "name": "TreeWalker.nextNode", 
        "params": [], 
        "path": "dom/treewalker/nextnode", 
        "syntax": "node = treeWalker.nextNode();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.nextSibling": {
        "descr": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.", 
        "name": "TreeWalker.nextSibling", 
        "params": [], 
        "path": "dom/treewalker/nextsibling", 
        "syntax": "node = treeWalker.nextSibling();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.parentNode": {
        "descr": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, returns null and the current node is not changed.", 
        "name": "TreeWalker.parentNode", 
        "params": [], 
        "path": "dom/treewalker/parentnode", 
        "syntax": "node = treeWalker.parentNode();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.previousNode": {
        "descr": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. It also moves the current node to this one. If no such node exists,or if it is before that the root node defined at the object construction, returns null and the current node is not changed.", 
        "name": "TreeWalker.previousNode", 
        "params": [], 
        "path": "dom/treewalker/previousnode", 
        "syntax": "node = treeWalker.previousNode();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.previousSibling": {
        "descr": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. I there is no such node, return null and the current node is not changed.", 
        "name": "TreeWalker.previousSibling", 
        "params": [], 
        "path": "dom/treewalker/previoussibling", 
        "syntax": "node = treeWalker.previousSibling();", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.root": {
        "descr": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.", 
        "name": "TreeWalker.root", 
        "params": [], 
        "path": "dom/treewalker/root", 
        "syntax": "root = TreeWalker.root; Example var treeWalker = document.createTreeWalker(    document.body,    NodeFilter.SHOW_ELEMENT,    { acceptNode: function(node) { return NodeFilter.FILTER_ACCEPT; } },    false);\n or root = treeWalker.root; // document.body in this case);", 
        "type": "TreeWalker"
    }, 
    "TreeWalker.whatToShow": {
        "descr": "The TreeWalker.whatToShow read-only property returns an unsigned long being a bitmask made of constants describing the types of Node that must to be presented. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:", 
        "name": "TreeWalker.whatToShow", 
        "params": [], 
        "path": "dom/treewalker/whattoshow", 
        "syntax": "CDATASection nodes.   NodeFilter.SHOW_COMMENT 128 Shows '. In XML, the character sequence '--' cannot be used within a comment.\" href=\"../comment\">Comment nodes.   NodeFilter.SHOW_DOCUMENT 256 Shows Document", 
        "type": "TreeWalker"
    }, 
    "TypeError": {
        "descr": "The TypeError object represents an error when a value is not of the expected type.", 
        "name": "TypeError", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to a TypeError object.", 
                "name": "TypeError.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "TypeError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that TypeError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "TypeError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "TypeError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "TypeError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "TypeError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "TypeError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "TypeError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/typeerror", 
        "syntax": "new TypeError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "TypedArray": {
        "descr": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.", 
        "name": "TypedArray", 
        "params": [
            {
                "descr": "When called with a length argument, a typed array containing length zeroes is created.", 
                "name": "length"
            }, 
            {
                "descr": "When called with a typedArray argument, which can be an object of any of the typed array types (such as Int32Array), the typedArray gets copied into a new typed array. ", 
                "name": "typedArray"
            }, 
            {
                "descr": "When called with an object argument, a new typed array is created as if by the TypedArray.from() method.", 
                "name": "object"
            }, 
            {
                "descr": "When called with a buffer, and optionally a byteOffset and a length argument, a new typed array view is created that views the specified ArrayBuffer. ", 
                "name": "buffer, byteOffset, length"
            }, 
            {
                "descr": "Returns a number value of the element size for the different typed array objects.", 
                "name": "TypedArray.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Length property whose value is 3.", 
                "name": "TypedArray.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "TypedArray.name"
            }, 
            {
                "descr": "The constructor function that is used to create derived objects.", 
                "name": "get TypedArray[@@species]"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "TypedArray.prototype"
            }, 
            {
                "descr": "Creates a new typed array from an array-like or iterable object. ", 
                "name": "TypedArray.from()"
            }, 
            {
                "descr": "Creates a new typed array with a variable number of arguments. ", 
                "name": "TypedArray.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "TypedArray.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the typed array. ", 
                "name": "TypedArray.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the typed array from the start of its ArrayBuffer. ", 
                "name": "TypedArray.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the typed array from the start of its ArrayBuffer. ", 
                "name": "TypedArray.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the typed array. ", 
                "name": "TypedArray.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "TypedArray.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "TypedArray.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "TypedArray.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "TypedArray.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "TypedArray.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "TypedArray.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "TypedArray.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "TypedArray.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "TypedArray.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "TypedArray.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "TypedArray.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "TypedArray.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "TypedArray.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "TypedArray.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of TypedArray.prototype.copyWithin().", 
                "name": "TypedArray.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "TypedArray.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "TypedArray.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "TypedArray.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "TypedArray.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "TypedArray.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "TypedArray.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "TypedArray.prototype.sort()"
            }, 
            {
                "descr": "Returns a new TypedArray from the given start and end element index.", 
                "name": "TypedArray.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "TypedArray.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "TypedArray.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "TypedArray.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "TypedArray.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/typedarray", 
        "syntax": "new TypedArray(length);\n or new TypedArray(typedArray);\n or new TypedArray(object);\n or new TypedArray(buffer [, byteOffset [, length]]);\n or where TypedArray() is one of:Int8Array();\n or Uint8Array();\n or Uint8ClampedArray();\n or Int16Array();\n or Uint16Array();\n or Int32Array();\n or Uint32Array();\n or Float32Array();\n or Float64Array();", 
        "type": "TypedArray"
    }, 
    "TypedArray.@@species": {
        "descr": "The TypedArray[@@species] accessor property returns the constructor of a typed array.", 
        "name": "TypedArray.@@species", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/@@species", 
        "syntax": "TypedArray[Symbol.species]where TypedArray is one of:Int8ArrayUint8ArrayUint8ClampedArrayInt16ArrayUint16ArrayInt32ArrayUint32ArrayFloat32ArrayFloat64Array Description The species accessor property returns the default constructor for typed array objects. Subclass constructors may over-ride it to change the constructor assignment. Examples The species property returns the default constructor function, which is one of the typed array constructors for a given typed array object: Int8Array[Symbol.species];    // function Int8Array()Uint8Array[Symbol.species];   // function Uint8Array()Float32Array[Symbol.species]; // function Float32Array()", 
        "type": "TypedArray"
    }, 
    "TypedArray.BYTES_PER_ELEMENT": {
        "descr": "The TypedArray.BYTES_PER_ELEMENT property represents the size in bytes of each element in an typed array.", 
        "name": "TypedArray.BYTES_PER_ELEMENT", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/bytes_per_element", 
        "syntax": "TypedArray.BYTES_PER_ELEMENT; Description TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The BYTES_PER_ELEMENT constant contains the number of bytes each element in the given TypedArray has. Examples Int8Array.BYTES_PER_ELEMENT;         // 1Uint8Array.BYTES_PER_ELEMENT;        // 1Uint8ClampedArray.BYTES_PER_ELEMENT; // 1Int16Array.BYTES_PER_ELEMENT;        // 2Uint16Array.BYTES_PER_ELEMENT;       // 2Int32Array.BYTES_PER_ELEMENT;        // 4Uint32Array.BYTES_PER_ELEMENT;       // 4Float32Array.BYTES_PER_ELEMENT;      // 4Float64Array.BYTES_PER_ELEMENT;      // 8 Specifications    Specification Status Comment   Typed Array Specification Obsolete Superseded by ECMAScript 6.   ECMAScript 2015 (6th Edition, ECMA-262)The definition of 'TypedArray.BYTES_PER_ELEMENT' in that specification. Standard Initial definition in an ECMA standard.   ECMAScript 2017 Draft (ECMA-262)The definition of 'TypedArray.BYTES_PER_ELEMENT' in that specification. Draft      Browser compatibility", 
        "type": "TypedArray"
    }, 
    "TypedArray.from": {
        "descr": "The TypedArray.from() method creates a new typed array from an array-like or iterable object. This method is nearly the same as Array.from().", 
        "name": "TypedArray.from", 
        "params": [
            {
                "descr": "An array-like or iterable object to convert to a typed array.", 
                "name": "source"
            }, 
            {
                "descr": "Optional. Map function to call on every element of the typed array.", 
                "name": "mapFn"
            }, 
            {
                "descr": "Optional. Value to use as this when executing mapFn.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/from", 
        "syntax": "TypedArray.from(source[, mapFn[, thisArg]])where TypedArray is one of:Int8ArrayUint8ArrayUint8ClampedArrayInt16ArrayUint16ArrayInt32ArrayUint32ArrayFloat32ArrayFloat64Array", 
        "type": "TypedArray"
    }, 
    "TypedArray.name": {
        "descr": "The TypedArray.name property represents a string value of the typed array constructor name.", 
        "name": "TypedArray.name", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/name", 
        "syntax": "TypedArray.name; Description TypedArray objects differ from each other in the number of bytes per element and in the way the bytes are interpreted. The name property describes of what data type the array consists. The first part can be Int for \"integer\" or Uint for an \"unsigned integer\", also Float for \"floating point\" is used. The second part is a number describing the bit-size of the array. Finally, the object type is Array, with ClampedArray as a special case. Please see Uint8ClampedArray", 
        "type": "TypedArray"
    }, 
    "TypedArray.of": {
        "descr": "The TypedArray.of() method creates a new typed array with a variable number of arguments. This method is nearly the same as Array.of().", 
        "name": "TypedArray.of", 
        "params": [
            {
                "descr": "Elements of which to create the typed array.", 
                "name": "elementN"
            }
        ], 
        "path": "javascript/global_objects/typedarray/of", 
        "syntax": "TypedArray.of(element0[, element1[, ...[, elementN]]])where TypedArray is one of:Int8ArrayUint8ArrayUint8ClampedArrayInt16ArrayUint16ArrayInt32ArrayUint32ArrayFloat32ArrayFloat64Array", 
        "type": "TypedArray"
    }, 
    "TypedArray.prototype": {
        "descr": "The TypedArray.prototype property represents the prototype for TypedArray constructors.", 
        "name": "TypedArray.prototype", 
        "params": [
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "TypedArray.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the typed array. ", 
                "name": "TypedArray.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the typed array from the start of its ArrayBuffer. ", 
                "name": "TypedArray.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the typed array from the start of its ArrayBuffer. ", 
                "name": "TypedArray.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the typed array. ", 
                "name": "TypedArray.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "TypedArray.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "TypedArray.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "TypedArray.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "TypedArray.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "TypedArray.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "TypedArray.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "TypedArray.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "TypedArray.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "TypedArray.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "TypedArray.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "TypedArray.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "TypedArray.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "TypedArray.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "TypedArray.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of TypedArray.prototype.copyWithin().", 
                "name": "TypedArray.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "TypedArray.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "TypedArray.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "TypedArray.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "TypedArray.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "TypedArray.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "TypedArray.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "TypedArray.prototype.sort()"
            }, 
            {
                "descr": "Returns a new TypedArray from the given start and end element index.", 
                "name": "TypedArray.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "TypedArray.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "TypedArray.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "TypedArray.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "TypedArray.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/typedarray/prototype", 
        "syntax": "Array.prototype.slice()", 
        "type": "TypedArray"
    }, 
    "Types": {
        "descr": "JavaScript provides several built-in datatypes. In addition to those, this page documents virtual types like Selectors, enhanced pseudo-types like Events and some concepts you need to know about Functions. If you want to study these concepts in depth, take a look at MDN.", 
        "name": "Types", 
        "params": [], 
        "path": "jquery/types", 
        "syntax": "\"x defaulted to false\" is printed.  To keep the examples short, the invert (\"not\") operator and double-negation are used to show a boolean context:", 
        "type": "Miscellaneous"
    }, 
    "UIEvent.constructor": {
        "descr": "The UIEvent() constructor creates a new UIEvent.", 
        "name": "UIEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a UIEventInit dictionary, having the following fields:  detail: optional and defaulting to 0, of type long, that is a event-dependant value associated with the event. ", 
                "name": "UIEventInitOptional"
            }
        ], 
        "path": "dom/uievent/uievent", 
        "syntax": "event = new UIEvent(typeArg, UIEventInit)", 
        "type": "Events"
    }, 
    "UIEvent.sourceCapabilities": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "UIEvent.sourceCapabilities", 
        "params": [], 
        "path": "dom/uievent/sourcecapabilities", 
        "syntax": "UIEvent.sourceCapabilities read-only property returns an instance of the InputDeviceCapabilities interface which provides information about the physical device responsible for generating a touch event. If no input device was responsible for the event, it returns null. When a single user interaction with an input device generates a series of different input events, the sourceCapabilities property for all of them will point to the same instance of InputDeviceCapabilities. For example, when a user lifts their finger off of a touchscreen, several UIEvents may be generated including touchend, mousedown, click, and focus. All of these events must have the same sourceCapabilities representing the touchscreen. A device is considered \"responsible\" for an event only when that interaction is part of the abstraction provided by the web platform. For example, many user agents allow a window to be resized with a mouse or a keyboard, but this detail is not exposed to the web platform in any way, and so the sourceCapabilities of a resize event will typically be null. Syntax var iDC = event.sourceCapabilities Value An instance of InputDeviceCapabilities. Specifications    Specification Status Comment   InputDeviceCapabilitiesThe definition of 'sourceCapabilities' in that specification. Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 47 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support 47 ? ? ? ? ? 47          Edit this page on MDN", 
        "type": "Events"
    }, 
    "UIEvent.view": {
        "descr": "The UIEvent.view read-only property returns the WindowProxy object from which the event was generated. In browsers, this is the Window object the event happened in.", 
        "name": "UIEvent.view", 
        "params": [], 
        "path": "dom/uievent/view", 
        "syntax": "var view = event.view;  view is a reference to an AbstractView object.  Specifications    Specification Status Comment   Document Object Model (DOM) Level 3 Events SpecificationThe definition of 'UIEvent' in that specification. Working Draft From Document Object Model (DOM) Level 2 Events Specification, changed the type of view", 
        "type": "Events"
    }, 
    "URIError": {
        "descr": "The URIError object represents an error when a global URI handling function was used in a wrong way.", 
        "name": "URIError", 
        "params": [
            {
                "descr": "Optional. Human-readable description of the error", 
                "name": "message"
            }, 
            {
                "descr": "Optional. The name of the file containing the code that caused the exception", 
                "name": "fileName"
            }, 
            {
                "descr": "Optional. The line number of the code that caused the exception", 
                "name": "lineNumber"
            }, 
            {
                "descr": "Allows the addition of properties to a URIError object.", 
                "name": "URIError.prototype"
            }, 
            {
                "descr": "Specifies the function that created an instance's prototype.", 
                "name": "URIError.prototype.constructor"
            }, 
            {
                "descr": "Error message. Although ECMA-262 specifies that URIError should provide its own message property, in SpiderMonkey, it inherits Error.prototype.message.", 
                "name": "URIError.prototype.message"
            }, 
            {
                "descr": "Error name. Inherited from Error.", 
                "name": "URIError.prototype.name"
            }, 
            {
                "descr": "Path to file that raised this error. ", 
                "name": "URIError.prototype.fileName"
            }, 
            {
                "descr": "Line number in file that raised this error. ", 
                "name": "URIError.prototype.lineNumber"
            }, 
            {
                "descr": "Column number in line that raised this error. ", 
                "name": "URIError.prototype.columnNumber"
            }, 
            {
                "descr": "Stack trace. Inherited from Error.", 
                "name": "URIError.prototype.stack"
            }
        ], 
        "path": "javascript/global_objects/urierror", 
        "syntax": "new URIError([message[, fileName[, lineNumber]]])", 
        "type": "Errors"
    }, 
    "URL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.URL", 
        "params": [], 
        "path": "dom/window/url", 
        "syntax": "Window.URL property returns an object that provides static methods used for creating and managing object URLs. It can also be called as a constructor to construct URL objects. Note: This feature is available in Web Workers. Syntax Calling a static method: img.src = URL.createObjectURL(blob);", 
        "type": "Window"
    }, 
    "URL.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URL.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing an absolute or relative URL. ", 
                "name": "urlString"
            }, 
            {
                "descr": "Is a DOMString representing the base URL to use in case urlString is a relative URL. ", 
                "name": "baseURLstring Optional"
            }, 
            {
                "descr": "Is a URL object representing the base URL to use in case urlString is a relative URL.", 
                "name": "baseURLobject"
            }
        ], 
        "path": "dom/url/url", 
        "syntax": "URL()", 
        "type": "URL"
    }, 
    "URL.createObjectURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URL.createObjectURL", 
        "params": [
            {
                "descr": "Is a File object or a Blob object to create a object URL for.", 
                "name": "blob"
            }
        ], 
        "path": "dom/url/createobjecturl", 
        "syntax": "URL.createObjectURL()", 
        "type": "URL"
    }, 
    "URL.origin": {
        "descr": "The URL.origin read-only property returns a USVString containing the Unicode serialization of the origin of the represented URL, that is:", 
        "name": "URL.origin", 
        "params": [], 
        "path": "dom/url/origin", 
        "syntax": "string = URLObject.origin; Examples var result = new URL(\"blob:https://mozilla.org:443/\").origin; // Returns:'https://developer.mozilla.org:443'", 
        "type": "URL"
    }, 
    "URL.revokeObjectURL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URL.revokeObjectURL", 
        "params": [
            {
                "descr": "is a DOMString representing the object URL that was created by calling URL.createObjectURL().", 
                "name": "objectURL"
            }
        ], 
        "path": "dom/url/revokeobjecturl", 
        "syntax": "URL.revokeObjectURL()", 
        "type": "URL"
    }, 
    "URL.searchParams": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URL.searchParams", 
        "params": [], 
        "path": "dom/url/searchparams", 
        "syntax": "searchParams property of the URL interface returns a URLSearchParams object allowing to access the GET query arguments contained in the URL. Syntax var urRLSearchParams = URL.searchParams; Value A URLSearchParams object. Specifications    Specification Status Comment   URLThe definition of 'searchParams' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 ? ? ? ?         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? 51.0 ? ? ? ? ? 51.0          Edit this page on MDN", 
        "type": "URL"
    }, 
    "URLSearchParams": {
        "descr": "The URLSearchParams interface defines utility methods to work with the query string of a URL.", 
        "name": "URLSearchParams", 
        "params": [
            {
                "descr": "Constructor returning a URLSearchParams object.", 
                "name": "URLSearchParams()"
            }, 
            {
                "descr": "Appends a specified key/value pair as a new search parameter.", 
                "name": "URLSearchParams.append()"
            }, 
            {
                "descr": "Deletes the given search parameter, and its associated value, from the list of all search parameters.", 
                "name": "URLSearchParams.delete()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all key/value pairs contained in this object.", 
                "name": "URLSearchParams.entries()"
            }, 
            {
                "descr": "Returns the first value associated to the given search parameter.", 
                "name": "URLSearchParams.get()"
            }, 
            {
                "descr": "Returns all the values association with a given search parameter.", 
                "name": "URLSearchParams.getAll()"
            }, 
            {
                "descr": "Returns a Boolean indicating if such a search parameter exists.", 
                "name": "URLSearchParams.has()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all keys of the key/value pairs contained in this object.", 
                "name": "URLSearchParams.keys()"
            }, 
            {
                "descr": "Sets the value associated to a given search parameter to the given value. ", 
                "name": "URLSearchParams.set()"
            }, 
            {
                "descr": "Returns a string containg a query string suitable for use in a URL.", 
                "name": "URLSearchParams.toString()"
            }, 
            {
                "descr": "Returns an iterator allowing to go through all values of the key/value pairs contained in this object.", 
                "name": "URLSearchParams.values()"
            }
        ], 
        "path": "dom/urlsearchparams", 
        "syntax": "iterator allowing to go through all key/value pairs contained in this object. URLSearchParams.get()", 
        "type": "URL"
    }, 
    "URLSearchParams.append": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.append", 
        "params": [
            {
                "descr": "The name of the parameter to append.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the parameter to append.", 
                "name": "value"
            }
        ], 
        "path": "dom/urlsearchparams/append", 
        "syntax": "URLSearchParams interface appends a specified key/value pair as a new search parameter. Syntax URLSearchParams.append(name, value)", 
        "type": "URL"
    }, 
    "URLSearchParams.constructor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.constructor", 
        "params": [
            {
                "descr": "A USVString or a URLSearchParams instance.", 
                "name": "init Optional"
            }
        ], 
        "path": "dom/urlsearchparams/urlsearchparams", 
        "syntax": "URLSearchParams()", 
        "type": "URL"
    }, 
    "URLSearchParams.delete": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.delete", 
        "params": [
            {
                "descr": "The name of the parameter to be deleted.", 
                "name": "name"
            }
        ], 
        "path": "dom/urlsearchparams/delete", 
        "syntax": "URLSearchParams interface deletes the given search parameter and its associated value, from the list of all search parameters. Syntax URLSearchParams.delete(name)", 
        "type": "URL"
    }, 
    "URLSearchParams.entries": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.entries", 
        "params": [], 
        "path": "dom/urlsearchparams/entries", 
        "syntax": "URLSearchParams.entries()", 
        "type": "URL"
    }, 
    "URLSearchParams.get": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.get", 
        "params": [
            {
                "descr": "The name of the parameter to return.", 
                "name": "name"
            }
        ], 
        "path": "dom/urlsearchparams/get", 
        "syntax": "URLSearchParams interface returns the first value associated to the given search parameter. Syntax URLSearchParams.get(name)", 
        "type": "URL"
    }, 
    "URLSearchParams.getAll": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.getAll", 
        "params": [
            {
                "descr": "The name of the parameter to return.", 
                "name": "name"
            }
        ], 
        "path": "dom/urlsearchparams/getall", 
        "syntax": "URLSearchParams interface returns all the values associated with a given search parameter as an array.  Syntax URLSearchParams.getAll(name)", 
        "type": "URL"
    }, 
    "URLSearchParams.has": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.has", 
        "params": [
            {
                "descr": "The name of the parameter to find.", 
                "name": "name"
            }
        ], 
        "path": "dom/urlsearchparams/has", 
        "syntax": "URLSearchParams interface returns a Boolean that indicates whether a parameter with the specified name exists. Syntax var hasName = URLSearchParams.has(name)", 
        "type": "URL"
    }, 
    "URLSearchParams.keys": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.keys", 
        "params": [], 
        "path": "dom/urlsearchparams/keys", 
        "syntax": "URLSearchParams.keys()", 
        "type": "URL"
    }, 
    "URLSearchParams.set": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.set", 
        "params": [
            {
                "descr": "The name of the parameter to set.", 
                "name": "name"
            }, 
            {
                "descr": "The value of the parameter to set.", 
                "name": "value"
            }
        ], 
        "path": "dom/urlsearchparams/set", 
        "syntax": "URLSearchParams interface sets the value associated with a given search parameter to the given value. If there were several matching values, this method deletes the others. If the search parameter doesn't exist, this method creates it. Syntax URLSearchParams.set(name, value)", 
        "type": "URL"
    }, 
    "URLSearchParams.toString": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "URLSearchParams.toString", 
        "params": [], 
        "path": "dom/urlsearchparams/tostring", 
        "syntax": "URLSearchParams interface returns a string containg a query string suitable for use in a URL. Syntax URLSearchParams.toString()", 
        "type": "URL"
    }, 
    "URLSearchParams.values": {
        "descr": "The URLSearchParams.values() method returns an iterator allowing to go through all values contained in this object. The values are USVString objects.", 
        "name": "URLSearchParams.values", 
        "params": [], 
        "path": "dom/urlsearchparams/values", 
        "syntax": "iterator allowing to go through all values contained in this object. The values are USVString objects.  Note: This method is available in Web Workers.  Syntax searchParams.values();", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly", 
        "params": [
            {
                "descr": "Is a DOMString containing the whole URL.", 
                "name": "URLUtilsReadOnly.href Read only"
            }, 
            {
                "descr": "Is a DOMString containing the protocol scheme of the URL, including the final ':'.", 
                "name": "URLUtilsReadOnly.protocol Read only"
            }, 
            {
                "descr": "Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL.", 
                "name": "URLUtilsReadOnly.host Read only"
            }, 
            {
                "descr": "Is a DOMString containing the domain of the URL.", 
                "name": "URLUtilsReadOnly.hostname Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the canonical form of the origin of the specific location.", 
                "name": "URLUtilsReadOnly.origin Read only"
            }, 
            {
                "descr": "Is a DOMString containing the port number of the URL.", 
                "name": "URLUtilsReadOnly.port Read only"
            }, 
            {
                "descr": "Is a DOMString containing an initial '/' followed by the path of the URL.", 
                "name": "URLUtilsReadOnly.pathname Read only"
            }, 
            {
                "descr": "Is a DOMString containing a '?' followed by the parameters of the URL.", 
                "name": "URLUtilsReadOnly.search Read only"
            }, 
            {
                "descr": "Is a DOMString containing a '#' followed by the fragment identifier of the URL.", 
                "name": "URLUtilsReadOnly.hash Read only"
            }, 
            {
                "descr": "Returns a DOMString containing the whole URL. ", 
                "name": "URLUtilsReadOnly.toString()"
            }
        ], 
        "path": "dom/urlutilsreadonly", 
        "syntax": "URLUtilsReadOnly interface defines utility methods to work with URLs. It defines only non-modifying methods intended to be used on data that cannot be changed. There are no object of this type, but several interface are implemented it, like WorkerLocation. Properties This interface doesn't inherit any property.  URLUtilsReadOnly.href Read only  Is a DOMString containing the whole URL. URLUtilsReadOnly.protocol Read only  Is a DOMString containing the protocol scheme of the URL, including the final ':'. URLUtilsReadOnly.host Read only  Is a DOMString containing the host, that is the hostname, a ':', and the port of the URL. URLUtilsReadOnly.hostname Read only  Is a DOMString containing the domain of the URL. URLUtilsReadOnly.origin", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.hash": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.hash", 
        "params": [], 
        "path": "dom/urlutilsreadonly/hash", 
        "syntax": "URLUtilsReadOnly.hash read-only property returns a DOMString containing a '#' followed by the fragment identifier of the URL. The hash is not percent encoded. Syntax string = object.hash; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/docs/URLUtilsReadOnly.hash#examplevar result = window.self.hash; // Returns:'#hash' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.hash' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support[1] Not supported 3.5 (1.9.1)[2] Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support[1] Not supported Not supported 1.0 (1.9.1)[2] Not supported Not supported Not supported     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.host": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.host", 
        "params": [], 
        "path": "dom/urlutilsreadonly/host", 
        "syntax": "URLUtilsReadOnly.host read-only property returns a DOMString containing the host, that is the hostname, a ':', and the port of the URL. Syntax string = object.host; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hostvar result = window.self.host; // Returns:'developer.mozilla.org:80' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.host' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.hostname": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.hostname", 
        "params": [], 
        "path": "dom/urlutilsreadonly/hostname", 
        "syntax": "URLUtilsReadOnly.hostname read-only property returns a DOMString containing the domain of the URL. Syntax string = object.hostname; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hostnamevar result = window.self.hostname; // Returns:'developer.mozilla.org' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.hostname' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.href": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.href", 
        "params": [], 
        "path": "dom/urlutilsreadonly/href", 
        "syntax": "URLUtilsReadOnly.href read-only property returns a DOMString containing the whole URL. Syntax string = object.href; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hrefvar result = window.self.href; // Returns:'https://developer.mozilla.org/en-US/URLUtilsReadOnly.href' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.href' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.origin": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.origin", 
        "params": [], 
        "path": "dom/urlutilsreadonly/origin", 
        "syntax": "URLUtilsReadOnly.origin read-only property is a DOMString containing the Unicode serialization of the origin of the represented URL, that is, for http and https, the scheme followed by '://', followed by the domain, followed by ':', followed by the port (the default port, 80 and 443 respectively, if explicitely specified). For URL using file:", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.pathname": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.pathname", 
        "params": [], 
        "path": "dom/urlutilsreadonly/pathname", 
        "syntax": "URLUtilsReadOnly.pathname read-only property returns a DOMString containing an initial '/' followed by the path of the URL. Syntax string = object.pathname; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.pathnamevar result = window.self.pathname; // Returns:'/en-US/URLUtilsReadOnly.pathname' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.pathname' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.port": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.port", 
        "params": [], 
        "path": "dom/urlutilsreadonly/port", 
        "syntax": "URLUtilsReadOnly.port read-only property returns a DOMString containing the port number of the URL. Syntax string = object.port; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.portvar result = window.self.port; // Returns:'80' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.port' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.protocol": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.protocol", 
        "params": [], 
        "path": "dom/urlutilsreadonly/protocol", 
        "syntax": "URLUtilsReadOnly.protocol read-only property returns a DOMString containing the protocol scheme of the URL, including the final ':'. Syntax string = object.protocol; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/URLUtilsReadOnly.hrefvar result = window.self.protocol; // Returns:'https:' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.protocol' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.search": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.search", 
        "params": [], 
        "path": "dom/urlutilsreadonly/search", 
        "syntax": "URLUtilsReadOnly.search read-only property returns a DOMString containing a '?' followed by the parameters of the URL. Syntax string = object.search; Examples // In a Web worker, on the page https://developer.mozilla.org/en-US/docs/URLUtilsReadOnly.href?t=67var result = window.self.search; // Returns:'?t=67' Specifications    Specification Status Comment   URLThe definition of 'URLUtilsReadOnly.search' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported [1] 3.5 (1.9.1) Not supported [1] Not supported [1] Not supported [1]         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported [1] Not supported [1] 1.0 (1.9.1) Not supported [1] Not supported [1] Not supported [1]     [1] Though not grouped in a single abstract interface, this method is directly available on the interfaces that implement it, if this interface is supported.", 
        "type": "URL"
    }, 
    "URLUtilsReadOnly.toString": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "URLUtilsReadOnly.toString", 
        "params": [], 
        "path": "dom/urlutilsreadonly/tostring", 
        "syntax": "URLUtilsReadOnly.toString()", 
        "type": "URL"
    }, 
    "UTC": {
        "descr": "The Date.UTC() method accepts the same parameters as the longest form of the constructor, and returns the number of milliseconds in a Date object since January 1, 1970, 00:00:00, universal time.", 
        "name": "Date.UTC", 
        "params": [
            {
                "descr": "A year after 1900.", 
                "name": "year"
            }, 
            {
                "descr": "An integer between 0 and 11 representing the month.", 
                "name": "month"
            }, 
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month.", 
                "name": "day"
            }, 
            {
                "descr": "Optional. An integer between 0 and 23 representing the hours.", 
                "name": "hour"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59 representing the minutes.", 
                "name": "minute"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59 representing the seconds.", 
                "name": "second"
            }, 
            {
                "descr": "Optional. An integer between 0 and 999 representing the milliseconds.", 
                "name": "millisecond"
            }
        ], 
        "path": "javascript/global_objects/date/utc", 
        "syntax": "Date.UTC(year, month[, day[, hour[, minute[, second[, millisecond]]]]])", 
        "type": "Date"
    }, 
    "Uint16Array": {
        "descr": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Uint16Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Uint16Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Uint16Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Uint16Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Uint16Array.prototype"
            }, 
            {
                "descr": "Creates a new Uint16Array from an array-like or iterable object. ", 
                "name": "Uint16Array.from()"
            }, 
            {
                "descr": "Creates a new Uint16Array with a variable number of arguments. ", 
                "name": "Uint16Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Uint16Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint16Array Fixed at construction time and thus read only.", 
                "name": "Uint16Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Uint16Array from the start of its ArrayBuffer. ", 
                "name": "Uint16Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Uint16Array from the start of its ArrayBuffer. ", 
                "name": "Uint16Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Uint16Array. ", 
                "name": "Uint16Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Uint16Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Uint16Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Uint16Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Uint16Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Uint16Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Uint16Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Uint16Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Uint16Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Uint16Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint16Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Uint16Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Uint16Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint16Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Uint16Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Uint16Array.prototype.copyWithin().", 
                "name": "Uint16Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Uint16Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Uint16Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Uint16Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Uint16Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Uint16Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Uint16Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Uint16Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Uint16Array from the given start and end element index.", 
                "name": "Uint16Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Uint16Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Uint16Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Uint16Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Uint16Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/uint16array", 
        "syntax": "new Uint16Array(length);\n or new Uint16Array(typedArray);\n or new Uint16Array(object);\n or new Uint16Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Uint32Array": {
        "descr": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Uint32Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Uint32Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Uint32Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Uint32Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Uint32Array.prototype"
            }, 
            {
                "descr": "Creates a new Uint32Array from an array-like or iterable object. ", 
                "name": "Uint32Array.from()"
            }, 
            {
                "descr": "Creates a new Uint32Array with a variable number of arguments. ", 
                "name": "Uint32Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Uint32Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint32Array Fixed at construction time and thus read only.", 
                "name": "Uint32Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Uint32Array from the start of its ArrayBuffer. ", 
                "name": "Uint32Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Uint32Array from the start of its ArrayBuffer. ", 
                "name": "Uint32Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Uint32Array. ", 
                "name": "Uint32Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Uint32Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Uint32Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Uint32Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Uint32Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Uint32Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Uint32Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Uint32Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Uint32Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Uint32Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint32Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Uint32Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Uint32Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint32Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Uint32Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Uint32Array.prototype.copyWithin().", 
                "name": "Uint32Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Uint32Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Uint32Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Uint32Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Uint32Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Uint32Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Uint32Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Uint32Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Uint32Array from the given start and end element index.", 
                "name": "Uint32Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Uint32Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Uint32Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Uint32Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Uint32Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/uint32array", 
        "syntax": "new Uint32Array(length);\n or new Uint32Array(typedArray);\n or new Uint32Array(object);\n or new Uint32Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Uint8Array": {
        "descr": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Uint8Array", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Uint8Array.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Uint8Array.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Uint8Array.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Uint8Array.prototype"
            }, 
            {
                "descr": "Creates a new Uint8Array from an array-like or iterable object. ", 
                "name": "Uint8Array.from()"
            }, 
            {
                "descr": "Creates a new Uint8Array with a variable number of arguments. ", 
                "name": "Uint8Array.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Uint8Array.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint8Array Fixed at construction time and thus read only.", 
                "name": "Uint8Array.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Uint8Array. ", 
                "name": "Uint8Array.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Uint8Array from the start of its ArrayBuffer. ", 
                "name": "Uint8Array.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the Uint8Array. ", 
                "name": "Uint8Array.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Uint8Array.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Uint8Array.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Uint8Array.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Uint8Array.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Uint8Array.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Uint8Array.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Uint8Array.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Uint8Array.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Uint8Array.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint8Array.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Uint8Array.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Uint8Array.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint8Array.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Uint8Array.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Uint8Array.prototype.copyWithin().", 
                "name": "Uint8Array.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Uint8Array.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Uint8Array.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Uint8Array.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Uint8Array.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Uint8Array.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Uint8Array.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Uint8Array.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Uint8Array from the given start and end element index.", 
                "name": "Uint8Array.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Uint8Array.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Uint8Array.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Uint8Array.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Uint8Array.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/uint8array", 
        "syntax": "new Uint8Array(length);\n or new Uint8Array(typedArray);\n or new Uint8Array(object);\n or new Uint8Array(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "Uint8ClampedArray": {
        "descr": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).", 
        "name": "Uint8ClampedArray", 
        "params": [
            {
                "descr": "Returns a number value of the element size. ", 
                "name": "Uint8ClampedArray.BYTES_PER_ELEMENT"
            }, 
            {
                "descr": "Static length property whose value is 3. ", 
                "name": "Uint8ClampedArray.length"
            }, 
            {
                "descr": "Returns the string value of the constructor name. ", 
                "name": "Uint8ClampedArray.name"
            }, 
            {
                "descr": "Prototype for the TypedArray objects.", 
                "name": "Uint8ClampedArray.prototype"
            }, 
            {
                "descr": "Creates a new Uint8ClampedArray from an array-like or iterable object. ", 
                "name": "Uint8ClampedArray.from()"
            }, 
            {
                "descr": "Creates a new Uint8ClampedArray with a variable number of arguments. ", 
                "name": "Uint8ClampedArray.of()"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "Uint8ClampedArray.prototype.constructor"
            }, 
            {
                "descr": "Returns the ArrayBuffer referenced by the Uint8ClampedArray Fixed at construction time and thus read only.", 
                "name": "Uint8ClampedArray.prototype.buffer Read only"
            }, 
            {
                "descr": "Returns the length (in bytes) of the Uint8ClampedArray from the start of its ArrayBuffer. ", 
                "name": "Uint8ClampedArray.prototype.byteLength Read only"
            }, 
            {
                "descr": "Returns the offset (in bytes) of the Uint8ClampedArray from the start of its ArrayBuffer. ", 
                "name": "Uint8ClampedArray.prototype.byteOffset Read only"
            }, 
            {
                "descr": "Returns the number of elements hold in the UintClamped8Array. ", 
                "name": "Uint8ClampedArray.prototype.length Read only"
            }, 
            {
                "descr": "Copies a sequence of array elements within the array. ", 
                "name": "Uint8ClampedArray.prototype.copyWithin()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the key/value pairs for each index in the array. ", 
                "name": "Uint8ClampedArray.prototype.entries()"
            }, 
            {
                "descr": "Tests whether all elements in the array pass the test provided by a function. ", 
                "name": "Uint8ClampedArray.prototype.every()"
            }, 
            {
                "descr": "Fills all the elements of an array from a start index to an end index with a static value. ", 
                "name": "Uint8ClampedArray.prototype.fill()"
            }, 
            {
                "descr": "Creates a new array with all of the elements of this array for which the provided filtering function returns true. ", 
                "name": "Uint8ClampedArray.prototype.filter()"
            }, 
            {
                "descr": "Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found. ", 
                "name": "Uint8ClampedArray.prototype.find()"
            }, 
            {
                "descr": "Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found. ", 
                "name": "Uint8ClampedArray.prototype.findIndex()"
            }, 
            {
                "descr": "Calls a function for each element in the array. ", 
                "name": "Uint8ClampedArray.prototype.forEach()"
            }, 
            {
                "descr": "Determines whether a typed array includes a certain element, returning true or false as appropriate. ", 
                "name": "Uint8ClampedArray.prototype.includes()"
            }, 
            {
                "descr": "Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint8ClampedArray.prototype.indexOf()"
            }, 
            {
                "descr": "Joins all elements of an array into a string. ", 
                "name": "Uint8ClampedArray.prototype.join()"
            }, 
            {
                "descr": "Returns a new Array Iterator that contains the keys for each index in the array. ", 
                "name": "Uint8ClampedArray.prototype.keys()"
            }, 
            {
                "descr": "Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found. ", 
                "name": "Uint8ClampedArray.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Creates a new array with the results of calling a provided function on every element in this array. ", 
                "name": "Uint8ClampedArray.prototype.map()"
            }, 
            {
                "descr": "Former non-standard version of Uint8ClampedArray.prototype.copyWithin().", 
                "name": "Uint8ClampedArray.prototype.move()  Unimplemented"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value. ", 
                "name": "Uint8ClampedArray.prototype.reduce()"
            }, 
            {
                "descr": "Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value. ", 
                "name": "Uint8ClampedArray.prototype.reduceRight()"
            }, 
            {
                "descr": "Reverses the order of the elements of an array \u2014 the first becomes the last, and the last becomes the first. ", 
                "name": "Uint8ClampedArray.prototype.reverse()"
            }, 
            {
                "descr": "Stores multiple values in the typed array, reading input values from a specified array.", 
                "name": "Uint8ClampedArray.prototype.set()"
            }, 
            {
                "descr": "Extracts a section of an array and returns a new array. ", 
                "name": "Uint8ClampedArray.prototype.slice()"
            }, 
            {
                "descr": "Returns true if at least one element in this array satisfies the provided testing function. ", 
                "name": "Uint8ClampedArray.prototype.some()"
            }, 
            {
                "descr": "Sorts the elements of an array in place and returns the array. ", 
                "name": "Uint8ClampedArray.prototype.sort()"
            }, 
            {
                "descr": "Returns a new Uint8ClampedArray from the given start and end element index.", 
                "name": "Uint8ClampedArray.prototype.subarray()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array. ", 
                "name": "Uint8ClampedArray.prototype.values()"
            }, 
            {
                "descr": "Returns a localized string representing the array and its elements. ", 
                "name": "Uint8ClampedArray.prototype.toLocaleString()"
            }, 
            {
                "descr": "Returns a string representing the array and its elements. ", 
                "name": "Uint8ClampedArray.prototype.toString()"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the array.", 
                "name": "Uint8ClampedArray.prototype[@@iterator]()"
            }
        ], 
        "path": "javascript/global_objects/uint8clampedarray", 
        "syntax": "new Uint8ClampedArray(length);\n or new Uint8ClampedArray(typedArray);\n or new Uint8ClampedArray(object);\n or new Uint8ClampedArray(buffer [, byteOffset [, length]]);", 
        "type": "Global Objects"
    }, 
    "UserProximityEvent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "UserProximityEvent", 
        "params": [
            {
                "descr": "Indicates if the device has sensed a nearby physical object.", 
                "name": "UserProximityEvent.near"
            }
        ], 
        "path": "dom/userproximityevent", 
        "syntax": "UserProximityEvent indicates whether a nearby physical object is present by using the proximity sensor of a device. Properties  UserProximityEvent.near", 
        "type": "Events"
    }, 
    "UserProximityEvent.near": {
        "descr": "The near property tell if there is an object close to the device (true) or not (false).", 
        "name": "UserProximityEvent.near", 
        "params": [], 
        "path": "dom/userproximityevent/near", 
        "syntax": "var near = instanceOfUserProximityEvent.near; Value A boolean Specifications    Specification Status Comment     Proximity EventsThe definition of 'Proximity Events' in that specification. Candidate Recommendation Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported (Yes) Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported     See also", 
        "type": "Events"
    }, 
    "Using IndexedDB": {
        "descr": "IndexedDB is a way for you to persistently store data inside a user's browser. Because it lets you create web applications with rich query abilities regardless of network availability, your applications can work both online and offline.", 
        "name": "Using IndexedDB", 
        "params": [], 
        "path": "dom/indexeddb_api/using_indexeddb", 
        "syntax": "autoIncrement flag when creating the object store would enable the key generator for that object store. By default this flag is not set. With the key generator, the key would be generated automatically as you add the value to the object store. The current number of a key generator is always set to 1 when the object store for that key generator is first created. Basically the newly auto-generated key is increased by 1 based on the previous key. The current number for a key generator never decreases, other than as a result of database operations being reverted, for example, the database transaction is aborted. Therefore deleting a record or even clearing all records from an object store never affects the object store's key generator. We can create another object store with the key generator as below: // Open the indexedDB.var request = indexedDB.open(dbName, 3);\n or request.onupgradeneeded = function (event) {\u00a0\u00a0 \u00a0var db = event.target.result;\u00a0\u00a0 \u00a0// Create another object store called \"names\" with the autoIncrement flag set as true.\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0var objStore = db.createObjectStore(\"names\", { autoIncrement : true });\n or \u00a0\u00a0  // Because the \"names\" object store has the key generator, the key for the name value is generated automatically.\u00a0\u00a0  // The added records would be like:\u00a0\u00a0  // key : 1 => value : \"Bill\"\u00a0\u00a0  // key : 2 => value : \"Donna\"\u00a0\u00a0 \u00a0for (var i in customerData) {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0objStore.add(customerData[i].name);\n or \u00a0\u00a0 \u00a0}};);", 
        "type": "IndexedDB"
    }, 
    "Using dynamic styling information": {
        "descr": "The CSS Object Model (CSSOM), part of the DOM, exposes specific interfaces allowing manipulation of a wide amount of information regarding CSS. Initially defined in the DOM Level 2 Style recommendation, these interfaces forms now a specification, CSS Object Model (CSSOM) which aims at superseding it.", 
        "name": "Using dynamic styling information", 
        "params": [], 
        "path": "dom/css_object_model/using_dynamic_styling_information", 
        "syntax": "style object exposes the Stylesheet and the CSSStylesheet interfaces. Those interfaces contain members like insertRule, selectorText, and parentStyleSheet for accessing and manipulating the individual style rules that make up a CSS stylesheet. To get to the style objects from the document, you can use the document.styleSheets property and access the individual objects by index (e.g., document.styleSheets[0] is the first stylesheet defined for the document, etc.).", 
        "type": "Miscellaneous"
    }, 
    "Using the MediaRecorder API": {
        "descr": "The MediaRecorder API is a simple construct, used with Navigator.getUserMedia(), which provides an easy way of recording media streams from the user's input devices and instantly using them in web apps, rather than having to perform manual encoding operations on raw PCM data, etc., which would be required when using getUserMedia() alone. This article aims to provide a basic guide on how to use MediaRecorder.", 
        "name": "Using the MediaRecorder API", 
        "params": [], 
        "path": "dom/mediarecorder_api/using_the_mediarecorder_api", 
        "syntax": "calc()", 
        "type": "Stream"
    }, 
    "VRDisplay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay", 
        "params": [
            {
                "descr": "Returns a VRDisplayCapabilities object that indicates the various capabilities of the VRDisplay.", 
                "name": "VRDisplay.capabilities Read only"
            }, 
            {
                "descr": "Gets and sets the z-depth defining the far plane of the eye view frustum, i.e. ", 
                "name": "VRDisplay.depthFar"
            }, 
            {
                "descr": "Gets and sets the z-depth defining the near plane of the eye view frustum, i.e. ", 
                "name": "VRDisplay.depthNear"
            }, 
            {
                "descr": "Returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see Gamepad.displayId).", 
                "name": "VRDisplay.displayId Read only"
            }, 
            {
                "descr": "Returns a human-readable name to identify the VRDisplay.", 
                "name": "VRDisplay.displayName Read only"
            }, 
            {
                "descr": "Returns a Boolean indicating whether the VRDisplay is connected to the computer.", 
                "name": "VRDisplay.isConnected Read only"
            }, 
            {
                "descr": "Returns a Boolean indicating whether the VRDisplay is currently having content presented through it.", 
                "name": "VRDisplay.isPresenting Read only"
            }, 
            {
                "descr": "Returns a VRStageParameters object containing room-scale parameters, if the VRDisplay is capable of supporting room-scale experiences.", 
                "name": "VRDisplay.stageParameters Read only"
            }, 
            {
                "descr": "Returns the VREyeParameters object containing the eye parameters for the specified eye.", 
                "name": "VRDisplay.getEyeParameters()"
            }, 
            {
                "descr": "Returns the layers currently being presented by the VRDisplay.", 
                "name": "VRDisplay.getLayers()"
            }, 
            {
                "descr": "Returns a VRPose object defining the future predicted pose of the VRDisplay as it will be when the current frame is actually presented.", 
                "name": "VRDisplay.getPose()"
            }, 
            {
                "descr": "Returns a VRPose object defining the current pose of the VRDisplay, with no prediction applied.", 
                "name": "VRDisplay.getImmediatePose()"
            }, 
            {
                "descr": "Resets the pose for this VRDisplay, treating its current VRPose.position and VRPose.orientation as the \"origin/zero\" values.", 
                "name": "VRDisplay.resetPose()"
            }, 
            {
                "descr": "A special implementation of Window.cancelAnimationFrame that allows callbacks registered with VRDisplay.requestAnimationFrame() to be unregistered.", 
                "name": "VRDisplay.cancelAnimationFrame()"
            }, 
            {
                "descr": "A special implementation of Window.requestAnimationFrame containing a callback function that will be called every time a new frame of the VRDisplay presentation is rendered.", 
                "name": "VRDisplay.requestAnimationFrame()"
            }, 
            {
                "descr": "Starts the VRDisplay presenting a scene.", 
                "name": "VRDisplay.requestPresent()"
            }, 
            {
                "descr": "Stops the VRDisplay presenting a scene.", 
                "name": "VRDisplay.exitPresent()"
            }, 
            {
                "descr": "Captures the current state of the VRLayer currently being presented and displays it on the VRDisplay.", 
                "name": "VRDisplay.submitFrame()"
            }
        ], 
        "path": "dom/vrdisplay", 
        "syntax": "VRDisplay interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality. An array of all connected VR Devices can be returned by invoking the Navigator.getVRDisplays()", 
        "type": "WebVR"
    }, 
    "VRDisplay.cancelAnimationFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.cancelAnimationFrame", 
        "params": [
            {
                "descr": "The handle returned by the VRDisplay.requestAnimationFrame() call that you want to unregister.", 
                "name": "handle"
            }
        ], 
        "path": "dom/vrdisplay/cancelanimationframe", 
        "syntax": "cancelAnimationFrame()", 
        "type": "WebVR"
    }, 
    "VRDisplay.capabilities": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.capabilities", 
        "params": [], 
        "path": "dom/vrdisplay/capabilities", 
        "syntax": "capabilities read-only property of the VRDisplay interface returns a VRDisplayCapabilities object that indicates the various capabilities of the VRDisplay. Syntax var myCapabilities = vrDisplayInstance.capabilities; Value A VRDisplayCapabilities object. Examples Object {hasPosition: false, hasOrientation: true, hasExternalDisplay: false, canPresent: true, maxLayers: 1} Specifications    Specification Status Comment   WebVRThe definition of 'capabilities' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplay.depthFar": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.depthFar", 
        "params": [], 
        "path": "dom/vrdisplay/depthfar", 
        "syntax": "depthFar property of the VRDisplay interface gets and sets the z-depth defining the far plane of the eye view frustum, i.e. the furthest viewable boundary of the scene. Syntax var mydepthFar = vrDisplayInstance.depthFar;vrDisplayInstance.depthFar = 7500.0; Value A double, representing the z-depth in meters; its initial value is 10000.0. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'depthFar' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplay.depthNear": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.depthNear", 
        "params": [], 
        "path": "dom/vrdisplay/depthnear", 
        "syntax": "depthNear property of the VRDisplay interface gets and sets the z-depth defining the near plane of the eye view frustum, i.e. the nearest viewable boundary of the scene. Syntax var mydepthNear = vrDisplayInstance.depthNear;vrDisplayInstance.depthNear = 1.0; Value A double, representing the z-depth in meters; its initial value is 0.01. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'depthNear' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplay.displayId": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.displayId", 
        "params": [], 
        "path": "dom/vrdisplay/displayid", 
        "syntax": "displayId read-only property of the VRDisplay interface returns an identifier for this particular VRDisplay, which is also used as an association point in the Gamepad API (see Gamepad.displayId).", 
        "type": "WebVR"
    }, 
    "VRDisplay.displayName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.displayName", 
        "params": [], 
        "path": "dom/vrdisplay/displayname", 
        "syntax": "displayName read-only property of the VRDisplay interface returns a human-readable name to identify the VRDisplay. This will generally be something like \"Oculus VR HMD (HMD)\" or \"Oculus VR HMD (Sensor)\".", 
        "type": "WebVR"
    }, 
    "VRDisplay.exitPresent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.exitPresent", 
        "params": [], 
        "path": "dom/vrdisplay/exitpresent", 
        "syntax": "exitPresent()", 
        "type": "WebVR"
    }, 
    "VRDisplay.getEyeParameters": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.getEyeParameters", 
        "params": [
            {
                "descr": "A DOMString representing the eye you want to return the eye parameters for. ", 
                "name": "whichEye"
            }
        ], 
        "path": "dom/vrdisplay/geteyeparameters", 
        "syntax": "getEyeParameters()", 
        "type": "WebVR"
    }, 
    "VRDisplay.getImmediatePose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.getImmediatePose", 
        "params": [], 
        "path": "dom/vrdisplay/getimmediatepose", 
        "syntax": "getImmediatePose()", 
        "type": "WebVR"
    }, 
    "VRDisplay.getLayers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.getLayers", 
        "params": [], 
        "path": "dom/vrdisplay/getlayers", 
        "syntax": "getLayers()", 
        "type": "WebVR"
    }, 
    "VRDisplay.getPose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.getPose", 
        "params": [], 
        "path": "dom/vrdisplay/getpose", 
        "syntax": "getPose()", 
        "type": "WebVR"
    }, 
    "VRDisplay.hardwareUnitId": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VRDisplay.hardwareUnitId", 
        "params": [], 
        "path": "dom/vrdisplay/hardwareunitid", 
        "syntax": "hardwareUnitId read-only property of the VRDevice interface returns the distinct hardware ID for the overall hardware unit that this VRDevice is a part of. All devices that are part of the same physical piece of hardware will have the same hardwareUnitId. Syntax var hardwareID = VRDevice.hardwareUnitId; Value A DOMString containing the ID of the overall hardware unit. Examples The following snippet (see our VRDevice example) returns an array of all the VRDevice", 
        "type": "WebVR"
    }, 
    "VRDisplay.isConnected": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.isConnected", 
        "params": [], 
        "path": "dom/vrdisplay/isconnected", 
        "syntax": "isConnected read-only property of the VRDisplay interface returns a Boolean indicating whether the VRDisplay is connected to the computer. Syntax var isItConnected = vrDisplayInstance.isConnected; Value A Boolean; true means the display is connected; false means it isn't. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'isConnected' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplay.ispresenting": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.ispresenting", 
        "params": [], 
        "path": "dom/vrdisplay/ispresenting", 
        "syntax": "isPresenting read-only property of the VRDisplay interface returns a Boolean indicating whether the VRDisplay is currently having content presented through it. Syntax var isItPresenting = vrDisplayInstance.isPresenting; Value A Boolean; true means the display is presenting; false means it isn't. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'isPresenting' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplay.requestAnimationFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.requestAnimationFrame", 
        "params": [
            {
                "descr": "A callback function that will be called every time a new frame of the VRDisplay presentation is rendered.", 
                "name": "callback"
            }
        ], 
        "path": "dom/vrdisplay/requestanimationframe", 
        "syntax": "requestAnimationFrame()", 
        "type": "WebVR"
    }, 
    "VRDisplay.requestPresent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.requestPresent", 
        "params": [
            {
                "descr": "An array of VRLayer objects representing the scene you want to present. ", 
                "name": "layers"
            }
        ], 
        "path": "dom/vrdisplay/requestpresent", 
        "syntax": "requestPresent()", 
        "type": "WebVR"
    }, 
    "VRDisplay.resetPose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.resetPose", 
        "params": [], 
        "path": "dom/vrdisplay/resetpose", 
        "syntax": "resetPose()", 
        "type": "WebVR"
    }, 
    "VRDisplay.stageParameters": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.stageParameters", 
        "params": [], 
        "path": "dom/vrdisplay/stageparameters", 
        "syntax": "stageParameters read-only property of the VRDisplay interface returns a VRStageParameters object containing room-scale parameters, if the VRDisplay is capable of supporting room-scale experiences. Syntax var myStageParameters = vrDisplayInstance.stageParameters; Value VRStageParameters object containing the VRDisplay's room-scale parameters, or null if the VRDisplay is not capable of supporting room-scale experiences. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'stageParameters' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplay.submitFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplay.submitFrame", 
        "params": [
            {
                "descr": "A VRPose object, intended for use by the browser to manipulate the layer contents and reduce perceived latency.", 
                "name": "pose Optional"
            }
        ], 
        "path": "dom/vrdisplay/submitframe", 
        "syntax": "submitFrame()", 
        "type": "WebVR"
    }, 
    "VRDisplayCapabilities": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplayCapabilities", 
        "params": [
            {
                "descr": "Returns a Boolean stating whether the VR display is capable of presenting content (e.g. ", 
                "name": "VRDisplayCapabilities.canPresent Read only"
            }, 
            {
                "descr": "Returns a Boolean stating whether the VR display is separate from the device's primary display.", 
                "name": "VRDisplayCapabilities.hasExternalDisplay Read only"
            }, 
            {
                "descr": "Returns a Boolean stating whether the VR display can track and return orientation information.", 
                "name": "VRDisplayCapabilities.hasOrientation Read only"
            }, 
            {
                "descr": "Returns a Boolean stating whether the VR display can track and return position information.", 
                "name": "VRDisplayCapabilities.hasPosition Read only"
            }, 
            {
                "descr": "Returns a number indicating the maximum number of VRLayers that the VR display can present at once (e.g. ", 
                "name": "VRDisplayCapabilities.maxLayers Read only"
            }
        ], 
        "path": "dom/vrdisplaycapabilities", 
        "syntax": "VRDisplayCapabilities interface of the WebVR API describes the capabilities of a VRDisplay \u2014 it's features can be used to perform VR device capability tests, for example can it return position information. This interface is accessible through the VRDisplay.capabilities property. Properties  VRDisplayCapabilities.canPresent", 
        "type": "WebVR"
    }, 
    "VRDisplayCapabilities.canPresent": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplayCapabilities.canPresent", 
        "params": [], 
        "path": "dom/vrdisplaycapabilities/canpresent", 
        "syntax": "canPresent read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display is capable of presenting content (e.g. through an HMD).", 
        "type": "WebVR"
    }, 
    "VRDisplayCapabilities.hasExternalDisplay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplayCapabilities.hasExternalDisplay", 
        "params": [], 
        "path": "dom/vrdisplaycapabilities/hasexternaldisplay", 
        "syntax": "hasExternalDisplay read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display is separate from the device's primary display.  Note: If presenting VR content would obscure other content on the device, this will return false, in which case the application should not attempt to mirror VR content or update non-VR UI because that content will not be visible.  Syntax var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay; Value A Boolean. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'hasExternalDisplay' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplayCapabilities.hasOrientation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplayCapabilities.hasOrientation", 
        "params": [], 
        "path": "dom/vrdisplaycapabilities/hasorientation", 
        "syntax": "hasOrientation read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display can track and return orientation information. Syntax var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation; Value A Boolean. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'hasOrientation' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplayCapabilities.hasPosition": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplayCapabilities.hasPosition", 
        "params": [], 
        "path": "dom/vrdisplaycapabilities/hasposition", 
        "syntax": "hasPosition read-only property of the VRDisplayCapabilities interface returns a Boolean stating whether the VR display can track and return position information. Syntax var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition; Value A Boolean. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'hasPosition' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRDisplayCapabilities.maxLayers": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRDisplayCapabilities.maxLayers", 
        "params": [], 
        "path": "dom/vrdisplaycapabilities/maxlayers", 
        "syntax": "maxLayers read-only property of the VRDisplayCapabilities interface returns a number indicating the maximum number of VRLayers that the VR display can present at once (e.g. the maximum length of the array that Display.requestPresent()", 
        "type": "WebVR"
    }, 
    "VREyeParameters": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VREyeParameters", 
        "params": [
            {
                "descr": "Represents the offset from the center point between the user's eyes to the center of the eye, measured in meters.", 
                "name": "VREyeParameters.offset Read only"
            }, 
            {
                "descr": "Describes the current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD).", 
                "name": "VREyeParameters.fieldOfView Read only"
            }, 
            {
                "descr": "Describes the recommended render target width of each eye viewport, in pixels.", 
                "name": "VREyeParameters.renderWidth Read only"
            }, 
            {
                "descr": "Describes the recommended render target height of each eye viewport, in pixels.", 
                "name": "VREyeParameters.renderHeight Read only"
            }
        ], 
        "path": "dom/vreyeparameters", 
        "syntax": "VREyeParameters interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information. This interface is accessible through the VRDisplay.getEyeParameters()", 
        "type": "WebVR"
    }, 
    "VREyeParameters.fieldOfView": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VREyeParameters.fieldOfView", 
        "params": [], 
        "path": "dom/vreyeparameters/fieldofview", 
        "syntax": "fieldOfView read-only property of the VREyeParameters interface describes the current field of view for the eye, which can vary as the user adjusts their interpupillary distance (IPD).", 
        "type": "WebVR"
    }, 
    "VREyeParameters.maximumFieldOfView": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VREyeParameters.maximumFieldOfView", 
        "params": [], 
        "path": "dom/vreyeparameters/maximumfieldofview", 
        "syntax": "maximumFieldOfView read-only property of the VREyeParameters interface describes the maximum supported field of view for the current eye. Syntax var maxFOV = myEyeParameters.maximumFieldOfView; Value A VRFieldOfView object. Examples TBD Specifications    Specification Status Comment   WebVRThe definition of 'maximumFieldOfView' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes)[1] 39 (39)[2] No support No support No support         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support 39.0 (39)[2] 44.0 (44)[3] No support No support No support No support No support      [1] The support in Chrome is currently experimental. To find information on Chrome's WebVR implementation status including supporting builds, check out Bringing VR to Chrome by Brandon Jones. [2] The support for this feature is currently disabled by default in Firefox. To enable WebVR support in Firefox Nightly/Developer Edition, you can go to about:config", 
        "type": "WebVR"
    }, 
    "VREyeParameters.minimumFieldOfView": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VREyeParameters.minimumFieldOfView", 
        "params": [], 
        "path": "dom/vreyeparameters/minimumfieldofview", 
        "syntax": "minimumFieldOfView read-only property of the VREyeParameters interface describes the minimum supported field of view for the current eye. Syntax var minFOV = myEyeParameters.minimumFieldOfView; Value A VRFieldOfView object. Examples TBD Specifications    Specification Status Comment   WebVRThe definition of 'minimumFieldOfView' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes)[1] 39 (39)[2] No support No support No support         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support 39.0 (39)[2] 44.0 (44)[3] No support No support No support No support No support      [1] The support in Chrome is currently experimental. To find information on Chrome's WebVR implementation status including supporting builds, check out Bringing VR to Chrome by Brandon Jones. [2] The support for this feature is currently disabled by default in Firefox. To enable WebVR support in Firefox Nightly/Developer Edition, you can go to about:config", 
        "type": "WebVR"
    }, 
    "VREyeParameters.offset": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VREyeParameters.offset", 
        "params": [], 
        "path": "dom/vreyeparameters/offset", 
        "syntax": "offset read-only property of the VREyeParameters interface represents the offset from the center point between the user's eyes to the center of the eye, measured in meters. This value should represent half the user\u2019s interpupillary distance (IPD), but may also represent the distance from the center point of the headset to the center point of the lens for the given eye.", 
        "type": "WebVR"
    }, 
    "VREyeParameters.recommendedFieldOfView": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VREyeParameters.recommendedFieldOfView", 
        "params": [], 
        "path": "dom/vreyeparameters/recommendedfieldofview", 
        "syntax": "recommendedFieldOfView read-only property of the VREyeParameters interface describes the recommended field of view for the current eye \u2014 ideally based on user calibration. Syntax var recFOV = myEyeParameters.recommendedFieldOfView; Value A VRFieldOfView object. Examples The following example is taken from the Mozilla VR Team's threejs-vr-boilerplate code \u2014 to be precise, the VREffect.js file. Early on in the code the HMDVRDevice.getEyeParameters", 
        "type": "WebVR"
    }, 
    "VREyeParameters.renderHeight": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VREyeParameters.renderHeight", 
        "params": [], 
        "path": "dom/vreyeparameters/renderheight", 
        "syntax": "renderHeight read-only property of the VREyeParameters interface describes the recommended render target height of each eye viewport, in pixels. Syntax var curRenderHeight = myVRDisplay.getEyeParameters('left').renderHeight;", 
        "type": "WebVR"
    }, 
    "VREyeParameters.renderRect": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VREyeParameters.renderRect", 
        "params": [], 
        "path": "dom/vreyeparameters/renderrect", 
        "syntax": "renderRect read-only property of the VREyeParameters interface specifies the viewport of a canvas into which visuals for the current eye should be rendered. Syntax var myRenderRect = MyEyeParameters.renderRect; Value A DOMRect object. Examples TBD Specifications    Specification Status Comment   WebVRThe definition of 'minimumFieldOfView' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes)[1] 39 (39)[2] No support No support No support         Feature Android Firefox Mobile (Gecko) Firefox OS (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support 39.0 (39)[2] 44.0 (44)[3] No support No support No support No support No support      [1] The support in Chrome is currently experimental. To find information on Chrome's WebVR implementation status including supporting builds, check out Bringing VR to Chrome by Brandon Jones. [2] The support for this feature is currently disabled by default in Firefox. To enable WebVR support in Firefox Nightly/Developer Edition, you can go to about:config", 
        "type": "WebVR"
    }, 
    "VREyeParameters.renderWidth": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VREyeParameters.renderWidth", 
        "params": [], 
        "path": "dom/vreyeparameters/renderwidth", 
        "syntax": "renderWidth read-only property of the VREyeParameters interface describes the recommended render target width of each eye viewport, in pixels. Syntax var curRenderWidth = myVRDisplay.getEyeParameters('left').renderWidth;", 
        "type": "WebVR"
    }, 
    "VRFieldOfView": {
        "descr": "Draft This page is not complete.", 
        "name": "VRFieldOfView", 
        "params": [
            {
                "descr": "The number of degrees upwards that the field of view extends in.", 
                "name": "VRFieldOfView.upDegrees Read only"
            }, 
            {
                "descr": "The number of degrees to the right that the field of view extends in.", 
                "name": "VRFieldOfView.rightDegrees Read only"
            }, 
            {
                "descr": "The number of degrees downwards that the field of view extends in.", 
                "name": "VRFieldOfView.downDegrees Read only"
            }, 
            {
                "descr": "The number of degrees to the left that the field of view extends in.", 
                "name": "VRFieldOfView.leftDegrees Read only"
            }
        ], 
        "path": "dom/vrfieldofview", 
        "syntax": "VRFieldOfView interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point. Properties  VRFieldOfView.upDegrees Read only  The number of degrees upwards that the field of view extends in. VRFieldOfView.rightDegrees Read only  The number of degrees to the right that the field of view extends in. VRFieldOfView.downDegrees Read only  The number of degrees downwards that the field of view extends in. VRFieldOfView.leftDegrees Read only  The number of degrees to the left that the field of view extends in.  Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'VRFieldOfView' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRFieldOfView.constructor": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VRFieldOfView.constructor", 
        "params": [
            {
                "descr": "The number of degrees upwards that the field of view will extend in.", 
                "name": "upDegrees"
            }, 
            {
                "descr": "The number of degrees to the right that the field of view will extend in.", 
                "name": "rightDegrees"
            }, 
            {
                "descr": "The number of degrees downwards that the field of view will extend in.", 
                "name": "downDegrees"
            }, 
            {
                "descr": "The number of degrees to the left that the field of view will extend in.", 
                "name": "leftDegrees"
            }, 
            {
                "descr": "A dictionary object containing the four degree values specified above.", 
                "name": "init"
            }
        ], 
        "path": "dom/vrfieldofview/vrfieldofview", 
        "syntax": "VRFieldOfView()", 
        "type": "WebVR"
    }, 
    "VRFieldOfView.downDegrees": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRFieldOfView.downDegrees", 
        "params": [], 
        "path": "dom/vrfieldofview/downdegrees", 
        "syntax": "downDegrees read-only property of the VRFieldOfView interface returns the number of degrees downwards that the field of view extends in. Syntax var myDownDegrees = VRFieldOfView.downDegrees; Value A double. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'downDegrees' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRFieldOfView.leftDegrees": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRFieldOfView.leftDegrees", 
        "params": [], 
        "path": "dom/vrfieldofview/leftdegrees", 
        "syntax": "leftDegrees read-only property of the VRFieldOfView interface returns the number of degrees to the left that the field of view extends in. Syntax var myLeftDegrees = VRFieldOfView.leftDegrees; Value A double. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'leftDegrees' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRFieldOfView.rightDegrees": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRFieldOfView.rightDegrees", 
        "params": [], 
        "path": "dom/vrfieldofview/rightdegrees", 
        "syntax": "rightDegrees read-only property of the VRFieldOfView interface returns the number of degrees to the right that the field of view extends in. Syntax var myRightDegrees = VRFieldOfView.rightDegrees; Value A double. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'rightDegrees' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRFieldOfView.upDegrees": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRFieldOfView.upDegrees", 
        "params": [], 
        "path": "dom/vrfieldofview/updegrees", 
        "syntax": "upDegrees read-only property of the VRFieldOfView interface returns the number of degrees upwards that the field of view extends in. Syntax var myUpDegrees = VRFieldOfView.upDegrees; Value A double. Examples TBD. Specifications    Specification Status Comment   WebVRThe definition of 'upDegrees' in that specification. Editor's Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) No support No support No support         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Chrome for Android   Basic support No support (Yes) No support No support No support No support     See also", 
        "type": "WebVR"
    }, 
    "VRFieldOfViewReadOnly": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VRFieldOfViewReadOnly", 
        "params": [
            {
                "descr": "The number of degrees upward that the field of view extends.", 
                "name": "VRFieldOfViewReadOnly.upDegrees Read only"
            }, 
            {
                "descr": "The number of degrees to the right that the field of view extends.", 
                "name": "VRFieldOfViewReadOnly.rightDegrees Read only"
            }, 
            {
                "descr": "The number of degrees downwards that the field of view extends.", 
                "name": "VRFieldOfViewReadOnly.downDegrees Read only"
            }, 
            {
                "descr": "The number of degrees to the left that the field of view extends.", 
                "name": "VRFieldOfViewReadOnly.leftDegrees Read only"
            }
        ], 
        "path": "dom/vrfieldofviewreadonly", 
        "syntax": "VRFieldOfViewReadOnly interface of the WebVR API contains the raw definition for the degree value properties required to define a field of view. Inherited by VRFieldOfView. Properties  VRFieldOfViewReadOnly.upDegrees Read only  The number of degrees upward that the field of view extends. VRFieldOfViewReadOnly.rightDegrees Read only  The number of degrees to the right that the field of view extends. VRFieldOfViewReadOnly.downDegrees Read only  The number of degrees downwards that the field of view extends. VRFieldOfViewReadOnly.leftDegrees Read only  The number of degrees to the left that the field of view extends.  Examples You wouldn't ever use this object directly; for some useful examples see the VRFieldOfView page. To access the properties directly, you could do something like this: var lEye = myHMDVRDevice.getEyeParameters('left');\n or lEye.recommendedFieldOfView.upDegrees// returns something like 53.09438550469889lEye.recommendedFieldOfView.rightDegrees// returns something like 47.52769258067174lEye.recommendedFieldOfView.downDegrees// returns something like 53.09438550469889lEye.recommendedFieldOfView.leftDegrees// returns something like 46.63209579904155);", 
        "type": "WebVR"
    }, 
    "VRLayer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRLayer", 
        "params": [
            {
                "descr": "Defines the left texture bounds of the canvas whose contents will be presented by the VRDisplay.", 
                "name": "VRLayer.leftBounds"
            }, 
            {
                "descr": "Defines the right texture bounds of the canvas whose contents will be presented by the VRDisplay.", 
                "name": "VRLayer.rightBounds"
            }, 
            {
                "descr": "Defines the canvas whose contents will be presented by the VRDisplay.", 
                "name": "VRLayer.source"
            }
        ], 
        "path": "dom/vrlayer", 
        "syntax": "VRLayer interface (dictionary) of the WebVR API represents a content layer (an HTMLCanvasElement", 
        "type": "WebVR"
    }, 
    "VRLayer.leftBounds": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRLayer.leftBounds", 
        "params": [], 
        "path": "dom/vrlayer/leftbounds", 
        "syntax": "leftBounds read-only property of the VRLayer", 
        "type": "WebVR"
    }, 
    "VRLayer.rightBounds": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRLayer.rightBounds", 
        "params": [], 
        "path": "dom/vrlayer/rightbounds", 
        "syntax": "rightBounds read-only property of the VRLayer", 
        "type": "WebVR"
    }, 
    "VRLayer.source": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRLayer.source", 
        "params": [], 
        "path": "dom/vrlayer/source", 
        "syntax": "source read-only property of the VRLayer", 
        "type": "WebVR"
    }, 
    "VRPose": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose", 
        "params": [
            {
                "descr": "Returns the current time stamp of the system \u2014 a monotonically increasing value useful for determining if position data has been updated, and what order updates have occured in.", 
                "name": "VRPose.timeStamp Read only"
            }, 
            {
                "descr": "Returns the position of the VRDisplay at the current VRPose.timestamp as a 3D vector", 
                "name": "VRPose.position Read only"
            }, 
            {
                "descr": "Returns the linear velocity of the VRDisplay at the current VRPose.timestamp, in meters per second.", 
                "name": "VRPose.linearVelocity Read only"
            }, 
            {
                "descr": "Returns the linear acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second.", 
                "name": "VRPose.linearAcceleration Read only"
            }, 
            {
                "descr": "Returns the orientation of the sensor at the current VRPose.timestamp, as a quarternion value.", 
                "name": "VRPose.orientation Read only"
            }, 
            {
                "descr": "Returns the angular velocity of the VRDisplay at the current VRPose.timestamp, in radians per second.", 
                "name": "VRPose.angularVelocity Read only"
            }, 
            {
                "descr": "Returns the angular acceleration of the VRDisplay at the current VRPose.timestamp, in meters per second per second.", 
                "name": "VRPose.angularAcceleration Read only"
            }
        ], 
        "path": "dom/vrpose", 
        "syntax": "VRPose interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information.)", 
        "type": "WebVR"
    }, 
    "VRPose.angularAcceleration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.angularAcceleration", 
        "params": [], 
        "path": "dom/vrpose/angularacceleration", 
        "syntax": "angularAcceleration read-only property of the VRPose", 
        "type": "WebVR"
    }, 
    "VRPose.angularVelocity": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.angularVelocity", 
        "params": [], 
        "path": "dom/vrpose/angularvelocity", 
        "syntax": "angularVelocity read-only property of the VRPose", 
        "type": "WebVR"
    }, 
    "VRPose.hasOrientation": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VRPose.hasOrientation", 
        "params": [], 
        "path": "dom/vrpose/hasorientation", 
        "syntax": "hasOrientation read-only property of the VRPositionState interface returns a boolean indicating whether the VRPositionState.orientation property is valid (i.e. if the hardware is currently registering a valid orientation). If it is false", 
        "type": "WebVR"
    }, 
    "VRPose.hasPosition": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "VRPose.hasPosition", 
        "params": [], 
        "path": "dom/vrpose/hasposition", 
        "syntax": "hasPosition read-only property of the VRPositionState interface returns a boolean indicating whether the VRPositionState.position property is valid (i.e. if the hardware is currently registering a valid position). If it is false", 
        "type": "WebVR"
    }, 
    "VRPose.linearAcceleration": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.linearAcceleration", 
        "params": [], 
        "path": "dom/vrpose/linearacceleration", 
        "syntax": "linearAcceleration read-only property of the VRPose", 
        "type": "WebVR"
    }, 
    "VRPose.linearVelocity": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.linearVelocity", 
        "params": [], 
        "path": "dom/vrpose/linearvelocity", 
        "syntax": "linearVelocity read-only property of the VRPose", 
        "type": "WebVR"
    }, 
    "VRPose.orientation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.orientation", 
        "params": [], 
        "path": "dom/vrpose/orientation", 
        "syntax": "orientation read-only property of the VRPositionState interface returns the orientation of the sensor at the current VRPose.timestamp, as a quarternion value. The orientation yaw (rotation around the y axis) is relative to the initial yaw of the sensor when it was first read or the yaw of the sensor at the point that VRDisplay.resetPose()", 
        "type": "WebVR"
    }, 
    "VRPose.position": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.position", 
        "params": [], 
        "path": "dom/vrpose/position", 
        "syntax": "position read-only property of the VRPose", 
        "type": "WebVR"
    }, 
    "VRPose.timeStamp": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRPose.timeStamp", 
        "params": [], 
        "path": "dom/vrpose/timestamp", 
        "syntax": "timestamp read-only property of the VRPose", 
        "type": "WebVR"
    }, 
    "VRStageParameters": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRStageParameters", 
        "params": [
            {
                "descr": "Contains a matrix that transforms the sitting-space position returned by VRDisplay.getPose()/VRDisplay.getImmediatePose() into a standing-space position.", 
                "name": "VRStageParameters.sittingToStandingTransform Read only"
            }, 
            {
                "descr": "Returns the width of the play-area bounds in meters.", 
                "name": "VRStageParameters.sizeX Read only"
            }, 
            {
                "descr": "Returns the depth of the play-area bounds in meters.", 
                "name": "VRStageParameters.sizeY Read only"
            }
        ], 
        "path": "dom/vrstageparameters", 
        "syntax": "VRStageParameters interface of the WebVR API represents the values describing the the stage area for devices that support room-scale experiences. This interface is accessible through the VRDisplay.stageParameters property. Properties  VRStageParameters.sittingToStandingTransform", 
        "type": "WebVR"
    }, 
    "VRStageParameters.sittingToStandingTransform": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRStageParameters.sittingToStandingTransform", 
        "params": [], 
        "path": "dom/vrstageparameters/sittingtostandingtransform", 
        "syntax": "sittingToStandingTransform read-only property of the VRStageParameters interface contains a matrix that transforms the sitting-space position returned by VRDisplay.getPose()", 
        "type": "WebVR"
    }, 
    "VRStageParameters.sizeX": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRStageParameters.sizeX", 
        "params": [], 
        "path": "dom/vrstageparameters/sizex", 
        "syntax": "sizeX read-only property of the VRStageParameters interface returns the width of the play-area bounds in meters. The bounds are defined as an axis-aligned rectangle on the floor, for safety purposes. Content should not require the user to move beyond these bounds; however, it is possible for the user to ignore the bounds resulting in position values outside of this rectangle. The center of the rectangle is at (0,0,0) in standing-space coordinates.", 
        "type": "WebVR"
    }, 
    "VRStageParameters.sizeY": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "VRStageParameters.sizeY", 
        "params": [], 
        "path": "dom/vrstageparameters/sizey", 
        "syntax": "sizeY read-only property of the VRStageParameters interface returns the depth of the play-area bounds in meters. The bounds are defined as an axis-aligned rectangle on the floor, for safety purposes. Content should not require the user to move beyond these bounds; however, it is possible for the user to ignore the bounds resulting in position values outside of this rectangle. The center of the rectangle is at (0,0,0) in standing-space coordinates.", 
        "type": "WebVR"
    }, 
    "ValidityState": {
        "descr": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.", 
        "name": "ValidityState", 
        "params": [
            {
                "descr": "Is a Boolean indicating the user has provided input that the browser is unable to convert.", 
                "name": "ValidityState.badInput Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the element's custom validity message has been set to a non-empty string by calling the element's setCustomValidity() method.", 
                "name": "ValidityState.customError Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the value does not match the specified pattern.", 
                "name": "ValidityState.patternMismatch Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the value is greater than the maximum specified by the max attribute.", 
                "name": "ValidityState.rangeOverflow Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the value is less than the minimum specified by the min attribute.", 
                "name": "ValidityState.rangeUnderflow Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the value does not fit the rules determined by the step attribute (that is, it's not evenly divisible by the step value).", 
                "name": "ValidityState.stepMismatch Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the value exceeds the specified maxlength for HTMLInputElement or HTMLTextAreaElement objects. ", 
                "name": "ValidityState.tooLong Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the value is not in the required syntax (when type is email or url).", 
                "name": "ValidityState.typeMismatch Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the element meets all constraint validations, and is therefore considered to be valid.", 
                "name": "ValidityState.valid Read only"
            }, 
            {
                "descr": "Is a Boolean indicating the element has a required attribute, but no value.", 
                "name": "ValidityState.valueMissing Read only"
            }
        ], 
        "path": "dom/validitystate", 
        "syntax": "type is email or url). ValidityState.valid", 
        "type": "Miscellaneous"
    }, 
    "VideoPlaybackQuality": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality", 
        "params": [
            {
                "descr": "A DOMHighResTimeStamp containing the time in miliseconds since the start of the navigation and the creation of the object.", 
                "name": "VideoPlaybackQuality.creationTime Read only"
            }, 
            {
                "descr": "An unsigned long giving the number of video frames created and dropped since the creation of the associated HTMLVideoElement.", 
                "name": "VideoPlaybackQuality.totalVideoFrames Read only"
            }, 
            {
                "descr": "An unsigned long giving the number of video frames dropped since the creation of the associated HTMLVideoElement.", 
                "name": "VideoPlaybackQuality.droppedVideoFrames Read only"
            }, 
            {
                "descr": "An unsigned long giving the number of video frames corrupted since the creation of the associated HTMLVideoElement. ", 
                "name": "VideoPlaybackQuality.corruptedVideoFrames Read only"
            }, 
            {
                "descr": "A double containing the sum of the frame delay since the creation of the associated HTMLVideoElement. ", 
                "name": "VideoPlaybackQuality.totalFrameDelay Read only  Obsolete since Gecko 30"
            }
        ], 
        "path": "dom/videoplaybackquality", 
        "syntax": "VideoPlaybackQuality interface represents the set of metrics describing the playback quality of a video. An instance is created using the HTMLVideoElement.getVideoPlaybackQuality()", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.corruptedVideoFrames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.corruptedVideoFrames", 
        "params": [], 
        "path": "dom/videoplaybackquality/corruptedvideoframes", 
        "syntax": "VideoPlaybackQuality.corruptedVideoFrames read-only property returns an unsigned long containing the number of corrupted video frames since the creation of the associated HTMLVideoElement. A corrupted frame may or may not be dropped, depending of the corruption and of the browser algorithm. Syntax value = videoPlaybackQuality.corruptedVideoFrames; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.corruptedVideoFrames);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.creationTime": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.creationTime", 
        "params": [], 
        "path": "dom/videoplaybackquality/creationtime", 
        "syntax": "VideoPlaybackQuality.creationTime read-only property returns a DOMHighResTimeStamp containing the time in miliseconds since the start of the navigation and the creation of the object. Syntax value = videoPlaybackQuality.creationTime; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.creationTime);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.droppedVideoFrames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.droppedVideoFrames", 
        "params": [], 
        "path": "dom/videoplaybackquality/droppedvideoframes", 
        "syntax": "VideoPlaybackQuality.droppedVideoFrames read-only property returns an unsigned long containing the number of video frames dropped since the creation of the associated HTMLVideoElement. Syntax value = videoPlaybackQuality.droppedVideoFrames; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.droppedVideoFrames);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.totalFrameDelay": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.totalFrameDelay", 
        "params": [], 
        "path": "dom/videoplaybackquality/totalframedelay", 
        "syntax": "VideoPlaybackQuality.totalFrameDelay read-only property returns a double containing the sum of the frame delay since the creation of the associated HTMLVideoElement. The frame delay is the difference between a frame's theoretical presentation time and its effective display time. Syntax value = videoPlaybackQuality.totalFrameDelay; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.totalFrameDelay);", 
        "type": "Media"
    }, 
    "VideoPlaybackQuality.totalVideoFrames": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "VideoPlaybackQuality.totalVideoFrames", 
        "params": [], 
        "path": "dom/videoplaybackquality/totalvideoframes", 
        "syntax": "VideoPlaybackQuality.totalVideoFrames read-only property returns an unsigned long containing the number of video frames created and dropped since the creation of the associated HTMLVideoElement. Syntax value = videoPlaybackQuality.totalVideoFrames; Example var videoElt = document.getElementById(\"my_vid\");\n or var quality = videoElt.getVideoPlaybackQuality();\n or alert(quality.totalVideoFrames);", 
        "type": "Media"
    }, 
    "Visualizations with Web Audio API": {
        "descr": "One of the most interesting features of the Web Audio API is the ability to extract frequency, waveform, and other data from your audio source, which can then be used to create visualizations. This article explains how, and provides a couple of basic use cases.", 
        "name": "Visualizations with Web Audio API", 
        "params": [], 
        "path": "dom/web_audio_api/visualizations_with_web_audio_api", 
        "syntax": "analyser.fftSize = 2048;var bufferLength = analyser.frequencyBinCount;var dataArray = new Uint8Array(bufferLength);", 
        "type": "Web Audio"
    }, 
    "WaveShaperNode.curve": {
        "descr": "The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.", 
        "name": "WaveShaperNode.curve", 
        "params": [], 
        "path": "dom/waveshapernode/curve", 
        "syntax": "var audioCtx = new AudioContext();\n or var distortion = audioCtx.createWaveShaper();\n or distortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array);", 
        "type": "Web Audio"
    }, 
    "WaveShaperNode.oversample": {
        "descr": "The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal.", 
        "name": "WaveShaperNode.oversample", 
        "params": [], 
        "path": "dom/waveshapernode/oversample", 
        "syntax": "distortion.oversample = enumeratedValue; Values  distortion is a WaveShaperNode. enumeratedValue is one of 'none', '2x', or '4x'.  Example The following example shows basic usage of an AudioContext to create a wave shaper node. For applied examples/information, check out our Voice-change-O-matic demo (see app.js for relevant code).", 
        "type": "Web Audio"
    }, 
    "WeakMap": {
        "descr": "The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.", 
        "name": "WeakMap", 
        "params": [
            {
                "descr": "Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). ", 
                "name": "iterable"
            }, 
            {
                "descr": "The value of the length property is 0.", 
                "name": "WeakMap.length"
            }, 
            {
                "descr": "Represents the prototype for the WeakMap constructor. ", 
                "name": "WeakMap.prototype"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "WeakMap.prototype.constructor"
            }, 
            {
                "descr": "Removes any value associated to the key. ", 
                "name": "WeakMap.prototype.delete(key)"
            }, 
            {
                "descr": "Returns the value associated to the key, or undefined if there is none.", 
                "name": "WeakMap.prototype.get(key)"
            }, 
            {
                "descr": "Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.", 
                "name": "WeakMap.prototype.has(key)"
            }, 
            {
                "descr": "Sets the value for the key in the WeakMap object. ", 
                "name": "WeakMap.prototype.set(key, value)"
            }, 
            {
                "descr": "Removes all key/value pairs from the WeakMap object. ", 
                "name": "WeakMap.prototype.clear()"
            }
        ], 
        "path": "javascript/global_objects/weakmap", 
        "syntax": "new WeakMap([iterable])", 
        "type": "WeakMap"
    }, 
    "WeakSet": {
        "descr": "The WeakSet object lets you store weakly held objects in a collection.", 
        "name": "WeakSet", 
        "params": [
            {
                "descr": "If an iterable object is passed, all of its elements will be added to the new WeakSet. ", 
                "name": "iterable"
            }, 
            {
                "descr": "The value of the length property is 0.", 
                "name": "WeakSet.length"
            }, 
            {
                "descr": "Represents the prototype for the Set constructor. ", 
                "name": "WeakSet.prototype"
            }, 
            {
                "descr": "Returns the function that created an instance's prototype. ", 
                "name": "WeakSet.prototype.constructor"
            }, 
            {
                "descr": "Appends a new object with the given value to the WeakSet object.", 
                "name": "WeakSet.prototype.add(value)"
            }, 
            {
                "descr": "Removes the element associated to the value. ", 
                "name": "WeakSet.prototype.delete(value)"
            }, 
            {
                "descr": "Returns a boolean asserting whether an element is present with the given value in the WeakSet object or not.", 
                "name": "WeakSet.prototype.has(value)"
            }, 
            {
                "descr": "Removes all elements from the WeakSet object.", 
                "name": "WeakSet.prototype.clear()"
            }
        ], 
        "path": "javascript/global_objects/weakset", 
        "syntax": "new WeakSet([iterable]);", 
        "type": "WeakSet"
    }, 
    "Web Animations API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Web Animations API", 
        "params": [
            {
                "descr": "Provides playback controls and a timeline for an animation node or source. ", 
                "name": "Animation"
            }, 
            {
                "descr": "Describes sets of animatable properties and values, called keyframes and their timing options. ", 
                "name": "KeyframeEffect"
            }, 
            {
                "descr": "Represents the timeline of animation. ", 
                "name": "AnimationTimeline"
            }, 
            {
                "descr": "Represents animation timelines, including the default document timeline (accessed via Document.timeline).", 
                "name": "DocumentTimeline"
            }, 
            {
                "descr": "An object containing timing properties returned by the timing attribute of a KeyframeEffect. ", 
                "name": "AnimationEffectTiming"
            }, 
            {
                "descr": "Represents a sequence of keyframes that can be shared between KeyframeEffect objects. ", 
                "name": "SharedKeyframeList"
            }, 
            {
                "descr": "Element.animate(), KeyframeEffectReadOnly.KeyframeEffectReadOnly(), and KeyframeEffect.KeyframeEffect() all accept an optional dictionary object of timing properties.", 
                "name": "AnimationEffectTimingProperties"
            }, 
            {
                "descr": "The DocumentTimeline object representing the default document timeline.", 
                "name": "document.timeline"
            }, 
            {
                "descr": "Returns an Array of Animation objects currently in effect on elements in the document.", 
                "name": "document.getAnimations()"
            }, 
            {
                "descr": "A shortcut method for creating and playing an animation on an element. ", 
                "name": "Extensions to the Element interface  Element.animate()"
            }, 
            {
                "descr": "A dictionary object of timing properties, which are inherited by the mutable AnimationEffectTiming interface associated with KeyframeEffect.", 
                "name": "AnimationEffectTimingReadOnly"
            }, 
            {
                "descr": "Defines current and future \"Animation Effects\" like KeyframeEffect, which can be passed to Animation.Animation objects for playing, and KeyframeEffectReadOnly which is used by KeyframeEffect (inherited by CSS Animations and Transitions).", 
                "name": "AnimationEffectReadOnly"
            }, 
            {
                "descr": "Describes sets of animatable properties and values that can be played using the Animation.Animation() constructor, and which are inherited by KeyframeEffect.", 
                "name": "KeyframeEffectReadOnly"
            }
        ], 
        "path": "dom/web_animations_api", 
        "syntax": "Animation Provides playback controls and a timeline for an animation node or source. Can take an object created with the KeyframeEffect.KeyframeEffect", 
        "type": "Animation"
    }, 
    "Web Animations API: Keyframe Formats": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Web Animations API: Keyframe Formats", 
        "params": [], 
        "path": "dom/web_animations_api/keyframe_formats", 
        "syntax": "Element.animate()", 
        "type": "Animation"
    }, 
    "Web Audio API": {
        "descr": "The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing developers to choose audio sources, add effects to audio, create audio visualizations, apply spatial effects (such as panning) and much more.", 
        "name": "Web Audio API", 
        "params": [
            {
                "descr": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode. ", 
                "name": "AudioContext"
            }, 
            {
                "descr": "The AudioNodeinterface represents an audio-processing module like an audio source (e.g. ", 
                "name": "AudioNode"
            }, 
            {
                "descr": "The AudioParaminterface represents an audio-related parameter, like one of an AudioNode. ", 
                "name": "AudioParam"
            }, 
            {
                "descr": "The ended event is fired when playback has stopped because the end of the media was reached.", 
                "name": "ended (event)"
            }, 
            {
                "descr": "The OscillatorNodeinterface represents a sine wave. ", 
                "name": "OscillatorNode"
            }, 
            {
                "descr": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or created with raw data using AudioContext.createBuffer(). Once decoded into this form, the audio can then be put into an AudioBufferSourceNode.", 
                "name": "AudioBuffer"
            }, 
            {
                "descr": "The AudioBufferSourceNode interface represents an audio source consisting of in-memory audio data, stored in an AudioBuffer. ", 
                "name": "AudioBufferSourceNode"
            }, 
            {
                "descr": "The MediaElementAudioSourceNode interface represents an audio source consisting of an HTML5 <audio> or <video> element. ", 
                "name": "MediaElementAudioSourceNode"
            }, 
            {
                "descr": "The MediaStreamAudioSourceNode interface represents an audio source consisting of a WebRTC MediaStream (such as a webcam or microphone). ", 
                "name": "MediaStreamAudioSourceNode"
            }, 
            {
                "descr": "The BiquadFilterNodeinterface represents a simple low-order filter. ", 
                "name": "BiquadFilterNode"
            }, 
            {
                "descr": "The ConvolverNodeinterface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect.", 
                "name": "ConvolverNode"
            }, 
            {
                "descr": "The DelayNodeinterface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.", 
                "name": "DelayNode"
            }, 
            {
                "descr": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once.", 
                "name": "DynamicsCompressorNode"
            }, 
            {
                "descr": "The GainNodeinterface represents a change in volume. ", 
                "name": "GainNode"
            }, 
            {
                "descr": "The StereoPannerNode interface represents a simple stereo panner node that can be used to pan an audio stream left or right.", 
                "name": "StereoPannerNode"
            }, 
            {
                "descr": "The WaveShaperNodeinterface represents a non-linear distorter. ", 
                "name": "WaveShaperNode"
            }, 
            {
                "descr": "Used to define a periodic waveform that can be used to shape the output of an OscillatorNode.", 
                "name": "PeriodicWave"
            }, 
            {
                "descr": "The AudioDestinationNode interface represents the end destination of an audio source in a given context \u2014 usually the speakers of your device.", 
                "name": "AudioDestinationNode"
            }, 
            {
                "descr": "The MediaStreamAudioDestinationNode interface represents an audio destination consisting of a WebRTC MediaStream with a single AudioMediaStreamTrack, which can be used in a similar way to a MediaStream obtained from Navigator.getUserMedia. It is an AudioNode that acts as an audio destination.", 
                "name": "MediaStreamAudioDestinationNode"
            }, 
            {
                "descr": "The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information, for the purposes of data analysis and visualization.", 
                "name": "AnalyserNode"
            }, 
            {
                "descr": "The ChannelSplitterNode interface separates the different channels of an audio source out into a set of mono outputs.", 
                "name": "ChannelSplitterNode"
            }, 
            {
                "descr": "The ChannelMergerNode interface reunites different mono inputs into a single output. ", 
                "name": "ChannelMergerNode"
            }, 
            {
                "descr": "The AudioListenerinterface represents the position and orientation of the unique person listening to the audio scene used in audio spatialization.", 
                "name": "AudioListener"
            }, 
            {
                "descr": "The PannerNodeinterface represents the behavior of a signal in space. ", 
                "name": "PannerNode"
            }, 
            {
                "descr": "The ScriptProcessorNodeinterface allows the generation, processing, or analyzing of audio using JavaScript. ", 
                "name": "ScriptProcessorNode"
            }, 
            {
                "descr": "The audioprocess event is fired when an input buffer of a Web Audio API ScriptProcessorNode is ready to be processed.", 
                "name": "audioprocess (event)"
            }, 
            {
                "descr": "The Web Audio API AudioProcessingEvent represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.", 
                "name": "AudioProcessingEvent"
            }, 
            {
                "descr": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. ", 
                "name": "OfflineAudioContext"
            }, 
            {
                "descr": "The complete event is fired when the rendering of an OfflineAudioContext is terminated.", 
                "name": "complete (event)"
            }, 
            {
                "descr": "The OfflineAudioCompletionEvent represents events that occur when the processing of an OfflineAudioContext is terminated. ", 
                "name": "OfflineAudioCompletionEvent"
            }, 
            {
                "descr": "The AudioWorkerNode interface represents an AudioNode that interacts with a worker thread to generate, process, or analyse audio directly.", 
                "name": "AudioWorkerNode"
            }, 
            {
                "descr": "The AudioWorkerGlobalScope interface is a DedicatedWorkerGlobalScope-derived object representing a worker context in which an audio processing script is run; it is designed to enable the generation, processing, and analysis of audio data directly using JavaScript in a worker thread.", 
                "name": "AudioWorkerGlobalScope"
            }, 
            {
                "descr": "This is an Event object that is dispatched to AudioWorkerGlobalScope objects to perform processing.", 
                "name": "AudioProcessEvent"
            }, 
            {
                "descr": "Used for direct audio processing via JavaScript. ", 
                "name": "JavaScriptNode"
            }, 
            {
                "descr": "Used to define a periodic waveform. ", 
                "name": "WaveTableNode"
            }
        ], 
        "path": "dom/web_audio_api", 
        "syntax": "AudioWorkerNode The AudioWorkerNode interface represents an AudioNode", 
        "type": "Web Audio"
    }, 
    "Web Crypto API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Web Crypto API", 
        "params": [], 
        "path": "dom/web_crypto_api", 
        "syntax": "Crypto without having it well defined or being cryptographically sound. In order to avoid confusion, methods and properties of this interface are gone in browsers implementing the Web Crypto API, and all Web Crypto API methods are available on a new interface: SubtleCrypto", 
        "type": "Web Cryptography"
    }, 
    "Web Crypto API: Supported algorithms": {
        "descr": "Different algorithms are supported for the different functions provided by the Web Crypto API. Also, depending of the context, these algorithms needs parameters or they will raise a SyntaxError. This pages lists the context, the available algorithms and the required parameters.", 
        "name": "Web Crypto API: Supported algorithms", 
        "params": [
            {
                "descr": "It represents AES in Cipher Block Chaining mode. ", 
                "name": "AES-CBC"
            }, 
            {
                "descr": "It represents AES in Counter Mode. ", 
                "name": "AES-CTR"
            }, 
            {
                "descr": "It represents AES in Galois/Counter Mode. ", 
                "name": "AES-GCM"
            }, 
            {
                "descr": "It represents RSAES-OAEP algorithm, using a SHA hash functions and a MGF1 mask generating function. ", 
                "name": "RSA-OAEP"
            }, 
            {
                "descr": "It represents the key wrapping in AES algorithm. ", 
                "name": "AES-KW"
            }, 
            {
                "descr": "It represents the hash-based message authentication method using SHA hash functions. ", 
                "name": "HMAC"
            }, 
            {
                "descr": "It represents RSASA-PKCS1_v1_5 algorithm, using a SHA hash function. ", 
                "name": "RSASSA-PKCS1-v1_5"
            }
        ], 
        "path": "dom/web_crypto_api/supported_algorithms", 
        "syntax": "SyntaxError. This pages lists the context, the available algorithms and the required parameters. Key generation algorithms  AES-CBC  It represents AES in Cipher Block Chaining mode. For key generation, it uses PKCS #7 as the padding method.", 
        "type": "Web Cryptography"
    }, 
    "Web Speech API": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Web Speech API", 
        "params": [
            {
                "descr": "The controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service.", 
                "name": "SpeechRecognition"
            }, 
            {
                "descr": "Represents a single word that has been recognised by the speech recognition service.", 
                "name": "SpeechRecognitionAlternative"
            }, 
            {
                "descr": "Represents error messages from the recognition service.", 
                "name": "SpeechRecognitionError"
            }, 
            {
                "descr": "The event object for the result and nomatch events, and contains all the data associated with an interim or final speech recognition result.", 
                "name": "SpeechRecognitionEvent"
            }, 
            {
                "descr": "The words or patterns of words that we want the recognition service to recognize.", 
                "name": "SpeechGrammar"
            }, 
            {
                "descr": "Represents a list of SpeechGrammar objects.", 
                "name": "SpeechGrammarList"
            }, 
            {
                "descr": "Represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.", 
                "name": "SpeechRecognitionResult"
            }, 
            {
                "descr": "Represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in continuous mode.", 
                "name": "SpeechRecognitionResultList"
            }, 
            {
                "descr": "The controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.", 
                "name": "SpeechSynthesis"
            }, 
            {
                "descr": "Contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.", 
                "name": "SpeechSynthesisErrorEvent"
            }, 
            {
                "descr": "Contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.", 
                "name": "SpeechSynthesisEvent"
            }, 
            {
                "descr": "Represents a speech request. It contains the content the speech service should read and information about how to read it (e.g. ", 
                "name": "SpeechSynthesisUtterance"
            }, 
            {
                "descr": "Represents a voice that the system supports. ", 
                "name": "SpeechSynthesisVoice"
            }, 
            {
                "descr": "Specced out as part of a [NoInterfaceObject] interface called SpeechSynthesisGetter, and Implemented by the Window object, the speechSynthesis property provides access to the SpeechSynthesis controller, and therefore the entry point to speech synthesis functionality.", 
                "name": "Window.speechSynthesis"
            }
        ], 
        "path": "dom/web_speech_api", 
        "syntax": "SpeechRecognition interface, which provides the ability to recognize voice context from an audio input (normally via the device's default speech recognition service) and respond appropriately. Generally you'll use the interface's constructor to create a new SpeechRecognition", 
        "type": "Web Speech"
    }, 
    "Web Video Text Tracks Format": {
        "descr": "Introduced in HTML5", 
        "name": "Web Video Text Tracks Format", 
        "params": [], 
        "path": "dom/web_video_text_tracks_format", 
        "syntax": "-->\", the ampersand character (&), or the less-than sign (<). If you wish to use such characters, you need to escape them using for example &amp;", 
        "type": "Miscellaneous"
    }, 
    "Web Workers API": {
        "descr": "A worker is an object created using a constructor (e.g. Worker()) that runs a named JavaScript file \u2014 this file contains the code that will run in the worker thread; workers run in another global context that is different from the current window. This context is represented by a DedicatedWorkerGlobalScope object in the case of dedicated workers (standard workers that are utilized by a single script; shared workers use SharedWorkerGlobalScope).", 
        "name": "Web Workers API", 
        "params": [
            {
                "descr": "Abstracts properties and methods common to all kind of workers (i.e. ", 
                "name": "AbstractWorker"
            }, 
            {
                "descr": "Represents a running worker thread, allowing you to pass messages to the running worker code.", 
                "name": "Worker"
            }, 
            {
                "descr": "Represents a specific kind of worker that can be accessed from several browsing contexts, being several windows, iframes or even workers.", 
                "name": "SharedWorker"
            }, 
            {
                "descr": "Represents the generic scope of any worker (doing the same job as Window does for normal web content). ", 
                "name": "WorkerGlobalScope"
            }, 
            {
                "descr": "Represents the scope of a dedicated worker, inheriting from WorkerGlobalScope and adding some dedicated features.", 
                "name": "DedicatedWorkerGlobalScope"
            }, 
            {
                "descr": "Represents the scope of a shared worker, inheriting from WorkerGlobalScope and adding some dedicated features.", 
                "name": "SharedWorkerGlobalScope"
            }, 
            {
                "descr": "Represents the identity and state of the user agent (the client):", 
                "name": "WorkerNavigator"
            }
        ], 
        "path": "dom/web_workers_api", 
        "syntax": "ChromeWorker for more details.  Audio Workers provide the ability for direct scripted audio processing to be done inside a web worker context.   Note: As per the Web workers Spec, worker error events should not bubble (see bug 1188141. This has been implemented in Firefox 42.  Web Worker interfaces  AbstractWorker Abstracts properties and methods common to all kind of workers (i.e. Worker", 
        "type": "Web Workers"
    }, 
    "Web Workers API: Structured clone algorithm": {
        "descr": "The structured clone algorithm is a new algorithm defined by the HTML5 specification for serializing complex JavaScript objects. It's more capable than JSON in that it supports the serialization of objects that contain cyclic graphs \u2014 objects can refer to objects that refer to other objects in the same graph. In addition, in some cases, the structured clone algorithm may be more efficient than JSON.", 
        "name": "Web Workers API: Structured clone algorithm", 
        "params": [], 
        "path": "dom/web_workers_api/structured_clone_algorithm", 
        "syntax": "CanvasPixelArray will match the original and have a duplicate of the same pixel data. Structured clones can correctly duplicate objects containing cyclic graphs of references.  Things that don't work with structured clones  Error and Function objects cannot be duplicated by the structured clone algorithm; attempting to do so will throw a DATA_CLONE_ERR exception. Attempting to clone DOM nodes will likewise throw a DATA_CLONE_ERR exception. Certain parameters of objects are not preserved:  The lastIndex field of RegExp objects is not preserved. Property descriptors, setters, and getters (as well as similar metadata-like features) are not duplicated. For example, if an object is marked read-only using a property descriptor, it will be read-write in the duplicate, since that's the default condition. The prototype chain does not get walked and duplicated.    Supported types", 
        "type": "Web Workers"
    }, 
    "Web Workers API: Using web workers": {
        "descr": "Web Workers provide a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa.) This article provides a detailed introduction to using web workers.", 
        "name": "Web Workers API: Using web workers", 
        "params": [
            {
                "descr": "A human-readable error message.", 
                "name": "message"
            }, 
            {
                "descr": "The name of the script fil in which the error occurred.", 
                "name": "filename"
            }, 
            {
                "descr": "The line number of the script file on which the error occurred.", 
                "name": "lineno"
            }
        ], 
        "path": "dom/web_workers_api/using_web_workers", 
        "syntax": "if (window.Worker) {  ...}", 
        "type": "Web Workers"
    }, 
    "Web audio spatialization basics": {
        "descr": "As if its extensive variety of sound processing (and other) options wasn't enough, the Web Audio API also includes facilities to allow you to emulate the difference in sound as a listener moves around a sound source, for example panning as you move from the left hand side of your TV across to the right. The official term for this is spatialization, and this article will cover the basics of how to implement such a system.", 
        "name": "Web audio spatialization basics", 
        "params": [], 
        "path": "dom/web_audio_api/web_audio_spatialization_basics", 
        "syntax": "leftBound and rightBound, which is the furthest we want our stereo graph to travel left and right. For the layout, we are using Flexbox to initially place the boomBox right in the center of the viewport, after which we then use iterative transforms and window.requestAnimationFrame()", 
        "type": "Web Audio"
    }, 
    "WebGL API: Adding 2D content to a WebGL context": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "WebGL API: Adding 2D content to a WebGL context", 
        "params": [], 
        "path": "dom/webgl_api/tutorial/adding_2d_content_to_a_webgl_context", 
        "syntax": "createProgram()", 
        "type": "WebGL"
    }, 
    "WebGL API: Constants": {
        "descr": "The WebGL API provides several constants that are passed into or returned by functions. All constants are of type GLenum.", 
        "name": "WebGL API: Constants", 
        "params": [], 
        "path": "dom/webgl_api/constants", 
        "syntax": "Int32Array with four elements for the current viewport dimensions.   SCISSOR_BOX 0x0C10 Returns an Int32Array", 
        "type": "WebGL"
    }, 
    "WebGL API: Matrix math for the web": {
        "descr": "While this article uses CSS3 for the ease of explanations, matrices are a core concept used by many different technologies including WebGL and shaders. This article is also available as an MDN content kit. The live examples use a collection of utility functions availabile under a global object named \"MDN\".", 
        "name": "WebGL API: Matrix math for the web", 
        "params": [], 
        "path": "dom/webgl_api/matrix_math_for_the_web", 
        "syntax": "function multiplyMatrices(matrixA, matrixB) {    // Slice the second matrix up into columns  var column0 = [matrixB[0], matrixB[4], matrixB[8], matrixB[12]];  var column1 = [matrixB[1], matrixB[5], matrixB[9], matrixB[13]];  var column2 = [matrixB[2], matrixB[6], matrixB[10], matrixB[14]];  var column3 = [matrixB[3], matrixB[7], matrixB[11], matrixB[15]];    // Multiply each column by the matrix  var result0 = multiplyMatrixAndPoint( matrixA, column0 );\n or   var result1 = multiplyMatrixAndPoint( matrixA, column1 );\n or   var result2 = multiplyMatrixAndPoint( matrixA, column2 );\n or   var result3 = multiplyMatrixAndPoint( matrixA, column3 );\n or     // Turn the result columns back into a single matrix  return [    result0[0], result1[0], result2[0], result3[0],    result0[1], result1[1], result2[1], result3[1],    result0[2], result1[2], result2[2], result3[2],    result0[3], result1[3], result2[3], result3[3]  ]});", 
        "type": "WebGL"
    }, 
    "WebGL API: Using textures in WebGL": {
        "descr": "\u00ab PreviousNext \u00bb", 
        "name": "WebGL API: Using textures in WebGL", 
        "params": [], 
        "path": "dom/webgl_api/tutorial/using_textures_in_webgl", 
        "syntax": "generateMipMap()", 
        "type": "WebGL"
    }, 
    "WebGL API: WebGL model view projection": {
        "descr": "Note: This article is also available as an MDN content kit. It also uses a collection of utility functions available under the MDN global object.", 
        "name": "WebGL API: WebGL model view projection", 
        "params": [], 
        "path": "dom/webgl_api/webgl_model_view_projection", 
        "syntax": "WebGLBox object that will draw a box on the screen.  Note: The code for each WebGLBox example is available in this github repo and is organized by section. In addition there is a JSFiddle link at the bottom of each section.  WebGLBox Constructor The constructor looks like this: function WebGLBox() {    // Setup the canvas and WebGL context  this.canvas = document.getElementById(\"canvas\");\n or   this.canvas.width = window.innerWidth;  this.canvas.height = window.innerHeight;  this.gl = MDN.createContext(canvas);\n or     var gl = this.gl;   // Setup a WebGL program, anything part of the MDN object is defined outside of this article  this.webglProgram = MDN.createWebGLProgramFromIds(gl, \"vertex-shader\", \"fragment-shader\");\n or   gl.useProgram(this.webglProgram);\n or     // Save the attribute and uniform locations  this.positionLocation = gl.getAttribLocation(this.webglProgram, \"position\");\n or   this.colorLocation = gl.getUniformLocation(this.webglProgram, \"color\");\n or     // Tell WebGL to test the depth when drawing, so if a square is behind  // another square it won't be drawn  gl.enable(gl.DEPTH_TEST);\n or   });", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext", 
        "params": [
            {
                "descr": "Returns the indexed value for the given target.", 
                "name": "WebGL2RenderingContext.getIndexedParameter()"
            }, 
            {
                "descr": "Copies part of the data of a buffer to another buffer.", 
                "name": "WebGL2RenderingContext.copyBufferSubData()"
            }, 
            {
                "descr": "Reads data from a buffer and writes them to an ArrayBuffer or SharedArrayBuffer.", 
                "name": "WebGL2RenderingContext.getBufferSubData()"
            }, 
            {
                "descr": "Transfers a block of pixels from the read framebuffer to the draw framebuffer.", 
                "name": "WebGL2RenderingContext.blitFramebuffer()"
            }, 
            {
                "descr": "Attaches a single layer of a texture to a framebuffer.", 
                "name": "WebGL2RenderingContext.framebufferTextureLayer()"
            }, 
            {
                "descr": "Invalidates the contents of attachments in a framebuffer.", 
                "name": "WebGL2RenderingContext.invalidateFramebuffer()"
            }, 
            {
                "descr": "Invalidates portions of the contents of attachments in a framebuffer", 
                "name": "WebGL2RenderingContext.invalidateSubFramebuffer()"
            }, 
            {
                "descr": "Selects a color buffer as the source for pixels.", 
                "name": "WebGL2RenderingContext.readBuffer()"
            }, 
            {
                "descr": "Returns information about implementation-dependent support for internal formats.", 
                "name": "WebGL2RenderingContext.getInternalformatParameter()"
            }, 
            {
                "descr": "Creates and initializes a renderbuffer object's data store and allows specifying the number of samples to be used.", 
                "name": "WebGL2RenderingContext.renderbufferStorageMultisample()"
            }, 
            {
                "descr": "Specifies all levels of two-dimensional texture storage.", 
                "name": "WebGL2RenderingContext.texStorage2D()"
            }, 
            {
                "descr": "Specifies all levels of a three-dimensional texture or two-dimensional array texture.", 
                "name": "WebGL2RenderingContext.texStorage3D()"
            }, 
            {
                "descr": "Specifies a three-dimensional texture image.", 
                "name": "WebGL2RenderingContext.texImage3D()"
            }, 
            {
                "descr": "Specifies a sub-rectangle of the current 3D texture.", 
                "name": "WebGL2RenderingContext.texSubImage3D()"
            }, 
            {
                "descr": "Copies pixels from the current WebGLFramebuffer into an existing 3D texture sub-image.", 
                "name": "WebGL2RenderingContext.copyTexSubImage3D()"
            }, 
            {
                "descr": "Specifies a three-dimensional texture image in a compressed format.", 
                "name": "WebGL2RenderingContext.compressedTexImage3D()"
            }, 
            {
                "descr": "Specifies a three-dimensional sub-rectangle for a texture image in a compressed format.", 
                "name": "WebGL2RenderingContext.compressedTexSubImage3D()"
            }, 
            {
                "descr": "Returns the binding of color numbers to user-defined varying out variables.", 
                "name": "WebGL2RenderingContext.getFragDataLocation()"
            }, 
            {
                "descr": "Methods specifying values of uniform variables.", 
                "name": "WebGL2RenderingContext.uniform[1234][fiu][v]()"
            }, 
            {
                "descr": "Methods specifying matrix values for uniform variables.", 
                "name": "WebGL2RenderingContext.uniformMatrix[1234][fv]()"
            }, 
            {
                "descr": "Methods specifying integer values for generic vertex attributes.", 
                "name": "WebGL2RenderingContext.vertexAttribI[iuv]()"
            }, 
            {
                "descr": "Specifies integer data formats and locations of vertex attributes in a vertex attributes array.", 
                "name": "WebGL2RenderingContext.vertexAttribIPointer()"
            }, 
            {
                "descr": "Modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with gl.drawArraysInstanced() and gl.drawElementsInstanced().", 
                "name": "WebGL2RenderingContext.vertexAttribDivisor()"
            }, 
            {
                "descr": "Renders primitives from array data. ", 
                "name": "WebGL2RenderingContext.drawArraysInstanced()"
            }, 
            {
                "descr": "Renders primitives from array data. ", 
                "name": "WebGL2RenderingContext.drawElementsInstanced()"
            }, 
            {
                "descr": "Renders primitives from array data in a given range.", 
                "name": "WebGL2RenderingContext.drawRangeElements()"
            }, 
            {
                "descr": "Specifies a list of color buffers to be drawn into.", 
                "name": "WebGL2RenderingContext.drawBuffers()"
            }, 
            {
                "descr": "Clears buffers from the currently bound framebuffer.", 
                "name": "WebGL2RenderingContext.clearBuffer[fiuv]()"
            }, 
            {
                "descr": "Creates a new WebGLQuery object.", 
                "name": "WebGL2RenderingContext.createQuery()"
            }, 
            {
                "descr": "Deletes a given WebGLQuery object.", 
                "name": "WebGL2RenderingContext.deleteQuery()"
            }, 
            {
                "descr": "Returns true if a given object is a valid WebGLQuery object.", 
                "name": "WebGL2RenderingContext.isQuery()"
            }, 
            {
                "descr": "Begins an asynchronous query.", 
                "name": "WebGL2RenderingContext.beginQuery()"
            }, 
            {
                "descr": "Marks the end of an asynchronous query.", 
                "name": "WebGL2RenderingContext.endQuery()"
            }, 
            {
                "descr": "Returns a WebGLQuery object for a given target.", 
                "name": "WebGL2RenderingContext.getQuery()"
            }, 
            {
                "descr": "Returns information about a query.", 
                "name": "WebGL2RenderingContext.getQueryParameter()"
            }, 
            {
                "descr": "Creates a new WebGLSampler object.", 
                "name": "WebGL2RenderingContext.createSampler()"
            }, 
            {
                "descr": "Deletes a given WebGLSampler object.", 
                "name": "WebGL2RenderingContext.deleteSampler()"
            }, 
            {
                "descr": "Binds a given WebGLSampler to a texture unit.", 
                "name": "WebGL2RenderingContext.bindSampler()"
            }, 
            {
                "descr": "Returns true if a given object is a valid WebGLSampler object.", 
                "name": "WebGL2RenderingContext.isSampler()"
            }, 
            {
                "descr": "Sets sampler parameters.", 
                "name": "WebGL2RenderingContext.samplerParameter[if]()"
            }, 
            {
                "descr": "Returns sampler parameter information.", 
                "name": "WebGL2RenderingContext.getSamplerParameter()"
            }, 
            {
                "descr": "Creates a new WebGLSync object and inserts it into the GL command stream.", 
                "name": "WebGL2RenderingContext.fenceSync()"
            }, 
            {
                "descr": "Returns true if the passed object is a valid WebGLSync object.", 
                "name": "WebGL2RenderingContext.isSync()"
            }, 
            {
                "descr": "Deletes a given WebGLSync object.", 
                "name": "WebGL2RenderingContext.deleteSync()"
            }, 
            {
                "descr": "Blocks and waits for a WebGLSync object to become signaled or a given timeout to be passed.", 
                "name": "WebGL2RenderingContext.clientWaitSync()"
            }, 
            {
                "descr": "Returns immediately, but waits on the GL server until the given WebGLSync object is signaled.", 
                "name": "WebGL2RenderingContext.waitSync()"
            }, 
            {
                "descr": "Returns parameter information of a WebGLSync object.", 
                "name": "WebGL2RenderingContext.getSyncParameter()"
            }, 
            {
                "descr": "Creates and initializes WebGLTransformFeedback objects.", 
                "name": "WebGL2RenderingContext.createTransformFeedback()"
            }, 
            {
                "descr": "Deletes a given WebGLTransformFeedback object.", 
                "name": "WebGL2RenderingContext.deleteTransformFeedback()"
            }, 
            {
                "descr": "Returns true if the passed object is a valid WebGLTransformFeedback object.", 
                "name": "WebGL2RenderingContext.isTransformFeedback()"
            }, 
            {
                "descr": "Binds a passed WebGLTransformFeedback object to the current GL state.", 
                "name": "WebGL2RenderingContext.bindTransformFeedback()"
            }, 
            {
                "descr": "Starts a transform feedback operation.", 
                "name": "WebGL2RenderingContext.beginTransformFeedback()"
            }, 
            {
                "descr": "Ends a transform feedback operation.", 
                "name": "WebGL2RenderingContext.endTransformFeedback()"
            }, 
            {
                "descr": "Specifies values to record in WebGLTransformFeedback buffers.", 
                "name": "WebGL2RenderingContext.transformFeedbackVaryings()"
            }, 
            {
                "descr": "Returns information about varying variables from WebGLTransformFeedback buffers.", 
                "name": "WebGL2RenderingContext.getTransformFeedbackVarying()"
            }, 
            {
                "descr": "Pauses a transform feedback operation.", 
                "name": "WebGL2RenderingContext.pauseTransformFeedback()"
            }, 
            {
                "descr": "Resumes a transform feedback operation.", 
                "name": "WebGL2RenderingContext.resumeTransformFeedback()"
            }, 
            {
                "descr": "Binds a given WebGLBuffer to a given binding point (target) at a given index.", 
                "name": "WebGL2RenderingContext.bindBufferBase()"
            }, 
            {
                "descr": "Binds a range of a given WebGLBuffer to a given binding point (target) at a given index.", 
                "name": "WebGL2RenderingContext.bindBufferRange()"
            }, 
            {
                "descr": "Retrieves the indices of a number of uniforms within a WebGLProgram.", 
                "name": "WebGL2RenderingContext.getUniformIndices()"
            }, 
            {
                "descr": "Retrieves information about active uniforms within a WebGLProgram.", 
                "name": "WebGL2RenderingContext.getActiveUniforms()"
            }, 
            {
                "descr": "Retrieves the index of a uniform block within a WebGLProgram.", 
                "name": "WebGL2RenderingContext.getUniformBlockIndex()"
            }, 
            {
                "descr": "Retrieves information about an active uniform block within a WebGLProgram.", 
                "name": "WebGL2RenderingContext.getActiveUniformBlockParameter()"
            }, 
            {
                "descr": "Retrieves the name of the active uniform block at a given index within a WebGLProgram.", 
                "name": "WebGL2RenderingContext.getActiveUniformBlockName()"
            }, 
            {
                "descr": "Assigns binding points for active uniform blocks.", 
                "name": "WebGL2RenderingContext.uniformBlockBinding()"
            }, 
            {
                "descr": "Creates a new WebGLVertexArrayObject.", 
                "name": "WebGL2RenderingContext.createVertexArray()"
            }, 
            {
                "descr": "Deletes a given WebGLVertexArrayObject.", 
                "name": "WebGL2RenderingContext.deleteVertexArray()"
            }, 
            {
                "descr": "Returns true if a given object is a valid WebGLVertexArrayObject.", 
                "name": "WebGL2RenderingContext.isVertexArray()"
            }, 
            {
                "descr": "Binds a given WebGLVertexArrayObject to the buffer.", 
                "name": "WebGL2RenderingContext.bindVertexArray()"
            }
        ], 
        "path": "dom/webgl2renderingcontext", 
        "syntax": "<canvas> element. To get an object of this interface, call getContext()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.beginQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.beginQuery", 
        "params": [
            {
                "descr": "A GLenum specifying the target of the query. ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLQuery object for which to start the querying.", 
                "name": "query"
            }
        ], 
        "path": "dom/webgl2renderingcontext/beginquery", 
        "syntax": "WebGL2RenderingContext.beginQuery()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.beginTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.beginTransformFeedback", 
        "params": [
            {
                "descr": "A GLenum specifying the output type of the primitives that will be recorded into the buffer objects that are bound for transform feedback. ", 
                "name": "primitiveMode"
            }
        ], 
        "path": "dom/webgl2renderingcontext/begintransformfeedback", 
        "syntax": "WebGL2RenderingContext.beginTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.bindBufferBase": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.bindBufferBase", 
        "params": [
            {
                "descr": "A Glenum specifying the target for the bind operation. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLuint specifying the index of the target.", 
                "name": "index"
            }, 
            {
                "descr": "A WebGLBuffer which to bind to the binding point (target).", 
                "name": "buffer"
            }
        ], 
        "path": "dom/webgl2renderingcontext/bindbufferbase", 
        "syntax": "WebGL2RenderingContext.bindBufferBase()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.bindBufferRange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.bindBufferRange", 
        "params": [
            {
                "descr": "A Glenum specifying the target for the bind operation. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLuint specifying the index of the target.", 
                "name": "index"
            }, 
            {
                "descr": "A WebGLBuffer which to bind to the binding point (target).", 
                "name": "buffer"
            }, 
            {
                "descr": "A GLintptr specifying the starting offset.", 
                "name": "offset"
            }, 
            {
                "descr": "A GLsizeiptr specifying the amount of data that can be read from the buffer.", 
                "name": "size"
            }
        ], 
        "path": "dom/webgl2renderingcontext/bindbufferrange", 
        "syntax": "WebGL2RenderingContext.bindBufferRange()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.bindSampler": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.bindSampler", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the texture unit to which to bind the sampler to.", 
                "name": "unit"
            }, 
            {
                "descr": "A WebGLSampler object to bind.", 
                "name": "sampler"
            }
        ], 
        "path": "dom/webgl2renderingcontext/bindsampler", 
        "syntax": "WebGL2RenderingContext.bindSampler()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.bindTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.bindTransformFeedback", 
        "params": [
            {
                "descr": "A GLenum specifying the target (binding point). ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLTransformFeedback object to bind.", 
                "name": "transformFeedback"
            }
        ], 
        "path": "dom/webgl2renderingcontext/bindtransformfeedback", 
        "syntax": "WebGL2RenderingContext.bindTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.bindVertexArray": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.bindVertexArray", 
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to bind.", 
                "name": "vertexArray"
            }
        ], 
        "path": "dom/webgl2renderingcontext/bindvertexarray", 
        "syntax": "WebGL2RenderingContext.bindVertexArray()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.blitFramebuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.blitFramebuffer", 
        "params": [
            {
                "descr": "A GLint specifying the bounds of the source rectangle.", 
                "name": "srcX0, srcY0, srcX1, srcY1"
            }, 
            {
                "descr": "A GLint specifying the bounds of the destination rectangle.", 
                "name": "dstX0, dstY0, dstX1, dstX1"
            }, 
            {
                "descr": "A GLbitfield specifying a bitwise OR mask indicating which buffers are to be copied. ", 
                "name": "mask"
            }, 
            {
                "descr": "A GLenum specifying the interpolation to be applied if the image is stretched. ", 
                "name": "filter"
            }
        ], 
        "path": "dom/webgl2renderingcontext/blitframebuffer", 
        "syntax": "WebGL2RenderingContext.blitFramebuffer()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.clearBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.clearBuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the buffer to clear. ", 
                "name": "buffer"
            }, 
            {
                "descr": "A GLint specifying the draw buffer to clear.", 
                "name": "drawBuffer"
            }, 
            {
                "descr": "An Array of GLint, GLuint or GLfloat values or an Int32Array, Uint32Array or Float32Array specifying the values to clear to.", 
                "name": "value"
            }, 
            {
                "descr": "A GLfloat specifying the value to clear a depth render buffer to.", 
                "name": "depth"
            }, 
            {
                "descr": "A GLint specifying the value to clear the stencil render buffer to.", 
                "name": "stencil"
            }
        ], 
        "path": "dom/webgl2renderingcontext/clearbuffer", 
        "syntax": "WebGL2RenderingContext.clearBuffer[fiuv]()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.clientWaitSync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.clientWaitSync", 
        "params": [
            {
                "descr": "A WebGLSync object on which to wait on.", 
                "name": "sync"
            }, 
            {
                "descr": "A GLbitfield specifying a bitwise combination of flags controlling the flushing behavior. ", 
                "name": "flags"
            }, 
            {
                "descr": "A GLint64 specifying a timeout (in nanoseconds) for which to wait for the sync object to become signaled. ", 
                "name": "timeout"
            }
        ], 
        "path": "dom/webgl2renderingcontext/clientwaitsync", 
        "syntax": "WebGL2RenderingContext.clientWaitSync()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.compressedTexImage3D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.compressedTexImage3D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLenum specifying the compressed image format. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLsizei specifying the depth of the texture.", 
                "name": "depth"
            }, 
            {
                "descr": "A GLint specifying the width of the border. ", 
                "name": "border"
            }, 
            {
                "descr": "A ArrayBufferView that be used as a data store for the compressed image data in memory.", 
                "name": "pixels"
            }
        ], 
        "path": "dom/webgl2renderingcontext/compressedteximage3d", 
        "syntax": "WebGL2RenderingContext.compressedTexImage3D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.compressedTexSubImage3D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.compressedTexSubImage3D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the x offset within the compressed texture image.", 
                "name": "xoffset"
            }, 
            {
                "descr": "A GLint specifying the y offset within the compressed texture image.", 
                "name": "yoffset"
            }, 
            {
                "descr": "A GLint specifying the z offset within the compressed texture image.", 
                "name": "zoffset"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLsizei specifying the depth of the texture.", 
                "name": "depth"
            }, 
            {
                "descr": "A GLenum specifying the compressed image format. ", 
                "name": "format"
            }, 
            {
                "descr": "A ArrayBufferView that be used as a data store for the compressed image data in memory.", 
                "name": "pixels"
            }
        ], 
        "path": "dom/webgl2renderingcontext/compressedtexsubimage3d", 
        "syntax": "WebGL2RenderingContext.compressedTexSubImage3D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.copyBufferSubData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.copyBufferSubData", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) from whose data store should be read or written. ", 
                "name": "readTarget writeTarget"
            }, 
            {
                "descr": "A GLintptr specifying the byte offset from which to start reading from or writing to the buffer.", 
                "name": "readOffset writeOffset"
            }, 
            {
                "descr": "A GLsizei in bytes specifying the size of the data to be copied from readTarget to writeTarget.", 
                "name": "size"
            }
        ], 
        "path": "dom/webgl2renderingcontext/copybuffersubdata", 
        "syntax": "WebGL2RenderingContext.copyBufferSubData()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.copyTexSubImage3D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.copyTexSubImage3D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the x offset within the texture image.", 
                "name": "xoffset"
            }, 
            {
                "descr": "A GLint specifying the y offset within the texture image.", 
                "name": "yoffset"
            }, 
            {
                "descr": "A GLint specifying the z offset within the texture image.", 
                "name": "zoffset"
            }, 
            {
                "descr": "A GLint specifying the x coordinate of the lower left corner where to start copying.", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the y coordinate of the lower left corner where to start copying.", 
                "name": "y"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }
        ], 
        "path": "dom/webgl2renderingcontext/copytexsubimage3d", 
        "syntax": "WebGL2RenderingContext.copyTexSubImage3D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.createQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.createQuery", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/createquery", 
        "syntax": "WebGL2RenderingContext.createQuery()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.createSampler": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.createSampler", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/createsampler", 
        "syntax": "WebGL2RenderingContext.createSampler()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.createTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.createTransformFeedback", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/createtransformfeedback", 
        "syntax": "WebGL2RenderingContext.createTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.createVertexArray": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.createVertexArray", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/createvertexarray", 
        "syntax": "WebGL2RenderingContext.createVertexArray()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.deleteQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.deleteQuery", 
        "params": [
            {
                "descr": "A WebGLQuery object to delete.", 
                "name": "query"
            }
        ], 
        "path": "dom/webgl2renderingcontext/deletequery", 
        "syntax": "WebGL2RenderingContext.deleteQuery()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.deleteSampler": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.deleteSampler", 
        "params": [
            {
                "descr": "A WebGLSampler object to delete.", 
                "name": "sampler"
            }
        ], 
        "path": "dom/webgl2renderingcontext/deletesampler", 
        "syntax": "WebGL2RenderingContext.deleteSampler()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.deleteSync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.deleteSync", 
        "params": [
            {
                "descr": "A WebGLSync object to delete.", 
                "name": "sync"
            }
        ], 
        "path": "dom/webgl2renderingcontext/deletesync", 
        "syntax": "WebGL2RenderingContext.deleteSync()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.deleteTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.deleteTransformFeedback", 
        "params": [
            {
                "descr": "A WebGLTransformFeedback object to delete.", 
                "name": "transformFeedback"
            }
        ], 
        "path": "dom/webgl2renderingcontext/deletetransformfeedback", 
        "syntax": "WebGL2RenderingContext.deleteTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.deleteVertexArray": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.deleteVertexArray", 
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to delete.", 
                "name": "vertexArray"
            }
        ], 
        "path": "dom/webgl2renderingcontext/deletevertexarray", 
        "syntax": "WebGL2RenderingContext.deleteVertexArray()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.drawArraysInstanced": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.drawArraysInstanced", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLint specifying the starting index in the array of vector points.", 
                "name": "first"
            }, 
            {
                "descr": "A GLsizei specifying the number of indices to be rendered.", 
                "name": "count"
            }, 
            {
                "descr": "A GLsizei specifying the number of instances of the range of elements to execute.", 
                "name": "instanceCount"
            }
        ], 
        "path": "dom/webgl2renderingcontext/drawarraysinstanced", 
        "syntax": "WebGL2RenderingContext.drawArraysInstanced()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.drawElementsInstanced": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.drawElementsInstanced", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.", 
                "name": "count"
            }, 
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ", 
                "name": "type"
            }, 
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ", 
                "name": "offset"
            }, 
            {
                "descr": "A GLsizei specifying the number of instances of the set of elements to execute.", 
                "name": "instanceCount"
            }
        ], 
        "path": "dom/webgl2renderingcontext/drawelementsinstanced", 
        "syntax": "WebGL2RenderingContext.drawElementsInstanced()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.drawRangeElements": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.drawRangeElements", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLuint specifying the minimum array index contained in offset.", 
                "name": "start"
            }, 
            {
                "descr": "A GLuint specifying the maximum array index contained in offset.", 
                "name": "end"
            }, 
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.", 
                "name": "count"
            }, 
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ", 
                "name": "type"
            }, 
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webgl2renderingcontext/drawrangeelements", 
        "syntax": "WebGL2RenderingContext.drawRangeElements()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.endQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.endQuery", 
        "params": [
            {
                "descr": "A GLenum specifying the target of the query. ", 
                "name": "target"
            }
        ], 
        "path": "dom/webgl2renderingcontext/endquery", 
        "syntax": "WebGL2RenderingContext.endQuery()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.endTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.endTransformFeedback", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/endtransformfeedback", 
        "syntax": "WebGL2RenderingContext.endTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.fenceSync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.fenceSync", 
        "params": [
            {
                "descr": "A GLenum specifying the condition that must be met to set the sync object's state to signaled. ", 
                "name": "condition"
            }, 
            {
                "descr": "A GLbitfield specifying a bitwise combination of flags controlling the behavior of the sync object. ", 
                "name": "flags"
            }
        ], 
        "path": "dom/webgl2renderingcontext/fencesync", 
        "syntax": "WebGL2RenderingContext.fenceSync()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.framebufferTextureLayer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.framebufferTextureLayer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying the attachment point for the texture. ", 
                "name": "attachment"
            }, 
            {
                "descr": "A WebGLTexture object whose image to attach.", 
                "name": "texture"
            }, 
            {
                "descr": "A GLint specifying the mipmap level of the texture image to attach.", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the layer of the texture image to attach.", 
                "name": "layer"
            }
        ], 
        "path": "dom/webgl2renderingcontext/framebuffertexturelayer", 
        "syntax": "WebGL2RenderingContext.framebufferTextureLayer()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getActiveUniformBlockName": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getActiveUniformBlockName", 
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform block.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the uniform block to whose name to retrieve.", 
                "name": "uniformBlockIndex"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getactiveuniformblockname", 
        "syntax": "WebGL2RenderingContext.getActiveUniformBlockName()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getActiveUniformBlockParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getActiveUniformBlockParameter", 
        "params": [
            {
                "descr": "A WebGLProgram containing the active uniform block.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the active uniform block within the program.", 
                "name": "uniformBlockIndex"
            }, 
            {
                "descr": "A GLenum specifying which information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getactiveuniformblockparameter", 
        "syntax": "WebGL2RenderingContext.getActiveUniformBlockParameter()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getActiveUniforms": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getActiveUniforms", 
        "params": [
            {
                "descr": "A WebGLProgram containing the active uniforms.", 
                "name": "program"
            }, 
            {
                "descr": "An Array of GLuint specifying the indices of the active uniforms to query.", 
                "name": "uniformIndices"
            }, 
            {
                "descr": "A GLenum specifying which information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getactiveuniforms", 
        "syntax": "WebGL2RenderingContext.getActiveUniforms()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getBufferSubData": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getBufferSubData", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A GLintptr specifying the byte offset from which to start reading from the buffer.", 
                "name": "offset"
            }, 
            {
                "descr": "A ArrayBuffer or SharedArrayBuffer to which to write the buffer data.", 
                "name": "returnedData"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getbuffersubdata", 
        "syntax": "WebGL2RenderingContext.getBufferSubData()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getFragDataLocation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getFragDataLocation", 
        "params": [
            {
                "descr": "A WebGLProgram to query.", 
                "name": "program"
            }, 
            {
                "descr": "A DOMString specifying the name of the user-defined varying out variable.", 
                "name": "name"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getfragdatalocation", 
        "syntax": "WebGL2RenderingContext.getFragDataLocation()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getIndexedParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getIndexedParameter", 
        "params": [
            {
                "descr": "A Glenum specifying the target for which to return information. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLuint specifying the index of the target that is queried.", 
                "name": "index"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getindexedparameter", 
        "syntax": "WebGL2RenderingContext.getIndexedParameter()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getInternalformatParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getInternalformatParameter", 
        "params": [
            {
                "descr": "A Glenum specifying the target renderbuffer object. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying the internal format about which to retrieve information (must be a color-renderable, depth-renderable or stencil-renderable format).", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLenum specifying the type of information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getinternalformatparameter", 
        "syntax": "WebGL2RenderingContext.getInternalformatParameter()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getQuery", 
        "params": [
            {
                "descr": "A GLenum specifying the target of the query. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying the query object target. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getquery", 
        "syntax": "WebGL2RenderingContext.getQuery()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getQueryParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getQueryParameter", 
        "params": [
            {
                "descr": "A WebGLQuery object.", 
                "name": "query"
            }, 
            {
                "descr": "A GLenum specifying which information to return. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getqueryparameter", 
        "syntax": "WebGL2RenderingContext.getQueryParameter()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getSamplerParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getSamplerParameter", 
        "params": [
            {
                "descr": "A WebGLSampler object.", 
                "name": "sampler"
            }, 
            {
                "descr": "A GLenum specifying which information to return. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getsamplerparameter", 
        "syntax": "WebGL2RenderingContext.getSamplerParameter()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getSyncParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getSyncParameter", 
        "params": [
            {
                "descr": "A WebGLSync object.", 
                "name": "sync"
            }, 
            {
                "descr": "A GLenum specifying which information to return. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getsyncparameter", 
        "syntax": "WebGL2RenderingContext.getSyncParameter()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getTransformFeedbackVarying": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getTransformFeedbackVarying", 
        "params": [
            {
                "descr": "A WebGLProgram.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the varying variable whose information to retrieve.", 
                "name": "index"
            }
        ], 
        "path": "dom/webgl2renderingcontext/gettransformfeedbackvarying", 
        "syntax": "WebGL2RenderingContext.getTransformFeedbackVarying()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getUniformBlockIndex": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getUniformBlockIndex", 
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform block.", 
                "name": "program"
            }, 
            {
                "descr": "A DOMString specifying the name of the uniform block to whose index to retrieve.", 
                "name": "uniformName"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getuniformblockindex", 
        "syntax": "WebGL2RenderingContext.getUniformBlockIndex()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.getUniformIndices": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.getUniformIndices", 
        "params": [
            {
                "descr": "A WebGLProgram containing uniforms whose indices to query.", 
                "name": "program"
            }, 
            {
                "descr": "An Array of DOMString specifying the names of the uniforms to query.", 
                "name": "uniformNames"
            }
        ], 
        "path": "dom/webgl2renderingcontext/getuniformindices", 
        "syntax": "WebGL2RenderingContext.getUniformIndices()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.invalidateFramebuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.invalidateFramebuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "An Array of GLenum specifying the attachment points to invalidate. ", 
                "name": "attachments"
            }
        ], 
        "path": "dom/webgl2renderingcontext/invalidateframebuffer", 
        "syntax": "WebGL2RenderingContext.invalidateFramebuffer()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.invalidateSubFramebuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.invalidateSubFramebuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "An Array of GLenum specifying the attachment points to invalidate. ", 
                "name": "attachments"
            }, 
            {
                "descr": "A GLint specifying the left origin of the pixel rectangle to invalidate.", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the bottom origin of the pixel rectangle to invalidate.", 
                "name": "y"
            }, 
            {
                "descr": "A GLsizei specifying the width of the pixel rectangle to invalidate.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the pixel rectangle to invalidate.", 
                "name": "height"
            }
        ], 
        "path": "dom/webgl2renderingcontext/invalidatesubframebuffer", 
        "syntax": "WebGL2RenderingContext.invalidateSubFramebuffer()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.isQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.isQuery", 
        "params": [
            {
                "descr": "A WebGLQuery object to test.", 
                "name": "query"
            }
        ], 
        "path": "dom/webgl2renderingcontext/isquery", 
        "syntax": "WebGL2RenderingContext.isQuery()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.isSampler": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.isSampler", 
        "params": [
            {
                "descr": "A WebGLSampler object to test.", 
                "name": "sampler"
            }
        ], 
        "path": "dom/webgl2renderingcontext/issampler", 
        "syntax": "WebGL2RenderingContext.isSampler()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.isSync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.isSync", 
        "params": [
            {
                "descr": "A WebGLSync object to test.", 
                "name": "sync"
            }
        ], 
        "path": "dom/webgl2renderingcontext/issync", 
        "syntax": "WebGL2RenderingContext.isSync()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.isTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.isTransformFeedback", 
        "params": [
            {
                "descr": "A WebGLTransformFeedback object to test.", 
                "name": "transformFeedback"
            }
        ], 
        "path": "dom/webgl2renderingcontext/istransformfeedback", 
        "syntax": "WebGL2RenderingContext.isTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.isVertexArray": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.isVertexArray", 
        "params": [
            {
                "descr": "A WebGLVertexArrayObject (VAO) object to test.", 
                "name": "vertexArray"
            }
        ], 
        "path": "dom/webgl2renderingcontext/isvertexarray", 
        "syntax": "WebGL2RenderingContext.isVertexArray()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.pauseTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.pauseTransformFeedback", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/pausetransformfeedback", 
        "syntax": "WebGL2RenderingContext.pauseTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.readBuffer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.readBuffer", 
        "params": [
            {
                "descr": "A GLenum specifying a color buffer. ", 
                "name": "src"
            }
        ], 
        "path": "dom/webgl2renderingcontext/readbuffer", 
        "syntax": "WebGL2RenderingContext.readBuffer()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.renderbufferStorageMultisample": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.renderbufferStorageMultisample", 
        "params": [
            {
                "descr": "A GLenum specifying the target renderbuffer object. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLsizei specifying the number of samples to be used for the renderbuffer storage.", 
                "name": "samples"
            }, 
            {
                "descr": "A GLenum specifying the internal format of the renderbuffer. ", 
                "name": "internalFormat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the renderbuffer in pixels.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the renderbuffer in pixels.", 
                "name": "height"
            }
        ], 
        "path": "dom/webgl2renderingcontext/renderbufferstoragemultisample", 
        "syntax": "WebGL2RenderingContext.renderbufferStorageMultisample()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.resumeTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.resumeTransformFeedback", 
        "params": [], 
        "path": "dom/webgl2renderingcontext/resumetransformfeedback", 
        "syntax": "WebGL2RenderingContext.resumeTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.samplerParameter": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.samplerParameter", 
        "params": [
            {
                "descr": "A WebGLSampler object.", 
                "name": "sampler"
            }, 
            {
                "descr": "A GLenum specifying which parameter to set. ", 
                "name": "pname"
            }, 
            {
                "descr": "A GLint (samplerParameteri) or a GLfloat (samplerParameterf) specifying a value for pname.", 
                "name": "param"
            }
        ], 
        "path": "dom/webgl2renderingcontext/samplerparameter", 
        "syntax": "WebGL2RenderingContext.samplerParameter[if]()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.texImage3D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.texImage3D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the color components in the texture. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLsizei specifying the depth of the texture.", 
                "name": "depth"
            }, 
            {
                "descr": "A GLint specifying the width of the border. ", 
                "name": "border"
            }, 
            {
                "descr": "A GLenum specifying the format of the texel data. ", 
                "name": "format"
            }, 
            {
                "descr": "A GLenum specifying the data type of the texel data. ", 
                "name": "type"
            }, 
            {
                "descr": "A ArrayBufferView that can be used as a pixel source for the texture.", 
                "name": "pixels"
            }, 
            {
                "descr": "A GLintptr byte offset into the WebGLBuffer's data store. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webgl2renderingcontext/teximage3d", 
        "syntax": "WebGLRenderingContext.texImage3D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.texStorage2D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.texStorage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the number of texture levels.", 
                "name": "level"
            }, 
            {
                "descr": "A GLenum specifying the texture store format. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }
        ], 
        "path": "dom/webgl2renderingcontext/texstorage2d", 
        "syntax": "WebGL2RenderingContext.texStorage2D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.texStorage3D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.texStorage3D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the number of texture levels.", 
                "name": "level"
            }, 
            {
                "descr": "A GLenum specifying the texture store format. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLsizei specifying the depth of the texture.", 
                "name": "depth"
            }
        ], 
        "path": "dom/webgl2renderingcontext/texstorage3d", 
        "syntax": "WebGL2RenderingContext.texStorage3D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.texSubImage3D": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.texSubImage3D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the x offset within the texture image.", 
                "name": "xoffset"
            }, 
            {
                "descr": "A GLint specifying the y offset within the texture image.", 
                "name": "yoffset"
            }, 
            {
                "descr": "A GLint specifying the z offset within the texture image.", 
                "name": "zoffset"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLsizei specifying the depth of the texture.", 
                "name": "depth"
            }, 
            {
                "descr": "A GLenum specifying the format of the texel data. ", 
                "name": "format"
            }, 
            {
                "descr": "A GLenum specifying the data type of the texel data. ", 
                "name": "type"
            }, 
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:  ArrayBufferView,  A Uint8Array must be used if type is gl.UNSIGNED_BYTE. ", 
                "name": "pixels"
            }, 
            {
                "descr": "A GLintptr byte offset into the WebGLBuffer's data store. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webgl2renderingcontext/texsubimage3d", 
        "syntax": "WebGL2RenderingContext.texSubImage3D()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.transformFeedbackVaryings": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.transformFeedbackVaryings", 
        "params": [
            {
                "descr": "A WebGLProgram.", 
                "name": "program"
            }, 
            {
                "descr": "An Array of DOMString specifying the the names of the varying variables to use.", 
                "name": "varyings"
            }, 
            {
                "descr": "A GLenum specifying the mode to use when capturing the varying variables. ", 
                "name": "bufferMode"
            }
        ], 
        "path": "dom/webgl2renderingcontext/transformfeedbackvaryings", 
        "syntax": "WebGL2RenderingContext.transformFeedbackVaryings()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.uniform": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.uniform", 
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.", 
                "name": "location"
            }, 
            {
                "descr": "A new value to be used for the uniform variable. ", 
                "name": "value, v0, v1, v2, v3"
            }
        ], 
        "path": "dom/webgl2renderingcontext/uniform", 
        "syntax": "WebGL2RenderingContext.uniform[1234]ui[v]()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.uniformBlockBinding": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.uniformBlockBinding", 
        "params": [
            {
                "descr": "A WebGLProgram containing the active uniform block whose binding to assign.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the active uniform block within the program.", 
                "name": "uniformBlockIndex"
            }, 
            {
                "descr": "A GLuint specifying the binding point to which to bind the uniform block.", 
                "name": "uniformBlockBinding"
            }
        ], 
        "path": "dom/webgl2renderingcontext/uniformblockbinding", 
        "syntax": "WebGL2RenderingContext.uniformBlockBinding()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.uniformMatrix": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.uniformMatrix", 
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.", 
                "name": "location"
            }, 
            {
                "descr": "A GLboolean specifying whether to transpose the matrix. ", 
                "name": "transpose"
            }, 
            {
                "descr": "A Float32Array of float values.", 
                "name": "value"
            }
        ], 
        "path": "dom/webgl2renderingcontext/uniformmatrix", 
        "syntax": "WebGL2RenderingContext.uniformMatrix[234]x[234]fv()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.vertexAttribDivisor": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.vertexAttribDivisor", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the generic vertex attributes.", 
                "name": "index"
            }, 
            {
                "descr": "A GLuint specifying the number of instances that will pass between updates of the generic attribute.", 
                "name": "divisor"
            }
        ], 
        "path": "dom/webgl2renderingcontext/vertexattribdivisor", 
        "syntax": "WebGL2RenderingContext.vertexAttribDivisor()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.vertexAttribI": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.vertexAttribI", 
        "params": [
            {
                "descr": "A GLuint specifying the position of the vertex attribute to be modified.", 
                "name": "index"
            }, 
            {
                "descr": "An integer Number for the vertex attribute value.", 
                "name": "v0, v1, v2, v3"
            }, 
            {
                "descr": "A Uint32Array or Int32Array for integer vector vertex attribute values.", 
                "name": "value"
            }
        ], 
        "path": "dom/webgl2renderingcontext/vertexattribi", 
        "syntax": "WebGL2RenderingContext.vertexAttribI4[u]i[v]()", 
        "type": "WebGL"
    }, 
    "WebGL2RenderingContext.vertexAttribIPointer": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.vertexAttribIPointer", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute that is to be modified.", 
                "name": "index"
            }, 
            {
                "descr": "A GLint specifying the number of components per vertex attribute. ", 
                "name": "size"
            }, 
            {
                "descr": "A GLenum specifying the data type of each component in the array. ", 
                "name": "type"
            }, 
            {
                "descr": "A GLsizei specifying the offset in bytes between the beginning of consecutive vertex attributes.", 
                "name": "stride"
            }, 
            {
                "descr": "A GLintptr specifying an offset in bytes of the first component in the vertex attribute array. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webgl2renderingcontext/vertexattribipointer", 
        "syntax": "WebGL2RenderingContext.vertexAttribIPointer()", 
        "type": "Pointer Events"
    }, 
    "WebGL2RenderingContext.waitSync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGL2RenderingContext.waitSync", 
        "params": [
            {
                "descr": "A WebGLSync object on which to wait on.", 
                "name": "sync"
            }, 
            {
                "descr": "A GLbitfield specifying a bitwise combination of flags controlling the flushing behavior. ", 
                "name": "flags"
            }, 
            {
                "descr": "A GLint64 specifying a timeout the server should wait before continuing. ", 
                "name": "timeout"
            }
        ], 
        "path": "dom/webgl2renderingcontext/waitsync", 
        "syntax": "WebGL2RenderingContext.waitSync()", 
        "type": "WebGL"
    }, 
    "WebGLQuery": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGLQuery", 
        "params": [], 
        "path": "dom/webglquery", 
        "syntax": "WebGLQuery interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available. Another kind of queries are disjoint timer queries, which allow you to measure performance and profiling of your GPU. Disjoint timer queries are available with the EXT_disjoint_timer_query extension only. When working with WebGLQuery objects, the following methods of the WebGL2RenderingContext are useful:  WebGL2RenderingContext.createQuery()", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.activeTexture": {
        "descr": "The WebGLRenderingContext.activeTexture() method of the WebGL API specifies which texture unit to make active.", 
        "name": "WebGLRenderingContext.activeTexture", 
        "params": [
            {
                "descr": "The texture unit to make active. ", 
                "name": "texture"
            }
        ], 
        "path": "dom/webglrenderingcontext/activetexture", 
        "syntax": "void gl.activeTexture(texture);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.attachShader": {
        "descr": "The WebGLRenderingContext.attachShader() method of the WebGL API attaches either a fragment or vertex WebGLShader to a WebGLProgram.", 
        "name": "WebGLRenderingContext.attachShader", 
        "params": [
            {
                "descr": "A WebGLProgram.", 
                "name": "program"
            }, 
            {
                "descr": "A fragment or vertex WebGLShader.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/attachshader", 
        "syntax": "void gl.attachShader(program, shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bindAttribLocation": {
        "descr": "The WebGLRenderingContext.bindAttribLocation() method of the WebGL API binds a generic vertex index to an attribute variable.", 
        "name": "WebGLRenderingContext.bindAttribLocation", 
        "params": [
            {
                "descr": "A WebGLProgram object to bind.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the generic vertex to bind.", 
                "name": "index"
            }, 
            {
                "descr": "A DOMString specifying the name of the variable to bind to the generic vertex index. ", 
                "name": "name"
            }
        ], 
        "path": "dom/webglrenderingcontext/bindattriblocation", 
        "syntax": "void gl.bindAttribLocation(program, index, name);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bindBuffer": {
        "descr": "The WebGLRenderingContext.bindBuffer() method of the WebGL API binds a given WebGLBuffer to a target.", 
        "name": "WebGLRenderingContext.bindBuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLBuffer to bind.", 
                "name": "buffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/bindbuffer", 
        "syntax": "void gl.bindBuffer(target, buffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bindFramebuffer": {
        "descr": "The WebGLRenderingContext.bindFramebuffer() method of the WebGL API binds a given WebGLFramebuffer to a target.", 
        "name": "WebGLRenderingContext.bindFramebuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLFramebuffer object to bind.", 
                "name": "framebuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/bindframebuffer", 
        "syntax": "void gl.bindFramebuffer(target, framebuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bindRenderbuffer": {
        "descr": "The WebGLRenderingContext.bindRenderbuffer() method of the WebGL API binds a given WebGLRenderbuffer to a target, which must be gl.RENDERBUFFER.", 
        "name": "WebGLRenderingContext.bindRenderbuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLRenderbuffer object to bind.", 
                "name": "renderbuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/bindrenderbuffer", 
        "syntax": "void gl.bindRenderbuffer(target, renderbuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bindTexture": {
        "descr": "The WebGLRenderingContext.bindTexture() method of the WebGL API binds a given WebGLTexture to a target (binding point).", 
        "name": "WebGLRenderingContext.bindTexture", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLTexture object to bind.", 
                "name": "texture"
            }
        ], 
        "path": "dom/webglrenderingcontext/bindtexture", 
        "syntax": "void gl.bindTexture(target, texture);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.blendColor": {
        "descr": "The WebGLRenderingContext.blendColor() method of the WebGL API is used to set the source and destination blending factors.", 
        "name": "WebGLRenderingContext.blendColor", 
        "params": [
            {
                "descr": "A GLclampf for the red component in the range of 0 to 1.", 
                "name": "red"
            }, 
            {
                "descr": "A GLclampf for the green component in the range of 0 to 1.", 
                "name": "green"
            }, 
            {
                "descr": "A GLclampf for the blue component in the range of 0 to 1.", 
                "name": "blue"
            }, 
            {
                "descr": "A GLclampf for the alpha component (transparency) in the range of 0 to 1.", 
                "name": "alpha"
            }
        ], 
        "path": "dom/webglrenderingcontext/blendcolor", 
        "syntax": "void gl.blendColor(red, green, blue, alpha);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.blendEquation": {
        "descr": "The WebGLRenderingContext.blendEquation() method of the WebGL API is used to set both the RGB blend equation and alpha blend equation to a single equation.", 
        "name": "WebGLRenderingContext.blendEquation", 
        "params": [
            {
                "descr": "A GLenum specifying how source and destination colors are combined. ", 
                "name": "mode"
            }
        ], 
        "path": "dom/webglrenderingcontext/blendequation", 
        "syntax": "void gl.blendEquation(mode);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.blendEquationSeparate": {
        "descr": "The WebGLRenderingContext.blendEquationSeparate() method of the WebGL API is used to set the RGB blend equation and alpha blend equation separately.", 
        "name": "WebGLRenderingContext.blendEquationSeparate", 
        "params": [
            {
                "descr": "A GLenum specifying how the red, green and blue components of source and destination colors are combined. ", 
                "name": "modeRGB"
            }, 
            {
                "descr": "A GLenum specifying how the alpha component (transparency) of source and destination colors are combined. ", 
                "name": "modeAlpha"
            }
        ], 
        "path": "dom/webglrenderingcontext/blendequationseparate", 
        "syntax": "void gl.blendEquationSeparate(modeRGB, modeAlpha);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.blendFunc": {
        "descr": "The WebGLRenderingContext.blendFunc() method of the WebGL API defines which function is used for blending pixel arithmetic.", 
        "name": "WebGLRenderingContext.blendFunc", 
        "params": [
            {
                "descr": "A GLenum specifying a multiplier for the source blending factors. ", 
                "name": "sfactor"
            }, 
            {
                "descr": "A GLenum specifying a multiplier for the destination blending factors. ", 
                "name": "dfactor"
            }
        ], 
        "path": "dom/webglrenderingcontext/blendfunc", 
        "syntax": "void gl.blendFunc(sfactor, dfactor);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.blendFuncSeparate": {
        "descr": "The WebGLRenderingContext.blendFuncSeparate() method of the WebGL API defines which function is used for blending pixel arithmetic for RGB and alpha components separately.", 
        "name": "WebGLRenderingContext.blendFuncSeparate", 
        "params": [
            {
                "descr": "A GLenum specifying a multiplier for the red, green and blue (RBG) source blending factors. ", 
                "name": "srcRGB"
            }, 
            {
                "descr": "A GLenum specifying a multiplier for the red, green and blue (RBG) destination blending factors. ", 
                "name": "dstRBG"
            }, 
            {
                "descr": "A GLenum specifying a multiplier for the alpha source blending factor. ", 
                "name": "srcAlpha"
            }, 
            {
                "descr": "A GLenum specifying a multiplier for the alpha destination blending factor. ", 
                "name": "dstAlpha"
            }
        ], 
        "path": "dom/webglrenderingcontext/blendfuncseparate", 
        "syntax": "void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bufferData": {
        "descr": "The WebGLRenderingContext.bufferData() method of the WebGL API initializes and creates the buffer object's data store.", 
        "name": "WebGLRenderingContext.bufferData", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A GLsizeiptr setting the size of the buffer object's data store.", 
                "name": "size"
            }, 
            {
                "descr": "An ArrayBuffer, SharedArrayBuffer or one of the ArrayBufferView typed array types that will be copied into the data store. ", 
                "name": "data Optional"
            }, 
            {
                "descr": "A GLenum specifying the usage pattern of the data store. ", 
                "name": "usage"
            }
        ], 
        "path": "dom/webglrenderingcontext/bufferdata", 
        "syntax": "void gl.bufferData(target, size, usage);\n or void gl.bufferData(target, data, usage);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.bufferSubData": {
        "descr": "The WebGLRenderingContext.bufferSubData() method of the WebGL API updates a subset of a buffer object's data store.", 
        "name": "WebGLRenderingContext.bufferSubData", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A GLintptr specifying an offset in bytes where the data replacement will start.", 
                "name": "offset"
            }, 
            {
                "descr": "An ArrayBuffer, SharedArrayBuffer or one of the ArrayBufferView typed array types that will be copied into the data store.", 
                "name": "data Optional"
            }
        ], 
        "path": "dom/webglrenderingcontext/buffersubdata", 
        "syntax": "void gl.bufferSubData(target, offset, data);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.canvas": {
        "descr": "The WebGLRenderingContext.canvas property is a read-only reference to the HTMLCanvasElement or OffscreenCanvas object that is associated with the context. It might be null if it is not associated with a <canvas> element or an OffscreenCanvas object.", 
        "name": "WebGLRenderingContext.canvas", 
        "params": [], 
        "path": "dom/webglrenderingcontext/canvas", 
        "syntax": "gl.canvas; Return value Either a HTMLCanvasElement or OffscreenCanvas object or null. Examples Canvas element Given this <canvas>", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.checkFramebufferStatus": {
        "descr": "The WebGLRenderingContext.checkFramebufferStatus() method of the WebGL API returns the completeness status of the WebGLFramebuffer object.", 
        "name": "WebGLRenderingContext.checkFramebufferStatus", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }
        ], 
        "path": "dom/webglrenderingcontext/checkframebufferstatus", 
        "syntax": "GLenum gl.checkFramebufferStatus(target);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.clear": {
        "descr": "The WebGLRenderingContext.clear() method of the WebGL API clears buffers to preset values.", 
        "name": "WebGLRenderingContext.clear", 
        "params": [
            {
                "descr": "A GLbitfield bitwise OR mask that indicates the buffers to be cleared. ", 
                "name": "mask"
            }
        ], 
        "path": "dom/webglrenderingcontext/clear", 
        "syntax": "void gl.clear(mask);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.clearColor": {
        "descr": "The WebGLRenderingContext.clearColor() method of the WebGL API specifies the color values used when clearing color buffers.", 
        "name": "WebGLRenderingContext.clearColor", 
        "params": [
            {
                "descr": "A GLclampf specifying the red color value used when the color buffers are cleared. ", 
                "name": "red"
            }, 
            {
                "descr": "A GLclampf specifying the green color value used when the color buffers are cleared. ", 
                "name": "green"
            }, 
            {
                "descr": "A GLclampf specifying the blue color value used when the color buffers are cleared. ", 
                "name": "blue"
            }, 
            {
                "descr": "A GLclampf specifying the alpha (transparency) value used when the color buffers are cleared. ", 
                "name": "alpha"
            }
        ], 
        "path": "dom/webglrenderingcontext/clearcolor", 
        "syntax": "void gl.clearColor(red, green, blue, alpha);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.clearDepth": {
        "descr": "The WebGLRenderingContext.clearDepth() method of the WebGL API specifies the clear value for the depth buffer.", 
        "name": "WebGLRenderingContext.clearDepth", 
        "params": [
            {
                "descr": "A GLclampf specifying the depth value used when the depth buffer is cleared. ", 
                "name": "depth"
            }
        ], 
        "path": "dom/webglrenderingcontext/cleardepth", 
        "syntax": "void gl.clearDepth(depth);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.clearStencil": {
        "descr": "The WebGLRenderingContext.clearStencil() method of the WebGL API specifies the clear value for the stencil buffer.", 
        "name": "WebGLRenderingContext.clearStencil", 
        "params": [
            {
                "descr": "A GLint specifying the index used when the stencil buffer is cleared. ", 
                "name": "s"
            }
        ], 
        "path": "dom/webglrenderingcontext/clearstencil", 
        "syntax": "void gl.clearStencil(s);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.colorMask": {
        "descr": "The WebGLRenderingContext.colorMask() method of the WebGL API sets which color components to enable or to disable when drawing or rendering to a WebGLFramebuffer.", 
        "name": "WebGLRenderingContext.colorMask", 
        "params": [
            {
                "descr": "A GLboolean specifying whether or not the red color component can be written into the frame buffer. ", 
                "name": "red"
            }, 
            {
                "descr": "A GLboolean specifying whether or not the green color component can be written into the frame buffer. ", 
                "name": "green"
            }, 
            {
                "descr": "A GLboolean specifying whether or not the blue color component can be written into the frame buffer. ", 
                "name": "blue"
            }, 
            {
                "descr": "A GLboolean specifying whether or not the alpha (transparency) component can be written into the frame buffer. ", 
                "name": "alpha"
            }
        ], 
        "path": "dom/webglrenderingcontext/colormask", 
        "syntax": "void gl.colorMask(red, green, blue, alpha);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.commit": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGLRenderingContext.commit", 
        "params": [], 
        "path": "dom/webglrenderingcontext/commit", 
        "syntax": "WebGLRenderingContext.commit()", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.compileShader": {
        "descr": "The WebGLRenderingContext.compileShader() method of the WebGL API compiles a GLSL shader into binary data so that it can be used by a WebGLProgram.", 
        "name": "WebGLRenderingContext.compileShader", 
        "params": [
            {
                "descr": "A fragment or vertex WebGLShader.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/compileshader", 
        "syntax": "void gl.compileShader(shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.compressedTexImage2D": {
        "descr": "The WebGLRenderingContext.compressedTexImage2D() method of the WebGL API specifies a two-dimensional texture image in a compressed format.", 
        "name": "WebGLRenderingContext.compressedTexImage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLenum specifying the compressed image format. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLint specifying the width of the border. ", 
                "name": "border"
            }, 
            {
                "descr": "A ArrayBufferView that be used as a data store for the compressed image data in memory.", 
                "name": "pixels"
            }
        ], 
        "path": "dom/webglrenderingcontext/compressedteximage2d", 
        "syntax": "void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.compressedTexSubImage2D": {
        "descr": "The WebGLRenderingContext.compressedTexSubImage2D() method of the WebGL API specifies a two-dimensional sub-rectangle for a texture image in a compressed format.", 
        "name": "WebGLRenderingContext.compressedTexSubImage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active compressed texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the horizontal offset within the compressed texture image.", 
                "name": "xoffset"
            }, 
            {
                "descr": "A GLint specifying the vertical offset within the compressed texture image.", 
                "name": "yoffset"
            }, 
            {
                "descr": "A GLsizei specifying the width of the compressed texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the compressed texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLenum specifying the compressed image format. ", 
                "name": "format"
            }, 
            {
                "descr": "A ArrayBufferView that be used as a data store for the compressed image data in memory.", 
                "name": "pixels"
            }
        ], 
        "path": "dom/webglrenderingcontext/compressedtexsubimage2d", 
        "syntax": "void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.copyTexImage2D": {
        "descr": "The WebGLRenderingContext.copyTexImage2D() method of the WebGL API copies pixels from the current WebGLFramebuffer into a 2D texture image.", 
        "name": "WebGLRenderingContext.copyTexImage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the color components in the texture. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLint specifying the x coordinate of the lower left corner where to start copying.", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the y coordinate of the lower left corner where to start copying.", 
                "name": "y"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLint specifying the width of the border. ", 
                "name": "border"
            }
        ], 
        "path": "dom/webglrenderingcontext/copyteximage2d", 
        "syntax": "void gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.copyTexSubImage2D": {
        "descr": "The WebGLRenderingContext.copyTexSubImage2D() method of the WebGL API copies pixels from the current WebGLFramebuffer into an existing 2D texture sub-image.", 
        "name": "WebGLRenderingContext.copyTexSubImage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the horizontal offset within the texture image.", 
                "name": "xoffset"
            }, 
            {
                "descr": "A GLint specifying the vertical offset within the texture image.", 
                "name": "yoffset"
            }, 
            {
                "descr": "A GLint specifying the x coordinate of the lower left corner where to start copying.", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the y coordinate of the lower left corner where to start copying.", 
                "name": "y"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }
        ], 
        "path": "dom/webglrenderingcontext/copytexsubimage2d", 
        "syntax": "void gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.createBuffer": {
        "descr": "The WebGLRenderingContext.createBuffer() method of the WebGL API creates and initializes a WebGLBuffer storing data such as vertices or colors.", 
        "name": "WebGLRenderingContext.createBuffer", 
        "params": [], 
        "path": "dom/webglrenderingcontext/createbuffer", 
        "syntax": "WebGLBuffer gl.createBuffer();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.createFramebuffer": {
        "descr": "The WebGLRenderingContext.creatFramebuffer() method of the WebGL API creates and initializes a WebGLFramebuffer object.", 
        "name": "WebGLRenderingContext.createFramebuffer", 
        "params": [], 
        "path": "dom/webglrenderingcontext/createframebuffer", 
        "syntax": "WebGLFramebuffer gl.createFramebuffer();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.createProgram": {
        "descr": "The WebGLRenderingContext.createProgram() method of the WebGL API creates and initializes a WebGLProgram object.", 
        "name": "WebGLRenderingContext.createProgram", 
        "params": [], 
        "path": "dom/webglrenderingcontext/createprogram", 
        "syntax": "WebGLProgram gl.createProgram();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.createRenderbuffer": {
        "descr": "The WebGLRenderingContext.createRenderbuffer() method of the WebGL API creates and initializes a WebGLRenderbuffer object.", 
        "name": "WebGLRenderingContext.createRenderbuffer", 
        "params": [], 
        "path": "dom/webglrenderingcontext/createrenderbuffer", 
        "syntax": "WebGLRenderbuffer gl.createRenderbuffer();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.createShader": {
        "descr": "The WebGLRenderingContext.createShader() method of the WebGL API creates a WebGLShader that can then be configured further using WebGLRenderingContext.shaderSource() and WebGLRenderingContext.compileShader().", 
        "name": "WebGLRenderingContext.createShader", 
        "params": [
            {
                "descr": "Either gl.VERTEX_SHADER or gl.FRAGMENT_SHADER", 
                "name": "type"
            }
        ], 
        "path": "dom/webglrenderingcontext/createshader", 
        "syntax": "WebGLShader gl.createShader(type);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.createTexture": {
        "descr": "The WebGLRenderingContext.createTexture() method of the WebGL API creates and initializes a WebGLTexture object.", 
        "name": "WebGLRenderingContext.createTexture", 
        "params": [], 
        "path": "dom/webglrenderingcontext/createtexture", 
        "syntax": "WebGLTexture gl.createTexture();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.cullFace": {
        "descr": "The WebGLRenderingContext.cullFace() method of the WebGL API specifies whether or not front- and/or back-facing polygons can be culled.", 
        "name": "WebGLRenderingContext.cullFace", 
        "params": [
            {
                "descr": "A GLenum specifying whether front- or back-facing polygons are candidates for culling. ", 
                "name": "mode"
            }
        ], 
        "path": "dom/webglrenderingcontext/cullface", 
        "syntax": "void gl.cullFace(mode);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.deleteBuffer": {
        "descr": "The WebGLRenderingContext.deleteBuffer() method of the WebGL API deletes a given WebGLBuffer. This method has no effect if the buffer has already been deleted.", 
        "name": "WebGLRenderingContext.deleteBuffer", 
        "params": [
            {
                "descr": "A WebGLBuffer object to delete.", 
                "name": "buffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/deletebuffer", 
        "syntax": "void gl.deleteBuffer(buffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.deleteFramebuffer": {
        "descr": "The WebGLRenderingContext.deleteFramebuffer() method of the WebGL API deletes a given WebGLFramebuffer object. This method has no effect if the frame buffer has already been deleted.", 
        "name": "WebGLRenderingContext.deleteFramebuffer", 
        "params": [
            {
                "descr": "A WebGLFramebuffer object to delete.", 
                "name": "framebuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/deleteframebuffer", 
        "syntax": "void gl.deleteFramebuffer(framebuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.deleteProgram": {
        "descr": "The WebGLRenderingContext.deleteProgram() method of the WebGL API deletes a given WebGLProgram object. This method has no effect if the program has already been deleted.", 
        "name": "WebGLRenderingContext.deleteProgram", 
        "params": [
            {
                "descr": "A WebGLProgram object to delete.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/deleteprogram", 
        "syntax": "void gl.deleteProgram(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.deleteRenderbuffer": {
        "descr": "The WebGLRenderingContext.deleteRenderbuffer() method of the WebGL API deletes a given WebGLRenderbuffer object. This method has no effect if the render buffer has already been deleted.", 
        "name": "WebGLRenderingContext.deleteRenderbuffer", 
        "params": [
            {
                "descr": "A WebGLRenderbuffer object to delete.", 
                "name": "renderbuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/deleterenderbuffer", 
        "syntax": "void gl.deleteRenderbuffer(renderbuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.deleteShader": {
        "descr": "The WebGLRenderingContext.deleteShader() method of the WebGL API deletes a given WebGLShader object. This method has no effect if the shader has already been deleted.", 
        "name": "WebGLRenderingContext.deleteShader", 
        "params": [
            {
                "descr": "A WebGLShader object to delete.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/deleteshader", 
        "syntax": "void gl.deleteShader(shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.deleteTexture": {
        "descr": "The WebGLRenderingContext.deleteTexture() method of the WebGL API deletes a given WebGLTexture object. This method has no effect if the texture has already been deleted.", 
        "name": "WebGLRenderingContext.deleteTexture", 
        "params": [
            {
                "descr": "A WebGLTexture object to delete.", 
                "name": "texture"
            }
        ], 
        "path": "dom/webglrenderingcontext/deletetexture", 
        "syntax": "void gl.deleteTexture(texture);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.depthFunc": {
        "descr": "The WebGLRenderingContext.depthFunc() method of the WebGL API specifies a function that compares incoming pixel depth to the current depth buffer value.", 
        "name": "WebGLRenderingContext.depthFunc", 
        "params": [
            {
                "descr": "A GLenum specifying the depth comparison function, which sets the conditions under which the pixel will be drawn. ", 
                "name": "func"
            }
        ], 
        "path": "dom/webglrenderingcontext/depthfunc", 
        "syntax": "void gl.depthFunc(func);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.depthMask": {
        "descr": "The WebGLRenderingContext.depthMask() method of the WebGL API sets whether writing into the depth buffer is enabled or disabled.", 
        "name": "WebGLRenderingContext.depthMask", 
        "params": [
            {
                "descr": "A GLboolean specifying whether or not writing into the depth buffer is enabled. ", 
                "name": "flag"
            }
        ], 
        "path": "dom/webglrenderingcontext/depthmask", 
        "syntax": "void gl.depthMask(flag);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.depthRange": {
        "descr": "The WebGLRenderingContext.depthRange() method of the WebGL API specifies the depth range mapping from normalized device coordinates to window or viewport coordinates.", 
        "name": "WebGLRenderingContext.depthRange", 
        "params": [
            {
                "descr": "A GLclampf specifying the mapping of the near clipping plane to window or viewport coordinates. ", 
                "name": "zNear"
            }, 
            {
                "descr": "A GLclampf specifying the mapping of the far clipping plane to window or viewport coordinates. ", 
                "name": "zFar"
            }
        ], 
        "path": "dom/webglrenderingcontext/depthrange", 
        "syntax": "void gl.depthRange(zNear, zFar);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.detachShader": {
        "descr": "The WebGLRenderingContext.detachShader() method of the WebGL API detaches a previously attached WebGLShader from a WebGLProgram.", 
        "name": "WebGLRenderingContext.detachShader", 
        "params": [
            {
                "descr": "A WebGLProgram.", 
                "name": "program"
            }, 
            {
                "descr": "A fragment or vertex WebGLShader.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/detachshader", 
        "syntax": "WebGLShader gl.detachShader(program, shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.disable": {
        "descr": "The WebGLRenderingContext.disable() method of the WebGL API disables specific WebGL capabilities for this context.", 
        "name": "WebGLRenderingContext.disable", 
        "params": [
            {
                "descr": "A GLenum specifying which WebGL capability to disable. ", 
                "name": "cap"
            }
        ], 
        "path": "dom/webglrenderingcontext/disable", 
        "syntax": "void gl.disable(cap);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.disableVertexAttribArray": {
        "descr": "The WebGLRenderingContext.disableVertexAttribArray() method of the WebGL API turns the generic vertex attribute array off at a given index position.", 
        "name": "WebGLRenderingContext.disableVertexAttribArray", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute to disable.", 
                "name": "index"
            }
        ], 
        "path": "dom/webglrenderingcontext/disablevertexattribarray", 
        "syntax": "void gl.disableVertexAttribArray(index);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.drawArrays": {
        "descr": "The WebGLRenderingContext.drawArrays() method of the WebGL API renders primitives from array data.", 
        "name": "WebGLRenderingContext.drawArrays", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLint specifying the starting index in the array of vector points.", 
                "name": "first"
            }, 
            {
                "descr": "A GLsizei specifying the number of indices to be rendered.", 
                "name": "count"
            }
        ], 
        "path": "dom/webglrenderingcontext/drawarrays", 
        "syntax": "void gl.drawArrays(mode, first, count);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.drawElements": {
        "descr": "The WebGLRenderingContext.drawElements() method of the WebGL API renders primitives from array data.", 
        "name": "WebGLRenderingContext.drawElements", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.", 
                "name": "count"
            }, 
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ", 
                "name": "type"
            }, 
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webglrenderingcontext/drawelements", 
        "syntax": "void gl.drawElements(mode, count, type, offset);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.drawingBufferHeight": {
        "descr": "The read-only WebGLRenderingContext.drawingBufferHeight property represents the actual height of the current drawing buffer. It should match the height attribute of the <canvas> element associated with this context, but might differ if the implementation is not able to provide the requested height.", 
        "name": "WebGLRenderingContext.drawingBufferHeight", 
        "params": [], 
        "path": "dom/webglrenderingcontext/drawingbufferheight", 
        "syntax": "gl.drawingBufferHeight; Examples Given this <canvas>", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.drawingBufferWidth": {
        "descr": "The read-only WebGLRenderingContext.drawingBufferWidth property represents the actual width of the current drawing buffer. It should match the width attribute of the <canvas> element associated with this context, but might differ if the implementation is not able to provide the requested width.", 
        "name": "WebGLRenderingContext.drawingBufferWidth", 
        "params": [], 
        "path": "dom/webglrenderingcontext/drawingbufferwidth", 
        "syntax": "gl.drawingBufferWidth; Examples Given this <canvas>", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.enable": {
        "descr": "The WebGLRenderingContext.enable() method of the WebGL API enables specific WebGL capabilities for this context.", 
        "name": "WebGLRenderingContext.enable", 
        "params": [
            {
                "descr": "A GLenum specifying which WebGL capability to enable. ", 
                "name": "cap"
            }
        ], 
        "path": "dom/webglrenderingcontext/enable", 
        "syntax": "void gl.enable(cap);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.enableVertexAttribArray": {
        "descr": "The WebGLRenderingContext.enableVertexAttribArray() method of the WebGL API turns the generic vertex attribute array on at a given index position.", 
        "name": "WebGLRenderingContext.enableVertexAttribArray", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute to enable.", 
                "name": "index"
            }
        ], 
        "path": "dom/webglrenderingcontext/enablevertexattribarray", 
        "syntax": "void gl.enableVertexAttribArray(index);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.finish": {
        "descr": "The WebGLRenderingContext.finish() method of the WebGL API blocks execution until all previously called commands are finished.", 
        "name": "WebGLRenderingContext.finish", 
        "params": [], 
        "path": "dom/webglrenderingcontext/finish", 
        "syntax": "void gl.finish();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.flush": {
        "descr": "The WebGLRenderingContext.flush() method of the WebGL API empties different buffer commands, causing all commands to be executed as quickly as possible.", 
        "name": "WebGLRenderingContext.flush", 
        "params": [], 
        "path": "dom/webglrenderingcontext/flush", 
        "syntax": "void gl.flush();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.framebufferRenderbuffer": {
        "descr": "The WebGLRenderingContext.framebufferRenderbuffer() method of the WebGL API attaches a WebGLRenderbuffer object to a WebGLFramebuffer object.", 
        "name": "WebGLRenderingContext.framebufferRenderbuffer", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) for the framebuffer. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying the attachment point for the render buffer. ", 
                "name": "attachment"
            }, 
            {
                "descr": "A GLenum specifying the binding point (target) for the render buffer. ", 
                "name": "renderbuffertarget"
            }, 
            {
                "descr": "A WebGLRenderbuffer object to attach.", 
                "name": "renderbuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/framebufferrenderbuffer", 
        "syntax": "void gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.framebufferTexture2D": {
        "descr": "The WebGLRenderingContext.framebufferTexture2D() method of the WebGL API attaches a texture to a WebGLFramebuffer.", 
        "name": "WebGLRenderingContext.framebufferTexture2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying the attachment point for the texture. ", 
                "name": "attachment"
            }, 
            {
                "descr": "A GLenum specifying the texture target. ", 
                "name": "textarget"
            }, 
            {
                "descr": "A WebGLTexture object whose image to attach.", 
                "name": "texture"
            }, 
            {
                "descr": "A GLint specifying the mipmap level of the texture image to be attached. ", 
                "name": "level"
            }
        ], 
        "path": "dom/webglrenderingcontext/framebuffertexture2d", 
        "syntax": "void gl.framebufferTexture2D(target, attachment, textarget, texture, level);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.frontFace": {
        "descr": "The WebGLRenderingContext.frontFace() method of the WebGL API specifies whether polygons are front- or back-facing by setting a winding orientation.", 
        "name": "WebGLRenderingContext.frontFace", 
        "params": [
            {
                "descr": "Sets the winding orientation. The default value is gl.CCW. ", 
                "name": "mode"
            }
        ], 
        "path": "dom/webglrenderingcontext/frontface", 
        "syntax": "void gl.frontFace(mode);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.generateMipmap": {
        "descr": "The WebGLRenderingContext.generateMipmap() method of the WebGL API generates a set of mipmaps for a WebGLTexture object.", 
        "name": "WebGLRenderingContext.generateMipmap", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture whose mipmaps will be generated. ", 
                "name": "target"
            }
        ], 
        "path": "dom/webglrenderingcontext/generatemipmap", 
        "syntax": "void gl.generateMipmap(target);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getActiveAttrib": {
        "descr": "The WebGLRenderingContext.getActiveAttrib() method of the WebGL API returns a WebGLActiveInfo object containing size, type, and name of a vertex attribute at a given position in a WebGLProgram.", 
        "name": "WebGLRenderingContext.getActiveAttrib", 
        "params": [
            {
                "descr": "A WebGLProgram containing the vertex attribute.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the vertex attribute to get.", 
                "name": "index"
            }
        ], 
        "path": "dom/webglrenderingcontext/getactiveattrib", 
        "syntax": "WebGLActiveInfo gl.getActiveAttrib(program,index);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getActiveUniform": {
        "descr": "The WebGLRenderingContext.getActiveUniform() method of the WebGL API returns a WebGLActiveInfo object containing size, type, and name of a uniform attribute at a given position in a WebGLProgram.", 
        "name": "WebGLRenderingContext.getActiveUniform", 
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform attribute.", 
                "name": "program"
            }, 
            {
                "descr": "A GLuint specifying the index of the uniform attribute to get.", 
                "name": "index"
            }
        ], 
        "path": "dom/webglrenderingcontext/getactiveuniform", 
        "syntax": "WebGLActiveInfo gl.getActiveUniform(program,index);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getAttachedShaders": {
        "descr": "The WebGLRenderingContext.getAttachedShaders() method of the WebGL API returns a list of WebGLShader objects attached to a WebGLProgram.", 
        "name": "WebGLRenderingContext.getAttachedShaders", 
        "params": [
            {
                "descr": "A WebGLProgram object to get attached shaders for.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/getattachedshaders", 
        "syntax": "sequence<WebGLShader> gl.getAttachedShaders(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getAttribLocation": {
        "descr": "The WebGLRenderingContext.getAttribLocation() method of the WebGL API returns the location of an attribute variable in a given WebGLProgram.", 
        "name": "WebGLRenderingContext.getAttribLocation", 
        "params": [
            {
                "descr": "A WebGLProgram containing the attribute variable.", 
                "name": "program"
            }, 
            {
                "descr": "A DOMString specifying the name of the attribute variable whose location to get.", 
                "name": "name"
            }
        ], 
        "path": "dom/webglrenderingcontext/getattriblocation", 
        "syntax": "GLint gl.getAttribLocation(program, name);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getBufferParameter": {
        "descr": "The WebGLRenderingContext.getBufferParameter() method of the WebGL API returns information about the buffer.", 
        "name": "WebGLRenderingContext.getBufferParameter", 
        "params": [
            {
                "descr": "A Glenum specifying the target buffer object. ", 
                "name": "target"
            }, 
            {
                "descr": "A Glenum specifying information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getbufferparameter", 
        "syntax": "any gl.getBufferParameter(target, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getContextAttributes": {
        "descr": "The WebGLRenderingContext.getContextAttributes() method returns a WebGLContextAttributes object that contains the actual context parameters. Might return null, if the context is lost.", 
        "name": "WebGLRenderingContext.getContextAttributes", 
        "params": [], 
        "path": "dom/webglrenderingcontext/getcontextattributes", 
        "syntax": "gl.getContextAttributes();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getError": {
        "descr": "The WebGLRenderingContext.getError() method of the WebGL API returns error information.", 
        "name": "WebGLRenderingContext.getError", 
        "params": [], 
        "path": "dom/webglrenderingcontext/geterror", 
        "syntax": "GLenum gl.getError();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getExtension": {
        "descr": "The WebGLRenderingContext.getExtension() method enables a WebGL extension.", 
        "name": "WebGLRenderingContext.getExtension", 
        "params": [
            {
                "descr": "A String for the name of the WebGL extension to enable.", 
                "name": "name"
            }
        ], 
        "path": "dom/webglrenderingcontext/getextension", 
        "syntax": "gl.getExtension(name);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getFramebufferAttachmentParameter": {
        "descr": "The WebGLRenderingContext.getFramebufferAttachmentParameter() method of the WebGL API returns information about a framebuffer's attachment.", 
        "name": "WebGLRenderingContext.getFramebufferAttachmentParameter", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying the attachment point for the texture. ", 
                "name": "attachment"
            }, 
            {
                "descr": "A GLenum specifying information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getframebufferattachmentparameter", 
        "syntax": "any gl.getFramebufferAttachmentParameter(target, attachment, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getParameter": {
        "descr": "The WebGLRenderingContext.getParameter() method of the WebGL API returns a value for the passed parameter name.", 
        "name": "WebGLRenderingContext.getParameter", 
        "params": [
            {
                "descr": "A GLenum specifying which parameter value to return. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getparameter", 
        "syntax": "any gl.getParameter(pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getProgramInfoLog": {
        "descr": "The WebGLRenderingContext.getProgramInfoLog returns the information log for the specified WebGLProgram object. It contains errors that occurred during failed linking or validation of WebGLProgram objects.", 
        "name": "WebGLRenderingContext.getProgramInfoLog", 
        "params": [
            {
                "descr": "A WebGLProgram to query.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/getprograminfolog", 
        "syntax": "gl.getProgramInfoLog(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getProgramParameter": {
        "descr": "The WebGLRenderingContext.getProgramParameter() method of the WebGL API returns information about the given program.", 
        "name": "WebGLRenderingContext.getProgramParameter", 
        "params": [
            {
                "descr": "A WebGLProgram to get parameter information from.", 
                "name": "program"
            }, 
            {
                "descr": "A Glenum specifying the information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getprogramparameter", 
        "syntax": "any gl.getProgramParameter(program, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getRenderbufferParameter": {
        "descr": "The WebGLRenderingContext.getRenderbufferParameter() method of the WebGL API returns information about the renderbuffer.", 
        "name": "WebGLRenderingContext.getRenderbufferParameter", 
        "params": [
            {
                "descr": "A Glenum specifying the target renderbuffer object. ", 
                "name": "target"
            }, 
            {
                "descr": "A Glenum specifying the information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getrenderbufferparameter", 
        "syntax": "any gl.getRenderbufferParameter(target, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getShaderInfoLog": {
        "descr": "The WebGLRenderingContext.getShaderInfoLog returns the information log for the specified WebGLShader object. It contains warnings, debugging and compile information.", 
        "name": "WebGLRenderingContext.getShaderInfoLog", 
        "params": [
            {
                "descr": "A WebGLShader to query.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/getshaderinfolog", 
        "syntax": "gl.getShaderInfoLog(shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getShaderParameter": {
        "descr": "The WebGLRenderingContext.getShaderParameter() method of the WebGL API returns information about the given shader.", 
        "name": "WebGLRenderingContext.getShaderParameter", 
        "params": [
            {
                "descr": "A WebGLShader to get parameter information from.", 
                "name": "shader"
            }, 
            {
                "descr": "A Glenum specifying the information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getshaderparameter", 
        "syntax": "any gl.getShaderParameter(shader, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getShaderPrecisionFormat": {
        "descr": "The WebGLRenderingContext.getShaderPrecisionFormat() method of the WebGL API returns a new WebGLShaderPrecisionFormat object describing the range and precision for the specified shader numeric format.", 
        "name": "WebGLRenderingContext.getShaderPrecisionFormat", 
        "params": [
            {
                "descr": "Either a FRAGMENT_SHADER or a VERTEXT_SHADER.", 
                "name": "shaderType"
            }, 
            {
                "descr": "A precision type value. Either LOW_FLOAT, MEDIUM_FLOAT, HIGH_FLOAT, LOW_INT, MEDIUM_INT, or HIGH_INT.", 
                "name": "precisionType"
            }
        ], 
        "path": "dom/webglrenderingcontext/getshaderprecisionformat", 
        "syntax": "WebGLShaderPrecisionFormat gl.getShaderPrecisionFormat(shaderType, precisionType);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getShaderSource": {
        "descr": "The WebGLRenderingContext.getShaderSource() method of the WebGL API returns the source code of a WebGLShader as a DOMString.", 
        "name": "WebGLRenderingContext.getShaderSource", 
        "params": [
            {
                "descr": "A WebGLShader object to get the source code from.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/getshadersource", 
        "syntax": "DOMString gl.getShaderSource(shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getSupportedExtensions": {
        "descr": "The WebGLRenderingContext.getSupportedExtensions() method returns a list of all the supported WebGL extensions.", 
        "name": "WebGLRenderingContext.getSupportedExtensions", 
        "params": [], 
        "path": "dom/webglrenderingcontext/getsupportedextensions", 
        "syntax": "gl.getSupportedExtensions();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getTexParameter": {
        "descr": "The WebGLRenderingContext.getTexParameter() method of the WebGL API returns information about the given texture.", 
        "name": "WebGLRenderingContext.getTexParameter", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }, 
            {
                "descr": "A Glenum specifying the information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/gettexparameter", 
        "syntax": "any gl.getTexParameter(target, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getUniform": {
        "descr": "The WebGLRenderingContext.getUniform() method of the WebGL API returns the value of a uniform variable at a given location.", 
        "name": "WebGLRenderingContext.getUniform", 
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform attribute.", 
                "name": "program"
            }, 
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to get.", 
                "name": "location"
            }
        ], 
        "path": "dom/webglrenderingcontext/getuniform", 
        "syntax": "any gl.getUniform(program, location);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getUniformLocation": {
        "descr": "The WebGLRenderingContext.getUniformLocation() method of the WebGL API returns a WebGLUniformLocation of a uniform variable in a given WebGLProgram.", 
        "name": "WebGLRenderingContext.getUniformLocation", 
        "params": [
            {
                "descr": "A WebGLProgram containing the uniform variable.", 
                "name": "program"
            }, 
            {
                "descr": "A DOMString specifying the name of the uniform variable whose location to get.", 
                "name": "name"
            }
        ], 
        "path": "dom/webglrenderingcontext/getuniformlocation", 
        "syntax": "WebGLUniformLocation gl.getUniformLocation(program, name);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getVertexAttrib": {
        "descr": "The WebGLRenderingContext.getVertexAttrib() method of the WebGL API returns information about a vertex attribute at a given position.", 
        "name": "WebGLRenderingContext.getVertexAttrib", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute.", 
                "name": "index"
            }, 
            {
                "descr": "A GLenum specifying the information to query. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getvertexattrib", 
        "syntax": "any gl.getVertexAttrib(index, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.getVertexAttribOffset": {
        "descr": "The WebGLRenderingContext.getVertexAttribOffset() method of the WebGL API returns the address of a specified vertex attribute.", 
        "name": "WebGLRenderingContext.getVertexAttribOffset", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute.", 
                "name": "index"
            }, 
            {
                "descr": "A GLenum which must be gl.VERTEX_ATTRIB_ARRAY_POINTER.", 
                "name": "pname"
            }
        ], 
        "path": "dom/webglrenderingcontext/getvertexattriboffset", 
        "syntax": "GLsizeiptr gl.getVertexAttribOffset(index, pname);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.hint": {
        "descr": "The WebGLRenderingContext.hint() method of the WebGL API specifies hints for certain behaviors. The interpretation of these hints depend on the implementation.", 
        "name": "WebGLRenderingContext.hint", 
        "params": [
            {
                "descr": "Sets which behavior to be controlled. ", 
                "name": "target"
            }, 
            {
                "descr": "Sets the behavior. The default value is gl.DONT_CARE. ", 
                "name": "mode"
            }
        ], 
        "path": "dom/webglrenderingcontext/hint", 
        "syntax": "void gl.hint(target, mode);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isBuffer": {
        "descr": "The WebGLRenderingContext.isBuffer() method of the WebGL API returns true if the passed WebGLBuffer is valid and false otherwise.", 
        "name": "WebGLRenderingContext.isBuffer", 
        "params": [
            {
                "descr": "A WebGLBuffer to check.", 
                "name": "buffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/isbuffer", 
        "syntax": "GLboolean gl.isBuffer(buffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isContextLost": {
        "descr": "The WebGLRenderingContext.isContextLost() method returns a Boolean indicating whether or not the WebGL context has been lost.", 
        "name": "WebGLRenderingContext.isContextLost", 
        "params": [], 
        "path": "dom/webglrenderingcontext/iscontextlost", 
        "syntax": "gl.isContextLost();", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isEnabled": {
        "descr": "The WebGLRenderingContext.isEnabled() method of the WebGL API tests whether a specific WebGL capability is enabled or not for this context.", 
        "name": "WebGLRenderingContext.isEnabled", 
        "params": [
            {
                "descr": "A GLenum specifying which WebGL capability to test. ", 
                "name": "cap"
            }
        ], 
        "path": "dom/webglrenderingcontext/isenabled", 
        "syntax": "void gl.isEnabled(cap);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isFramebuffer": {
        "descr": "The WebGLRenderingContext.isFramebuffer() method of the WebGL API returns true if the passed WebGLFramebuffer is valid and false otherwise.", 
        "name": "WebGLRenderingContext.isFramebuffer", 
        "params": [
            {
                "descr": "A WebGLFramebuffer to check.", 
                "name": "framebuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/isframebuffer", 
        "syntax": "GLboolean gl.isFramebuffer(framebuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isProgram": {
        "descr": "The WebGLRenderingContext.isProgram() method of the WebGL API returns true if the passed WebGLProgram is valid, false otherwise.", 
        "name": "WebGLRenderingContext.isProgram", 
        "params": [
            {
                "descr": "A WebGLProgram to check.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/isprogram", 
        "syntax": "GLboolean gl.isProgram(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isRenderbuffer": {
        "descr": "The WebGLRenderingContext.isRenderbuffer() method of the WebGL API returns true if the passed WebGLRenderbuffer is valid and false otherwise.", 
        "name": "WebGLRenderingContext.isRenderbuffer", 
        "params": [
            {
                "descr": "A WebGLRenderbuffer to check.", 
                "name": "renderbuffer"
            }
        ], 
        "path": "dom/webglrenderingcontext/isrenderbuffer", 
        "syntax": "GLboolean gl.isRenderbuffer(renderbuffer);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isShader": {
        "descr": "The WebGLRenderingContext.isShader() method of the WebGL API returns true if the passed WebGLShader is valid, false otherwise.", 
        "name": "WebGLRenderingContext.isShader", 
        "params": [
            {
                "descr": "A WebGLShader to check.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webglrenderingcontext/isshader", 
        "syntax": "GLboolean gl.isShader(shader);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.isTexture": {
        "descr": "The WebGLRenderingContext.isTexture() method of the WebGL API returns true if the passed WebGLTexture is valid and false otherwise.", 
        "name": "WebGLRenderingContext.isTexture", 
        "params": [
            {
                "descr": "A WebGLTexture to check.", 
                "name": "texture"
            }
        ], 
        "path": "dom/webglrenderingcontext/istexture", 
        "syntax": "GLboolean gl.isTexture(texture);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.lineWidth": {
        "descr": "The WebGLRenderingContext.lineWidth() method of the WebGL API sets the line width of rasterized lines.", 
        "name": "WebGLRenderingContext.lineWidth", 
        "params": [
            {
                "descr": "A GLfloat specifying the width of rasterized lines. ", 
                "name": "width"
            }
        ], 
        "path": "dom/webglrenderingcontext/linewidth", 
        "syntax": "void gl.lineWidth(width);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.linkProgram": {
        "descr": "The WebGLRenderingContext.linkProgram() method of the WebGL API links a given WebGLProgram to the attached vertex and fragment shaders.", 
        "name": "WebGLRenderingContext.linkProgram", 
        "params": [
            {
                "descr": "A WebGLProgram to link.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/linkprogram", 
        "syntax": "void gl.linkProgram(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.pixelStorei": {
        "descr": "The WebGLRenderingContext.pixelStorei() method of the WebGL API specifies the pixel storage modes.", 
        "name": "WebGLRenderingContext.pixelStorei", 
        "params": [
            {
                "descr": "A Glenum specifying which parameter to set. ", 
                "name": "pname"
            }, 
            {
                "descr": "A GLint specifying a value to set the pname parameter to. ", 
                "name": "param"
            }
        ], 
        "path": "dom/webglrenderingcontext/pixelstorei", 
        "syntax": "void gl.pixelStorei(pname, param);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.polygonOffset": {
        "descr": "The WebGLRenderingContext.polygonOffset() method of the WebGL API specifies the scale factors and units to calculate depth values.", 
        "name": "WebGLRenderingContext.polygonOffset", 
        "params": [
            {
                "descr": "A GLfloat which sets the scale factor for the variable depth offset for each polygon. ", 
                "name": "factor"
            }, 
            {
                "descr": "A GLfloat which sets the multiplier by which an implementation-specific value is multiplied with to create a constant depth offset. ", 
                "name": "units"
            }
        ], 
        "path": "dom/webglrenderingcontext/polygonoffset", 
        "syntax": "void gl.polygonOffset(factor, units);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.readPixels": {
        "descr": "The WebGLRenderingContext.readPixels() method of the WebGL API reads a block of pixels from a specified rectangle of the current color framebuffer into an ArrayBufferView object.", 
        "name": "WebGLRenderingContext.readPixels", 
        "params": [
            {
                "descr": "A GLint specifying the first horizontal pixel that is read from the lower left corner of a rectangular block of pixels.", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the first vertical pixel that is read from the lower left corner of a rectangular block of pixels.", 
                "name": "y"
            }, 
            {
                "descr": "A GLsizei specifying the width of the rectangle.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the rectangle.", 
                "name": "height"
            }, 
            {
                "descr": "A GLenum specifying the format of the pixel data. ", 
                "name": "format"
            }, 
            {
                "descr": "A GLenum specifying the data type of the pixel data. ", 
                "name": "type"
            }, 
            {
                "descr": "An ArrayBufferView object to read data into. ", 
                "name": "pixels"
            }
        ], 
        "path": "dom/webglrenderingcontext/readpixels", 
        "syntax": "void gl.readPixels(x, y, width, height, format, type, pixels);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.renderbufferStorage": {
        "descr": "The WebGLRenderingContext.renderbufferStorage() method of the WebGL API creates and initializes a renderbuffer object's data store.", 
        "name": "WebGLRenderingContext.renderbufferStorage", 
        "params": [
            {
                "descr": "A Glenum specifying the target renderbuffer object. ", 
                "name": "target"
            }, 
            {
                "descr": "A Glenum specifying the internal format of the renderbuffer. ", 
                "name": "internalFormat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the renderbuffer in pixels.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the renderbuffer in pixels.", 
                "name": "height"
            }
        ], 
        "path": "dom/webglrenderingcontext/renderbufferstorage", 
        "syntax": "void gl.renderbufferStorage(target, internalFormat, width, height);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.sampleCoverage": {
        "descr": "The WebGLRenderingContext.sampleCoverage() method of the WebGL API specifies multi-sample coverage parameters for anti-aliasing effects.", 
        "name": "WebGLRenderingContext.sampleCoverage", 
        "params": [
            {
                "descr": "A GLclampf which sets a single floating-point coverage value clamped to the range [0,1]. ", 
                "name": "value"
            }, 
            {
                "descr": "A GLboolean which sets whether or not the coverage masks should be inverted. ", 
                "name": "invert"
            }
        ], 
        "path": "dom/webglrenderingcontext/samplecoverage", 
        "syntax": "void gl.sampleCoverage(value, invert);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.scissor": {
        "descr": "The WebGLRenderingContext.scissor() method of the WebGL API sets a scissor box, which limits the drawing to a specified rectangle.", 
        "name": "WebGLRenderingContext.scissor", 
        "params": [
            {
                "descr": "A GLint specifying the horizontal coordinate for the lower left corner of the box. ", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the vertical coordinate for the lower left corner of the box. ", 
                "name": "y"
            }, 
            {
                "descr": "A non-negative Glsizei specifying the width of the scissor box. ", 
                "name": "width"
            }, 
            {
                "descr": "A non-negative Glsizei specifying the height of the scissor box. ", 
                "name": "height"
            }
        ], 
        "path": "dom/webglrenderingcontext/scissor", 
        "syntax": "void gl.scissor(x, y, width, height);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.shaderSource": {
        "descr": "The WebGLRenderingContext.shaderSource() method of the WebGL API sets the source code of a WebGLShader.", 
        "name": "WebGLRenderingContext.shaderSource", 
        "params": [
            {
                "descr": "A WebGLShader object in which to set the source code.", 
                "name": "shader"
            }, 
            {
                "descr": "A DOMString containing the GLSL source code to set.", 
                "name": "source"
            }
        ], 
        "path": "dom/webglrenderingcontext/shadersource", 
        "syntax": "void gl.shaderSource(shader, source);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.stencilFunc": {
        "descr": "The WebGLRenderingContext.stencilFunc() method of the WebGL API sets the front and back function and reference value for stencil testing.", 
        "name": "WebGLRenderingContext.stencilFunc", 
        "params": [
            {
                "descr": "A GLenum specifying the test function. ", 
                "name": "func"
            }, 
            {
                "descr": "A GLint specifying the reference value for the stencil test. ", 
                "name": "ref"
            }, 
            {
                "descr": "A GLuint specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. ", 
                "name": "mask"
            }
        ], 
        "path": "dom/webglrenderingcontext/stencilfunc", 
        "syntax": "void gl.stencilFunc(func, ref, mask);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.stencilFuncSeparate": {
        "descr": "The WebGLRenderingContext.stencilFuncSeparate() method of the WebGL API sets the front and/or back function and reference value for stencil testing.", 
        "name": "WebGLRenderingContext.stencilFuncSeparate", 
        "params": [
            {
                "descr": "A GLenum specifying whether the front and/or back stencil state is updated. ", 
                "name": "face"
            }, 
            {
                "descr": "A GLenum specifying the test function. ", 
                "name": "func"
            }, 
            {
                "descr": "A GLint specifying the reference value for the stencil test. ", 
                "name": "ref"
            }, 
            {
                "descr": "A GLuint specifying a bit-wise mask that is used to AND the reference value and the stored stencil value when the test is done. ", 
                "name": "mask"
            }
        ], 
        "path": "dom/webglrenderingcontext/stencilfuncseparate", 
        "syntax": "void gl.stencilFuncSeparate(face, func, ref, mask);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.stencilMask": {
        "descr": "The WebGLRenderingContext.stencilMask() method of the WebGL API controls enabling and disabling of both the front and back writing of individual bits in the stencil planes.", 
        "name": "WebGLRenderingContext.stencilMask", 
        "params": [
            {
                "descr": "A GLuint specifying a bit mask to enable or disable writing of individual bits in the stencil planes. ", 
                "name": "mask"
            }
        ], 
        "path": "dom/webglrenderingcontext/stencilmask", 
        "syntax": "void gl.stencilMask(mask);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.stencilMaskSeparate": {
        "descr": "The WebGLRenderingContext.stencilMaskSeparate() method of the WebGL API controls enabling and disabling of front and/or back writing of individual bits in the stencil planes.", 
        "name": "WebGLRenderingContext.stencilMaskSeparate", 
        "params": [
            {
                "descr": "A GLenum specifying whether the front and/or back stencil writemask is updated. ", 
                "name": "face"
            }, 
            {
                "descr": "A GLuint specifying a bit mask to enable or disable writing of individual bits in the stencil planes. ", 
                "name": "mask"
            }
        ], 
        "path": "dom/webglrenderingcontext/stencilmaskseparate", 
        "syntax": "void gl.stencilMaskSeparate(face, mask);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.stencilOp": {
        "descr": "The WebGLRenderingContext.stencilOp() method of the WebGL API sets both the front and back-facing stencil test actions.", 
        "name": "WebGLRenderingContext.stencilOp", 
        "params": [
            {
                "descr": "A GLenum specifying the function to use when the stencil test fails. ", 
                "name": "fail"
            }, 
            {
                "descr": "A GLenum specifying the function to use when the stencil test passes, but the depth test fails. ", 
                "name": "zfail"
            }, 
            {
                "descr": "A GLenum specifying the function to use when both the stencil test and the depth test pass, or when the stencil test passes and there is no depth buffer or depth testing is disabled. ", 
                "name": "zpass"
            }, 
            {
                "descr": "Keeps the current value.", 
                "name": "gl.KEEP"
            }, 
            {
                "descr": "Sets the stencil buffer value to 0.", 
                "name": "gl.ZERO"
            }, 
            {
                "descr": "Sets the stencil buffer value to the reference value as specified by WebGLRenderingContext.stencilFunc().", 
                "name": "gl.REPLACE"
            }, 
            {
                "descr": "Increments the current stencil buffer value. ", 
                "name": "gl.INCR"
            }, 
            {
                "descr": "Increments the current stencil buffer value. ", 
                "name": "gl.INCR_WRAP"
            }, 
            {
                "descr": "Decrements the current stencil buffer value. ", 
                "name": "gl.DECR"
            }, 
            {
                "descr": "Decrements the current stencil buffer value. ", 
                "name": "gl.DECR_WRAP"
            }, 
            {
                "descr": "Inverts the current stencil buffer value bitwise.", 
                "name": "gl.INVERT"
            }
        ], 
        "path": "dom/webglrenderingcontext/stencilop", 
        "syntax": "void gl.stencilOp(fail, zfail, zpass);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.stencilOpSeparate": {
        "descr": "The WebGLRenderingContext.stencilOpSeparate() method of the WebGL API sets the front and/or back-facing stencil test actions.", 
        "name": "WebGLRenderingContext.stencilOpSeparate", 
        "params": [
            {
                "descr": "A GLenum specifying whether the front and/or back stencil state is updated. ", 
                "name": "face"
            }, 
            {
                "descr": "A GLenum specifying the function to use when the stencil test fails. ", 
                "name": "fail"
            }, 
            {
                "descr": "A GLenum specifying the function to use when the stencil test passes, but the depth test fails. ", 
                "name": "zfail"
            }, 
            {
                "descr": "A GLenum specifying the function to use when both the stencil test and the depth test pass, or when the stencil test passes and there is no depth buffer or depth testing is disabled. ", 
                "name": "zpass"
            }, 
            {
                "descr": "Keeps the current value.", 
                "name": "gl.KEEP"
            }, 
            {
                "descr": "Sets the stencil buffer value to 0.", 
                "name": "gl.ZERO"
            }, 
            {
                "descr": "Sets the stencil buffer value to the reference value as specified by WebGLRenderingContext.stencilFunc().", 
                "name": "gl.REPLACE"
            }, 
            {
                "descr": "Increments the current stencil buffer value. ", 
                "name": "gl.INCR"
            }, 
            {
                "descr": "Increments the current stencil buffer value. ", 
                "name": "gl.INCR_WRAP"
            }, 
            {
                "descr": "Decrements the current stencil buffer value. ", 
                "name": "gl.DECR"
            }, 
            {
                "descr": "Decrements the current stencil buffer value. ", 
                "name": "gl.DECR_WRAP"
            }, 
            {
                "descr": "Inverts the current stencil buffer value bitwise.", 
                "name": "gl.INVERT"
            }
        ], 
        "path": "dom/webglrenderingcontext/stencilopseparate", 
        "syntax": "void gl.stencilOp(face, fail, zfail, zpass);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.texImage2D": {
        "descr": "The WebGLRenderingContext.texImage2D() method of the WebGL API specifies a two-dimensional texture image.", 
        "name": "WebGLRenderingContext.texImage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the color components in the texture. ", 
                "name": "internalformat"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLint specifying the width of the border. ", 
                "name": "border"
            }, 
            {
                "descr": "A GLenum specifying the format of the texel data. ", 
                "name": "format"
            }, 
            {
                "descr": "A GLenum specifying the data type of the texel data. ", 
                "name": "type"
            }, 
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:  ArrayBufferView,  A Uint8Array must be used if type is gl.UNSIGNED_BYTE. ", 
                "name": "pixels"
            }, 
            {
                "descr": "(WebGL 2 only) A GLintptr byte offset into the WebGLBuffer's data store. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webglrenderingcontext/teximage2d", 
        "syntax": "void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);\n or void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);\n or void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);\n or void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);\n or void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);\n or Additional signature in a WebGL 2 context:void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.texParameter": {
        "descr": "The WebGLRenderingContext.texParameter[fi]() methods of the WebGL API set texture parameters.", 
        "name": "WebGLRenderingContext.texParameter", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target). ", 
                "name": "target"
            }
        ], 
        "path": "dom/webglrenderingcontext/texparameter", 
        "syntax": "void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\n or void gl.texParameteri(GLenum target, GLenum pname, GLint param);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.texSubImage2D": {
        "descr": "The WebGLRenderingContext.texSubImage2D() method of the WebGL API specifies a sub-rectangle of the current texture.", 
        "name": "WebGLRenderingContext.texSubImage2D", 
        "params": [
            {
                "descr": "A GLenum specifying the binding point (target) of the active texture. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLint specifying the level of detail. ", 
                "name": "level"
            }, 
            {
                "descr": "A GLint specifying the horizontal offset within the texture image.", 
                "name": "xoffset"
            }, 
            {
                "descr": "A GLint specifying the vertical offset within the texture image.", 
                "name": "yoffset"
            }, 
            {
                "descr": "A GLsizei specifying the width of the texture.", 
                "name": "width"
            }, 
            {
                "descr": "A GLsizei specifying the height of the texture.", 
                "name": "height"
            }, 
            {
                "descr": "A GLenum specifying the format of the texel data. ", 
                "name": "format"
            }, 
            {
                "descr": "A GLenum specifying the data type of the texel data. ", 
                "name": "type"
            }, 
            {
                "descr": "One of the following objects can be used as a pixel source for the texture:  ArrayBufferView,  A Uint8Array must be used if type is gl.UNSIGNED_BYTE. ", 
                "name": "pixels"
            }, 
            {
                "descr": "(WebGL 2 only) A GLintptr byte offset into the WebGLBuffer's data store. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webglrenderingcontext/texsubimage2d", 
        "syntax": "void gl.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, ArrayBufferView? pixels);\n or void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, ImageData? pixels);\n or void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLImageElement? pixels);\n or void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLCanvasElement? pixels);\n or void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, HTMLVideoElement? pixels);\n or Additional signature in a WebGL 2 context:void gl.texSubImage2D(target, level, xoffset, yoffset, format, type, GLintptr offset);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.uniform": {
        "descr": "The WebGLRenderingContext.uniform[1234][fi][v]() methods of the WebGL API specify values of uniform variables.", 
        "name": "WebGLRenderingContext.uniform", 
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.", 
                "name": "location"
            }, 
            {
                "descr": "A new value to be used for the uniform variable. ", 
                "name": "value, v0, v1, v2, v3"
            }
        ], 
        "path": "dom/webglrenderingcontext/uniform", 
        "syntax": "void gl.uniform1f(location, v0);\n or void gl.uniform1fv(location, value);\n or void gl.uniform1i(location, v0);\n or void gl.uniform1iv(location, value);\n or void gl.uniform2f(location, v0, v1);\n or void gl.uniform2fv(location, value);\n or void gl.uniform2i(location, v0, v1);\n or void gl.uniform2iv(location, value);\n or void gl.uniform3f(location, v0, v1, v2);\n or void gl.uniform3fv(location, value);\n or void gl.uniform3i(location, v0, v1, v2);\n or void gl.uniform3iv(location, value);\n or void gl.uniform4f(location, v0, v1, v2, v3);\n or void gl.uniform4fv(location, value);\n or void gl.uniform4i(location, v0, v1, v2, v3);\n or void gl.uniform4iv(location, value);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.uniformMatrix": {
        "descr": "The WebGLRenderingContext.uniformMatrix[234]fv() methods of the WebGL API specify matrix values for uniform variables.", 
        "name": "WebGLRenderingContext.uniformMatrix", 
        "params": [
            {
                "descr": "A WebGLUniformLocation object containing the location of the uniform attribute to modify.", 
                "name": "location"
            }, 
            {
                "descr": "A GLboolean specifying whether to transpose the matrix. ", 
                "name": "transpose"
            }, 
            {
                "descr": "A Float32Array of float values.", 
                "name": "value"
            }
        ], 
        "path": "dom/webglrenderingcontext/uniformmatrix", 
        "syntax": "void gl.uniformMatrix2fv(location, transpose, value);\n or void gl.uniformMatrix3fv(location, transpose, value);\n or void gl.uniformMatrix4fv(location, transpose, value);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.useProgram": {
        "descr": "The WebGLRenderingContext.useProgram() method of the WebGL API sets the specified WebGLProgram as part the current rendering state.", 
        "name": "WebGLRenderingContext.useProgram", 
        "params": [
            {
                "descr": "A WebGLProgram to use.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/useprogram", 
        "syntax": "void gl.useProgram(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.validateProgram": {
        "descr": "The WebGLRenderingContext.validateProgram() method of the WebGL API validates a WebGLProgram. It checks if it is successfully linked and if it can be used in the current WebGL state.", 
        "name": "WebGLRenderingContext.validateProgram", 
        "params": [
            {
                "descr": "A WebGLProgram to validate.", 
                "name": "program"
            }
        ], 
        "path": "dom/webglrenderingcontext/validateprogram", 
        "syntax": "void gl.validateProgram(program);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.vertexAttrib": {
        "descr": "The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of the WebGL API specify values for generic vertex attributes.", 
        "name": "WebGLRenderingContext.vertexAttrib", 
        "params": [
            {
                "descr": "A GLuint specifying the position of the vertex attribute to be modified.", 
                "name": "index"
            }, 
            {
                "descr": "A floating point Number for the vertex attribute value.", 
                "name": "v0, v1, v2, v3"
            }, 
            {
                "descr": "A Float32Array for floating point vector vertex attribute values.", 
                "name": "value"
            }
        ], 
        "path": "dom/webglrenderingcontext/vertexattrib", 
        "syntax": "void gl.vertexAttrib1f(index, v0);\n or void gl.vertexAttrib2f(index, v0, v1);\n or void gl.vertexAttrib3f(index, v0, v1, v2);\n or void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n or void gl.vertexAttrib1fv(index, value);\n or void gl.vertexAttrib2fv(index, value);\n or void gl.vertexAttrib3fv(index, value);\n or void gl.vertexAttrib4fv(index, value);", 
        "type": "WebGL"
    }, 
    "WebGLRenderingContext.vertexAttribPointer": {
        "descr": "The WebGLRenderingContext.vertexAttribPointer() method of the WebGL API specifies the data formats and locations of vertex attributes in a vertex attributes array.", 
        "name": "WebGLRenderingContext.vertexAttribPointer", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the vertex attribute that is to be modified.", 
                "name": "index"
            }, 
            {
                "descr": "A GLint specifying the number of components per vertex attribute. ", 
                "name": "size"
            }, 
            {
                "descr": "A GLenum specifying the data type of each component in the array. ", 
                "name": "type"
            }, 
            {
                "descr": "A GLboolean specifying if fixed-point data values should be normalized (gl.TRUE) or are to converted to fixed point values (gl.FALSE) when accessed.", 
                "name": "normalized"
            }, 
            {
                "descr": "A GLsizei specifying the offset in bytes between the beginning of consecutive vertex attributes.", 
                "name": "stride"
            }, 
            {
                "descr": "A GLintptr specifying an offset in bytes of the first component in the vertex attribute array. ", 
                "name": "offset"
            }
        ], 
        "path": "dom/webglrenderingcontext/vertexattribpointer", 
        "syntax": "void gl.vertexAttribPointer(index, size, type, normalized, stride, offset);", 
        "type": "Pointer Events"
    }, 
    "WebGLRenderingContext.viewport": {
        "descr": "The WebGLRenderingContext.viewport() method of the WebGL API sets the viewport, which specifies the affine transformation of x and y from normalized device coordinates to window coordinates.", 
        "name": "WebGLRenderingContext.viewport", 
        "params": [
            {
                "descr": "A GLint specifying the horizontal coordinate for the lower left corner of the viewport origin. ", 
                "name": "x"
            }, 
            {
                "descr": "A GLint specifying the vertical coordinate for the lower left corner of the viewport origin. ", 
                "name": "y"
            }, 
            {
                "descr": "A non-negative Glsizei specifying the width of the viewport. ", 
                "name": "width"
            }, 
            {
                "descr": "A non-negative Glsizei specifying the height of the viewport. ", 
                "name": "height"
            }
        ], 
        "path": "dom/webglrenderingcontext/viewport", 
        "syntax": "void gl.viewport(x, y, width, height);", 
        "type": "WebGL"
    }, 
    "WebGLSampler": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGLSampler", 
        "params": [], 
        "path": "dom/webglsampler", 
        "syntax": "WebGLSampler interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader. When working with WebGLSampler objects, the following methods of the WebGL2RenderingContext are useful:  WebGL2RenderingContext.createSampler()", 
        "type": "WebGL"
    }, 
    "WebGLSync": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGLSync", 
        "params": [], 
        "path": "dom/webglsync", 
        "syntax": "WebGLSync interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application. When working with WebGLSync objects, the following methods of the WebGL2RenderingContext are useful:  WebGL2RenderingContext.fenceSync()", 
        "type": "WebGL"
    }, 
    "WebGLTransformFeedback": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGLTransformFeedback", 
        "params": [], 
        "path": "dom/webgltransformfeedback", 
        "syntax": "WebGLTransformFeedback interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times. When working with WebGLTransformFeedback objects, the following methods of the WebGL2RenderingContext are useful:  WebGL2RenderingContext.createTransformFeedback()", 
        "type": "WebGL"
    }, 
    "WebGLVertexArrayObject": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebGLVertexArrayObject", 
        "params": [], 
        "path": "dom/webglvertexarrayobject", 
        "syntax": "WebGLVertexArrayObject interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.", 
        "type": "WebGL"
    }, 
    "WebRTC API: Signaling and video calling": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebRTC API: Signaling and video calling", 
        "params": [
            {
                "descr": "The message type; either \"video-offer\" or \"video-answer\".", 
                "name": "type"
            }, 
            {
                "descr": "The sender's username.", 
                "name": "name"
            }, 
            {
                "descr": "The username of the person to receive the description (if the caller is sending the message, this specifies the callee, and vice-versa).", 
                "name": "target"
            }, 
            {
                "descr": "The SDP string describing the local end of the connection (so that from the point of view of the recipient, the SDP describes the remote end of the connection).", 
                "name": "sdp"
            }, 
            {
                "descr": "The message type: \"new-ice-candidate\".", 
                "name": "type"
            }, 
            {
                "descr": "The username of the person with whom negotation is underway; the server will direct the message to that user only.", 
                "name": "target"
            }, 
            {
                "descr": "The SDP candidate string, describing the proposed connection method.", 
                "name": "candidate"
            }, 
            {
                "descr": "The local ICE layer calls your icecandidate event handler when it needs you to transmit an ICE candidate to the other peer through your signaling server. ", 
                "name": "RTCPeerConnection.onicecandidate"
            }, 
            {
                "descr": "This handler for the addstream event is called by the local WebRTC layer to let you know when a remote stream has been added to your connection. ", 
                "name": "RTCPeerConnection.onaddstream"
            }, 
            {
                "descr": "This counterpart to onaddstream is called to handle the removestream event when the remote stream removes a stream from your connection. ", 
                "name": "RTCPeerConnection.onremovestream"
            }, 
            {
                "descr": "The iceconnectionstatechange event is sent by the ICE layer to let you know about changes to the state of the ICE connection. ", 
                "name": "RTCPeerConnection.oniceconnectionstatechange"
            }, 
            {
                "descr": "The ICE layer sends you the icegatheringstatechange event when the ICE agent's process of collecting candidates shifts from one state to another (such as starting to gather candidates or completing negotiation). See ICE gathering state below.", 
                "name": "RTCPeerConnection.onicegatheringstatechange"
            }, 
            {
                "descr": "The WebRTC infrastructure sends you the signalingstatechange message when the state of the signaling process (or of the connection to the signaling server) changes. ", 
                "name": "RTCPeerConnection.onsignalingstatechange"
            }, 
            {
                "descr": "This function is called whenever the WebRTC infrastructure needs you to start the session negotiation process anew. ", 
                "name": "RTCPeerConnection.onnegotiationneeded"
            }, 
            {
                "descr": "The message type: \"video-offer\".", 
                "name": "type"
            }, 
            {
                "descr": "The caller's username.", 
                "name": "name"
            }, 
            {
                "descr": "The name of the user we wish to call.", 
                "name": "target"
            }, 
            {
                "descr": "The SDP blob describing the offer.", 
                "name": "sdp"
            }, 
            {
                "descr": "The name of the user the ICE candidate needs to be sent to. ", 
                "name": "target"
            }, 
            {
                "descr": "The message type: \"new-ice-candidate\".", 
                "name": "type"
            }, 
            {
                "descr": "The candidate object the ICE layer wants us to transmit to the other peer.", 
                "name": "candidate"
            }
        ], 
        "path": "dom/webrtc_api/signaling_and_video_calling", 
        "syntax": "XMLHttpRequest to carrier pigeon for sending the signaling information between the two peers. What's important to note is that the server doesn't need to know what the content of the signaling data is. It's SDP, but even that doesn't really matter: the content of the message going through the signaling server is a black box for it. All that matters is that when the ICE subsystem tells you to send signaling data to the other peer, you do so, and that the other peer knows how to receive that information and deliver it to its ICE subsystem.", 
        "type": "WebRTC"
    }, 
    "WebRTC API: Simple RTCDataChannel sample": {
        "descr": "The RTCDataChannel interface is a feature of the WebRTC API which lets you open a channel between two peers over which you may send and receive arbitrary data. The API is intentionally similar to the WebSocket API, so that the same programming model can be used for each.", 
        "name": "WebRTC API: Simple RTCDataChannel sample", 
        "params": [], 
        "path": "dom/webrtc_api/simple_rtcdatachannel_sample", 
        "syntax": "load event listener, so that once the page is fully loaded, our startup()", 
        "type": "WebRTC"
    }, 
    "WebRTC API: Taking still photos": {
        "descr": "This article shows how to use WebRTC to access the camera on a computer or mobile phone with WebRTC support and take a photo with it. Try this sample, then read on to learn how it works.", 
        "name": "WebRTC API: Taking still photos", 
        "params": [
            {
                "descr": "Whatever size the incoming video is, we're going to scale the resulting image to be 320 pixels wide.", 
                "name": "width"
            }, 
            {
                "descr": "The output height of the image will be computed given the width and the aspect ratio of the stream.", 
                "name": "height"
            }, 
            {
                "descr": "Indicates whether or not there is currently an active stream of video running.", 
                "name": "streaming"
            }, 
            {
                "descr": "This will be a reference to the <video> element after the page is done loading.", 
                "name": "video"
            }, 
            {
                "descr": "This will be a reference to the <canvas> element after the page is done loading.", 
                "name": "canvas"
            }, 
            {
                "descr": "This will be a reference to the <img> element after the page is done loading.", 
                "name": "photo"
            }, 
            {
                "descr": "This will be a reference to the <button> element that's used to trigger capture. ", 
                "name": "startbutton"
            }
        ], 
        "path": "dom/webrtc_api/taking_still_photos", 
        "syntax": "<div> to facilitate styling and control. The first panel on the left contains two components: a <video> element, which will receive the stream from WebRTC, and a <button> the user clicks to capture a video frame. \u00a0 <div class=\"camera\">\u00a0\u00a0\u00a0 <video id=\"video\">Video stream not available.</video>\u00a0\u00a0\u00a0 <button id=\"startbutton\">Take photo</button>\u00a0 </div> This is straightforward, and we'll see how it ties together when we get into the JavaScript code. Next, we have a <canvas>", 
        "type": "WebRTC"
    }, 
    "WebSocket": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WebSocket", 
        "params": [
            {
                "descr": "The URL to which to connect; this should be the URL to which the WebSocket server will respond.", 
                "name": "url"
            }, 
            {
                "descr": "Either a single protocol string or an array of protocol strings. ", 
                "name": "protocols Optional"
            }, 
            {
                "descr": "The port to which the connection is being attempted is being blocked.", 
                "name": "SECURITY_ERR"
            }, 
            {
                "descr": "A numeric value indicating the status code explaining why the connection is being closed. ", 
                "name": "code Optional"
            }, 
            {
                "descr": "A human-readable string explaining why the connection is closing. ", 
                "name": "reason Optional"
            }, 
            {
                "descr": "An invalid code was specified.", 
                "name": "INVALID_ACCESS_ERR"
            }, 
            {
                "descr": "The reason string is too long or contains unpaired surrogates.", 
                "name": "SYNTAX_ERR"
            }, 
            {
                "descr": "A text string to send to the server.", 
                "name": "data"
            }, 
            {
                "descr": "The connection is not currently OPEN.", 
                "name": "INVALID_STATE_ERR"
            }, 
            {
                "descr": "The data is a string that has unpaired surrogates.", 
                "name": "SYNTAX_ERR"
            }
        ], 
        "path": "dom/websocket", 
        "syntax": "WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection. The WebSocket constructor accepts one required and one optional parameter: WebSocket WebSocket(  in DOMString url,  in optional DOMString protocols);\n or WebSocket WebSocket(  in DOMString url,  in optional DOMString[] protocols);", 
        "type": "Web Sockets"
    }, 
    "WebSockets API: Writing WebSocket client applications": {
        "descr": "WebSockets is a technology, based on the ws protocol, that makes it possible to establish a continuous full-duplex connection stream between a client and a server. A typical websocket client would be a user's browser, but the protocol is platform independent.", 
        "name": "WebSockets API: Writing WebSocket client applications", 
        "params": [
            {
                "descr": "The URL to which to connect; this should be the URL to which the WebSocket server will respond.", 
                "name": "url"
            }, 
            {
                "descr": "Either a single protocol string or an array of protocol strings. ", 
                "name": "protocols Optional"
            }, 
            {
                "descr": "The port to which the connection is being attempted is being blocked.", 
                "name": "SECURITY_ERR"
            }
        ], 
        "path": "dom/websockets_api/writing_websocket_client_applications", 
        "syntax": "CloseEvent. Examples This simple example creates a new WebSocket, connecting to the server at ws://www.example.com/socketserver. A custom protocol of \"protocolOne\" is named in the request for the socket in this example, though this can be omitted. var exampleSocket = new WebSocket(\"ws://www.example.com/socketserver\", \"protocolOne\");", 
        "type": "Web Sockets"
    }, 
    "WebSockets API: Writing WebSocket server": {
        "descr": "If you would like to use the WebSocket API, it is useful if you have a server. In this article I will show you how to write one in C#. You can do it in any server-side language, but to keep things simple and more understandable, I chose Microsoft's language.", 
        "name": "WebSockets API: Writing WebSocket server", 
        "params": [], 
        "path": "dom/websockets_api/writing_websocket_server", 
        "syntax": "message. Decoding algorithm decoded byte = encoded byte XOR (position of encoded byte Mod 4)th byte of key", 
        "type": "Web Sockets"
    }, 
    "WebSockets API: Writing WebSocket servers": {
        "descr": "A WebSocket server is a TCP application listening on any port of a server that follows a specific protocol, simple as that. The task of creating a custom server tends to scare people; however, it can be easy to implement a simple WebSocket server on your platform of choice.", 
        "name": "WebSockets API: Writing WebSocket servers", 
        "params": [], 
        "path": "dom/websockets_api/writing_websocket_servers", 
        "syntax": "\\r\\n and put an extra \\r\\n after the last one):", 
        "type": "Web Sockets"
    }, 
    "WebSockets API: Writing a WebSocket server in Java": {
        "descr": "This example shows you how to create a WebSocket API server using Oracle Java.  Although other server-side languages can be used to create a WebSocker server, this example uses Oracle Java to simplify the example code.", 
        "name": "WebSockets API: Writing a WebSocket server in Java", 
        "params": [], 
        "path": "dom/websockets_api/writing_a_websocket_server_in_java", 
        "syntax": "message. Decoding algorithm decoded byte = encoded byte XOR (position of encoded byte BITWISE AND 0x3)th byte of key", 
        "type": "Web Sockets"
    }, 
    "WebVR API": {
        "descr": "Draft This page is not complete.", 
        "name": "WebVR API", 
        "params": [
            {
                "descr": "Represents any VR device supported by this API. ", 
                "name": "VRDisplay"
            }, 
            {
                "descr": "Describes the capabilities of a VRDisplay \u2014 it's features can be used to perform VR device capability tests, for example can it return position information.", 
                "name": "VRDisplayCapabilities"
            }, 
            {
                "descr": "Represents the position state at a given timestamp (which includes orientation, position, velocity, and acceleration.)", 
                "name": "VRPose"
            }, 
            {
                "descr": "Provides access to all the information required to correctly render a scene for each given eye, including field of view information.", 
                "name": "VREyeParameters"
            }, 
            {
                "descr": "Represents a field of view defined by 4 different degree values describing the view from a center point.", 
                "name": "VRFieldOfView"
            }, 
            {
                "descr": "Represents a layer to be presented in a VRDisplay.", 
                "name": "VRLayer"
            }, 
            {
                "descr": "Represents the values describing the the stage area for devices that support room-scale experiences.", 
                "name": "VRStageParameters"
            }, 
            {
                "descr": "Returns the VRDisplay.displayId of the associated VRDisplay \u2014 the VRDisplay that the gamepad is controlling the displayed scene of.", 
                "name": "Gamepad.displayId Read only"
            }, 
            {
                "descr": "Returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true).", 
                "name": "Navigator.activeVRDisplays Read only"
            }, 
            {
                "descr": "Returns a promise that resolves to an array of VRDisplay objects representing any available VR devices connected to the computer.", 
                "name": "Navigator.getVRDisplays()"
            }, 
            {
                "descr": "Represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires).", 
                "name": "Window.onvrdisplayconnected"
            }, 
            {
                "descr": "Represents an event handler that will run when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires).", 
                "name": "Window.onvrdisplaydisconnected"
            }, 
            {
                "descr": "represents an event handler that will run when the presenting state of a VR device changes \u2014 i.e. ", 
                "name": "Window.onvrdisplaypresentchange"
            }
        ], 
        "path": "dom/webvr_api", 
        "syntax": "Navigator.getVRDevices()", 
        "type": "WebVR"
    }, 
    "WebVR API: Using the WebVR API": {
        "descr": "Draft This page is not complete.", 
        "name": "WebVR API: Using the WebVR API", 
        "params": [], 
        "path": "dom/webvr_api/using_the_webvr_api", 
        "syntax": "Navigator.getVRDevices, which returns a promise that resolves to an array of all the vr devices connected to your computer. There are two kinds of object that may be returned:  PositionSensorVRDevice", 
        "type": "WebVR"
    }, 
    "WebVR API: WebVR concepts": {
        "descr": "Draft This page is not complete.", 
        "name": "WebVR API: WebVR concepts", 
        "params": [], 
        "path": "dom/webvr_api/webvr_concepts", 
        "syntax": "the perception of two slightly differing images (one from each eye) as a single image. This results in depth perception, helping us to see the world in glorious 3D. To recreate this in VR apps, you need to render two very slightly different views side by side, which will be taken in by the left and right eyes when the user is using the HMD.", 
        "type": "WebVR"
    }, 
    "WheelEvent.constructor": {
        "descr": "The WheelEvent() constructor returns a newly created FocusEvent object.", 
        "name": "WheelEvent.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the name of the event.", 
                "name": "typeArg"
            }, 
            {
                "descr": "Is a WheelEventInit dictionary, having the following fields:  \"deltaX\", optional and defaulting to 0.0, is a double representing the horizontal scroll amount in the deltaMode unit. ", 
                "name": "wheelEventInitOptional"
            }
        ], 
        "path": "dom/wheelevent/wheelevent", 
        "syntax": "var wheelEvent = new WheelEvent(typeArg, wheelEventInit);", 
        "type": "Events"
    }, 
    "WheelEvent.deltaMode": {
        "descr": "The WheelEvent.deltaMode read-only property returns an unsigned long representing the unit of the delta values scroll amount. Permitted values are:", 
        "name": "WheelEvent.deltaMode", 
        "params": [], 
        "path": "dom/wheelevent/deltamode", 
        "syntax": "var unit = event.deltaMode; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaX\": 4, \"deltaMode\": 0});\n or console.log(syntheticEvent.deltaMode);", 
        "type": "Events"
    }, 
    "WheelEvent.deltaX": {
        "descr": "The WheelEvent.deltaX read-only property is a double representing the horizontal scroll amount in the WheelEvent.deltaMode unit.", 
        "name": "WheelEvent.deltaX", 
        "params": [], 
        "path": "dom/wheelevent/deltax", 
        "syntax": "var dX = event.deltaX; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaX\": 4, \"deltaMode\": 0});\n or console.log(syntheticEvent.deltaX);", 
        "type": "Events"
    }, 
    "WheelEvent.deltaY": {
        "descr": "The WheelEvent.deltaY read-only property is a double representing the vertical scroll amount in the WheelEvent.deltaMode unit.", 
        "name": "WheelEvent.deltaY", 
        "params": [], 
        "path": "dom/wheelevent/deltay", 
        "syntax": "var dY = event.deltaY; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaY\": 4, \"deltaMode\": 0});\n or console.log(syntheticEvent.deltaY);", 
        "type": "Events"
    }, 
    "WheelEvent.deltaZ": {
        "descr": "The WheelEvent.deltaZ read-only property is a double representing the scroll amount along the z-axis, in the WheelEvent.deltaMode unit.", 
        "name": "WheelEvent.deltaZ", 
        "params": [], 
        "path": "dom/wheelevent/deltaz", 
        "syntax": "var dZ = event.deltaZ; Example var syntheticEvent = new WheelEvent(\"syntheticWheel\", {\"deltaZ\": 4, \"deltaMode\": 0});\n or console.log(syntheticEvent.deltaZ);", 
        "type": "Events"
    }, 
    "Window": {
        "descr": "The window object represents a window containing a DOM document; the document property points to the DOM document loaded in that window. A window for a given document can be obtained using the document.defaultView property.", 
        "name": "Window", 
        "params": [
            {
                "descr": "An OfflineResourceList object providing access to the offline resources for the window.", 
                "name": "Window.applicationCache Read only"
            }, 
            {
                "descr": "Returns the CacheStorage object associated with the current origin. ", 
                "name": "Window.caches Read only"
            }, 
            {
                "descr": "This property indicates whether the current window is closed or not.", 
                "name": "Window.closed Read only"
            }, 
            {
                "descr": "The entry point to many XPCOM features. ", 
                "name": "Window.Components"
            }, 
            {
                "descr": "Returns a reference to the console object providing access to the browser's debugging console.", 
                "name": "Window.console  Read only"
            }, 
            {
                "descr": "Returns a reference to the content element in the current window. ", 
                "name": "Window.content and Window._content  Read only"
            }, 
            {
                "descr": "Returns the XUL controller objects for the current chrome window.", 
                "name": "Window.controllersRead only"
            }, 
            {
                "descr": "Returns the browser crypto object.", 
                "name": "Window.crypto Read only"
            }, 
            {
                "descr": "Gets/sets the status bar text for the given window.", 
                "name": "Window.defaultStatus Obsolete since Gecko 23"
            }, 
            {
                "descr": "Returns the ratio between physical pixels and device independent pixels in the current display.", 
                "name": "Window.devicePixelRatio Read only"
            }, 
            {
                "descr": "Gets the arguments passed to the window (if it's a dialog box) at the time window.showModalDialog() was called. ", 
                "name": "Window.dialogArguments Read only"
            }, 
            {
                "descr": "Synonym of window.personalbar", 
                "name": "Window.directories"
            }, 
            {
                "descr": "Returns a reference to the document that the window contains.", 
                "name": "Window.document Read only"
            }, 
            {
                "descr": "Returns the element in which the window is embedded, or null if the window is not embedded.", 
                "name": "Window.frameElement Read only"
            }, 
            {
                "descr": "Returns an array of the subframes in the current window.", 
                "name": "Window.frames Read only"
            }, 
            {
                "descr": "This property indicates whether the window is displayed in full screen or not.", 
                "name": "Window.fullScreen"
            }, 
            {
                "descr": "Unsupported since Gecko 13 (Firefox 13). ", 
                "name": "Window.globalStorage  Obsolete since Gecko 13"
            }, 
            {
                "descr": "Returns a reference to the history object.", 
                "name": "Window.history Read only"
            }, 
            {
                "descr": "Gets the height of the content area of the browser window including, if rendered, the horizontal scrollbar.", 
                "name": "Window.innerHeight"
            }, 
            {
                "descr": "Gets the width of the content area of the browser window including, if rendered, the vertical scrollbar.", 
                "name": "Window.innerWidth"
            }, 
            {
                "descr": "Indicates whether a context is capable of using features that require secure contexts.", 
                "name": "Window.isSecureContext Read only"
            }, 
            {
                "descr": "Returns the number of frames in the window. ", 
                "name": "Window.length Read only"
            }, 
            {
                "descr": "Gets/sets the location, or current URL, of the window object.", 
                "name": "Window.location Read only"
            }, 
            {
                "descr": "Returns the locationbar object, whose visibility can be toggled in the window.", 
                "name": "Window.locationbar Read only"
            }, 
            {
                "descr": "Returns a reference to the local storage object used to store data that may only be accessed by the origin that created it.", 
                "name": "Window.localStorage Read only"
            }, 
            {
                "descr": "Returns the menubar object, whose visibility can be toggled in the window.", 
                "name": "Window.menubar Read only"
            }, 
            {
                "descr": "Returns the message manager object for this window.", 
                "name": "Window.messageManager"
            }, 
            {
                "descr": "The time in milliseconds since epoch at which the current animation cycle began.", 
                "name": "Window.mozAnimationStartTime Read only"
            }, 
            {
                "descr": "Returns the horizontal (X) coordinate of the top-left corner of the window's viewport, in screen coordinates. ", 
                "name": "Window.mozInnerScreenX Read only"
            }, 
            {
                "descr": "Returns the vertical (Y) coordinate of the top-left corner of the window's viewport, in screen coordinates. ", 
                "name": "Window.mozInnerScreenY Read only"
            }, 
            {
                "descr": "Returns the number of times the current document has been rendered to the screen in this window. ", 
                "name": "Window.mozPaintCount Read only"
            }, 
            {
                "descr": "Gets/sets the name of the window.", 
                "name": "Window.name"
            }, 
            {
                "descr": "Returns a reference to the navigator object.", 
                "name": "Window.navigator Read only"
            }, 
            {
                "descr": "Returns a reference to the window that opened this current window.", 
                "name": "Window.opener"
            }, 
            {
                "descr": "Returns the orientation in degrees (in 90 degree increments) of the viewport relative to the device's natural orientation.", 
                "name": "Window.orientationRead only"
            }, 
            {
                "descr": "Gets the height of the outside of the browser window.", 
                "name": "Window.outerHeight Read only"
            }, 
            {
                "descr": "Gets the width of the outside of the browser window.", 
                "name": "Window.outerWidth Read only"
            }, 
            {
                "descr": "An alias for window.scrollX.", 
                "name": "Window.pageXOffset Read only"
            }, 
            {
                "descr": "An alias for window.scrollY", 
                "name": "Window.pageYOffsetRead only"
            }, 
            {
                "descr": "Returns a reference to the session storage object used to store data that may only be accessed by the origin that created it.", 
                "name": "Window.sessionStorage Read only"
            }, 
            {
                "descr": "Returns a reference to the parent of the current window or subframe.", 
                "name": "Window.parent Read only"
            }, 
            {
                "descr": "Provides a hosting area for performance related attributes.", 
                "name": "Window.performance Read only"
            }, 
            {
                "descr": "Returns the personalbar object, whose visibility can be toggled in the window.", 
                "name": "Window.personalbar Read only"
            }, 
            {
                "descr": "Formerly provided access to install and remove PKCS11 modules.", 
                "name": "Window.pkcs11 Obsolete since Gecko 29"
            }, 
            {
                "descr": "The return value to be returned to the function that called window.showModalDialog() to display the window as a modal dialog.", 
                "name": "Window.returnValue"
            }, 
            {
                "descr": "Returns a reference to the screen object associated with the window.", 
                "name": "Window.screen Read only"
            }, 
            {
                "descr": "Returns the horizontal distance of the left border of the user's browser from the left side of the screen.", 
                "name": "Window.screenX Read only"
            }, 
            {
                "descr": "Returns the vertical distance of the top border of the user's browser from the top side of the screen.", 
                "name": "Window.screenY Read only"
            }, 
            {
                "descr": "Returns the scrollbars object, whose visibility can be toggled in the window.", 
                "name": "Window.scrollbars Read only"
            }, 
            {
                "descr": "The maximum offset that the window can be scrolled to horizontally, that is the document width minus the viewport width.", 
                "name": "Window.scrollMaxXRead only"
            }, 
            {
                "descr": "The maximum offset that the window can be scrolled to vertically (i.e., the document height minus the viewport height).", 
                "name": "Window.scrollMaxYRead only"
            }, 
            {
                "descr": "Returns the number of pixels that the document has already been scrolled horizontally.", 
                "name": "Window.scrollX Read only"
            }, 
            {
                "descr": "Returns the number of pixels that the document has already been scrolled vertically.", 
                "name": "Window.scrollY Read only"
            }, 
            {
                "descr": "Returns an object reference to the window object itself.", 
                "name": "Window.self Read only"
            }, 
            {
                "descr": "Returns a storage object for storing data within a single page session.", 
                "name": "Window.sessionStorage"
            }, 
            {
                "descr": "Returns a reference to the window object of the sidebar.", 
                "name": "Window.sidebar Read only"
            }, 
            {
                "descr": "Returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.", 
                "name": "Window.speechSynthesis Read only"
            }, 
            {
                "descr": "Gets/sets the text in the statusbar at the bottom of the browser.", 
                "name": "Window.status"
            }, 
            {
                "descr": "Returns the statusbar object, whose visibility can be toggled in the window.", 
                "name": "Window.statusbar Read only"
            }, 
            {
                "descr": "Returns the toolbar object, whose visibility can be toggled in the window.", 
                "name": "Window.toolbar Read only"
            }, 
            {
                "descr": "Returns a reference to the topmost window in the window hierarchy. ", 
                "name": "Window.top Read only"
            }, 
            {
                "descr": "Returns a reference to the current window.", 
                "name": "Window.window Read only"
            }, 
            {
                "descr": "Returns a reference to the window object in the frames. ", 
                "name": "window[0], window[1], etc."
            }, 
            {
                "descr": "Register an event handler to a specific event type on the window.", 
                "name": "EventTarget.addEventListener()"
            }, 
            {
                "descr": "Displays an alert dialog.", 
                "name": "Window.alert()"
            }, 
            {
                "descr": "Decodes a string of data which has been encoded using base-64 encoding.", 
                "name": "WindowBase64.atob()"
            }, 
            {
                "descr": "Moves back one in the window history.", 
                "name": "Window.back()"
            }, 
            {
                "descr": "Sets focus away from the window.", 
                "name": "Window.blur()"
            }, 
            {
                "descr": "Creates a base-64 encoded ASCII string from a string of binary data.", 
                "name": "WindowBase64.btoa()"
            }, 
            {
                "descr": "Enables you to cancel a callback previously scheduled with Window.requestIdleCallback.", 
                "name": "Window.cancelIdleCallback()"
            }, 
            {
                "descr": "Registers the window to capture all events of the specified type.", 
                "name": "Window.captureEvents()"
            }, 
            {
                "descr": "Cancels the repeated execution set using setImmediate.", 
                "name": "Window.clearImmediate()"
            }, 
            {
                "descr": "Cancels the repeated execution set using WindowTimers.setInterval().", 
                "name": "WindowTimers.clearInterval()"
            }, 
            {
                "descr": "Cancels the repeated execution set using WindowTimers.setTimeout().", 
                "name": "WindowTimers.clearTimeout()"
            }, 
            {
                "descr": "Closes the current window.", 
                "name": "Window.close()"
            }, 
            {
                "descr": "Displays a dialog with a message that the user needs to respond to.", 
                "name": "Window.confirm()"
            }, 
            {
                "descr": "Used to trigger an event.", 
                "name": "Window.disableExternalCapture() Obsolete since Gecko 24  Window.dispatchEvent()"
            }, 
            {
                "descr": "Writes a message to the console.", 
                "name": "Window.dump()"
            }, 
            {
                "descr": "Starts the process of fetching a resource.", 
                "name": "Window.enableExternalCapture() Obsolete since Gecko 24  GlobalFetch.fetch()"
            }, 
            {
                "descr": "Searches for a given string in a window.", 
                "name": "Window.find()"
            }, 
            {
                "descr": "Sets focus on the current window.", 
                "name": "Window.focus()"
            }, 
            {
                "descr": "Moves the window one document forward in the history.", 
                "name": "Window.forward()"
            }, 
            {
                "descr": "Flashes the application icon.", 
                "name": "Window.getAttention()"
            }, 
            {
                "descr": "Gets computed style for the specified element. ", 
                "name": "Window.getAttentionWithCycleCount()  Window.getComputedStyle()"
            }, 
            {
                "descr": "Gets default computed style for the specified element, ignoring author stylesheets.", 
                "name": "Window.getDefaultComputedStyle()"
            }, 
            {
                "descr": "Returns the selection object representing the selected item(s).", 
                "name": "Window.getSelection()"
            }, 
            {
                "descr": "Returns the browser to the home page.", 
                "name": "Window.home()"
            }, 
            {
                "descr": "Returns a MediaQueryList object representing the specified media query string.", 
                "name": "Window.matchMedia()"
            }, 
            {
                "descr": "Minimizes the window.", 
                "name": "Window.maximize()  Window.minimize() (top-level XUL windows only)"
            }, 
            {
                "descr": "Moves the current window by a specified amount.", 
                "name": "Window.moveBy()"
            }, 
            {
                "descr": "Moves the window to the specified coordinates.", 
                "name": "Window.moveTo()"
            }, 
            {
                "descr": "Tells the browser that an animation is in progress, requesting that the browser schedule a repaint of the window for the next animation frame. ", 
                "name": "Window.mozRequestAnimationFrame()"
            }, 
            {
                "descr": "Opens a new window.", 
                "name": "Window.open()"
            }, 
            {
                "descr": "Opens a new dialog window.", 
                "name": "Window.openDialog()"
            }, 
            {
                "descr": "Provides a secure means for one window to send a string of data to another window, which need not be within the same domain as the first.", 
                "name": "Window.postMessage()"
            }, 
            {
                "descr": "Opens the Print Dialog to print the current document.", 
                "name": "Window.print()"
            }, 
            {
                "descr": "Returns the text entered by the user in a prompt dialog.", 
                "name": "Window.prompt()"
            }, 
            {
                "descr": "Releases the window from trapping events of a specific type.", 
                "name": "Window.releaseEvents()"
            }, 
            {
                "descr": "Removes an event listener from the window.", 
                "name": "Window.removeEventListener()"
            }, 
            {
                "descr": "Enables the scheduling of tasks during a browser's idle periods.", 
                "name": "Window.requestIdleCallback()"
            }, 
            {
                "descr": "Resizes the current window by a certain amount.", 
                "name": "Window.resizeBy()"
            }, 
            {
                "descr": "Dynamically resizes window.", 
                "name": "Window.resizeTo()"
            }, 
            {
                "descr": "Scrolls the window to a particular place in the document.", 
                "name": "Window.restore()  Window.routeEvent() Obsolete since Gecko 24  Window.scroll()"
            }, 
            {
                "descr": "Scrolls the document in the window by the given amount.", 
                "name": "Window.scrollBy()"
            }, 
            {
                "descr": "Scrolls the document by the given number of lines.", 
                "name": "Window.scrollByLines()"
            }, 
            {
                "descr": "Scrolls the current document by the specified number of pages.", 
                "name": "Window.scrollByPages()"
            }, 
            {
                "descr": "Scrolls to a particular set of coordinates in the document.", 
                "name": "Window.scrollTo()"
            }, 
            {
                "descr": "Changes the cursor for the current window", 
                "name": "Window.setCursor()"
            }, 
            {
                "descr": "Executes a function after the browser has finished other heavy tasks", 
                "name": "Window.setImmediate()"
            }, 
            {
                "descr": "Schedules the execution of a function each X milliseconds.", 
                "name": "WindowTimers.setInterval()"
            }, 
            {
                "descr": "Toggles a user's ability to resize a window.", 
                "name": "Window.setResizable()"
            }, 
            {
                "descr": "Sets a delay for executing a function.", 
                "name": "WindowTimers.setTimeout()"
            }, 
            {
                "descr": "Displays a modal dialog.", 
                "name": "Window.showModalDialog()"
            }, 
            {
                "descr": "Sizes the window according to its content.", 
                "name": "Window.sizeToContent()"
            }, 
            {
                "descr": "This method stops window loading.", 
                "name": "Window.stop()"
            }, 
            {
                "descr": "Updates the state of commands of the current chrome window (UI).", 
                "name": "Window.updateCommands()"
            }, 
            {
                "descr": "An event handler property for abort events on the window.", 
                "name": "GlobalEventHandlers.onabort"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the afterprint event is raised.", 
                "name": "WindowEventHandlers.onafterprint"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the beforeprint event is raised.", 
                "name": "WindowEventHandlers.onbeforeprint"
            }, 
            {
                "descr": "An event handler property dispatched before a user is prompted to save a web site to a home screen on mobile.", 
                "name": "Window.onbeforeinstallprompt"
            }, 
            {
                "descr": "An event handler property for before-unload events on the window.", 
                "name": "WindowEventHandlers.onbeforeunload"
            }, 
            {
                "descr": "An event handler property for blur events on the window.", 
                "name": "GlobalEventHandlers.onblur"
            }, 
            {
                "descr": "An event handler property for change events on the window.", 
                "name": "GlobalEventHandlers.onchange"
            }, 
            {
                "descr": "An event handler property for click events on the window.", 
                "name": "GlobalEventHandlers.onclick"
            }, 
            {
                "descr": "An event handler property for handling the window close event.", 
                "name": "GlobalEventHandlers.onclose"
            }, 
            {
                "descr": "An event handler property for right-click events on the window.", 
                "name": "GlobalEventHandlers.oncontextmenu"
            }, 
            {
                "descr": "An event handler property for any ambient light levels changes", 
                "name": "Window.ondevicelight"
            }, 
            {
                "descr": "An event handler property for any relative device orientation changes.", 
                "name": "Window.ondevicemotion   Window.ondeviceorientation"
            }, 
            {
                "descr": "An event handler property for any device orientation changes.", 
                "name": "Window.ondeviceorientationabsolute  Chrome only"
            }, 
            {
                "descr": "An event handler property for device proximity event", 
                "name": "Window.ondeviceproximity"
            }, 
            {
                "descr": "An event handler property for error events raised on the window.", 
                "name": "GlobalEventHandlers.onerror"
            }, 
            {
                "descr": "An event handler property for focus events on the window.", 
                "name": "GlobalEventHandlers.onfocus"
            }, 
            {
                "descr": "An event handler property for hashchange events on the window; called when the part of the URL after the hash mark (\"#\") changes.", 
                "name": "WindowEventHandlers.onhashchange"
            }, 
            {
                "descr": "An event handler property that is called when the install event is send on the window, that is when the page is installed as an application.", 
                "name": "Window.oninstall"
            }, 
            {
                "descr": "An event handler property for keydown events on the window.", 
                "name": "GlobalEventHandlers.onkeydown"
            }, 
            {
                "descr": "An event handler property for keypress events on the window.", 
                "name": "GlobalEventHandlers.onkeypress"
            }, 
            {
                "descr": "An event handler property for keyup events on the window.", 
                "name": "GlobalEventHandlers.onkeyup"
            }, 
            {
                "descr": "An event handler property for languagechange events on the window.", 
                "name": "WindowEventHandlers.onlanguagechange"
            }, 
            {
                "descr": "An event handler property for window loading.", 
                "name": "GlobalEventHandlers.onload"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the message event is raised.", 
                "name": "WindowEventHandlers.onmessage"
            }, 
            {
                "descr": "An event handler property for mousedown events on the window.", 
                "name": "GlobalEventHandlers.onmousedown"
            }, 
            {
                "descr": "An event handler property for mousemove events on the window.", 
                "name": "GlobalEventHandlers.onmousemove"
            }, 
            {
                "descr": "An event handler property for mouseout events on the window.", 
                "name": "GlobalEventHandlers.onmouseout"
            }, 
            {
                "descr": "An event handler property for mouseover events on the window.", 
                "name": "GlobalEventHandlers.onmouseover"
            }, 
            {
                "descr": "An event handler property for mouseup events on the window.", 
                "name": "GlobalEventHandlers.onmouseup"
            }, 
            {
                "descr": "An event handler property for the MozBeforePaint event, which is sent before repainting the window if the event has been requested by a call to the Window.mozRequestAnimationFrame() method.", 
                "name": "Window.onmozbeforepaint"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the offline event is raised.", 
                "name": "WindowEventHandlers.onoffline"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the online event is raised.", 
                "name": "WindowEventHandlers.ononline"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pagehide event is raised.", 
                "name": "WindowEventHandlers.onpagehide"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the pageshow event is raised.", 
                "name": "WindowEventHandlers.onpageshow"
            }, 
            {
                "descr": "An event handler property for paint events on the window.", 
                "name": "Window.onpaint"
            }, 
            {
                "descr": "An event handler property for popstate events, which are dispatched when navigating to a session history entry representing a state object.", 
                "name": "WindowEventHandlers.onpopstate"
            }, 
            {
                "descr": "An event handler for handled Promise rejection events.", 
                "name": "Window.onrejectionhandled"
            }, 
            {
                "descr": "An event handler property for reset events on the window.", 
                "name": "GlobalEventHandlers.onreset"
            }, 
            {
                "descr": "An event handler property for window resizing.", 
                "name": "GlobalEventHandlers.onresize"
            }, 
            {
                "descr": "An event handler property for window scrolling.", 
                "name": "GlobalEventHandlers.onscroll"
            }, 
            {
                "descr": "An event handler property for window selection.", 
                "name": "GlobalEventHandlers.onselect"
            }, 
            {
                "descr": "Is an EventHandler representing the code to be called when the selectionchange event is raised.", 
                "name": "GlobalEventHandlers.onselectionchange"
            }, 
            {
                "descr": "An event handler that runs when the storage event fires. ", 
                "name": "WindowEventHandlers.onstorage"
            }, 
            {
                "descr": "An event handler property for submits on window forms.", 
                "name": "GlobalEventHandlers.onsubmit"
            }, 
            {
                "descr": "An event handler for unhandled Promise rejection events.", 
                "name": "WindowEventHandlers.onunhandledrejection"
            }, 
            {
                "descr": "An event handler property for unload events on the window.", 
                "name": "WindowEventHandlers.onunload"
            }, 
            {
                "descr": "An event handler property for user proximity events.", 
                "name": "Window.onuserproximity"
            }, 
            {
                "descr": "Represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires).", 
                "name": "Window.onvrdisplayconnected"
            }, 
            {
                "descr": "Represents an event handler that will run when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires).", 
                "name": "Window.onvrdisplaydisconnected"
            }, 
            {
                "descr": "represents an event handler that will run when the presenting state of a VR device changes \u2014 i.e. ", 
                "name": "Window.onvrdisplaypresentchange"
            }, 
            {
                "descr": "Used for creating an HTMLImageElement.", 
                "name": "Window.DOMParser  Window.GeckoActiveXObject  Image"
            }, 
            {
                "descr": "Used for creating an HTMLOptionElement", 
                "name": "Option"
            }, 
            {
                "descr": "Used for creating a Web worker", 
                "name": "Window.QueryInterface  Window.XMLSerializer  Worker"
            }
        ], 
        "path": "dom/window", 
        "syntax": "window object. The window object implements the Window interface, which in turn inherits from the AbstractView interface. Some additional global functions, namespaces, objects, interfaces, and constructors, not typically associated with the window, but available on it, are listed in the JavaScript Reference and DOM Reference. In a tabbed browser, such as Firefox, each tab contains its own window object (and if you're writing an extension, the browser window itself is a separate window too - see Working with windows in chrome code for more information). That is, the window", 
        "type": "Window"
    }, 
    "WindowBase64.atob": {
        "descr": "The WindowBase64.atob() function decodes a string of data which has been encoded using base-64 encoding. You can use the window.btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the window.atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.", 
        "name": "WindowBase64.atob", 
        "params": [], 
        "path": "dom/windowbase64/atob", 
        "syntax": "var decodedData = window.atob(encodedData);", 
        "type": "Window"
    }, 
    "WindowBase64.btoa": {
        "descr": "The WindowBase64.btoa() method creates a base-64 encoded ASCII string from a String object in which each character in the string is treated as a byte of binary data.", 
        "name": "WindowBase64.btoa", 
        "params": [
            {
                "descr": "A string whose characters each represent a single byte of binary data to be encoded into ASCII.", 
                "name": "stringToEncode"
            }
        ], 
        "path": "dom/windowbase64/btoa", 
        "syntax": "var encodedData = window.btoa(stringToEncode);", 
        "type": "Window"
    }, 
    "WindowClient": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WindowClient", 
        "params": [
            {
                "descr": "Gives user input focus to the current client.", 
                "name": "WindowClient.focus()"
            }, 
            {
                "descr": "Loads a specified URL into a controlled client page.", 
                "name": "WindowClient.navigate()"
            }, 
            {
                "descr": "A boolean that indicates whether the current client has focus.", 
                "name": "WindowClient.focused Read only"
            }, 
            {
                "descr": "Indicates the visibility of the current client. ", 
                "name": "WindowClient.visibilityState Read only"
            }
        ], 
        "path": "dom/windowclient", 
        "syntax": "WindowClient interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browser context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources. Methods WindowClient inherits methods from its parent interface, Client.  WindowClient.focus()", 
        "type": "Window"
    }, 
    "WindowClient.focus": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WindowClient.focus", 
        "params": [], 
        "path": "dom/windowclient/focus", 
        "syntax": "focus()", 
        "type": "Window"
    }, 
    "WindowClient.focused": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WindowClient.focused", 
        "params": [], 
        "path": "dom/windowclient/focused", 
        "syntax": "focused read-only property of the WindowClient interface is a Boolean that indicates whether the current client has focus. Syntax myFocused = WindowClient.focused; Value A Boolean. Example self.addEventListener('notificationclick', function(event) {  console.log('On notification click: ', event.notification.tag);\n or   event.notification.close();\n or   // This looks to see if the current is already open and  // focuses if it is  event.waitUntil(clients.matchAll({    type: \"window\"  }).then(function(clientList) {    for (var i = 0; i < clientList.length; i++) {      var client = clientList[i];      if (client.url == '/' && 'focus' in client) {        if(!client.focused)          return client.focus();\n or         }      }    }    if (clients.openWindow)      return clients.openWindow('/');\n or   }));\n or });", 
        "type": "Window"
    }, 
    "WindowClient.navigate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WindowClient.navigate", 
        "params": [
            {
                "descr": "The location to navigate to.", 
                "name": "url"
            }
        ], 
        "path": "dom/windowclient/navigate", 
        "syntax": "navigate()", 
        "type": "Window"
    }, 
    "WindowClient.visibilityState": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WindowClient.visibilityState", 
        "params": [], 
        "path": "dom/windowclient/visibilitystate", 
        "syntax": "The visibilityState read-only property of the WindowClient interface indicates the visibility of the current client. This value can be one of hidden, visible, prerender, or unloaded. Syntax myVisState = WindowClient.visibilityState; Value A DOMString. Example   event.waitUntil(clients.matchAll({    type: \"window\"  }).then(function(clientList) {    for (var i = 0; i < clientList.length; i++) {      var client = clientList[i];      if (client.url == '/' && 'focus' in client) {        if(visibilityState === 'hidden')          return client.focus();\n or         }      }    }    if (clients.openWindow)      return clients.openWindow('/');\n or   }));\n or });", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onafterprint": {
        "descr": "The WindowEventHandlers.onafterprint property sets and returns the onafterprint EventHandler for the current window.", 
        "name": "WindowEventHandlers.onafterprint", 
        "params": [], 
        "path": "dom/windoweventhandlers/onafterprint", 
        "syntax": "window.onafterprint = event handling code Notes Some browsers (including Firefox 6 and later and Internet Explorer) send beforeprint", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onbeforeprint": {
        "descr": "The property onbeforeprint sets and returns the onbeforeprint event handler code for the current window.", 
        "name": "WindowEventHandlers.onbeforeprint", 
        "params": [], 
        "path": "dom/windoweventhandlers/onbeforeprint", 
        "syntax": "window.onbeforeprint = event handling code Notes Some browsers (including Firefox 6 and later and Internet Explorer) send beforeprint", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onbeforeunload": {
        "descr": "The WindowEventHandlers.onbeforeunload event handler property contains the code executed when the beforeunload is sent. This event fires when a window is about to unload its resources. The document is still visible and the event is still cancelable.", 
        "name": "WindowEventHandlers.onbeforeunload", 
        "params": [], 
        "path": "dom/windoweventhandlers/onbeforeunload", 
        "syntax": "window.onbeforeunload = funcRef  funcRef is a reference to a function or a function expression. The function should assign a string value to the returnValue property of the Event object and return the same string.  Example window.onbeforeunload = function(e) {\u00a0 var dialogText = 'Dialog text here';\u00a0 e.returnValue = dialogText;  return dialogText;};", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onhashchange": {
        "descr": "The hashchange event fires when a window's hash changes (see location.hash).", 
        "name": "WindowEventHandlers.onhashchange", 
        "params": [
            {
                "descr": "A reference to a function.", 
                "name": "funcRef"
            }
        ], 
        "path": "dom/windoweventhandlers/onhashchange", 
        "syntax": "window.onhashchange = funcRef; or <body onhashchange=\"funcRef();\n or \">);", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onlanguagechange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WindowEventHandlers.onlanguagechange", 
        "params": [], 
        "path": "dom/windoweventhandlers/onlanguagechange", 
        "syntax": "WindowEventHandlers.onlanguagechange event handler is a property containing the code to execute when the languagechange event, of type Event, is received by the object implementing this interface, usually a Window, an HTMLBodyElement", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onpopstate": {
        "descr": "An event handler for the popstate event on the window.", 
        "name": "WindowEventHandlers.onpopstate", 
        "params": [], 
        "path": "dom/windoweventhandlers/onpopstate", 
        "syntax": "window.onpopstate = funcRef;  funcRef is a handler function.  The popstate event As an example, a page at http://example.com/example.html running the following code will generate alerts as indicated: window.onpopstate = function(event) {  alert(\"location: \" + document.location + \", state: \" + JSON.stringify(event.state));\n or };history.pushState({page: 1}, \"title 1\", \"?page=1\");\n or history.pushState({page: 2}, \"title 2\", \"?page=2\");\n or history.replaceState({page: 3}, \"title 3\", \"?page=3\");\n or history.back();\n or  // alerts \"location: http://example.com/example.html?page=1, state: {\"page\":1}\"history.back();\n or  // alerts \"location: http://example.com/example.html, state: nullhistory.go(2);\n or   // alerts \"location: http://example.com/example.html?page=3, state: {\"page\":3});", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onrejectionhandled": {
        "descr": "The Window.onrejectionhandled property is an event handler for processing rejectionhandled events, which are raised when Promises are rejected.", 
        "name": "WindowEventHandlers.onrejectionhandled", 
        "params": [], 
        "path": "dom/windoweventhandlers/onrejectionhandled", 
        "syntax": "window.addEventListener(\"rejectionhandled\", function(event) { ... });\n or window.onrejectionhandled = function(event) { ...};);", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onstorage": {
        "descr": "The WindowEventHandlers.onstorage property contains an event handler that runs when the storage event fires. This occurs when a storage area is changed (e.g. a new item is stored.)", 
        "name": "WindowEventHandlers.onstorage", 
        "params": [], 
        "path": "dom/windoweventhandlers/onstorage", 
        "syntax": "windowObj.onstorage = function() { ... };", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onunhandledrejection": {
        "descr": "The Window.onunhandledrejection property is an event handler for processing unhandledrejection events, which are raised for unhandled Promise rejections.", 
        "name": "WindowEventHandlers.onunhandledrejection", 
        "params": [], 
        "path": "dom/windoweventhandlers/onunhandledrejection", 
        "syntax": "window.addEventListener(\"unhandledrejection\", function(event) { ... });\n or window.onunhandledrejection = function(event) { ...};);", 
        "type": "Window"
    }, 
    "WindowEventHandlers.onunload": {
        "descr": "The unload event is raised when the window is unloading its content and resources. The resources removal is processed after the unload event occurs.", 
        "name": "WindowEventHandlers.onunload", 
        "params": [], 
        "path": "dom/windoweventhandlers/onunload", 
        "syntax": "window.onunload = funcRef;  funcRef is a reference to a function.  Notes Using this event handler in your page prevents Firefox 1.5 from caching the page in the in-memory bfcache. See Using Firefox 1.5 caching for details. Browsers equipped with pop-up window blockers will ignore all window.open()", 
        "type": "Window"
    }, 
    "WindowTimers.clearInterval": {
        "descr": "Cancels repeated action which was set up using setInterval.", 
        "name": "WindowTimers.clearInterval", 
        "params": [], 
        "path": "dom/windowtimers/clearinterval", 
        "syntax": "window.clearInterval(intervalID)", 
        "type": "Window"
    }, 
    "WindowTimers.clearTimeout": {
        "descr": "Clears the delay set by WindowTimers.setTimeout().", 
        "name": "WindowTimers.clearTimeout", 
        "params": [], 
        "path": "dom/windowtimers/cleartimeout", 
        "syntax": "window.clearTimeout(timeoutID)", 
        "type": "Window"
    }, 
    "WindowTimers.setInterval": {
        "descr": "Repeatedly calls a function or executes a code snippet, with a fixed time delay between each call. Returns an intervalID.", 
        "name": "WindowTimers.setInterval", 
        "params": [
            {
                "descr": "The this object on which the callback function is called. ", 
                "name": "thisObject"
            }, 
            {
                "descr": "The function that is repeatedly invoked . ", 
                "name": "callback"
            }, 
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation. ", 
                "name": "rate (optional)"
            }, 
            {
                "descr": "The total number of invocations. ", 
                "name": "length (optional)"
            }, 
            {
                "descr": "The this object on which is executed the daemon (read/write). ", 
                "name": "myDaemon.owner"
            }, 
            {
                "descr": "The function that is repeatedly invoked (read/write). ", 
                "name": "myDaemon.task"
            }, 
            {
                "descr": "The time lapse (in number of milliseconds) between each invocation (read/write).", 
                "name": "myDaemon.rate"
            }, 
            {
                "descr": "The total number of invocations. ", 
                "name": "myDaemon.length"
            }, 
            {
                "descr": "Returns a boolean expressing whether the daemon is at the start/end position or not.", 
                "name": "myDaemon.isAtEnd()"
            }, 
            {
                "descr": "Synchronize the timer of a started daemon with the time of its invocation.", 
                "name": "myDaemon.synchronize()"
            }, 
            {
                "descr": "Pauses the daemon.", 
                "name": "myDaemon.pause()"
            }, 
            {
                "descr": "Starts the daemon forward (index of each invocation increasing) or backwards (index decreasing).", 
                "name": "myDaemon.start([reverse])"
            }, 
            {
                "descr": "Forces a single callback to the minidaemon.task function regardless of the fact that the end has been reached or not. ", 
                "name": "MiniDaemon.forceCall(minidaemon)"
            }
        ], 
        "path": "dom/windowtimers/setinterval", 
        "syntax": "var intervalID = window.setInterval(func, delay[, param1, param2, ...]);\n or var intervalID = window.setInterval(code, delay);", 
        "type": "Window"
    }, 
    "WindowTimers.setTimeout": {
        "descr": "Calls a function or executes a code snippet after a specified delay.", 
        "name": "WindowTimers.setTimeout", 
        "params": [], 
        "path": "dom/windowtimers/settimeout", 
        "syntax": "var timeoutID = window.setTimeout(func, [delay, param1, param2, ...]);\n or var timeoutID = window.setTimeout(code, [delay]);", 
        "type": "Window"
    }, 
    "Worker": {
        "descr": "The Worker interface of the Web Workers API represents a background task that can be easily created and can send messages back to its creator. Creating a worker is as simple as calling the Worker() constructor and specifying a script to be run in the worker thread.", 
        "name": "Worker", 
        "params": [
            {
                "descr": "An EventListener called whenever an ErrorEvent of type error bubbles through to the worker. ", 
                "name": "AbstractWorker.onerror"
            }, 
            {
                "descr": "An EventListener called whenever a MessageEvent of type message bubbles through the worker \u2014 i.e. ", 
                "name": "Worker.onmessage"
            }, 
            {
                "descr": "Creates a dedicated web worker that executes the script at the specified URL. ", 
                "name": "Worker()"
            }, 
            {
                "descr": "Sends a message \u2014 which can consist of any JavaScript object \u2014 to the worker's inner scope.", 
                "name": "Worker.postMessage()"
            }, 
            {
                "descr": "Immediately terminates the worker. ", 
                "name": "Worker.terminate()"
            }
        ], 
        "path": "dom/worker", 
        "syntax": "ChromeWorker object instead. Properties Inherits properties from its parent, EventTarget, and implements properties from AbstractWorker. Event handlers  AbstractWorker.onerror An EventListener called whenever an ErrorEvent of type error bubbles through to the worker. This is inherited from AbstractWorker. Worker.onmessage An EventListener called whenever a MessageEvent of type message bubbles through the worker \u2014 i.e. when a message is sent to the parent document from the worker via DedicatedWorkerGlobalScope.postMessage", 
        "type": "Web Workers"
    }, 
    "Worker.constructor": {
        "descr": "The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.", 
        "name": "Worker.constructor", 
        "params": [
            {
                "descr": "Is a DOMString representing the URL of the script the worker will execute. ", 
                "name": "aURL"
            }
        ], 
        "path": "dom/worker/worker", 
        "syntax": "DOMException of type SECURITY_ERR is thrown.  Note: that there is a disagreement among browser manufacturers about whether a data URI is of the same origin or not. Though Gecko 10.0 (Firefox 10.0 / Thunderbird 10.0 / SeaMonkey 2.7) and later accept data URIs, that's not the case in all other browsers.", 
        "type": "Web Workers"
    }, 
    "Worker.onmessage": {
        "descr": "The onmessage property of the Worker interface represents an EventHandler, that is a function to be called when the message event occurs. These events are of type MessageEvent and will be called when the worker's parent receives a message (i.e. from the DedicatedWorkerGlobalScope.postMessage method.", 
        "name": "Worker.onmessage", 
        "params": [], 
        "path": "dom/worker/onmessage", 
        "syntax": "myWorker.onmessage = function(e) { ... }", 
        "type": "Web Workers"
    }, 
    "Worker.postMessage": {
        "descr": "The postMessage() method of the Worker interface sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker. The data may be any value or JavaScript object handled by the structured clone algorithm, which includes cyclical references.", 
        "name": "Worker.postMessage", 
        "params": [
            {
                "descr": "The object to deliver to the worker; this will be in the data field in the event delivered to the DedicatedWorkerGlobalScope.onmessage handler. ", 
                "name": "aMessage"
            }, 
            {
                "descr": "An optional array of Transferable objects to transfer ownership of. ", 
                "name": "transferList Optional"
            }
        ], 
        "path": "dom/worker/postmessage", 
        "syntax": "myWorker.postMessage(aMessage, transferList);", 
        "type": "Web Workers"
    }, 
    "Worker.terminate": {
        "descr": "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is simply stopped at once.", 
        "name": "Worker.terminate", 
        "params": [], 
        "path": "dom/worker/terminate", 
        "syntax": "myWorker.terminate();", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.caches": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "WorkerGlobalScope.caches", 
        "params": [], 
        "path": "dom/workerglobalscope/caches", 
        "syntax": "caches read-only property of the WorkerGlobalScope interface returns the CacheStorage object associated with the current worker context. This object enables service worker functionality such as storing assets for offline use, and generating custom responses to requests. Syntax var myCacheStorage = self.caches; // or just caches Value A CacheStorage. Example this.addEventListener('install', function(event) {  event.waitUntil(    caches.open('v1').then(function(cache) {      return cache.addAll(        '/sw-test/',        '/sw-test/index.html',        '/sw-test/style.css',        '/sw-test/app.js',        '/sw-test/image-list.js',        '/sw-test/star-wars-logo.jpg',        '/sw-test/gallery/',        '/sw-test/gallery/bountyHunters.jpg',        '/sw-test/gallery/myLittleVader.jpg',        '/sw-test/gallery/snowTroopers.jpg'      );\n or     })  );\n or });", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.close": {
        "descr": "The close() method of the WorkerGlobalScope interface discards any tasks queued in the WorkerGlobalScope's event loop, effectively closing this particular scope.", 
        "name": "WorkerGlobalScope.close", 
        "params": [], 
        "path": "dom/workerglobalscope/close", 
        "syntax": "self.close();", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.importScripts": {
        "descr": "The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope.", 
        "name": "WorkerGlobalScope.importScripts", 
        "params": [], 
        "path": "dom/workerglobalscope/importscripts", 
        "syntax": "self.importScripts('foo.js');\n or self.importScripts('foo.js', 'bar.js', ...);", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.location": {
        "descr": "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.", 
        "name": "WorkerGlobalScope.location", 
        "params": [], 
        "path": "dom/workerglobalscope/location", 
        "syntax": "var locationObj = self.location; Value A WorkerLocation object. Example If you called the following in a document served at localhost:8000 console.log(location);", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.navigator": {
        "descr": "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.", 
        "name": "WorkerGlobalScope.navigator", 
        "params": [], 
        "path": "dom/workerglobalscope/navigator", 
        "syntax": "var navigatorObj = self.navigator; Value A WorkerNavigator object. Example If you called console.log(navigator);", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.onclose": {
        "descr": "The onclose property of the WorkerGlobalScope interface represents an EventHandler to be called when the close event occurs and bubbles through the Worker.", 
        "name": "WorkerGlobalScope.onclose", 
        "params": [], 
        "path": "dom/workerglobalscope/onclose", 
        "syntax": "self.onclose = function() { ... };", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.onerror": {
        "descr": "The onerror property of the WorkerGlobalScope interface represents an EventHandler to be called when the error event occurs and bubbles through the Worker.", 
        "name": "WorkerGlobalScope.onerror", 
        "params": [], 
        "path": "dom/workerglobalscope/onerror", 
        "syntax": "self.onerror = function() { ... };", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.onlanguagechange": {
        "descr": "The onlanguagechange property of the WorkerGlobalScope interface represents an EventHandler to be called when the languagechange event occurs and bubbles through the Worker.", 
        "name": "WorkerGlobalScope.onlanguagechange", 
        "params": [], 
        "path": "dom/workerglobalscope/onlanguagechange", 
        "syntax": "self.onlanguagechange = function() { ... };", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.onoffline": {
        "descr": "The onoffline property of the WorkerGlobalScope interface represents an EventHandler to be called when the offline event occurs and bubbles through the Worker.", 
        "name": "WorkerGlobalScope.onoffline", 
        "params": [], 
        "path": "dom/workerglobalscope/onoffline", 
        "syntax": "self.onoffline = function() { ... };", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.ononline": {
        "descr": "The ononline property of the WorkerGlobalScope interface represents an EventHandler to be called when the online event occurs and bubbles through the Worker.", 
        "name": "WorkerGlobalScope.ononline", 
        "params": [], 
        "path": "dom/workerglobalscope/ononline", 
        "syntax": "self.ononline = function() { ... };", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.performance": {
        "descr": "The performance read-only property of the WorkerGlobalScope interface returns a Performance object to be used on the worker.", 
        "name": "WorkerGlobalScope.performance", 
        "params": [], 
        "path": "dom/workerglobalscope/performance", 
        "syntax": "var perfObj = self.performance; Return Value A Performance object. Example If you called console.log(performance);", 
        "type": "Web Workers"
    }, 
    "WorkerGlobalScope.self": {
        "descr": "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope, SharedWorkerGlobalScope, or ServiceWorkerGlobalScope.", 
        "name": "WorkerGlobalScope.self", 
        "params": [], 
        "path": "dom/workerglobalscope/self", 
        "syntax": "var selfRef = self; Value A global scope object (differs depending on the type of worker you are dealing with, as indicated above).", 
        "type": "Web Workers"
    }, 
    "WorkerNavigator.permissions": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WorkerNavigator.permissions", 
        "params": [], 
        "path": "dom/workernavigator/permissions", 
        "syntax": "WorkerNavigator.permissions read-only property returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API. Syntax permissionsObj = self.permissions Value A Permissions object. Examples self.permissions.query({name:'notifications'}).then(function(result) {\u00a0 if (result.state === 'granted') {\u00a0\u00a0\u00a0 showNotification();\n or \u00a0 } else if (result.state === 'prompt') {\u00a0\u00a0\u00a0 requestNotificationPermission()\u00a0 }});", 
        "type": "Web Workers"
    }, 
    "WorkerNavigator.sendBeacon": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "WorkerNavigator.sendBeacon", 
        "params": [
            {
                "descr": "The url parameter indicates the resolved URL where the data is to be transmitted.", 
                "name": "url"
            }, 
            {
                "descr": "The data parameter is the ArrayBufferView, Blob, DOMString, or FormData data that is to be transmitted.", 
                "name": "data"
            }
        ], 
        "path": "dom/workernavigator/sendbeacon", 
        "syntax": "NavigatorWorker.sendBeacon()", 
        "type": "Web Workers"
    }, 
    "XMLHttpRequest": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest", 
        "params": [
            {
                "descr": "There are two flags you can set:  mozAnon Boolean: Setting this flag to true will cause the browser not to expose the origin and user credentials when fetching resources. ", 
                "name": "objParameters"
            }, 
            {
                "descr": "Boolean: Setting this flag to true allows making cross-site connections without requiring the server to opt-in using CORS. ", 
                "name": "mozSystem"
            }
        ], 
        "path": "dom/xmlhttprequest/xmlhttprequest", 
        "syntax": "var myRequest = new XMLHttpRequest();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.Using XMLHttpRequest": {
        "descr": "XMLHttpRequest makes sending HTTP requests very easy. You simply create an instance of the object, open a URL, and send the request. The HTTP status of the result, as well as the result's contents, are available in the request object when the transaction is completed. This page outlines some of the common and even slightly obscure use cases for this powerful JavaScript object.", 
        "name": "XMLHttpRequest.Using XMLHttpRequest", 
        "params": [], 
        "path": "dom/xmlhttprequest/using_xmlhttprequest", 
        "syntax": "responseXML property If you use XMLHttpRequest to get the content of a remote XML document, the responseXML property will be a DOM Object containing a parsed XML document, which can be hard to manipulate and analyze. There are five primary ways of analyzing this XML document:  Using XPath to address (point to) parts of it. Using JXON to convert it into a JavaScript Object tree. Manually Parsing and serializing XML to strings or objects. Using XMLSerializer to serialize DOM trees to strings or to files. RegExp can be used if you always know the content of the XML document beforehand. You might want to remove line breaks, if you use RegExp to scan with regard to linebreaks. However, this method is a \"last resort\" since if the XML code changes slightly, the method will likely fail.  Analyzing and manipulating a responseText", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.abort": {
        "descr": "The XMLHttpRequest.abort() method aborts the request if it has already been sent. When a request is aborted, its readyState is set to 0 (UNSENT), but the readystatechange event is not fired.", 
        "name": "XMLHttpRequest.abort", 
        "params": [], 
        "path": "dom/xmlhttprequest/abort", 
        "syntax": "xhrInstance.abort();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.getAllResponseHeaders": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest.getAllResponseHeaders", 
        "params": [], 
        "path": "dom/xmlhttprequest/getallresponseheaders", 
        "syntax": "var newRequest = request.clone();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.getResponseHeader": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest.getResponseHeader", 
        "params": [
            {
                "descr": "A ByteString representing the name of the header you want to return the text value of.", 
                "name": "name"
            }
        ], 
        "path": "dom/xmlhttprequest/getresponseheader", 
        "syntax": "var myHeader = getResponseHeader(name);", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.onreadystatechange": {
        "descr": "An EventHandler that is called whenever the readyState attribute changes. The callback is called from the user interface thread. The XMLHttpRequest.onreadystatechange property contains the event handler to be called when the readystatechange event is fired, that is every time the readyState property of the XMLHttpRequest changes. The callback is called from the user interface thread.", 
        "name": "XMLHttpRequest.onreadystatechange", 
        "params": [], 
        "path": "dom/xmlhttprequest/onreadystatechange", 
        "syntax": "XMLHttpRequest.onreadystatechange = callback; Values  callback is the function to be executed when the readyState changes.  Example var xhr = new XMLHttpRequest(),    method = \"GET\",    url = \"https://developer.mozilla.org/\";xhr.open(method, url, true);\n or xhr.onreadystatechange = function () {        if(xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\u00a0           console.log(xhr.responseText);\n or \u00a0       }    };xhr.send();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.open": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest.open", 
        "params": [
            {
                "descr": "The HTTP method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc. ", 
                "name": "method"
            }, 
            {
                "descr": "The URL to send the request to.", 
                "name": "url"
            }, 
            {
                "descr": "An optional boolean parameter, defaulting to true, indicating whether or not to perform the operation asynchronously. ", 
                "name": "async"
            }, 
            {
                "descr": "The optional user name to use for authentication purposes; by default, this is an empty string.", 
                "name": "user"
            }, 
            {
                "descr": "The optional password to use for authentication purposes; by default, this is an empty string.", 
                "name": "password"
            }
        ], 
        "path": "dom/xmlhttprequest/open", 
        "syntax": "method The HTTP method to use, such as \"GET\", \"POST\", \"PUT\", \"DELETE\", etc. Ignored for non-HTTP(S) URLs. url", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.overrideMimeType": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest.overrideMimeType", 
        "params": [], 
        "path": "dom/xmlhttprequest/overridemimetype", 
        "syntax": "var newRequest = request.clone();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.send": {
        "descr": "The XMLHttpRequest.send() method sends the request. If the request is asynchronous (which is the default), this method returns as soon as the request is sent. If the request is synchronous, this method doesn't return until the response has arrived. send() accepts an optional argument for the request body. If the request method is GET or HEAD, the argument is ignored and request body is set to null.", 
        "name": "XMLHttpRequest.send", 
        "params": [], 
        "path": "dom/xmlhttprequest/send", 
        "syntax": "void send();\n or void send(ArrayBuffer data);\n or void send(ArrayBufferView data);\n or void send(Blob data);\n or void send(Document data);\n or void send(DOMString? data);\n or void send(FormData data);", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.sendAsBinary": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest.sendAsBinary", 
        "params": [
            {
                "descr": "The request body as a DOMstring. ", 
                "name": "body"
            }
        ], 
        "path": "dom/xmlhttprequest/sendasbinary", 
        "syntax": "readAsBinaryString method of the FileReader API, makes it possible to read and upload any type of file and to stringify the raw data. Parameters  body The request body as a DOMstring. This data is converted to a string of single-byte characters by truncation (removing the high-order byte of each character).  sendAsBinary()", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequest.setRequestHeader": {
        "descr": "Draft This page is not complete.", 
        "name": "XMLHttpRequest.setRequestHeader", 
        "params": [
            {
                "descr": "The name of the header whose value is to be set.", 
                "name": "header"
            }, 
            {
                "descr": "The value to set as the body of the header.", 
                "name": "value"
            }
        ], 
        "path": "dom/xmlhttprequest/setrequestheader", 
        "syntax": "header The name of the header whose value is to be set. value The value to set as the body of the header.  Specifications    Specification Status Comment   XMLHttpRequestThe definition of 'setRequestHeader()' in that specification. Living Standard WHATWG living standard    Browser compatibility", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequestEventTarget.onabort": {
        "descr": "The XMLHttpRequestEventTarget.onabort is the function called when an XMLHttpRequest transaction is aborted, such as when the XMLHttpRequest.abort() function is called.", 
        "name": "XMLHttpRequestEventTarget.onabort", 
        "params": [], 
        "path": "dom/xmlhttprequesteventtarget/onabort", 
        "syntax": "XMLHttpRequest.onabort = callback; Values  callback is the function to be executed when the transaction is aborted.  Example var xmlhttp = new XMLHttpRequest(),  method = 'GET',  url = 'https://developer.mozilla.org/';xmlhttp.open(method, url, true);\n or xmlhttp.onabort = function () {  console.log(\"** The request was aborted);\n or };xmlhttp.send();\n or //..xmlhttp.abort();\n or  // This will invoke our onabort handler above);", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequestEventTarget.onerror": {
        "descr": "The XMLHttpRequestEventTarget.onerror is the function called when an XMLHttpRequest transaction fails due to an error.", 
        "name": "XMLHttpRequestEventTarget.onerror", 
        "params": [], 
        "path": "dom/xmlhttprequesteventtarget/onerror", 
        "syntax": "XMLHttpRequest.onerror = callback; Values  callback is the function to be executed when the request fails.  Example var xmlhttp = new XMLHttpRequest(),  method = 'GET',  url = 'https://developer.mozilla.org/';xmlhttp.open(method, url, true);\n or xmlhttp.onerror = function () {  console.log(\"** An error occurred during the transaction\");\n or };xmlhttp.send();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequestEventTarget.onload": {
        "descr": "The XMLHttpRequestEventTarget.onload is the function called when an XMLHttpRequest transaction completes successfully.", 
        "name": "XMLHttpRequestEventTarget.onload", 
        "params": [], 
        "path": "dom/xmlhttprequesteventtarget/onload", 
        "syntax": "XMLHttpRequest.onload = callback; Values  callback is the function to be executed when the request completes successfully.  Example var xmlhttp = new XMLHttpRequest(),  method = 'GET',  url = 'https://developer.mozilla.org/';xmlhttp.open(method, url, true);\n or xmlhttp.onload = function () {  // Do something with the retrieved data};xmlhttp.send();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequestEventTarget.onloadstart": {
        "descr": "The XMLHttpRequestEventTarget.onloadstart is the function called when an XMLHttpRequest transaction starts transferring data.", 
        "name": "XMLHttpRequestEventTarget.onloadstart", 
        "params": [], 
        "path": "dom/xmlhttprequesteventtarget/onloadstart", 
        "syntax": "XMLHttpRequest.onloadstart = callback; Values  callback is the function to be called when the transaction begins to transfer data.  Example var xmlhttp = new XMLHttpRequest(),  method = 'GET',  url = 'https://developer.mozilla.org/';xmlhttp.open(method, url, true);\n or xmlhttp.onloadstart = function () {  console.log(\"Download underway);\n or };xmlhttp.send();", 
        "type": "XMLHTTPRequest"
    }, 
    "XMLHttpRequestEventTarget.onprogress": {
        "descr": "The XMLHttpRequestEventTarget.onprogress is the function called periodically with information when an XMLHttpRequest before success completely .", 
        "name": "XMLHttpRequestEventTarget.onprogress", 
        "params": [], 
        "path": "dom/xmlhttprequesteventtarget/onprogress", 
        "syntax": "XMLHttpRequest.onprogress = callback; Values  callback is the function called periodically before complete the request.  Event  event.loaded how many information recived in periodically call. event.size how many information the request have.  XMLHttpRequest.onprogress = function (event) {  event.loaded;  event.size;};", 
        "type": "XMLHTTPRequest"
    }, 
    "XSLTProcessor": {
        "descr": "An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents.", 
        "name": "XSLTProcessor", 
        "params": [
            {
                "descr": "Imports the XSLT stylesheet. If the given node is a document node, you can pass in a full XSL Transform or a literal result element transform; otherwise, it must be an <xsl:stylesheet> or <xsl:transform> element.", 
                "name": "[Throws] void XSLTProcessor.importStylesheet(Node styleSheet)"
            }, 
            {
                "descr": "Transforms the node source by applying the stylesheet imported using the XSLTProcessor.importStylesheet() function. ", 
                "name": "[Throws] DocumentFragment XSLTProcessor.transformToFragment(Node source, Document owner)"
            }, 
            {
                "descr": "Transforms the node source applying the stylesheet given importing using the XSLTProcessor.importStylesheet() function. ", 
                "name": "[Throws] Document XSLTProcessor.transformToDocument(Node source)"
            }, 
            {
                "descr": "Sets a parameter in the XSLT stylesheet that was imported. ", 
                "name": "[Throws] void XSLTProcessor.setParameter(String namespaceURI, String localName, any value)"
            }, 
            {
                "descr": "Gets the value of a parameter from the XSLT stylesheet. ", 
                "name": "[Throws] any XSLTProcessor.getParameter(String namespaceURI, String localName)"
            }, 
            {
                "descr": "Removes the parameter if it was previously set. ", 
                "name": "[Throws] void XSLTProcessor.removeParameter(String namespaceURI, String localName)"
            }, 
            {
                "descr": "Removes all set parameters from the XSLTProcessor. ", 
                "name": "void XSLTProcessor.clearParameters()"
            }, 
            {
                "descr": "Removes all parameters and stylesheets from the XSLTProcessor.", 
                "name": "void XSLTProcessor.reset()"
            }, 
            {
                "descr": "Flags that tweak the behavior of the processor. ", 
                "name": "[ChromeOnly] attribute unsigned long XSLTProcessor.flags"
            }
        ], 
        "path": "dom/xsltprocessor", 
        "syntax": "new XSLTProcessor()", 
        "type": "Miscellaneous"
    }, 
    "^": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": "^", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Bitwise_XOR", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "^=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "^=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Bitwise_XOR_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "add": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .add() method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to .add() can be pretty much anything that $() accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.", 
        "name": "add", 
        "params": [
            {
                "descr": "Type: Selector  A string representing a selector expression to find additional elements to add to the set of matched elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  One or more elements to add to the set of matched elements.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: htmlString  An HTML fragment to add to the set of matched elements.", 
                "name": "html"
            }, 
            {
                "descr": "Type: jQuery  An existing jQuery object to add to the set of matched elements.", 
                "name": "selection"
            }, 
            {
                "descr": "Type: Selector  A string representing a selector expression to find additional elements to add to the set of matched elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  The point in the document at which the selector should begin matching; similar to the context argument of the $(selector, context) method.", 
                "name": "context"
            }
        ], 
        "path": "jquery/add", 
        "syntax": ".add( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "addBack": {
        "descr": "As described in the discussion for .end(), jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, .addBack() can help.", 
        "name": "addBack", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match the current set of elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/addback", 
        "syntax": ".addBack( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "addClass": {
        "descr": "It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.", 
        "name": "addClass", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated classes to be added to the class attribute of each matched element.", 
                "name": "className"
            }, 
            {
                "descr": "Type: Function( Integer index, String currentClassName ) => String  A function returning one or more space-separated class names to be added to the existing class name(s). ", 
                "name": "function"
            }
        ], 
        "path": "jquery/addclass", 
        "syntax": ".addClass( className ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "after": {
        "descr": "The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax\u2014specifically, in the placement of the content and target. With .after(), the content to be inserted comes from the method's argument: $(target).after(contentToBeInserted). With .insertAfter(), on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the .insertAfter() method's argument: $(contentToBeInserted).insertAfter(target).", 
        "name": "after", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert after each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function( Integer index ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.", 
                "name": "function"
            }, 
            {
                "descr": "Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.", 
                "name": "function-html"
            }
        ], 
        "path": "jquery/after", 
        "syntax": ".after( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "ajaxComplete": {
        "descr": "Whenever an Ajax request completes, jQuery triggers the ajaxComplete event. Any and all handlers that have been registered with the .ajaxComplete() method are executed at this time.", 
        "name": "ajaxComplete", 
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions ) The function to be invoked.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ajaxcomplete", 
        "syntax": ".ajaxComplete( handler ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxError": {
        "descr": "Whenever an Ajax request completes with an error, jQuery triggers the ajaxError event. Any and all handlers that have been registered with the .ajaxError() method are executed at this time. Note: This handler is not called for cross-domain script and cross-domain JSONP requests.", 
        "name": "ajaxError", 
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxSettings, String thrownError ) The function to be invoked.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ajaxerror", 
        "syntax": ".ajaxError( handler ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxSend": {
        "descr": "Whenever an Ajax request is about to be sent, jQuery triggers the ajaxSend event. Any and all handlers that have been registered with the .ajaxSend() method are executed at this time.", 
        "name": "ajaxSend", 
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions ) The function to be invoked.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ajaxsend", 
        "syntax": ".ajaxSend( handler ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxStart": {
        "descr": "Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the ajaxStart event. Any and all handlers that have been registered with the .ajaxStart() method are executed at this time.", 
        "name": "ajaxStart", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ajaxstart", 
        "syntax": ".ajaxStart( handler ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxStop": {
        "descr": "Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the ajaxStop event. Any and all handlers that have been registered with the .ajaxStop() method are executed at this time. The ajaxStop event is also triggered if the last outstanding Ajax request is cancelled by returning false within the beforeSend callback function.", 
        "name": "ajaxStop", 
        "params": [
            {
                "descr": "Type: Function() The function to be invoked.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ajaxstop", 
        "syntax": ".ajaxStop( handler ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "ajaxSuccess": {
        "descr": "Whenever an Ajax request completes successfully, jQuery triggers the ajaxSuccess event. Any and all handlers that have been registered with the .ajaxSuccess() method are executed at this time.", 
        "name": "ajaxSuccess", 
        "params": [
            {
                "descr": "Type: Function( Event event, jqXHR jqXHR, PlainObject ajaxOptions, PlainObject data ) The function to be invoked.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ajaxsuccess", 
        "syntax": ".ajaxSuccess( handler ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "alert": {
        "descr": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.", 
        "name": "window.alert", 
        "params": [], 
        "path": "dom/window/alert", 
        "syntax": "window.alert(message);", 
        "type": "Window"
    }, 
    "andSelf": {
        "descr": "Note: This function has been deprecated and is now an alias for .addBack(), which should be used with jQuery 1.8 and later.", 
        "name": "andSelf", 
        "params": [], 
        "path": "jquery/andself", 
        "syntax": ".andSelf() Returns: jQueryversion deprecated: 1.8", 
        "type": "Traversing"
    }, 
    "animate": {
        "descr": "The .animate() method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the .css() method, except that the range of properties is more restrictive.", 
        "name": "animate", 
        "params": [
            {
                "descr": "Type: PlainObject  An object of CSS properties and values that the animation will move toward.", 
                "name": "properties"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  An object of CSS properties and values that the animation will move toward.", 
                "name": "properties"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }
        ], 
        "path": "jquery/animate", 
        "syntax": ".animate( properties [, duration ] [, easing ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "append": {
        "descr": "The .append() method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the first child, use .prepend()).", 
        "name": "append", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.", 
                "name": "function"
            }
        ], 
        "path": "jquery/append", 
        "syntax": ".append( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "appendTo": {
        "descr": "The .append() and .appendTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .append(), the selector expression preceding the method is the container into which the content is inserted. With .appendTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.", 
        "name": "appendTo", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/appendto", 
        "syntax": ".appendTo( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "arguments": {
        "descr": "The arguments object is an Array-like object corresponding to the arguments passed to a function.", 
        "name": "arguments", 
        "params": [
            {
                "descr": "Reference to the currently executing function.", 
                "name": "arguments.callee"
            }, 
            {
                "descr": "Reference to the function that invoked the currently executing function.", 
                "name": "arguments.caller"
            }, 
            {
                "descr": "Reference to the number of arguments passed to the function.", 
                "name": "arguments.length"
            }, 
            {
                "descr": "Returns a new Array Iterator object that contains the values for each index in the arguments.", 
                "name": "arguments[@@iterator]"
            }
        ], 
        "path": "javascript/functions/arguments", 
        "syntax": "arguments Description The arguments object is a local variable available within all functions. You can refer to a function's arguments within the function by using the arguments object. This object contains an entry for each argument passed to the function, the first entry's index starting at 0. For example, if a function is passed three arguments, you can refer to them as follows: arguments[0]arguments[1]arguments[2] The arguments can also be set: arguments[1] = 'new value'; The arguments object is not an Array. It is similar to an Array, but does not have any Array properties except length. For example, it does not have the pop method. However it can be converted to a real Array: var args = Array.prototype.slice.call(arguments);", 
        "type": "Function"
    }, 
    "arguments.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the Array.prototype.values property.", 
        "name": "arguments.@@iterator", 
        "params": [], 
        "path": "javascript/functions/arguments/@@iterator", 
        "syntax": "arguments[Symbol.iterator]()", 
        "type": "Function"
    }, 
    "arguments.callee": {
        "descr": "The arguments.callee property contains the currently executing function.", 
        "name": "arguments.callee", 
        "params": [], 
        "path": "javascript/functions/arguments/callee", 
        "syntax": "function factorial (n) {    return !(n > 1) ? 1 : factorial(n - 1) * n;}[1,2,3,4,5].map(factorial);", 
        "type": "Function"
    }, 
    "arguments.length": {
        "descr": "The arguments.length property contains the number of arguments passed to the function.", 
        "name": "arguments.length", 
        "params": [], 
        "path": "javascript/functions/arguments/length", 
        "syntax": "arguments.length Description The arguments.length property provides the number of arguments actually passed to a function. This can be more or less than the defined parameter's count (see Function.length).", 
        "type": "Function"
    }, 
    "array.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the values() property.", 
        "name": "array.@@iterator", 
        "params": [], 
        "path": "javascript/global_objects/array/@@iterator", 
        "syntax": "arr[Symbol.iterator]()", 
        "type": "Array"
    }, 
    "array.@@unscopables": {
        "descr": "The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 (ES6) version. These properties are excluded from with statement bindings.", 
        "name": "array.@@unscopables", 
        "params": [], 
        "path": "javascript/global_objects/array/@@unscopables", 
        "syntax": "arr[Symbol.unscopables] Description The default array properties that are excluded from with bindings are: copyWithin, entries, fill, find, findIndex, includes, keys, and values. See Symbol.unscopables for how to set unscopables for your own objects. Examples The following code works fine in ES5 and below. However, in ECMAScript 2015 (ES6) and later, the Array.prototype.keys()", 
        "type": "Array"
    }, 
    "array.concat": {
        "descr": "The concat() method returns a new array comprised of the array on which it is called joined with the array(s) and/or value(s) provided as arguments.", 
        "name": "array.concat", 
        "params": [
            {
                "descr": "Arrays and/or values to concatenate into a new array. ", 
                "name": "valueN"
            }
        ], 
        "path": "javascript/global_objects/array/concat", 
        "syntax": "var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])", 
        "type": "Array"
    }, 
    "array.copyWithin": {
        "descr": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it, without modifying its size.", 
        "name": "array.copyWithin", 
        "params": [
            {
                "descr": "Zero based index at which to copy the sequence to. ", 
                "name": "target"
            }, 
            {
                "descr": "Zero based index at which to start copying elements from. ", 
                "name": "start"
            }, 
            {
                "descr": "Zero based index at which to end copying elements from. ", 
                "name": "end"
            }
        ], 
        "path": "javascript/global_objects/array/copywithin", 
        "syntax": "arr.copyWithin(target[, start[, end]])", 
        "type": "Array"
    }, 
    "array.entries": {
        "descr": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.", 
        "name": "array.entries", 
        "params": [], 
        "path": "javascript/global_objects/array/entries", 
        "syntax": "arr.entries()", 
        "type": "Array"
    }, 
    "array.every": {
        "descr": "The every() method tests whether all elements in the array pass the test implemented by the provided function.", 
        "name": "array.every", 
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  currentValue (required) The current element being processed in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index (optional)"
            }, 
            {
                "descr": "The array every was called upon.", 
                "name": "array (optional)"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/every", 
        "syntax": "arr.every(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.fill": {
        "descr": "The fill() method fills all the elements of an array from a start index to an end index with a static value.", 
        "name": "array.fill", 
        "params": [
            {
                "descr": "Value to fill an array.", 
                "name": "value"
            }, 
            {
                "descr": "Optional. Start index.", 
                "name": "start"
            }, 
            {
                "descr": "Optional. End index.", 
                "name": "end"
            }
        ], 
        "path": "javascript/global_objects/array/fill", 
        "syntax": "arr.fill(value[, start = 0[, end = this.length]])", 
        "type": "Array"
    }, 
    "array.filter": {
        "descr": "The filter() method creates a new array with all elements that pass the test implemented by the provided function.", 
        "name": "array.filter", 
        "params": [
            {
                "descr": "Function to test each element of the array. ", 
                "name": "callback"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/filter", 
        "syntax": "var new_array = arr.filter(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.find": {
        "descr": "The find() method returns a value in the array, if an element in the array satisfies the provided testing function. Otherwise undefined is returned.", 
        "name": "array.find", 
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking three arguments:  element The current element being processed in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array find was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/find", 
        "syntax": "arr.find(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.findIndex": {
        "descr": "The findIndex() method returns an index in the array, if an element in the array satisfies the provided testing function. Otherwise -1 is returned.", 
        "name": "array.findIndex", 
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking three arguments:  element The current element being processed in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array findIndex was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/findindex", 
        "syntax": "arr.findIndex(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.forEach": {
        "descr": "The forEach() method executes a provided function once per array element.", 
        "name": "array.forEach", 
        "params": [
            {
                "descr": "Function to execute for each element, taking three arguments:  currentValue The current element being processed in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array that forEach() is being applied to.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/foreach", 
        "syntax": "arr.forEach(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.includes": {
        "descr": "The includes() method determines whether an array includes a certain element, returning true or false as appropriate.", 
        "name": "array.includes", 
        "params": [
            {
                "descr": "The element to search for.", 
                "name": "searchElement"
            }, 
            {
                "descr": "Optional. The position in this array at which to begin searching for searchElement. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/array/includes", 
        "syntax": "var boolean = array.includes(searchElement[, fromIndex])", 
        "type": "Array"
    }, 
    "array.indexOf": {
        "descr": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.", 
        "name": "array.indexOf", 
        "params": [
            {
                "descr": "Element to locate in the array.", 
                "name": "searchElement"
            }, 
            {
                "descr": "The index to start the search at. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/array/indexof", 
        "syntax": "arr.indexOf(searchElement[, fromIndex = 0])", 
        "type": "Array"
    }, 
    "array.join": {
        "descr": "The join() method joins all elements of an array into a string.", 
        "name": "array.join", 
        "params": [
            {
                "descr": "Optional. Specifies a string to separate each element of the array. ", 
                "name": "separator"
            }
        ], 
        "path": "javascript/global_objects/array/join", 
        "syntax": "str = arr.join([separator = ','])", 
        "type": "Array"
    }, 
    "array.keys": {
        "descr": "The keys() method returns a new Array Iterator that contains the keys for each index in the array.", 
        "name": "array.keys", 
        "params": [], 
        "path": "javascript/global_objects/array/keys", 
        "syntax": "arr.keys()", 
        "type": "Array"
    }, 
    "array.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.", 
        "name": "array.lastIndexOf", 
        "params": [
            {
                "descr": "Element to locate in the array.", 
                "name": "searchElement"
            }, 
            {
                "descr": "Optional. The index at which to start searching backwards. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/array/lastindexof", 
        "syntax": "arr.lastIndexOf(searchElement[, fromIndex = arr.length - 1])", 
        "type": "Array"
    }, 
    "array.length": {
        "descr": "The length property represents an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.", 
        "name": "array.length", 
        "params": [], 
        "path": "javascript/global_objects/array/length", 
        "syntax": "arr.length Description The value of the length property is an integer with a positive sign and a value less than 2 to the 32nd power (232).", 
        "type": "Array"
    }, 
    "array.map": {
        "descr": "The map() method creates a new array with the results of calling a provided function on every element in this array.", 
        "name": "array.map", 
        "params": [
            {
                "descr": "Function that produces an element of the new Array, taking three arguments:  currentValue The current element being processed in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array map was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback. ", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/map", 
        "syntax": "arr.map(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.pop": {
        "descr": "The pop() method removes the last element from an array and returns that element.", 
        "name": "array.pop", 
        "params": [], 
        "path": "javascript/global_objects/array/pop", 
        "syntax": "arr.pop()", 
        "type": "Array"
    }, 
    "array.push": {
        "descr": "The push() method adds one or more elements to the end of an array and returns the new length of the array.", 
        "name": "array.push", 
        "params": [
            {
                "descr": "The elements to add to the end of the array.", 
                "name": "elementN"
            }
        ], 
        "path": "javascript/global_objects/array/push", 
        "syntax": "arr.push(element1, ..., elementN)", 
        "type": "Array"
    }, 
    "array.reduce": {
        "descr": "The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.", 
        "name": "array.reduce", 
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied. ", 
                "name": "callback"
            }, 
            {
                "descr": "The current element being processed in the array.", 
                "name": "currentValue"
            }, 
            {
                "descr": "The index of the current element being processed in the array. ", 
                "name": "currentIndex"
            }, 
            {
                "descr": "The array reduce was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/array/reduce", 
        "syntax": "arr.reduce(callback[, initialValue])", 
        "type": "Array"
    }, 
    "array.reduceRight": {
        "descr": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) has to reduce it to a single value.", 
        "name": "array.reduceRight", 
        "params": [
            {
                "descr": "Function to execute on each value in the array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied. ", 
                "name": "callback"
            }, 
            {
                "descr": "The current element being processed in the array.", 
                "name": "currentValue"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array reduce was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/array/reduceright", 
        "syntax": "arr.reduceRight(callback[, initialValue])", 
        "type": "Array"
    }, 
    "array.reverse": {
        "descr": "The reverse() method reverses an array in place. The first array element becomes the last and the last becomes the first.", 
        "name": "array.reverse", 
        "params": [], 
        "path": "javascript/global_objects/array/reverse", 
        "syntax": "arr.reverse()", 
        "type": "Array"
    }, 
    "array.shift": {
        "descr": "The shift() method removes the first element from an array and returns that element. This method changes the length of the array.", 
        "name": "array.shift", 
        "params": [], 
        "path": "javascript/global_objects/array/shift", 
        "syntax": "arr.shift()", 
        "type": "Array"
    }, 
    "array.slice": {
        "descr": "The slice() method returns a shallow copy of a portion of an array into a new array object.", 
        "name": "array.slice", 
        "params": [
            {
                "descr": "Zero-based index at which to begin extraction.", 
                "name": "begin"
            }, 
            {
                "descr": "Zero-based index at which to end extraction. ", 
                "name": "end"
            }
        ], 
        "path": "javascript/global_objects/array/slice", 
        "syntax": "arr.slice([begin[, end]])", 
        "type": "Array"
    }, 
    "array.some": {
        "descr": "The some() method tests whether some element in the array passes the test implemented by the provided function.", 
        "name": "array.some", 
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  currentValue The current element being processed in the array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array some() was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/some", 
        "syntax": "arr.some(callback[, thisArg])", 
        "type": "Array"
    }, 
    "array.sort": {
        "descr": "The sort() method sorts the elements of an array in place and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.", 
        "name": "array.sort", 
        "params": [
            {
                "descr": "Optional. Specifies a function that defines the sort order. ", 
                "name": "compareFunction"
            }
        ], 
        "path": "javascript/global_objects/array/sort", 
        "syntax": "arr.sort([compareFunction])", 
        "type": "Array"
    }, 
    "array.splice": {
        "descr": "The splice() method changes the content of an array by removing existing elements and/or adding new elements.", 
        "name": "array.splice", 
        "params": [
            {
                "descr": "Index at which to start changing the array (with origin 0). ", 
                "name": "start"
            }, 
            {
                "descr": "An integer indicating the number of old array elements to remove. ", 
                "name": "deleteCount"
            }, 
            {
                "descr": "The elements to add to the array, beginning at the start index. ", 
                "name": "item1, item2, ..."
            }
        ], 
        "path": "javascript/global_objects/array/splice", 
        "syntax": "array.splice(start, deleteCount[, item1[, item2[, ...]]])", 
        "type": "Array"
    }, 
    "array.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \u201c,\u201d).", 
        "name": "array.toLocaleString", 
        "params": [], 
        "path": "javascript/global_objects/array/tolocalestring", 
        "syntax": "arr.toLocaleString();", 
        "type": "Array"
    }, 
    "array.toString": {
        "descr": "The toString() method returns a string representing the specified array and its elements.", 
        "name": "array.toString", 
        "params": [], 
        "path": "javascript/global_objects/array/tostring", 
        "syntax": "arr.toString()", 
        "type": "Array"
    }, 
    "array.unshift": {
        "descr": "The unshift() method adds one or more elements to the beginning of an array and returns the new length of the array.", 
        "name": "array.unshift", 
        "params": [
            {
                "descr": "The elements to add to the front of the array.", 
                "name": "elementN"
            }
        ], 
        "path": "javascript/global_objects/array/unshift", 
        "syntax": "arr.unshift([element1[, ...[, elementN]]])", 
        "type": "Array"
    }, 
    "array.values": {
        "descr": "The values() method returns a new Array Iterator object that contains the values for each index in the array.", 
        "name": "array.values", 
        "params": [], 
        "path": "javascript/global_objects/array/values", 
        "syntax": "arr.values()", 
        "type": "Array"
    }, 
    "arrayBuffer.byteLength": {
        "descr": "The byteLength accessor property represents the length of an ArrayBuffer in bytes.", 
        "name": "arrayBuffer.byteLength", 
        "params": [], 
        "path": "javascript/global_objects/arraybuffer/bytelength", 
        "syntax": "arraybuffer.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the array is constructed and cannot be changed. This property returns 0 if this ArrayBuffer has been detached. Examples var buffer = new ArrayBuffer(8);\n or buffer.byteLength; // 8);", 
        "type": "ArrayBuffer"
    }, 
    "arrayBuffer.slice": {
        "descr": "The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.", 
        "name": "arrayBuffer.slice", 
        "params": [
            {
                "descr": "Zero-based byte index at which to begin slicing.", 
                "name": "begin"
            }, 
            {
                "descr": "Byte index to end slicing. If end is unspecified, the new ArrayBuffer contains all bytes from begin to the end of this ArrayBuffer. ", 
                "name": "end"
            }
        ], 
        "path": "javascript/global_objects/arraybuffer/slice", 
        "syntax": "arraybuffer.slice(begin[, end])", 
        "type": "ArrayBuffer"
    }, 
    "assign": {
        "descr": "The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object. It will return the target object.", 
        "name": "Object.assign", 
        "params": [
            {
                "descr": "The target object.", 
                "name": "target"
            }, 
            {
                "descr": "The source object(s).", 
                "name": "sources"
            }
        ], 
        "path": "javascript/global_objects/object/assign", 
        "syntax": "Object.assign(target, ...sources)", 
        "type": "Object"
    }, 
    "attr": {
        "descr": "The .attr() method gets the attribute value for only the first element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.", 
        "name": "attr", 
        "params": [
            {
                "descr": "Type: String  The name of the attribute to get.", 
                "name": "attributeName"
            }, 
            {
                "descr": "Type: String  The name of the attribute to set.", 
                "name": "attributeName"
            }, 
            {
                "descr": "Type: String or Number or Null  A value to set for the attribute. ", 
                "name": "value"
            }, 
            {
                "descr": "Type: PlainObject  An object of attribute-value pairs to set.", 
                "name": "attributes"
            }, 
            {
                "descr": "Type: String  The name of the attribute to set.", 
                "name": "attributeName"
            }, 
            {
                "descr": "Type: Function( Integer index, String attr ) => String or Number  A function returning the value to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/attr", 
        "syntax": ".attr( attributeName ) Returns: String", 
        "type": "Manipulation"
    }, 
    "before": {
        "descr": "The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax\u2014specifically, in the placement of the content and target. With .before(), the content to be inserted comes from the method's argument: $(target).before(contentToBeInserted). With .insertBefore(), on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the .insertBefore() method's argument: $(contentToBeInserted).insertBefore(target).", 
        "name": "before", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert before each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function( Integer index ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, this refers to the current element in the set.", 
                "name": "function"
            }, 
            {
                "descr": "Type: Function( Integer index, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.", 
                "name": "function-html"
            }
        ], 
        "path": "jquery/before", 
        "syntax": ".before( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "bind": {
        "descr": "As of jQuery 1.7, the .on() method is the preferred method for attaching event handlers to a document. For earlier versions, the .bind() method is used for attaching an event handler directly to elements. Handlers are attached to the currently selected elements in the jQuery object, so those elements must exist at the point the call to .bind() occurs. For more flexible event binding, see the discussion of event delegation in .on() or .delegate().", 
        "name": "bind", 
        "params": [
            {
                "descr": "Type: String  A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Boolean  Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. ", 
                "name": "preventBubble"
            }, 
            {
                "descr": "Type: Object  An object containing one or more DOM event types and functions to execute for them.", 
                "name": "events"
            }
        ], 
        "path": "jquery/bind", 
        "syntax": ".bind( eventType [, eventData ], handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "block": {
        "descr": "A block statement (or compound statement in other languages) is used to group zero or more statements. The block is delimited by a pair of curly brackets.", 
        "name": "block", 
        "params": [
            {
                "descr": "Statements grouped within the block statement.", 
                "name": "statement_1, statement_2, statement_n"
            }
        ], 
        "path": "javascript/statements/block", 
        "syntax": "{  statement_1;  statement_2;  ...  statement_n;}  statement_1, statement_2, statement_n Statements grouped within the block statement.  Description This statement is commonly used with control flow statements (e.g. if...else, for, while). For example:", 
        "type": "Statements"
    }, 
    "blur": {
        "descr": "Shifts focus away from the window.", 
        "name": "window.blur", 
        "params": [], 
        "path": "dom/window/blur", 
        "syntax": "window.blur()", 
        "type": "Window"
    }, 
    "boolean.toString": {
        "descr": "The toString() method returns a string representing the specified Boolean object.", 
        "name": "boolean.toString", 
        "params": [], 
        "path": "javascript/global_objects/boolean/tostring", 
        "syntax": "bool.toString()", 
        "type": "Boolean"
    }, 
    "boolean.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Boolean object.", 
        "name": "boolean.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/boolean/valueof", 
        "syntax": "bool.valueOf()", 
        "type": "Boolean"
    }, 
    "break": {
        "descr": "The break statement terminates the current loop, switch, or label statement and transfers program control to the statement following the terminated statement.", 
        "name": "break", 
        "params": [
            {
                "descr": "Optional. Identifier associated with the label of the statement. ", 
                "name": "label"
            }
        ], 
        "path": "javascript/statements/break", 
        "syntax": "break [label];  label Optional. Identifier associated with the label of the statement. If the statement is not a loop or switch, this is required.  Description The break statement includes an optional label that allows the program to break out of a labeled statement. The break statement needs to be nested within the referenced label. The labeled statement can be any block", 
        "type": "Statements"
    }, 
    "caches": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.caches", 
        "params": [], 
        "path": "dom/window/caches", 
        "syntax": "Window.caches read-only property returns the CacheStorage", 
        "type": "Window"
    }, 
    "callbacks.add": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.add", 
        "params": [
            {
                "descr": "Type: Function() or Array  A function, or array of functions, that are to be added to the callback list.", 
                "name": "callbacks"
            }
        ], 
        "path": "jquery/callbacks.add", 
        "syntax": "callbacks.add( callbacks ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.disable": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.disable", 
        "params": [], 
        "path": "jquery/callbacks.disable", 
        "syntax": "callbacks.disable() Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.disabled": {
        "descr": "Use callbacks.disabled() to determine if the callbacks list has been disabled:", 
        "name": "callbacks.disabled", 
        "params": [], 
        "path": "jquery/callbacks.disabled", 
        "syntax": "callbacks.disabled() Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.empty": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.empty", 
        "params": [], 
        "path": "jquery/callbacks.empty", 
        "syntax": "callbacks.empty() Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.fire": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.fire", 
        "params": [
            {
                "descr": "Type: Anything  The argument or list of arguments to pass back to the callback list.", 
                "name": "arguments"
            }
        ], 
        "path": "jquery/callbacks.fire", 
        "syntax": "callbacks.fire( arguments ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.fireWith": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.fireWith", 
        "params": [
            {
                "descr": "Type:  A reference to the context in which the callbacks in the list should be fired.", 
                "name": "context"
            }, 
            {
                "descr": "Type:  An argument, or array of arguments, to pass to the callbacks in the list.", 
                "name": "args"
            }
        ], 
        "path": "jquery/callbacks.firewith", 
        "syntax": "callbacks.fireWith( [context ] [, args ] ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.fired": {
        "descr": "Use callbacks.fired() to determine if the callbacks in a list have been called at least once:", 
        "name": "callbacks.fired", 
        "params": [], 
        "path": "jquery/callbacks.fired", 
        "syntax": "callbacks.fired() Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.has": {
        "descr": "Use callbacks.has() to check if a callback list contains a specific callback:", 
        "name": "callbacks.has", 
        "params": [
            {
                "descr": "Type: Function() The callback to search for.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/callbacks.has", 
        "syntax": "callbacks.has( [callback ] ) Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.lock": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.lock", 
        "params": [], 
        "path": "jquery/callbacks.lock", 
        "syntax": "callbacks.lock() Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "callbacks.locked": {
        "descr": "Use callbacks.locked() to determine the lock-state of a callback list:", 
        "name": "callbacks.locked", 
        "params": [], 
        "path": "jquery/callbacks.locked", 
        "syntax": "callbacks.locked() Returns: Boolean", 
        "type": "Callbacks Object"
    }, 
    "callbacks.remove": {
        "descr": "This method returns the Callbacks object onto which it is attached (this).", 
        "name": "callbacks.remove", 
        "params": [
            {
                "descr": "Type: Function() or Array  A function, or array of functions, that are to be removed from the callback list.", 
                "name": "callbacks"
            }
        ], 
        "path": "jquery/callbacks.remove", 
        "syntax": "callbacks.remove( callbacks ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "cancelAnimationFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.cancelAnimationFrame", 
        "params": [
            {
                "descr": "The ID value returned by the call to window.requestAnimationFrame() that requested the callback.", 
                "name": "requestID"
            }
        ], 
        "path": "dom/window/cancelanimationframe", 
        "syntax": "window.requestAnimationFrame()", 
        "type": "Window"
    }, 
    "cancelIdleCallback": {
        "descr": "The Window.cancelIdleCallback() enables you to cancel a callback previously scheduled with Window.requestIdleCallback.", 
        "name": "window.cancelIdleCallback", 
        "params": [
            {
                "descr": "The unsigned long integer returned by calling Window.requestIdleCallback.", 
                "name": "handle"
            }
        ], 
        "path": "dom/window/cancelidlecallback", 
        "syntax": "Window.cancelIdleCallback(handle)", 
        "type": "Window"
    }, 
    "change": {
        "descr": "This method is a shortcut for .on( \"change\", handler ) in the first two variations, and .trigger( \"change\" ) in the third.", 
        "name": "change", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/change", 
        "syntax": ".change( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "children": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .children() method allows us to search through the children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .children() method differs from .find() in that .children() only travels a single level down the DOM tree while .find() can traverse down multiple levels to select descendant elements (grandchildren, etc.) as well. Note also that like most jQuery methods, .children() does not return text nodes; to get all children including text and comment nodes, use .contents().", 
        "name": "children", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/children", 
        "syntax": ".children( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "class": {
        "descr": "The class expression is one way to define a class in ECMAScript 2015 (ES6). Similar to function expressions, class expressions can be named or unnamed. If named, the name of the class is local to the class body only. JavaScript classes are using prototype-based inheritance.", 
        "name": "class", 
        "params": [], 
        "path": "javascript/operators/class", 
        "syntax": "var MyClass = class [className] [extends] {\u00a0 // class body}; Description A class expression has a similar syntax to a class statement. However, with class expressions, you are able to omit the class name (\"binding identifier\"), which you can't with class statements.", 
        "type": "Operators"
    }, 
    "clearImmediate": {
        "descr": "This method clears the action specified by window.setImmediate.", 
        "name": "window.clearImmediate", 
        "params": [], 
        "path": "dom/window/clearimmediate", 
        "syntax": "window.clearImmediate(immediateID)", 
        "type": "Window"
    }, 
    "clearQueue": {
        "descr": "When the .clearQueue() method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, .clearQueue() removes the remaining functions from fx, the standard effects queue. In this way it is similar to .stop(true). However, while the .stop() method is meant to be used only with animations, .clearQueue() can also be used to remove any function that has been added to a generic jQuery queue with the .queue() method.", 
        "name": "clearQueue", 
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/clearqueue", 
        "syntax": ".clearQueue( [queueName ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "click": {
        "descr": "This method is a shortcut for .on( \"click\", handler ) in the first two variations, and .trigger( \"click\" ) in the third. The click event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:", 
        "name": "click", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/click", 
        "syntax": ".click( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "clone": {
        "descr": "The .clone() method performs a deep copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.", 
        "name": "clone", 
        "params": [
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether event handlers should be copied along with the elements. ", 
                "name": "withDataAndEvents"
            }, 
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether event handlers and data should be copied along with the elements. ", 
                "name": "withDataAndEvents"
            }, 
            {
                "descr": "(default: value of withDataAndEvents) Type: Boolean  A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. ", 
                "name": "deepWithDataAndEvents"
            }
        ], 
        "path": "jquery/clone", 
        "syntax": ".clone( [withDataAndEvents ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "close": {
        "descr": "The Window.close() method closes the current window, or the window on which it was called.", 
        "name": "window.close", 
        "params": [], 
        "path": "dom/window/close", 
        "syntax": "window.close();", 
        "type": "Window"
    }, 
    "closed": {
        "descr": "This read-only property indicates whether the referenced window is closed or not.", 
        "name": "window.closed", 
        "params": [
            {
                "descr": "A boolean. Possible Values:  true: The window has been closed. ", 
                "name": "isClosed"
            }
        ], 
        "path": "dom/window/closed", 
        "syntax": "isClosed = windowRef.closed;   isClosed  A boolean. Possible Values:  true: The window has been closed. false: The window is open.    Examples Change the URL of a window from a popup The following example demonstrates how a popup window can change the URL of the window that opened it. Before attempting to change the URL, it checks that the current window has an opener using the window.opener property and that the opener isn't closed: // Check that an opener exists and is not closedif (window.opener && !window.opener.closed) {  window.opener.location.href = \"http://www.mozilla.org\";}", 
        "type": "Window"
    }, 
    "closest": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .closest() method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The .parents() and .closest() methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:", 
        "name": "closest", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  A DOM element within which a matching element may be found.", 
                "name": "context"
            }, 
            {
                "descr": "Type: jQuery  A jQuery object to match elements against.", 
                "name": "selection"
            }, 
            {
                "descr": "Type: Element  An element to match elements against.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Array  An array or string containing a selector expression to match elements against (can also be a jQuery object).", 
                "name": "selectors"
            }, 
            {
                "descr": "Type: Element  A DOM element within which a matching element may be found.", 
                "name": "context"
            }
        ], 
        "path": "jquery/closest", 
        "syntax": ".closest( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "confirm": {
        "descr": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.", 
        "name": "window.confirm", 
        "params": [], 
        "path": "dom/window/confirm", 
        "syntax": "result = window.confirm(message);", 
        "type": "Window"
    }, 
    "console.assert": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.assert", 
        "params": [
            {
                "descr": "Any boolean expression. If the assertion is false, the message is written to the console.", 
                "name": "assertion"
            }, 
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console/assert", 
        "syntax": "console.assert(assertion, obj1 [, obj2, ..., objN]);\n or console.assert(assertion, msg [, subst1, ..., substN]);\n or  // c-like message formatting);", 
        "type": "Console"
    }, 
    "console.clear": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.clear", 
        "params": [], 
        "path": "dom/console/clear", 
        "syntax": "console.clear();", 
        "type": "Console"
    }, 
    "console.count": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.count", 
        "params": [
            {
                "descr": "A string. If this is supplied, count() outputs the number of times it has been called at this line and with that label.", 
                "name": "label"
            }
        ], 
        "path": "dom/console/count", 
        "syntax": "console.count([label]);", 
        "type": "Console"
    }, 
    "console.dir": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.dir", 
        "params": [
            {
                "descr": "A JavaScript object whose properties should be output.", 
                "name": "object"
            }
        ], 
        "path": "dom/console/dir", 
        "syntax": "console.dir(object);", 
        "type": "Console"
    }, 
    "console.dirxml": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.dirxml", 
        "params": [
            {
                "descr": "A JavaScript object whose properties should be output.", 
                "name": "object"
            }
        ], 
        "path": "dom/console/dirxml", 
        "syntax": "console.dirxml(object);", 
        "type": "Console"
    }, 
    "console.error": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.error", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console/error", 
        "syntax": "console.error(obj1 [, obj2, ..., objN]);\n or console.error(msg [, subst1, ..., substN]);\n or console.exception(obj1 [, obj2, ..., objN]);\n or console.exception(msg [, subst1, ..., substN]);", 
        "type": "Console"
    }, 
    "console.group": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.group", 
        "params": [], 
        "path": "dom/console/group", 
        "syntax": "console.group();", 
        "type": "Console"
    }, 
    "console.groupCollapsed": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.groupCollapsed", 
        "params": [], 
        "path": "dom/console/groupcollapsed", 
        "syntax": "console.groupCollapsed();", 
        "type": "Console"
    }, 
    "console.groupEnd": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.groupEnd", 
        "params": [], 
        "path": "dom/console/groupend", 
        "syntax": "console.groupEnd();", 
        "type": "Console"
    }, 
    "console.info": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.info", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console/info", 
        "syntax": "console.info(obj1 [, obj2, ..., objN]);\n or console.info(msg [, subst1, ..., substN]);", 
        "type": "Console"
    }, 
    "console.log": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.log", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console/log", 
        "syntax": "console.log(obj1 [, obj2, ..., objN]);\n or console.log(msg [, subst1, ..., substN]);", 
        "type": "Console"
    }, 
    "console.profile": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.profile", 
        "params": [
            {
                "descr": "The name to give the profile. Optional.", 
                "name": "profileName"
            }
        ], 
        "path": "dom/console/profile", 
        "syntax": "console.profile(profileName);", 
        "type": "Console"
    }, 
    "console.profileEnd": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.profileEnd", 
        "params": [
            {
                "descr": "The name to give the profile. This parameter is optional.", 
                "name": "profileName"
            }
        ], 
        "path": "dom/console/profileend", 
        "syntax": "console.profileEnd(profileName);", 
        "type": "Console"
    }, 
    "console.table": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.table", 
        "params": [
            {
                "descr": "The data to display. This must be either an array or an object.", 
                "name": "data"
            }, 
            {
                "descr": "An array containing the names of columns to include in the output.", 
                "name": "columns"
            }
        ], 
        "path": "dom/console/table", 
        "syntax": "console.table(data [, columns]);", 
        "type": "Console"
    }, 
    "console.time": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.time", 
        "params": [
            {
                "descr": "The name to give the new timer. ", 
                "name": "label"
            }
        ], 
        "path": "dom/console/time", 
        "syntax": "console.time(label);", 
        "type": "Console"
    }, 
    "console.timeEnd": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.timeEnd", 
        "params": [
            {
                "descr": "The name of the timer to stop. Once stopped, the elapsed time is automatically displayed in the Web Console.", 
                "name": "label"
            }
        ], 
        "path": "dom/console/timeend", 
        "syntax": "console.timeEnd(label);", 
        "type": "Console"
    }, 
    "console.timeStamp": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.timeStamp", 
        "params": [
            {
                "descr": "Label for the timestamp. Optional.", 
                "name": "label"
            }
        ], 
        "path": "dom/console/timestamp", 
        "syntax": "console.timeStamp(label);", 
        "type": "Console"
    }, 
    "console.trace": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.trace", 
        "params": [], 
        "path": "dom/console/trace", 
        "syntax": "console.trace();", 
        "type": "Console"
    }, 
    "console.warn": {
        "descr": "Non-standard This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.", 
        "name": "console.warn", 
        "params": [
            {
                "descr": "A list of JavaScript objects to output. ", 
                "name": "obj1 ... objN"
            }, 
            {
                "descr": "A JavaScript string containing zero or more substitution strings.", 
                "name": "msg"
            }, 
            {
                "descr": "JavaScript objects with which to replace substitution strings within msg. ", 
                "name": "subst1 ... substN"
            }
        ], 
        "path": "dom/console/warn", 
        "syntax": "console.warn(obj1 [, obj2, ..., objN]);\n or console.warn(msg [, subst1, ..., substN]);", 
        "type": "Console"
    }, 
    "const": {
        "descr": "The const declaration creates a read-only reference to a value. It does not mean the value it holds is immutable, just that the variable identifier cannot be reassigned.", 
        "name": "const", 
        "params": [
            {
                "descr": "The constant's name, which can be any legal identifier.", 
                "name": "nameN"
            }, 
            {
                "descr": "The constant's value; this can be any legal expression.", 
                "name": "valueN"
            }
        ], 
        "path": "javascript/statements/const", 
        "syntax": "const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];  nameN The constant's name, which can be any legal identifier. valueN The constant's value; this can be any legal expression.  Description This declaration creates a constant that can be either global or local to the function in which it is declared. An initializer for a constant is required; that is, you must specify its value in the same statement in which it's declared (which makes sense, given that it can't be changed later).", 
        "type": "Statements"
    }, 
    "constructor": {
        "descr": "The constructor method is a special method for creating and initializing an object created with a class.", 
        "name": "constructor", 
        "params": [], 
        "path": "javascript/classes/constructor", 
        "syntax": "constructor([arguments]) { ... }", 
        "type": "Classes"
    }, 
    "contents": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .contents() method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .contents() and .children() methods are similar, except that the former includes text nodes and comment nodes as well as HTML elements in the resulting jQuery object. Please note that most jQuery operations don't support text nodes and comment nodes. The few that do will have an explicit note on their API documentation page.", 
        "name": "contents", 
        "params": [], 
        "path": "jquery/contents", 
        "syntax": ".contents() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "context": {
        "descr": "The .context property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting .live() in the jQuery Migrate plugin. It may be removed without notice in a future version.", 
        "name": "context", 
        "params": [], 
        "path": "jquery/context", 
        "syntax": "contextReturns: Elementversion deprecated: 1.10, removed: 3.0   Description: The DOM node context originally passed to jQuery()", 
        "type": "Miscellaneous"
    }, 
    "contextmenu": {
        "descr": "This method is a shortcut for .on( \"contextmenu\", handler ) in the first two variations, and .trigger( \"contextmenu\" ) in the third. The contextmenu event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the html element. Any HTML element can receive this event. For example, consider the HTML:", 
        "name": "contextmenu", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/contextmenu", 
        "syntax": ".contextmenu( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "continue": {
        "descr": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.", 
        "name": "continue", 
        "params": [
            {
                "descr": "Identifier associated with the label of the statement.", 
                "name": "label"
            }
        ], 
        "path": "javascript/statements/continue", 
        "syntax": "continue [label];  label Identifier associated with the label of the statement.  Description In contrast to the break statement, continue does not terminate the execution of the loop entirely: instead,  In a while loop, it jumps back to the condition.   In a for loop, it jumps to the update expression.  The continue statement can include an optional label that allows the program to jump to the next iteration of a labeled loop statement instead of the current loop. In this case, the continue statement needs to be nested within this labeled statement. Examples Using continue with while The following example shows a while loop that has a continue statement that executes when the value of i is 3. Thus, n takes on the values 1, 3, 7, and 12. var i = 0;var n = 0;while (i < 5) {  i++;  if (i === 3) {    continue;  }  n += i;}", 
        "type": "Statements"
    }, 
    "create": {
        "descr": "The Object.create() method creates a new object with the specified prototype object and properties.", 
        "name": "Object.create", 
        "params": [
            {
                "descr": "The object which should be the prototype of the newly-created object.", 
                "name": "proto"
            }, 
            {
                "descr": "Optional. If specified and not undefined, an object whose enumerable own properties (that is, those properties defined upon itself and not enumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of Object.defineProperties().", 
                "name": "propertiesObject"
            }
        ], 
        "path": "javascript/global_objects/object/create", 
        "syntax": "Object.create(proto[, propertiesObject])", 
        "type": "Object"
    }, 
    "crypto": {
        "descr": "The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.", 
        "name": "window.crypto", 
        "params": [], 
        "path": "dom/window/crypto", 
        "syntax": "var cryptoObj = window.crypto || window.msCrypto; // for IE 11 Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'Window.crypto' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Edge Opera Safari   Basic support 44 (Yes) (Yes) 6 ms 20 19 (Yes)         Feature Chrome for Android Firefox Mobile Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "Window"
    }, 
    "css": {
        "descr": "The .css() method is a convenient way to get a computed style property from the first matched element, especially in light of the different ways browsers access most of those properties (the getComputedStyle() method in standards-based browsers versus the currentStyle and runtimeStyle properties in Internet Explorer prior to version 9) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the float property as styleFloat, while W3C standards-compliant browsers refer to it as cssFloat. For consistency, you can simply use \"float\", and jQuery will translate it to the correct value for each browser.", 
        "name": "css", 
        "params": [
            {
                "descr": "Type: String  A CSS property.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Array  An array of one or more CSS properties.", 
                "name": "propertyNames"
            }, 
            {
                "descr": "Type: String  A CSS property name.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: String or Number  A value to set for the property.", 
                "name": "value"
            }, 
            {
                "descr": "Type: String  A CSS property name.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Function( Integer index, String value ) => String or Number  A function returning the value to set. ", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  An object of property-value pairs to set.", 
                "name": "properties"
            }
        ], 
        "path": "jquery/css", 
        "syntax": ".css( propertyName ) Returns: String", 
        "type": "Manipulation"
    }, 
    "data": {
        "descr": "The .data() method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.", 
        "name": "data", 
        "params": [
            {
                "descr": "Type: String  A string naming the piece of data to set.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Anything  The new data value; this can be any Javascript type except undefined.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Object  An object of key-value pairs of data to update.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: String  Name of the data stored.", 
                "name": "key"
            }
        ], 
        "path": "jquery/data", 
        "syntax": ".data( key, value ) Returns: jQuery", 
        "type": "Data"
    }, 
    "dataView.buffer": {
        "descr": "The buffer accessor property represents the ArrayBuffer referenced by the DataView at construction time.", 
        "name": "dataView.buffer", 
        "params": [], 
        "path": "javascript/global_objects/dataview/buffer", 
        "syntax": "dataview.buffer Description The buffer property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the DataView is constructed and cannot be changed. Examples Using the buffer property var buffer = new ArrayBuffer(8);\n or var dataview = new DataView(buffer);\n or dataview.buffer; // ArrayBuffer { byteLength: 8 });", 
        "type": "DataView"
    }, 
    "dataView.byteLength": {
        "descr": "The byteLength accessor property represents the length (in bytes) of this view from the start of its ArrayBuffer.", 
        "name": "dataView.byteLength", 
        "params": [], 
        "path": "javascript/global_objects/dataview/bytelength", 
        "syntax": "dataview.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when an DataView is constructed and cannot be changed. If the DataView is not specifying an offset or a byteLength, the byteLength of the referenced ArrayBuffer will be returned. Examples Using the byteLength property var buffer = new ArrayBuffer(8);\n or var dataview = new DataView(buffer);\n or dataview.byteLength; // 8 (matches the byteLength of the buffer)var dataview2 = new DataView(buffer, 1, 5);\n or dataview2.byteLength; // 5 (as specified when constructing the DataView)var dataview3 = new DataView(buffer, 2);\n or dataview3.byteLength; // 6 (due to the offset of the constructed DataView));", 
        "type": "DataView"
    }, 
    "dataView.byteOffset": {
        "descr": "The byteOffset accessor property represents the offset (in bytes) of this view from the start of its ArrayBuffer.", 
        "name": "dataView.byteOffset", 
        "params": [], 
        "path": "javascript/global_objects/dataview/byteoffset", 
        "syntax": "dataview.byteOffset Description The byteOffset property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when an DataView is constructed and cannot be changed. Examples Using the byteOffset property var buffer = new ArrayBuffer(8);\n or var dataview = new DataView(buffer);\n or dataview.byteOffset; // 0 (no offset specified)var dataview2 = new DataView(buffer, 3);\n or dataview2.byteOffset; // 3 (as specified when constructing the DataView));", 
        "type": "DataView"
    }, 
    "dataView.getFloat32": {
        "descr": "The getFloat32() method gets a signed 32-bit float (float) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getFloat32", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "fbyteOffset"
            }, 
            {
                "descr": "Optional Indicates whether the 32-bit float is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getfloat32", 
        "syntax": "dataview.getFloat32(byteOffset [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.getFloat64": {
        "descr": "The getFloat64() method gets a signed 64-bit float (double) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getFloat64", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Optional Indicates whether the 64-bit float is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getfloat64", 
        "syntax": "dataview.getFloat64(byteOffset [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.getInt16": {
        "descr": "The getInt16() method gets a signed 16-bit integer (short) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getInt16", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getint16", 
        "syntax": "dataview.getInt16(byteOffset [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.getInt32": {
        "descr": "The getInt32() method gets a signed 32-bit integer (long) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getInt32", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getint32", 
        "syntax": "dataview.getInt32(byteOffset [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.getInt8": {
        "descr": "The getInt8() method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getInt8", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getint8", 
        "syntax": "dataview.getInt8(byteOffset)", 
        "type": "DataView"
    }, 
    "dataView.getUint16": {
        "descr": "The getUint16() method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getUint16", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getuint16", 
        "syntax": "dataview.getUint16(byteOffset [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.getUint32": {
        "descr": "The getUint32() method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getUint32", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getuint32", 
        "syntax": "dataview.getUint32(byteOffset [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.getUint8": {
        "descr": "The getUint8() method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the DataView.", 
        "name": "dataView.getUint8", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to read the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would read beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/getuint8", 
        "syntax": "dataview.getUint8(byteOffset)", 
        "type": "DataView"
    }, 
    "dataView.setFloat32": {
        "descr": "The setFloat32() method stores a signed 32-bit float (float) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setFloat32", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Optional Indicates whether the 32-bit float is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setfloat32", 
        "syntax": "dataview.setFloat32(byteOffset, value [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.setFloat64": {
        "descr": "The setFloat64() method stores a signed 64-bit float (double) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setFloat64", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Optional Indicates whether the 64-bit float is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setfloat64", 
        "syntax": "dataview.setFloat64(byteOffset, value [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.setInt16": {
        "descr": "The setInt16() method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setInt16", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setint16", 
        "syntax": "dataview.setInt16(byteOffset, value [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.setInt32": {
        "descr": "The setInt32() method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setInt32", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setint32", 
        "syntax": "dataview.setInt32(byteOffset, value [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.setInt8": {
        "descr": "The setInt8() method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setInt8", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setint8", 
        "syntax": "dataview.setInt8(byteOffset, value)", 
        "type": "DataView"
    }, 
    "dataView.setUint16": {
        "descr": "The setUint16() method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setUint16", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Optional Indicates whether the 16-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setuint16", 
        "syntax": "dataview.setUint16(byteOffset, value [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.setUint32": {
        "descr": "The setUint32() method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setUint32", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Optional Indicates whether the 32-bit int is stored in little- or big-endian format. ", 
                "name": "littleEndian"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setuint32", 
        "syntax": "dataview.setUint32(byteOffset, value [, littleEndian])", 
        "type": "DataView"
    }, 
    "dataView.setUint8": {
        "descr": "The setUint8() method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the DataView.", 
        "name": "dataView.setUint8", 
        "params": [
            {
                "descr": "The offset, in byte, from the start of the view where to store the data.", 
                "name": "byteOffset"
            }, 
            {
                "descr": "The value to set.", 
                "name": "value"
            }, 
            {
                "descr": "Thrown if the byteOffset is set such as it would store beyond the end of the view.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/dataview/setuint8", 
        "syntax": "dataview.setUint8(byteOffset, value)", 
        "type": "DataView"
    }, 
    "date.@@toPrimitive": {
        "descr": "The [@@toPrimitive]() method converts a Date object to a primitive value.", 
        "name": "date.@@toPrimitive", 
        "params": [], 
        "path": "javascript/global_objects/date/@@toprimitive", 
        "syntax": "Date()[Symbol.toPrimitive](hint);", 
        "type": "Date"
    }, 
    "date.getDate": {
        "descr": "The getDate() method returns the day of the month for the specified date according to local time.", 
        "name": "date.getDate", 
        "params": [], 
        "path": "javascript/global_objects/date/getdate", 
        "syntax": "dateObj.getDate()", 
        "type": "Date"
    }, 
    "date.getDay": {
        "descr": "The getDay() method returns the day of the week for the specified date according to local time, where 0 represents Sunday.", 
        "name": "date.getDay", 
        "params": [], 
        "path": "javascript/global_objects/date/getday", 
        "syntax": "dateObj.getDay()", 
        "type": "Date"
    }, 
    "date.getFullYear": {
        "descr": "The getFullYear() method returns the year of the specified date according to local time.", 
        "name": "date.getFullYear", 
        "params": [], 
        "path": "javascript/global_objects/date/getfullyear", 
        "syntax": "dateObj.getFullYear()", 
        "type": "Date"
    }, 
    "date.getHours": {
        "descr": "The getHours() method returns the hour for the specified date, according to local time.", 
        "name": "date.getHours", 
        "params": [], 
        "path": "javascript/global_objects/date/gethours", 
        "syntax": "dateObj.getHours()", 
        "type": "Date"
    }, 
    "date.getMilliseconds": {
        "descr": "The getMilliseconds() method returns the milliseconds in the specified date according to local time.", 
        "name": "date.getMilliseconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getmilliseconds", 
        "syntax": "dateObj.getMilliseconds()", 
        "type": "Date"
    }, 
    "date.getMinutes": {
        "descr": "The getMinutes() method returns the minutes in the specified date according to local time.", 
        "name": "date.getMinutes", 
        "params": [], 
        "path": "javascript/global_objects/date/getminutes", 
        "syntax": "dateObj.getMinutes()", 
        "type": "Date"
    }, 
    "date.getMonth": {
        "descr": "The getMonth() method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).", 
        "name": "date.getMonth", 
        "params": [], 
        "path": "javascript/global_objects/date/getmonth", 
        "syntax": "dateObj.getMonth()", 
        "type": "Date"
    }, 
    "date.getSeconds": {
        "descr": "The getSeconds() method returns the seconds in the specified date according to local time.", 
        "name": "date.getSeconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getseconds", 
        "syntax": "dateObj.getSeconds()", 
        "type": "Date"
    }, 
    "date.getTime": {
        "descr": "The getTime() method returns the numeric value corresponding to the time for the specified date according to universal time.", 
        "name": "date.getTime", 
        "params": [], 
        "path": "javascript/global_objects/date/gettime", 
        "syntax": "dateObj.getTime()", 
        "type": "Date"
    }, 
    "date.getTimezoneOffset": {
        "descr": "The getTimezoneOffset() method returns the time-zone offset from UTC, in minutes, for the current locale.", 
        "name": "date.getTimezoneOffset", 
        "params": [], 
        "path": "javascript/global_objects/date/gettimezoneoffset", 
        "syntax": "dateObj.getTimezoneOffset()", 
        "type": "Date"
    }, 
    "date.getUTCDate": {
        "descr": "The getUTCDate() method returns the day (date) of the month in the specified date according to universal time.", 
        "name": "date.getUTCDate", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcdate", 
        "syntax": "dateObj.getUTCDate()", 
        "type": "Date"
    }, 
    "date.getUTCDay": {
        "descr": "The getUTCDay() method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.", 
        "name": "date.getUTCDay", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcday", 
        "syntax": "dateObj.getUTCDay()", 
        "type": "Date"
    }, 
    "date.getUTCFullYear": {
        "descr": "The getUTCFullYear() method returns the year in the specified date according to universal time.", 
        "name": "date.getUTCFullYear", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcfullyear", 
        "syntax": "dateObj.getUTCFullYear()", 
        "type": "Date"
    }, 
    "date.getUTCHours": {
        "descr": "The getUTCHours() method returns the hours in the specified date according to universal time.", 
        "name": "date.getUTCHours", 
        "params": [], 
        "path": "javascript/global_objects/date/getutchours", 
        "syntax": "dateObj.getUTCHours()", 
        "type": "Date"
    }, 
    "date.getUTCMilliseconds": {
        "descr": "The getUTCMilliseconds() method returns the milliseconds in the specified date according to universal time.", 
        "name": "date.getUTCMilliseconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcmilliseconds", 
        "syntax": "dateObj.getUTCMilliseconds()", 
        "type": "Date"
    }, 
    "date.getUTCMinutes": {
        "descr": "The getUTCMinutes() method returns the minutes in the specified date according to universal time.", 
        "name": "date.getUTCMinutes", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcminutes", 
        "syntax": "dateObj.getUTCMinutes()", 
        "type": "Date"
    }, 
    "date.getUTCMonth": {
        "descr": "The getUTCMonth() returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).", 
        "name": "date.getUTCMonth", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcmonth", 
        "syntax": "dateObj.getUTCMonth()", 
        "type": "Date"
    }, 
    "date.getUTCSeconds": {
        "descr": "The getUTCSeconds() method returns the seconds in the specified date according to universal time.", 
        "name": "date.getUTCSeconds", 
        "params": [], 
        "path": "javascript/global_objects/date/getutcseconds", 
        "syntax": "dateObj.getUTCSeconds()", 
        "type": "Date"
    }, 
    "date.setDate": {
        "descr": "The setDate() method sets the day of the Date object relative to the beginning of the currently set month.", 
        "name": "date.setDate", 
        "params": [
            {
                "descr": "An integer representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setdate", 
        "syntax": "dateObj.setDate(dayValue)", 
        "type": "Date"
    }, 
    "date.setFullYear": {
        "descr": "The setFullYear() method sets the full year for a specified date according to local time. Returns new timestamp.", 
        "name": "date.setFullYear", 
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.", 
                "name": "yearValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 11 representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setfullyear", 
        "syntax": "dateObj.setFullYear(yearValue[, monthValue[, dayValue]])", 
        "type": "Date"
    }, 
    "date.setHours": {
        "descr": "The setHours() method sets the hours for a specified date according to local time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.", 
        "name": "date.setHours", 
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.", 
                "name": "hoursValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/sethours", 
        "syntax": "dateObj.setHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])", 
        "type": "Date"
    }, 
    "date.setMilliseconds": {
        "descr": "The setMilliseconds() method sets the milliseconds for a specified date according to local time.", 
        "name": "date.setMilliseconds", 
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "millisecondsValue"
            }
        ], 
        "path": "javascript/global_objects/date/setmilliseconds", 
        "syntax": "dateObj.setMilliseconds(millisecondsValue)", 
        "type": "Date"
    }, 
    "date.setMinutes": {
        "descr": "The setMinutes() method sets the minutes for a specified date according to local time.", 
        "name": "date.setMinutes", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setminutes", 
        "syntax": "dateObj.setMinutes(minutesValue[, secondsValue[, msValue]])", 
        "type": "Date"
    }, 
    "date.setMonth": {
        "descr": "The setMonth() method sets the month for a specified date according to the currently set year.", 
        "name": "date.setMonth", 
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "Optional. An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setmonth", 
        "syntax": "dateObj.setMonth(monthValue[, dayValue])", 
        "type": "Date"
    }, 
    "date.setSeconds": {
        "descr": "The setSeconds() method sets the seconds for a specified date according to local time.", 
        "name": "date.setSeconds", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the seconds.", 
                "name": "secondsValue"
            }, 
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds.", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setseconds", 
        "syntax": "dateObj.setSeconds(secondsValue[, msValue])", 
        "type": "Date"
    }, 
    "date.setTime": {
        "descr": "The setTime() method sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.", 
        "name": "date.setTime", 
        "params": [
            {
                "descr": "An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC.", 
                "name": "timeValue"
            }
        ], 
        "path": "javascript/global_objects/date/settime", 
        "syntax": "dateObj.setTime(timeValue)", 
        "type": "Date"
    }, 
    "date.setUTCDate": {
        "descr": "The setUTCDate() method sets the day of the month for a specified date according to universal time.", 
        "name": "date.setUTCDate", 
        "params": [
            {
                "descr": "An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcdate", 
        "syntax": "dateObj.setUTCDate(dayValue)", 
        "type": "Date"
    }, 
    "date.setUTCFullYear": {
        "descr": "The setUTCFullYear() method sets the full year for a specified date according to universal time.", 
        "name": "date.setUTCFullYear", 
        "params": [
            {
                "descr": "An integer specifying the numeric value of the year, for example, 1995.", 
                "name": "yearValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 11 representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "Optional. An integer between 1 and 31 representing the day of the month. ", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcfullyear", 
        "syntax": "dateObj.setUTCFullYear(yearValue[, monthValue[, dayValue]])", 
        "type": "Date"
    }, 
    "date.setUTCHours": {
        "descr": "The setUTCHours() method sets the hour for a specified date according to universal time, and returns the number of milliseconds since 1 January 1970 00:00:00 UTC until the time represented by the updated Date instance.", 
        "name": "date.setUTCHours", 
        "params": [
            {
                "descr": "An integer between 0 and 23, representing the hour.", 
                "name": "hoursValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutchours", 
        "syntax": "dateObj.setUTCHours(hoursValue[, minutesValue[, secondsValue[, msValue]]])", 
        "type": "Date"
    }, 
    "date.setUTCMilliseconds": {
        "descr": "The setUTCMilliseconds() method sets the milliseconds for a specified date according to universal time.", 
        "name": "date.setUTCMilliseconds", 
        "params": [
            {
                "descr": "A number between 0 and 999, representing the milliseconds.", 
                "name": "millisecondsValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcmilliseconds", 
        "syntax": "dateObj.setUTCMilliseconds(millisecondsValue)", 
        "type": "Date"
    }, 
    "date.setUTCMinutes": {
        "descr": "The setUTCMinutes() method sets the minutes for a specified date according to universal time.", 
        "name": "date.setUTCMinutes", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the minutes.", 
                "name": "minutesValue"
            }, 
            {
                "descr": "Optional. An integer between 0 and 59, representing the seconds. ", 
                "name": "secondsValue"
            }, 
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds. ", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcminutes", 
        "syntax": "dateObj.setUTCMinutes(minutesValue[, secondsValue[, msValue]])", 
        "type": "Date"
    }, 
    "date.setUTCMonth": {
        "descr": "The setUTCMonth() method sets the month for a specified date according to universal time.", 
        "name": "date.setUTCMonth", 
        "params": [
            {
                "descr": "An integer between 0 and 11, representing the months January through December.", 
                "name": "monthValue"
            }, 
            {
                "descr": "Optional. An integer from 1 to 31, representing the day of the month.", 
                "name": "dayValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcmonth", 
        "syntax": "dateObj.setUTCMonth(monthValue[, dayValue])", 
        "type": "Date"
    }, 
    "date.setUTCSeconds": {
        "descr": "The setUTCSeconds() method sets the seconds for a specified date according to universal time.", 
        "name": "date.setUTCSeconds", 
        "params": [
            {
                "descr": "An integer between 0 and 59, representing the seconds.", 
                "name": "secondsValue"
            }, 
            {
                "descr": "Optional. A number between 0 and 999, representing the milliseconds.", 
                "name": "msValue"
            }
        ], 
        "path": "javascript/global_objects/date/setutcseconds", 
        "syntax": "dateObj.setUTCSeconds(secondsValue[, msValue])", 
        "type": "Date"
    }, 
    "date.toDateString": {
        "descr": "The toDateString() method returns the date portion of a Date object in human readable form in American English.", 
        "name": "date.toDateString", 
        "params": [], 
        "path": "javascript/global_objects/date/todatestring", 
        "syntax": "dateObj.toDateString()", 
        "type": "Date"
    }, 
    "date.toISOString": {
        "descr": "The toISOString() method returns a string in simplified extended ISO format (ISO 8601), which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or \u00b1YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"Z\".", 
        "name": "date.toISOString", 
        "params": [], 
        "path": "javascript/global_objects/date/toisostring", 
        "syntax": "dateObj.toISOString()", 
        "type": "Date"
    }, 
    "date.toJSON": {
        "descr": "The toJSON() method returns a string representation of the Date object.", 
        "name": "date.toJSON", 
        "params": [], 
        "path": "javascript/global_objects/date/tojson", 
        "syntax": "dateObj.toJSON()", 
        "type": "Date"
    }, 
    "date.toLocaleDateString": {
        "descr": "The toLocaleDateString() method returns a string with a language sensitive representation of the date portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "date.toLocaleDateString", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties: localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocaledatestring", 
        "syntax": "dateObj.toLocaleDateString([locales [, options]])", 
        "type": "Date"
    }, 
    "date.toLocaleString": {
        "descr": "The toLocaleString() method returns a string with a language sensitive representation of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "date.toLocaleString", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties: localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocalestring", 
        "syntax": "dateObj.toLocaleString([locales[, options]])", 
        "type": "Date"
    }, 
    "date.toLocaleTimeString": {
        "descr": "The toLocaleTimeString() method returns a string with a language sensitive representation of the time portion of this date. The new locales and options arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the locales and options arguments, the locale used and the form of the string returned are entirely implementation dependent.", 
        "name": "date.toLocaleTimeString", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Calendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".", 
                "name": "ca"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties: localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The time zone to use. The only value implementations must recognize is \"UTC\"; the default is the runtime's default time zone. ", 
                "name": "timeZone"
            }, 
            {
                "descr": "Whether to use 12-hour time (as opposed to 24-hour time). ", 
                "name": "hour12"
            }, 
            {
                "descr": "The format matching algorithm to use. ", 
                "name": "formatMatcher"
            }, 
            {
                "descr": "The representation of the weekday. ", 
                "name": "weekday"
            }, 
            {
                "descr": "The representation of the era. Possible values are \"narrow\", \"short\", \"long\".", 
                "name": "era"
            }, 
            {
                "descr": "The representation of the year. ", 
                "name": "year"
            }, 
            {
                "descr": "The representation of the month. ", 
                "name": "month"
            }, 
            {
                "descr": "The representation of the day. Possible values are \"numeric\", \"2-digit\".", 
                "name": "day"
            }, 
            {
                "descr": "The representation of the hour. ", 
                "name": "hour"
            }, 
            {
                "descr": "The representation of the minute. ", 
                "name": "minute"
            }, 
            {
                "descr": "The representation of the second. ", 
                "name": "second"
            }, 
            {
                "descr": "The representation of the time zone name. ", 
                "name": "timeZoneName"
            }
        ], 
        "path": "javascript/global_objects/date/tolocaletimestring", 
        "syntax": "dateObj.toLocaleTimeString([locales[, options]])", 
        "type": "Date"
    }, 
    "date.toString": {
        "descr": "The toString() method returns a string representing the specified Date object.", 
        "name": "date.toString", 
        "params": [], 
        "path": "javascript/global_objects/date/tostring", 
        "syntax": "dateObj.toString()", 
        "type": "Date"
    }, 
    "date.toTimeString": {
        "descr": "The toTimeString() method returns the time portion of a Date object in human readable form in American English.", 
        "name": "date.toTimeString", 
        "params": [], 
        "path": "javascript/global_objects/date/totimestring", 
        "syntax": "dateObj.toTimeString()", 
        "type": "Date"
    }, 
    "date.toUTCString": {
        "descr": "The toUTCString() method converts a date to a string, using the UTC time zone.", 
        "name": "date.toUTCString", 
        "params": [], 
        "path": "javascript/global_objects/date/toutcstring", 
        "syntax": "dateObj.toUTCString()", 
        "type": "Date"
    }, 
    "date.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Date object.", 
        "name": "date.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/date/valueof", 
        "syntax": "dateObj.valueOf()", 
        "type": "Date"
    }, 
    "dblclick": {
        "descr": "This method is a shortcut for .on( \"dblclick\", handler ) in the first two variations, and .trigger( \"dblclick\" ) in the third. The dblclick event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:", 
        "name": "dblclick", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/dblclick", 
        "syntax": ".dblclick( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "debugger": {
        "descr": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.", 
        "name": "debugger", 
        "params": [], 
        "path": "javascript/statements/debugger", 
        "syntax": "debugger; Examples The following example shows code where a debugger statement has been inserted, to invoke a debugger (if one exists) when the function is called.", 
        "type": "Statements"
    }, 
    "decodeURI": {
        "descr": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine.", 
        "name": "decodeURI", 
        "params": [
            {
                "descr": "A complete, encoded Uniform Resource Identifier.", 
                "name": "encodedURI"
            }
        ], 
        "path": "javascript/global_objects/decodeuri", 
        "syntax": "decodeURI(encodedURI)", 
        "type": "Global Objects"
    }, 
    "decodeURIComponent": {
        "descr": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine.", 
        "name": "decodeURIComponent", 
        "params": [
            {
                "descr": "An encoded component of a Uniform Resource Identifier.", 
                "name": "encodedURI"
            }
        ], 
        "path": "javascript/global_objects/decodeuricomponent", 
        "syntax": "decodeURIComponent(encodedURI)", 
        "type": "Global Objects"
    }, 
    "default": {
        "descr": "The default keyword can be used in two situations in JavaScript: within a switch statement, or with an export statement.", 
        "name": "default", 
        "params": [], 
        "path": "javascript/statements/default", 
        "syntax": "switch statement: switch (expression) {  case value1:    //Statements executed when the result of expression matches value1    [break;]  default:    //Statements executed when none of the values match the value of the expression    [break;]}", 
        "type": "Statements"
    }, 
    "defaultStatus": {
        "descr": "Obsolete since Gecko 23 (Firefox 23 / Thunderbird 23 / SeaMonkey 2.20)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "window.defaultStatus", 
        "params": [], 
        "path": "dom/window/defaultstatus", 
        "syntax": "var sMsg = window.defaultStatus;window.defaultStatus = sMsg; Parameters  sMsg is a string containing the text to be displayed by default in the statusbar.  Example <html>  <body onload=\"window.defaultStatus='hello!';\"/>   <button onclick=\"window.confirm('Are you sure you want to quit?');\n or \">confirm</button>  </body> </html>);", 
        "type": "Window"
    }, 
    "deferred.always": {
        "descr": "The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the alwaysCallbacks are called. Since deferred.always() returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional .always() methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the resolve, reject, resolveWith or rejectWith method calls. For more information, see the documentation for Deferred object.", 
        "name": "deferred.always", 
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that is called when the Deferred is resolved or rejected.", 
                "name": "alwaysCallbacks"
            }, 
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected.", 
                "name": "alwaysCallbacks"
            }
        ], 
        "path": "jquery/deferred.always", 
        "syntax": "deferred.always( alwaysCallbacks [, alwaysCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.done": {
        "descr": "The deferred.done() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since deferred.done() returns the deferred object, other methods of the deferred object can be chained to this one, including additional .done() methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the resolve or resolveWith method call in the order they were added. For more information, see the documentation for Deferred object.", 
        "name": "deferred.done", 
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that are called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }, 
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }
        ], 
        "path": "jquery/deferred.done", 
        "syntax": "deferred.done( doneCallbacks [, doneCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.fail": {
        "descr": "The deferred.fail() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since deferred.fail() returns the deferred object, other methods of the deferred object can be chained to this one, including additional deferred.fail() methods. The failCallbacks are executed using the arguments provided to the deferred.reject() or deferred.rejectWith() method call in the order they were added. For more information, see the documentation for Deferred object.", 
        "name": "deferred.fail", 
        "params": [
            {
                "descr": "Type: Function()  A function, or array of functions, that are called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }, 
            {
                "descr": "Type: Function()  Optional additional functions, or arrays of functions, that are called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }
        ], 
        "path": "jquery/deferred.fail", 
        "syntax": "deferred.fail( failCallbacks [, failCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.isRejected": {
        "descr": "As of jQuery 1.7 this API has been deprecated; please use deferred.state() instead.", 
        "name": "deferred.isRejected", 
        "params": [], 
        "path": "jquery/deferred.isrejected", 
        "syntax": "deferred.isRejected() Returns: Booleanversion deprecated: 1.7, removed: 1.8", 
        "type": "Deferred Object"
    }, 
    "deferred.isResolved": {
        "descr": "This API is deprecated as of jQuery 1.7 and removed as of jQuery 1.8; please use deferred.state() instead.", 
        "name": "deferred.isResolved", 
        "params": [], 
        "path": "jquery/deferred.isresolved", 
        "syntax": "deferred.isResolved() Returns: Booleanversion deprecated: 1.7, removed: 1.8", 
        "type": "Deferred Object"
    }, 
    "deferred.notify": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.notify", 
        "params": [
            {
                "descr": "Type: Object   Optional arguments that are passed to the progressCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.notify", 
        "syntax": "deferred.notify( args ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.notifyWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.notifyWith", 
        "params": [
            {
                "descr": "Type: Object   Context passed to the progressCallbacks as the this object.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the progressCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.notifywith", 
        "syntax": "deferred.notifyWith( context [, args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.pipe": {
        "descr": "Deprecation Notice:As of jQuery 1.8, the deferred.pipe() method is deprecated. The deferred.then() method, which replaces it, should be used instead.", 
        "name": "deferred.pipe", 
        "params": [
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is resolved.", 
                "name": "doneFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.", 
                "name": "failFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is resolved.", 
                "name": "doneFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.", 
                "name": "failFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when progress notifications are sent to the Deferred.", 
                "name": "progressFilter"
            }
        ], 
        "path": "jquery/deferred.pipe", 
        "syntax": "deferred.pipe( [doneFilter ] [, failFilter ] ) Returns: Promiseversion deprecated: 1.8", 
        "type": "Deferred Object"
    }, 
    "deferred.progress": {
        "descr": "The deferred.progress() method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling notify or notifyWith, the progressCallbacks are called. Since deferred.progress() returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any progressCallbacks added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the .notify() or notifyWith() call. For more information, see the documentation for jQuery.Deferred().", 
        "name": "deferred.progress", 
        "params": [
            {
                "descr": "Type: Function() or Array   A function, or array of functions, to be called when the Deferred generates progress notifications.", 
                "name": "progressCallbacks"
            }, 
            {
                "descr": "Type: Function() or Array   Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications.", 
                "name": "progressCallbacks"
            }
        ], 
        "path": "jquery/deferred.progress", 
        "syntax": "deferred.progress( progressCallbacks [, progressCallbacks ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.promise": {
        "descr": "The deferred.promise() method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (then, done, fail, always, pipe, progress, state and promise), but not ones that change the state (resolve, reject, notify, resolveWith, rejectWith, and notifyWith).", 
        "name": "deferred.promise", 
        "params": [
            {
                "descr": "Type: Object  Object onto which the promise methods have to be attached", 
                "name": "target"
            }
        ], 
        "path": "jquery/deferred.promise", 
        "syntax": "deferred.promise( [target ] ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "deferred.reject": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.reject", 
        "params": [
            {
                "descr": "Type: Anything   Optional arguments that are passed to the failCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.reject", 
        "syntax": "deferred.reject( [args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.rejectWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.rejectWith", 
        "params": [
            {
                "descr": "Type: Object   Context passed to the failCallbacks as the this object.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the failCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.rejectwith", 
        "syntax": "deferred.rejectWith( context [, args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.resolve": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.resolve", 
        "params": [
            {
                "descr": "Type: Anything   Optional arguments that are passed to the doneCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.resolve", 
        "syntax": "deferred.resolve( [args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.resolveWith": {
        "descr": "Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through deferred.promise().", 
        "name": "deferred.resolveWith", 
        "params": [
            {
                "descr": "Type: Object   Context passed to the doneCallbacks as the this object.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Array   An optional array of arguments that are passed to the doneCallbacks.", 
                "name": "args"
            }
        ], 
        "path": "jquery/deferred.resolvewith", 
        "syntax": "deferred.resolveWith( context [, args ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "deferred.state": {
        "descr": "The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:", 
        "name": "deferred.state", 
        "params": [], 
        "path": "jquery/deferred.state", 
        "syntax": "deferred.state() Returns: String", 
        "type": "Deferred Object"
    }, 
    "deferred.then": {
        "descr": "Prior to jQuery 1.8, the arguments could be a function or an array of functions.", 
        "name": "deferred.then", 
        "params": [
            {
                "descr": "Type: Function()  A function that is called when the Deferred is resolved.", 
                "name": "doneFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when the Deferred is rejected.", 
                "name": "failFilter"
            }, 
            {
                "descr": "Type: Function()  An optional function that is called when progress notifications are sent to the Deferred.", 
                "name": "progressFilter"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is resolved.", 
                "name": "doneCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred is rejected.", 
                "name": "failCallbacks"
            }, 
            {
                "descr": "Type: Function()  A function, or array of functions, called when the Deferred notifies progress.", 
                "name": "progressCallbacks"
            }
        ], 
        "path": "jquery/deferred.then", 
        "syntax": "deferred.then( doneFilter [, failFilter ] [, progressFilter ] ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "defineProperties": {
        "descr": "The Object.defineProperties() method defines new or modifies existing properties directly on an object, returning the object.", 
        "name": "Object.defineProperties", 
        "params": [
            {
                "descr": "The object on which to define or modify properties.", 
                "name": "obj"
            }, 
            {
                "descr": "An object whose own enumerable properties constitute descriptors for the properties to be defined or modified. ", 
                "name": "props"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ", 
                "name": "enumerable"
            }, 
            {
                "descr": "The value associated with the property. ", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ", 
                "name": "set"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperties", 
        "syntax": "Object.defineProperties(obj, props)", 
        "type": "Object"
    }, 
    "defineProperty": {
        "descr": "The Object.defineProperty() method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.", 
        "name": "Object.defineProperty", 
        "params": [
            {
                "descr": "The object on which to define the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property to be defined or modified.", 
                "name": "prop"
            }, 
            {
                "descr": "The descriptor for the property being defined or modified.", 
                "name": "descriptor"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. ", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object. ", 
                "name": "enumerable"
            }, 
            {
                "descr": "The value associated with the property. ", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed with an assignment operator. ", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter. ", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter. ", 
                "name": "set"
            }
        ], 
        "path": "javascript/global_objects/object/defineproperty", 
        "syntax": "Object.defineProperty(obj, prop, descriptor)", 
        "type": "Object"
    }, 
    "delay": {
        "descr": "Added to jQuery in version 1.4, the .delay() method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will not delay the no-arguments forms of .show() or .hide() which do not use the effects queue.", 
        "name": "delay", 
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the number of milliseconds to delay execution of the next item in the queue.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/delay", 
        "syntax": ".delay( duration [, queueName ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "delegate": {
        "descr": "As of jQuery 1.7, .delegate() has been superseded by the .on() method. For earlier versions, however, it remains the most effective means to use event delegation. More information on event binding and delegation is in the .on() method. In general, these are the equivalent templates for the two methods:", 
        "name": "delegate", 
        "params": [
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  A selector to filter the elements that trigger the event.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: PlainObject  A plain object of one or more event types and functions to execute for them.", 
                "name": "events"
            }
        ], 
        "path": "jquery/delegate", 
        "syntax": ".delegate( selector, eventType, handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "delete": {
        "descr": "The delete operator removes a property from an object.", 
        "name": "delete", 
        "params": [
            {
                "descr": "The name of an object, or an expression evaluating to an object.", 
                "name": "object"
            }, 
            {
                "descr": "The property to delete.", 
                "name": "property"
            }
        ], 
        "path": "javascript/operators/delete", 
        "syntax": "delete expression  where expression should evaluate to a property reference, e.g.: delete object.propertydelete object['property'] Parameters  object The name of an object, or an expression evaluating to an object. property The property to delete.  Return value Throws in strict mode if the property is an own non-configurable property (returns false in non-strict). Returns true", 
        "type": "Operators"
    }, 
    "dequeue": {
        "descr": "When .dequeue() is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause .dequeue() to be called, so that the sequence can continue.", 
        "name": "dequeue", 
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/dequeue", 
        "syntax": ".dequeue( [queueName ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "detach": {
        "descr": "The .detach() method is the same as .remove(), except that .detach() keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.", 
        "name": "detach", 
        "params": [
            {
                "descr": "Type: Selector  A selector expression that filters the set of matched elements to be removed.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/detach", 
        "syntax": ".detach( [selector ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "devicePixelRatio": {
        "descr": "The Window.devicePixelRatio read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one device independent pixels(dips).", 
        "name": "window.devicePixelRatio", 
        "params": [], 
        "path": "dom/window/devicepixelratio", 
        "syntax": "value = window.devicePixelRatio; Specifications    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'Window.devicePixelRatio' in that specification. Working Draft Initial definition    Browser compatibility", 
        "type": "Window"
    }, 
    "die": {
        "descr": "Any handler that has been attached with .live() can be removed with .die(). This method is analogous to calling .off() with no arguments, which is used to remove all handlers attached with .on(). See the discussions of .live() and .off() for further details.", 
        "name": "die", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or keydown.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: String  The function that is no longer to be executed.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: PlainObject  A plain object of one or more event types, such as click or keydown and their corresponding functions that are no longer to be executed.", 
                "name": "events"
            }
        ], 
        "path": "jquery/die", 
        "syntax": ".die() Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Events"
    }, 
    "directories": {
        "descr": "Obsolete since Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "window.directories", 
        "params": [], 
        "path": "dom/window/directories", 
        "syntax": "var dirBar = window.directories; Parameters dirBar is an object of the type BarProp. Example <script>  function dirs() {   alert(window.directories);\n or  } </script>);", 
        "type": "Window"
    }, 
    "do...while": {
        "descr": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.", 
        "name": "do...while", 
        "params": [
            {
                "descr": "A statement that is executed at least once and is re-executed each time the condition evaluates to true. ", 
                "name": "statement"
            }, 
            {
                "descr": "An expression evaluated after each pass through the loop. ", 
                "name": "condition"
            }
        ], 
        "path": "javascript/statements/do...while", 
        "syntax": "do   statementwhile (condition);", 
        "type": "Statements"
    }, 
    "document": {
        "descr": "Returns a reference to the document contained in the window.", 
        "name": "window.document", 
        "params": [], 
        "path": "dom/window/document", 
        "syntax": "doc = window.document  Parameters  doc is an object reference to a document.  Example <!DOCTYPE html><html><head>   <title>Hello, World!</title></head><body><script type=\"text/javascript\">   var doc = window.document;   console.log(doc.title);\n or  // Hello, World!</script></body></html>);", 
        "type": "Window"
    }, 
    "document.activeElement": {
        "descr": "Returns the currently focused element, that is, the element that will get keystroke events if the user types any. This attribute is read only.", 
        "name": "document.activeElement", 
        "params": [], 
        "path": "dom/document/activeelement", 
        "syntax": "var curElement = document.activeElement; Example <!DOCTYPE HTML><html><head>    <script type=\"text/javascript\" charset=\"utf-8\">    function init() {        function onMouseUp(e) {            console.log(e);\n or             var outputElement = document.getElementById('output-element');\n or             var outputText = document.getElementById('output-text');\n or             var selectedTextArea = document.activeElement;            var selection = selectedTextArea.value.substring(            selectedTextArea.selectionStart, selectedTextArea.selectionEnd);\n or             outputElement.innerHTML = selectedTextArea.id;            outputText.innerHTML = selection;        }        document.getElementById(\"ta-example-one\").addEventListener(\"mouseup\", onMouseUp, false);\n or         document.getElementById(\"ta-example-two\").addEventListener(\"mouseup\", onMouseUp, false);\n or     }    </script></head><body onload=\"init()\"><div>    Select some text from one of the Textareas below:</div><form id=\"frm-example\" action=\"#\" accept-charset=\"utf-8\"><textarea name=\"ta-example-one\" id=\"ta-example-one\" rows=\"8\" cols=\"40\">This is Textarea Example One: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tincidunt, lorem a porttitor molestie, odio nibh iaculis libero, et accumsan nunc orci eu dui.</textarea><textarea name=\"ta-example-two\" id=\"ta-example-two\" rows=\"8\" cols=\"40\">This is Textarea Example Two:Fusce ullamcorper, nisl ac porttitor adipiscing, urna orci egestas libero, ut accumsan orci lacus laoreet diam. Morbi sed euismod diam.</textarea></form>Active Element Id: <span id=\"output-element\"></span><br/>Selected Text: <span id=\"output-text\"></span></body></html>);", 
        "type": "Document"
    }, 
    "document.adoptNode": {
        "descr": "Adopts a node from an external document. The node and its subtree is removed from the document it's in (if any), and its ownerDocument is changed to the current document. The node can then be inserted into the current document.", 
        "name": "document.adoptNode", 
        "params": [
            {
                "descr": "is the adopted node that can be used in the current document. ", 
                "name": "node"
            }, 
            {
                "descr": "is the node from another document to be adopted.", 
                "name": "externalNode"
            }
        ], 
        "path": "dom/document/adoptnode", 
        "syntax": "node = document.adoptNode(externalNode);", 
        "type": "Document"
    }, 
    "document.body": {
        "descr": "Returns the <body> or <frameset> node of the current document, or null if no such element exists.", 
        "name": "document.body", 
        "params": [], 
        "path": "dom/document/body", 
        "syntax": "var objRef = document.body; document.body = objRef; Example // in HTML: <body id=\"oldBodyElement\"></body>alert(document.body.id);\n or  // \"oldBodyElement\"var aNewBodyElement = document.createElement(\"body\");\n or aNewBodyElement.id = \"newBodyElement\";document.body = aNewBodyElement;alert(document.body.id);\n or  // \"newBodyElement\");", 
        "type": "Document"
    }, 
    "document.caretPositionFromPoint": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "document.caretPositionFromPoint", 
        "params": [
            {
                "descr": "A horizontal position within the current viewport.", 
                "name": "x"
            }, 
            {
                "descr": "A vertical position within the current viewport.", 
                "name": "y"
            }, 
            {
                "descr": "or y are negative, outside viewport, or there is no text entry node.", 
                "name": "x"
            }
        ], 
        "path": "dom/document/caretpositionfrompoint", 
        "syntax": "CaretPosition is returned, containing the found DOM node and the character offset in that node. Syntax var caretPosition = document.caretPositionFromPoint(float x, float y);", 
        "type": "Document"
    }, 
    "document.characterSet": {
        "descr": "The Document.characterSet read-only property returns the character encoding of the current document. The character encoding is the character set used for rendering the document, which may be different from the encoding specified by the page. (The user can override the encoding.).", 
        "name": "document.characterSet", 
        "params": [], 
        "path": "dom/document/characterset", 
        "syntax": "var string = document.characterSet Examples <button onclick=\"console.log(document.characterSet);\n or \">  Show character set</button><!-- logs document's character set, such as \"ISO-8859-1\" or \"UTF-8\" -->);", 
        "type": "Document"
    }, 
    "document.close": {
        "descr": "The document.close() method finishes writing to a document, opened with document.open().", 
        "name": "document.close", 
        "params": [], 
        "path": "dom/document/close", 
        "syntax": "document.close();", 
        "type": "Document"
    }, 
    "document.compatMode": {
        "descr": "Indicates whether the document is rendered in Quirks mode or Standards mode.", 
        "name": "document.compatMode", 
        "params": [
            {
                "descr": "Is an enumerated value that can be:", 
                "name": "mode"
            }
        ], 
        "path": "dom/document/compatmode", 
        "syntax": "mode = document.compatMode  Values  \"BackCompat\" if the document is in quirks mode; \"CSS1Compat\" if the document is in no-quirks (also known as \"standards\") mode or limited-quirks (also known as \"almost standards\") mode.   mode", 
        "type": "Document"
    }, 
    "document.cookie": {
        "descr": "Get and set the cookies associated with the current document. For a general library see this simple cookie framework.", 
        "name": "document.cookie", 
        "params": [
            {
                "descr": "The function to be executed (function).", 
                "name": "callback"
            }, 
            {
                "descr": "The this object (object or null).", 
                "name": "thisObject Optional"
            }, 
            {
                "descr": "The arguments of the callback function.", 
                "name": "argumentToPass1, argumentToPass2, argumentToPassN Optional"
            }, 
            {
                "descr": "The identifier to check, i.e. the name of the cookie (string)", 
                "name": "identifier"
            }, 
            {
                "descr": "A boolean expressing whether the cookie will use the local path (true) instead of the global one (false or undefined) (boolean or undefined)", 
                "name": "onlyHere Optional"
            }
        ], 
        "path": "dom/document/cookie", 
        "syntax": "allCookies = document.cookie; In the code above allCookies is a string containing a semicolon-separated list of all cookies (i.e. key=value pairs)", 
        "type": "Document"
    }, 
    "document.createAttribute": {
        "descr": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.", 
        "name": "document.createAttribute", 
        "params": [], 
        "path": "dom/document/createattribute", 
        "syntax": "attribute = document.createAttribute(name)", 
        "type": "Document"
    }, 
    "document.createCDATASection": {
        "descr": "createCDATASection() creates a new CDATA section node, and returns it.", 
        "name": "document.createCDATASection", 
        "params": [], 
        "path": "dom/document/createcdatasection", 
        "syntax": "CDATASectionNode = document.createCDATASection(data)", 
        "type": "Document"
    }, 
    "document.createComment": {
        "descr": "createComment() creates a new comment node, and returns it.", 
        "name": "document.createComment", 
        "params": [
            {
                "descr": "A string containing the data to be added to the Comment.", 
                "name": "data"
            }
        ], 
        "path": "dom/document/createcomment", 
        "syntax": "CommentNode = document.createComment(data)", 
        "type": "Document"
    }, 
    "document.createDocumentFragment": {
        "descr": "Creates a new empty DocumentFragment.", 
        "name": "document.createDocumentFragment", 
        "params": [], 
        "path": "dom/document/createdocumentfragment", 
        "syntax": "var docFragment = document.createDocumentFragment();", 
        "type": "Document"
    }, 
    "document.createElement": {
        "descr": "In an HTML document, the Document.createElement() method creates the specified HTML element or an HTMLUnknownElement if the given element name isn't a known one.", 
        "name": "document.createElement", 
        "params": [], 
        "path": "dom/document/createelement", 
        "syntax": "var element = document.createElement(tagName[, options]);", 
        "type": "Document"
    }, 
    "document.createEvent": {
        "descr": "Many methods used with createEvent, such as initCustomEvent, are deprecated. Use event constructors instead.", 
        "name": "document.createEvent", 
        "params": [], 
        "path": "dom/document/createevent", 
        "syntax": "var event = document.createEvent(type);", 
        "type": "Document"
    }, 
    "document.createExpression": {
        "descr": "This method compiles an XPathExpression which can then be used for (repeated) evaluations.", 
        "name": "document.createExpression", 
        "params": [], 
        "path": "dom/document/createexpression", 
        "syntax": "xpathExpr = document.createExpression(xpathText, namespaceURLMapper);", 
        "type": "Document"
    }, 
    "document.createNodeIterator": {
        "descr": "Returns a new NodeIterator object.", 
        "name": "document.createNodeIterator", 
        "params": [
            {
                "descr": "The root node at which to begin the NodeIterator's traversal.", 
                "name": "root"
            }, 
            {
                "descr": "Is an optional unsigned long representing a bitmask created by combining the constant properties of NodeFilter. ", 
                "name": "whatToShow Optional"
            }, 
            {
                "descr": "An object implementing the NodeFilter interface; its acceptNode() method will be called for each node in the subtree based at root which is accepted as included by the whatToShow flag to determine whether or not to include it in the list of iterable nodes (a simple callback function may also be used instead). The method should return one of NodeFilter.FILTER_ACCEPT, NodeFilter.FILTER_REJECT, or NodeFilter.FILTER_SKIP. See the Example.", 
                "name": "filter Optional"
            }
        ], 
        "path": "dom/document/createnodeiterator", 
        "syntax": "var nodeIterator = document.createNodeIterator(root, whatToShow, filter);", 
        "type": "Document"
    }, 
    "document.createRange": {
        "descr": "Returns a new Range object.", 
        "name": "document.createRange", 
        "params": [], 
        "path": "dom/document/createrange", 
        "syntax": "range = document.createRange();", 
        "type": "Document"
    }, 
    "document.createTextNode": {
        "descr": "Creates a new Text node.", 
        "name": "document.createTextNode", 
        "params": [], 
        "path": "dom/document/createtextnode", 
        "syntax": "var text = document.createTextNode(data);", 
        "type": "Document"
    }, 
    "document.createTreeWalker": {
        "descr": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.", 
        "name": "document.createTreeWalker", 
        "params": [
            {
                "descr": "Is the root Node of this TreeWalker traversal. ", 
                "name": "root"
            }, 
            {
                "descr": "Is an optional unsigned long representing a bitmask created by combining the constant properties of NodeFilter. ", 
                "name": "whatToShow Optional"
            }, 
            {
                "descr": "Is an optional NodeFilter, that is an object with a method acceptNode, which is called by the TreeWalker to determine whether or not to accept a node that has passed the whatToShow check.", 
                "name": "filter Optional"
            }, 
            {
                "descr": "Is a Boolean flag indicating if when discarding an EntityReference its whole sub-tree must be discarded at the same time.", 
                "name": "entityReferenceExpansion Optional"
            }
        ], 
        "path": "dom/document/createtreewalker", 
        "syntax": "treeWalker = document.createTreeWalker(root, whatToShow, filter, entityReferenceExpansion);", 
        "type": "Document"
    }, 
    "document.currentScript": {
        "descr": "Returns the <script> element whose script is currently being processed.", 
        "name": "document.currentScript", 
        "params": [], 
        "path": "dom/document/currentscript", 
        "syntax": "var curScriptElement = document.currentScript; Example This example checks to see if the script is being executed asynchronously: if (document.currentScript.async) {  console.log(\"Executing asynchronously\");\n or } else {  console.log(\"Executing synchronously\");\n or });", 
        "type": "Document"
    }, 
    "document.defaultView": {
        "descr": "In browsers, document.defaultView returns the window object associated with a document, or null if none available.", 
        "name": "document.defaultView", 
        "params": [], 
        "path": "dom/document/defaultview", 
        "syntax": "var win = document.defaultView; This property is read-only. Notes According to quirksmode, defaultView is not supported in IE until IE 9. Specification  HTML5: defaultView DOM Level 2 Views: defaultView DOM Level 3 Views (Only developed to Working Group Note and not implemented)       Edit this page on MDN", 
        "type": "Document"
    }, 
    "document.designMode": {
        "descr": "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". In IE6-10, the value is capitalized.", 
        "name": "document.designMode", 
        "params": [], 
        "path": "dom/document/designmode", 
        "syntax": "var mode = document.designMode;document.designMode = \"on\";document.designMode = \"off\"; Example Make an <iframe>", 
        "type": "Document"
    }, 
    "document.dir": {
        "descr": "The Document.dir property is a DOMString representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right.", 
        "name": "document.dir", 
        "params": [], 
        "path": "dom/document/dir", 
        "syntax": "dirStr = document.dir;document.dir = dirStr; Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'Document.dir' in that specification. Living Standard Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support ? (Yes) [1] (Yes) ? ?         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support ? (Yes) [1] (Yes) ? ?     [1] Before Firefox 23, the Document.dir", 
        "type": "Document"
    }, 
    "document.doctype": {
        "descr": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.", 
        "name": "document.doctype", 
        "params": [], 
        "path": "dom/document/doctype", 
        "syntax": "doctype = document.doctype;  doctype is a read-only property.  Example var doctypeObj = document.doctype;console.log(  \"doctypeObj.name: \"           + doctypeObj.name            + \"\\n\" +  \"doctypeObj.internalSubset: \" + doctypeObj.internalSubset  + \"\\n\" +  \"doctypeObj.publicId: \"       + doctypeObj.publicId        + \"\\n\" +  \"doctypeObj.systemId: \"       + doctypeObj.systemId);", 
        "type": "Document"
    }, 
    "document.documentElement": {
        "descr": "The Document.documentElement read-only property returns the Element that is the root element of the document (for example, the <html> element for HTML documents).", 
        "name": "document.documentElement", 
        "params": [], 
        "path": "dom/document/documentelement", 
        "syntax": "var\u00a0element = document.documentElement; Example var rootElement = document.documentElement;var firstTier = rootElement.childNodes;// firstTier is the NodeList of the direct children of the root elementfor (var i = 0; i < firstTier.length; i++) {   // do something with each direct kid of the root element   // as firstTier[i]}", 
        "type": "Document"
    }, 
    "document.documentURI": {
        "descr": "The documentURI property of the Document interface returns the document location as a string.", 
        "name": "document.documentURI", 
        "params": [], 
        "path": "dom/document/documenturi", 
        "syntax": "var string = document.documentURI; Notes HTML documents have a document.URL property which returns the same value. Unlike URL, documentURI is available on all types of documents. Specifications    Specification Status Comment   DOM4The definition of 'documentURI' in that specification. Recommendation     Document Object Model (DOM) Level 3 Core SpecificationThe definition of 'documentURI' in that specification. Recommendation Initial definition    Browser compatibility", 
        "type": "Document"
    }, 
    "document.domain": {
        "descr": "Gets/sets the domain portion of the origin of the current document, as used by the same origin policy.", 
        "name": "document.domain", 
        "params": [], 
        "path": "dom/document/domain", 
        "syntax": "var domainString = document.domain;document.domain = string; Example // for document www.example.xxx/good.html,// this script closes the windowvar badDomain = \"www.example.xxx\";if (document.domain == badDomain)   window.close();\n or  // Just an example - window.close() sometimes has no effect.);", 
        "type": "Document"
    }, 
    "document.elementFromPoint": {
        "descr": "The elementFromPoint() method of the Document interface returns the topmost element at the specified coordinates.", 
        "name": "document.elementFromPoint", 
        "params": [
            {
                "descr": "A horizontal position within the current viewport.", 
                "name": "x"
            }, 
            {
                "descr": "A vertical position within the current viewport.", 
                "name": "y"
            }
        ], 
        "path": "dom/document/elementfrompoint", 
        "syntax": "var element = document.elementFromPoint(x, y);", 
        "type": "Document"
    }, 
    "document.elementsFromPoint": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "document.elementsFromPoint", 
        "params": [
            {
                "descr": "A horizontal position within the current viewport.", 
                "name": "x"
            }, 
            {
                "descr": "A vertical position within the current viewport.", 
                "name": "y"
            }
        ], 
        "path": "dom/document/elementsfrompoint", 
        "syntax": "elementsFromPoint()", 
        "type": "Document"
    }, 
    "document.enableStyleSheetsForSet": {
        "descr": "Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled).", 
        "name": "document.enableStyleSheetsForSet", 
        "params": [
            {
                "descr": "The name of the style sheets to enable. ", 
                "name": "name"
            }
        ], 
        "path": "dom/document/enablestylesheetsforset", 
        "syntax": "document.enableStyleSheetsForSet(name)", 
        "type": "Document"
    }, 
    "document.evaluate": {
        "descr": "Returns an XPathResult based on an XPath expression and other given parameters.", 
        "name": "document.evaluate", 
        "params": [], 
        "path": "dom/document/evaluate", 
        "syntax": "var xpathResult = document.evaluate( xpathExpression,  contextNode,  namespaceResolver,  resultType,  result);", 
        "type": "Document"
    }, 
    "document.execCommand": {
        "descr": "When an HTML document has been switched to designMode, the document object exposes the execCommand method which allows one to run commands to manipulate the contents of the editable region. Most commands affect the document's selection (bold, italics, etc.), while others insert new elements (adding a link) or affect an entire line (indenting). When using contentEditable, calling execCommand() will affect the currently active editable element.", 
        "name": "document.execCommand", 
        "params": [
            {
                "descr": "A DOMString specifying the name of the command to execute. ", 
                "name": "aCommandName"
            }, 
            {
                "descr": "A Boolean indicating whether the default user interface should be shown. ", 
                "name": "aShowDefaultUI"
            }, 
            {
                "descr": "For commands which require an input argument (such as insertImage, for which this is the URL of the image to insert), this is a DOMString providing that information. ", 
                "name": "aValueArgument"
            }, 
            {
                "descr": "Changes the document background color. ", 
                "name": "backColor"
            }, 
            {
                "descr": "Toggles bold on/off for the selection or at the insertion point. ", 
                "name": "bold"
            }, 
            {
                "descr": "Makes the content document either read-only or editable. ", 
                "name": "contentReadOnly"
            }, 
            {
                "descr": "Copies the current selection to the clipboard. ", 
                "name": "copy"
            }, 
            {
                "descr": "Creates an anchor link from the selection, only if there is a selection. ", 
                "name": "createLink"
            }, 
            {
                "descr": "Cuts the current selection and copies it to the clipboard. ", 
                "name": "cut"
            }, 
            {
                "descr": "Adds a <small> tag around the selection or at the insertion point. ", 
                "name": "decreaseFontSize"
            }, 
            {
                "descr": "Deletes the current selection.", 
                "name": "delete"
            }, 
            {
                "descr": "Enables or disables the table row and column insertion and deletion controls. ", 
                "name": "enableInlineTableEditing"
            }, 
            {
                "descr": "Enables or disables the resize handles on images and other resizable objects. ", 
                "name": "enableObjectResizing"
            }, 
            {
                "descr": "Changes the font name for the selection or at the insertion point. ", 
                "name": "fontName"
            }, 
            {
                "descr": "Changes the font size for the selection or at the insertion point. ", 
                "name": "fontSize"
            }, 
            {
                "descr": "Changes a font color for the selection or at the insertion point. ", 
                "name": "foreColor"
            }, 
            {
                "descr": "Adds an HTML block-style tag around the line containing the current selection, replacing the block element containing the line if one exists (in Firefox, BLOCKQUOTE is the exception - it will wrap any containing block element). Requires a tag-name string to be passed in as a value argument. Virtually all block style tags can be used (eg. \"H1\", \"P\", \"DL\", \"BLOCKQUOTE\"). (Internet Explorer supports only heading tags H1 - H6, ADDRESS, and PRE, which must also include the tag delimiters < >, such as \"<H1>\".)", 
                "name": "formatBlock"
            }, 
            {
                "descr": "Deletes the character ahead of the cursor's position. ", 
                "name": "forwardDelete"
            }, 
            {
                "descr": "Adds a heading tag around a selection or insertion point line. ", 
                "name": "heading"
            }, 
            {
                "descr": "Changes the background color for the selection or at the insertion point. ", 
                "name": "hiliteColor"
            }, 
            {
                "descr": "Adds a BIG tag around the selection or at the insertion point. ", 
                "name": "increaseFontSize"
            }, 
            {
                "descr": "Indents the line containing the selection or insertion point. ", 
                "name": "indent"
            }, 
            {
                "descr": "Controls whether the Enter key inserts a br tag or splits the current block element into two. ", 
                "name": "insertBrOnReturn"
            }, 
            {
                "descr": "Inserts a horizontal rule at the insertion point (deletes selection).", 
                "name": "insertHorizontalRule"
            }, 
            {
                "descr": "Inserts an HTML string at the insertion point (deletes selection). ", 
                "name": "insertHTML"
            }, 
            {
                "descr": "Inserts an image at the insertion point (deletes selection). ", 
                "name": "insertImage"
            }, 
            {
                "descr": "Creates a numbered ordered list for the selection or at the insertion point.", 
                "name": "insertOrderedList"
            }, 
            {
                "descr": "Creates a bulleted unordered list for the selection or at the insertion point.", 
                "name": "insertUnorderedList"
            }, 
            {
                "descr": "Inserts a paragraph around the selection or the current line. ", 
                "name": "insertParagraph"
            }, 
            {
                "descr": "Inserts the given plain text at the insertion point (deletes selection).", 
                "name": "insertText"
            }, 
            {
                "descr": "Toggles italics on/off for the selection or at the insertion point. ", 
                "name": "italic"
            }, 
            {
                "descr": "Centers the selection or insertion point.", 
                "name": "justifyCenter"
            }, 
            {
                "descr": "Justifies the selection or insertion point.", 
                "name": "justifyFull"
            }, 
            {
                "descr": "Justifies the selection or insertion point to the left.", 
                "name": "justifyLeft"
            }, 
            {
                "descr": "Right-justifies the selection or the insertion point.", 
                "name": "justifyRight"
            }, 
            {
                "descr": "Outdents the line containing the selection or insertion point.", 
                "name": "outdent"
            }, 
            {
                "descr": "Pastes the clipboard contents at the insertion point (replaces current selection). ", 
                "name": "paste"
            }, 
            {
                "descr": "Redoes the previous undo command.", 
                "name": "redo"
            }, 
            {
                "descr": "Removes all formatting from the current selection.", 
                "name": "removeFormat"
            }, 
            {
                "descr": "Selects all of the content of the editable region.", 
                "name": "selectAll"
            }, 
            {
                "descr": "Toggles strikethrough on/off for the selection or at the insertion point.", 
                "name": "strikeThrough"
            }, 
            {
                "descr": "Toggles subscript on/off for the selection or at the insertion point.", 
                "name": "subscript"
            }, 
            {
                "descr": "Toggles superscript on/off for the selection or at the insertion point.", 
                "name": "superscript"
            }, 
            {
                "descr": "Toggles underline on/off for the selection or at the insertion point.", 
                "name": "underline"
            }, 
            {
                "descr": "Undoes the last executed command.", 
                "name": "undo"
            }, 
            {
                "descr": "Removes the anchor tag from a selected anchor link.", 
                "name": "unlink"
            }, 
            {
                "descr": "Toggles the use of HTML tags or CSS for the generated markup. ", 
                "name": "useCSS"
            }, 
            {
                "descr": "Replaces the useCSS command; argument works as expected, i.e. ", 
                "name": "styleWithCSS"
            }
        ], 
        "path": "dom/document/execcommand", 
        "syntax": "bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)", 
        "type": "Document"
    }, 
    "document.exitFullscreen": {
        "descr": "The Document.exitFullscrean() is a method that takes the document out of full-screen mode; this is used to reverse the effects of a call to make an element in the document full-screen using its Element.requestFullscreen() method.", 
        "name": "document.exitFullscreen", 
        "params": [], 
        "path": "dom/document/exitfullscreen", 
        "syntax": "document.exitFullscreen();", 
        "type": "Document"
    }, 
    "document.exitPointerLock": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "document.exitPointerLock", 
        "params": [], 
        "path": "dom/document/exitpointerlock", 
        "syntax": "exitPointerLock asynchronously releases a pointer lock previously requested through Element.requestPointerLock", 
        "type": "Document"
    }, 
    "document.forms": {
        "descr": "forms returns a collection (an HTMLCollection) of the <form> elements within the current document.", 
        "name": "document.forms", 
        "params": [], 
        "path": "dom/document/forms", 
        "syntax": "<form> elements within the current document. Syntax collection = document.forms; Example: Getting form information <!DOCTYPE html><html lang=\"en\"><head><title>document.forms example</title></head><body><form id=\"robby\">  <input type=\"button\" onclick=\"alert(document.forms[0].id);\n or \" value=\"robby's form\" /></form><form id=\"dave\">  <input type=\"button\" onclick=\"alert(document.forms[1].id);\n or \" value=\"dave's form\" /></form><form id=\"paul\">  <input type=\"button\" onclick=\"alert(document.forms[2].id);\n or \" value=\"paul's form\" /></form></body></html>);", 
        "type": "Document"
    }, 
    "document.fullscreen": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "document.fullscreen", 
        "params": [], 
        "path": "dom/document/fullscreen", 
        "syntax": "var isFullScreen = document.fullscreen; Return value  A Boolean that is true if the document is being displayed in fullscreen mode; otherwise it's false.  Example function isDocumentInFullScreenMode() {  // Better: use fullscreenElement method!\u00a0 return document.fullscreen;  }", 
        "type": "Document"
    }, 
    "document.fullscreenElement": {
        "descr": "The Document.fullscreenElement read-only property returns the Element that is currently being presented in full-screen mode in this document, or null if full-screen mode is not currently in use.", 
        "name": "document.fullscreenElement", 
        "params": [], 
        "path": "dom/document/fullscreenelement", 
        "syntax": "var element = document.fullscreenElement; On return, element is the element that is currently in full-screen mode, or null if full-screen mode isn't currently in use by the document. Example function isVideoInFullsreen() {  if (document.fullscreenElement && document.fullscreenElement.nodeName == 'VIDEO') {    console.log('Your video is playing in fullscreen');\n or   }});", 
        "type": "Document"
    }, 
    "document.fullscreenEnabled": {
        "descr": "The Document.fullscreenEnabled read-only property returns a Boolean that reports whether or not full-screen mode is available. Full screen mode is available only for a page that has no windowed plug-ins in any of its documents, and if all <iframe> elements which contain the document have their allowfullscreen attribute set.", 
        "name": "document.fullscreenEnabled", 
        "params": [], 
        "path": "dom/document/fullscreenenabled", 
        "syntax": "var isFullscreenAvailable = document.fullscreenEnabled; On return, isFullscreenAvailable is true if the document can be put into full-screen mode. Example function requestFullScreen() {  if (document.fullscreenEnabled) {\u00a0\u00a0\u00a0\u00a0videoElement.requestFullScreen();\n or \u00a0\u00a0} else {\u00a0\u00a0  console.log('Your browser cannot use fullscreen right now');\n or \u00a0\u00a0}});", 
        "type": "Document"
    }, 
    "document.getAnimations": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "document.getAnimations", 
        "params": [], 
        "path": "dom/document/getanimations", 
        "syntax": "getAnimations()", 
        "type": "Document"
    }, 
    "document.getBoxObjectFor": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "document.getBoxObjectFor", 
        "params": [], 
        "path": "dom/document/getboxobjectfor", 
        "syntax": "boxObject = document.getBoxObjectFor(element);", 
        "type": "Document"
    }, 
    "document.getElementById": {
        "descr": "Returns a reference to the element by its ID; the ID is a string which can be used to identify the element; it can be established using the id attribute in HTML, or from script.", 
        "name": "document.getElementById", 
        "params": [
            {
                "descr": "is a reference to an Element object, or null if an element with the specified ID is not in the document.", 
                "name": "element\u00a0"
            }
        ], 
        "path": "dom/document/getelementbyid", 
        "syntax": "element = document.getElementById(id);", 
        "type": "Document"
    }, 
    "document.getElementsByClassName": {
        "descr": "Returns an array-like object of all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node. You may also call getElementsByClassName() on any element; it will return only elements which are descendants of the specified root element with the given class names.", 
        "name": "document.getElementsByClassName", 
        "params": [], 
        "path": "dom/document/getelementsbyclassname", 
        "syntax": "var elements = document.getElementsByClassName(names);\n or  // or:var elements = rootElement.getElementsByClassName(names);", 
        "type": "Document"
    }, 
    "document.getElementsByName": {
        "descr": "Returns a nodelist collection with a given name in the (X)HTML document.", 
        "name": "document.getElementsByName", 
        "params": [], 
        "path": "dom/document/getelementsbyname", 
        "syntax": "elements = document.getElementsByName(name)", 
        "type": "Document"
    }, 
    "document.getElementsByTagName": {
        "descr": "Returns an HTMLCollection of elements with the given tag name. The complete document is searched, including the root node. The returned HTMLCollection is live, meaning that it updates itself automatically to stay in sync with the DOM tree without having to call document.getElementsByTagName() again.", 
        "name": "document.getElementsByTagName", 
        "params": [], 
        "path": "dom/document/getelementsbytagname", 
        "syntax": "var elements = document.getElementsByTagName(name);", 
        "type": "Document"
    }, 
    "document.hasFocus": {
        "descr": "When viewing a document, an element with focus is always the active element in the document, but an active element does not necessarily have focus. For example, an active element within a popup window that is not the foreground does not have focus.", 
        "name": "document.hasFocus", 
        "params": [], 
        "path": "dom/document/hasfocus", 
        "syntax": "focused = document.hasFocus();", 
        "type": "Document"
    }, 
    "document.head": {
        "descr": "Returns the <head> element of the current document. If there are more than one <head> elements, the first one is returned.", 
        "name": "document.head", 
        "params": [], 
        "path": "dom/document/head", 
        "syntax": "var objRef = document.head; Example // in HTML: <head id=\"my-document-head\">var aHead = document.head;alert(aHead.id);\n or  // \"my-document-head\";alert( document.head === document.querySelector(\"head\") );\n or  // true);", 
        "type": "Document"
    }, 
    "document.height": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "document.height", 
        "params": [], 
        "path": "dom/document/height", 
        "syntax": "height_value = document.height Example // alert document heightalert(document.height);", 
        "type": "Document"
    }, 
    "document.images": {
        "descr": "document.images returns a collection of the images in the current HTML document.", 
        "name": "document.images", 
        "params": [], 
        "path": "dom/document/images", 
        "syntax": "var htmlCollection = document.images; Example var ilist = document.images;for(var i = 0; i < ilist.length; i++) {    if(ilist[i].src == \"banner.gif\") {        // found the banner    }}", 
        "type": "Document"
    }, 
    "document.implementation": {
        "descr": "Returns a DOMImplementation object associated with the current document.", 
        "name": "document.implementation", 
        "params": [], 
        "path": "dom/document/implementation", 
        "syntax": "DOMImpObj = document.implementation; Example var modName = \"HTML\";var modVer = \"2.0\";var conformTest = document.implementation.hasFeature( modName, modVer );\n or alert( \"DOM \" + modName + \" \" + modVer + \" supported?: \" + conformTest );\n or // alerts with: \"DOM HTML 2.0 supported?: true\" if DOM Level 2 HTML module is supported.);", 
        "type": "Document"
    }, 
    "document.importNode": {
        "descr": "Creates a copy of a node from an external document that can be inserted into the current document.", 
        "name": "document.importNode", 
        "params": [
            {
                "descr": "The new node that is imported into the document. ", 
                "name": "node"
            }, 
            {
                "descr": "The node from another document to be imported.", 
                "name": "externalNode"
            }, 
            {
                "descr": "A boolean, indicating whether the descendants of the imported node need to be imported.", 
                "name": "deep"
            }
        ], 
        "path": "dom/document/importnode", 
        "syntax": "var node = document.importNode(externalNode, deep);", 
        "type": "Document"
    }, 
    "document.lastModified": {
        "descr": "Returns a string containing the date and time on which the current document was last modified.", 
        "name": "document.lastModified", 
        "params": [], 
        "path": "dom/document/lastmodified", 
        "syntax": "string = document.lastModified;  Example Example #1: Simple usage alert(document.lastModified);\n or  // returns: Tuesday, July 10, 2001 10:19:42);", 
        "type": "Document"
    }, 
    "document.lastStyleSheetSet": {
        "descr": "Returns the last enabled style sheet set; this property's value changes whenever the document.selectedStyleSheetSet property is changed.", 
        "name": "document.lastStyleSheetSet", 
        "params": [], 
        "path": "dom/document/laststylesheetset", 
        "syntax": "lastStyleSheetSet = document.lastStyleSheetSet On return, lastStyleSheetSet indicates the style sheet set that was most recently set. If the current style sheet set has not been changed by setting document.selectedStyleSheetSet, the returned value is null. Note: This value doesn't change when document.enableStyleSheetsForSet()", 
        "type": "Document"
    }, 
    "document.links": {
        "descr": "The links property returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute.", 
        "name": "document.links", 
        "params": [], 
        "path": "dom/document/links", 
        "syntax": "nodeList = document.links  Example var links = document.links;for(var i = 0; i < links.length; i++) {  var linkHref = document.createTextNode(links[i].href);\n or   var lineBreak = document.createElement(\"br\");\n or   document.body.appendChild(linkHref);\n or   document.body.appendChild(lineBreak);\n or });", 
        "type": "Document"
    }, 
    "document.location": {
        "descr": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.", 
        "name": "document.location", 
        "params": [], 
        "path": "dom/document/location", 
        "syntax": "locationObj = document.locationdocument.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org' Example dump(document.location);\n or  // Prints a string like// \"http://www.example.com/juicybits.html\" to the console);", 
        "type": "Document"
    }, 
    "document.onfullscreenchange": {
        "descr": "The Document.onfullscreenchange property is an event handler for the fullscreenchange event that is fire when a document goes in or out of the fullscreen mode.", 
        "name": "document.onfullscreenchange", 
        "params": [], 
        "path": "dom/document/onfullscreenchange", 
        "syntax": "targetDocument.onfullscreenchange = fullscreenChangeHandler; Example document.onfullscreenchange = function ( event ) {   console.log(\"FULL SCREEN CHANGE\")}; document.documentElement.onclick = function () {  // requestFullscreen() must be in an event handler or it will fail  document.documentElement.requestFullscreen();\n or });", 
        "type": "Document"
    }, 
    "document.onfullscreenerror": {
        "descr": "The Document.onfullscreenerror property is an event handler for the fullscreenchange event that is fire when a document goes that cannot go in fullscreen mode, even it has been requested.", 
        "name": "document.onfullscreenerror", 
        "params": [], 
        "path": "dom/document/onfullscreenerror", 
        "syntax": "targetDocument.onfullscreenerror = fullscreenErrorHandler; Example document.onfullscreenerror = function ( event ) {   console.log(\"FULL SCREEN DENIED\")}; // requestFullscreen() will fail because it is outside of an event handlerdocument.documentElement.requestFullscreen();", 
        "type": "Document"
    }, 
    "document.onselectionchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "document.onselectionchange", 
        "params": [], 
        "path": "dom/document/onselectionchange", 
        "syntax": "Document.onselectionchange property represents the event handler that is called when a selectionchange event reaches this object. Syntax obj.selectionchange = function;  function is the name of a user-defined function, without the () suffix or any parameters, or an anonymous function declaration.  Example", 
        "type": "Document"
    }, 
    "document.open": {
        "descr": "The Document.open() method opens a document for writing.", 
        "name": "document.open", 
        "params": [], 
        "path": "dom/document/open", 
        "syntax": "document.open();", 
        "type": "Document"
    }, 
    "document.origin": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "document.origin", 
        "params": [], 
        "path": "dom/document/origin", 
        "syntax": "Document.origin read-only property returns the document's origin. In most cases, this property is equivalent to document.defaultView.location.origin. Examples var origin = document.origin; // On this page, returns:'https://developer.mozilla.org'var origin = document.origin; // On \"about:blank\", returns:'null'var origin = document.origin; // On \"data:text/html,<b>foo</b>\", returns:'null' Specifications    Specification Status Comment   DOMThe definition of 'Document.origin' in that specification. Living Standard Initial definition.   WHATWG HTML Living StandardThe definition of 'origin for Document objects' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 41 Not supported bug 931884 Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported Not supported Not supported Not supported Not supported     See also", 
        "type": "Document"
    }, 
    "document.plugins": {
        "descr": "Returns an HTMLCollection object containing one or more HTMLEmbedElements or null which represent the <embed> elements in the current document.", 
        "name": "document.plugins", 
        "params": [], 
        "path": "dom/document/plugins", 
        "syntax": "embedArrayObj = document.plugins  Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'Document.plugins' in that specification. Living Standard      See also  MSDN: plugins Collection       Edit this page on MDN", 
        "type": "Document"
    }, 
    "document.pointerLockElement": {
        "descr": "The pointerLockElement property provides the element set as the target for mouse events while the pointer is locked. It is null if lock is pending, pointer is unlocked, or the target is in another document.", 
        "name": "document.pointerLockElement", 
        "params": [], 
        "path": "dom/document/pointerlockelement", 
        "syntax": "var element = document.pointerLockElement; Return value An Element or null. Specifications    Specification Status Comment   Pointer LockThe definition of 'Document' in that specification. Candidate Recommendation Extend the Document interface    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) webkit (Yes) moz ? ? ?         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     See also", 
        "type": "Document"
    }, 
    "document.preferredStyleSheetSet": {
        "descr": "Returns the preferred style sheet set as set by the page author.", 
        "name": "document.preferredStyleSheetSet", 
        "params": [], 
        "path": "dom/document/preferredstylesheetset", 
        "syntax": "preferredStyleSheetSet = document.preferredStyleSheetSet On return, preferredStyleSheetSet indicates the author's preferred style sheet set. This is determined from the order of style sheet declarations and the Default-Style HTTP header. If there isn't a preferred style sheet set defined by the author, the empty string (\"\") is returned.", 
        "type": "Document"
    }, 
    "document.queryCommandEnabled": {
        "descr": "The Document.queryCommandEnabled() method reports whether or not the specified editor command is enabled by the browser.", 
        "name": "document.queryCommandEnabled", 
        "params": [
            {
                "descr": "The command for which to determine support.", 
                "name": "Parameters  command"
            }
        ], 
        "path": "dom/document/querycommandenabled", 
        "syntax": "isEnabled = document.queryCommandEnabled(command);", 
        "type": "Document"
    }, 
    "document.queryCommandState": {
        "descr": "TBD", 
        "name": "document.queryCommandState", 
        "params": [], 
        "path": "dom/document/querycommandstate", 
        "syntax": "queryCommandState(String command)", 
        "type": "Document"
    }, 
    "document.queryCommandSupported": {
        "descr": "The Document.queryCommandSupported() method reports whether or not the specified editor command is supported by the browser.", 
        "name": "document.queryCommandSupported", 
        "params": [
            {
                "descr": "The command for which to determine support.", 
                "name": "Parameters  command"
            }
        ], 
        "path": "dom/document/querycommandsupported", 
        "syntax": "isSupported = document.queryCommandSupported(command);", 
        "type": "Document"
    }, 
    "document.querySelector": {
        "descr": "Returns the first element within the document (using depth-first pre-order traversal of the document's nodes|by first element in document markup and iterating through sequential nodes by order of amount of child nodes) that matches the specified group of selectors.", 
        "name": "document.querySelector", 
        "params": [], 
        "path": "dom/document/queryselector", 
        "syntax": "element = document.querySelector(selectors);", 
        "type": "Document"
    }, 
    "document.querySelectorAll": {
        "descr": "Returns a list of the elements within the document (using depth-first pre-order traversal of the document's nodes) that match the specified group of selectors. The object returned is a NodeList.", 
        "name": "document.querySelectorAll", 
        "params": [], 
        "path": "dom/document/queryselectorall", 
        "syntax": "elementList = document.querySelectorAll(selectors);", 
        "type": "Document"
    }, 
    "document.readyState": {
        "descr": "The Document.readyState property of a document describes the loading state of the document.", 
        "name": "document.readyState", 
        "params": [
            {
                "descr": "The document is still loading.", 
                "name": "loading"
            }, 
            {
                "descr": "The document has finished loading and the document has been parsed but sub-resources such as images, stylesheets and frames are still loading.", 
                "name": "interactive"
            }, 
            {
                "descr": "The document and all sub-resources have finished loading. ", 
                "name": "complete"
            }
        ], 
        "path": "dom/document/readystate", 
        "syntax": "Syntax var string = document.readyState; Examples Different states of readiness switch (document.readyState) {  case \"loading\":    // The document is still loading.    break;  case \"interactive\":    // The document has finished loading. We can now access the DOM elements.    var span = document.createElement(\"span\");\n or     span.textContent = \"A <span> element.\";    document.body.appendChild(span);\n or     break;  case \"complete\":    // The page is fully loaded.    console.log(\"The first CSS rule is: \" + document.styleSheets[0].cssRules[0].cssText);\n or     break;});", 
        "type": "Document"
    }, 
    "document.referrer": {
        "descr": "Returns the URI of the page that linked to this page.", 
        "name": "document.referrer", 
        "params": [], 
        "path": "dom/document/referrer", 
        "syntax": "string = document.referrer;  Notes The value is an empty string if the user navigated to the page directly (not through a link, but, for example, via a bookmark). Since this property returns only a string, it does not give you DOM access to the referring page.", 
        "type": "Document"
    }, 
    "document.registerElement": {
        "descr": "Note:document.registerElement() is deprecated in favor of customElements.define().", 
        "name": "document.registerElement", 
        "params": [
            {
                "descr": "The name of the custom element. ", 
                "name": "tag-name"
            }, 
            {
                "descr": "An object with properties prototype to base the custom element on, and extends, an existing tag to extend. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/document/registerelement", 
        "syntax": "var constructor = document.registerElement(tag-name, options);", 
        "type": "Document"
    }, 
    "document.releaseCapture": {
        "descr": "Releases mouse capture if it's currently enabled on an element within this document. Enabling mouse capture on an element is done by calling element.setCapture().", 
        "name": "document.releaseCapture", 
        "params": [], 
        "path": "dom/document/releasecapture", 
        "syntax": "document.releaseCapture()", 
        "type": "Document"
    }, 
    "document.scripts": {
        "descr": "Returns a list of the <script> elements in the document. The returned object is an HTMLCollection.", 
        "name": "document.scripts", 
        "params": [], 
        "path": "dom/document/scripts", 
        "syntax": "var scriptList = document.scripts; The returned scriptList is an HTMLCollection", 
        "type": "Document"
    }, 
    "document.scrollingElement": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "document.scrollingElement", 
        "params": [], 
        "path": "dom/document/scrollingelement", 
        "syntax": "scrollingElement read-only property of the Document interface returns a reference to the Element that scrolls the document. For non-conforming user agents that always use the quirks mode behavior for scrollTop and scrollLeft, the scrollingElement attribute is expected to also always return the HTML body element (or null if it does not exist).", 
        "type": "Document"
    }, 
    "document.selectedStyleSheetSet": {
        "descr": "Indicates the name of the style sheet set that's currently in use.", 
        "name": "document.selectedStyleSheetSet", 
        "params": [], 
        "path": "dom/document/selectedstylesheetset", 
        "syntax": "currentStyleSheetSet = document.selectedStyleSheetSetdocument.selectedStyleSheet = newStyleSheetSet  On return, currentStyleSheetSet indicates the name of the style sheet set currently in use. You can also set the current style sheet set using this property. Setting the value of this property is equivalent to calling document.enableStyleSheetsForSet()", 
        "type": "Document"
    }, 
    "document.styleSheetSets": {
        "descr": "Returns a live list of all of the currently-available style sheet sets.", 
        "name": "document.styleSheetSets", 
        "params": [], 
        "path": "dom/document/stylesheetsets", 
        "syntax": "sets = document.styleSheetSets On return, sets is a list of style sheet sets that are available. Example Given an <ul>", 
        "type": "Document"
    }, 
    "document.styleSheets": {
        "descr": "The Document.styleSheets read-only property returns a StyleSheetList of CSSStyleSheet objects for stylesheets explicitly linked into or embedded in a document.", 
        "name": "document.styleSheets", 
        "params": [], 
        "path": "dom/document/stylesheets", 
        "syntax": "var styleSheetList = document.styleSheets; The returned object is a StyleSheetList. It is an ordered collection of CSSStyleSheet objects. styleSheetList.item(index)", 
        "type": "Document"
    }, 
    "document.timeline": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "document.timeline", 
        "params": [], 
        "path": "dom/document/timeline", 
        "syntax": "timeline readonly property of the Document interface represents the default timeline of the current document. This timeline is a special instance of DocumentTimeline", 
        "type": "Document"
    }, 
    "document.title": {
        "descr": "Gets or sets the title of the document.", 
        "name": "document.title", 
        "params": [], 
        "path": "dom/document/title", 
        "syntax": "var docTitle = document.title; title is a string containing the document's title. If the title was overridden by setting document.title, returns that value. Otherwise returns the title specified in the markup (see the Notes below).", 
        "type": "Document"
    }, 
    "document.visibilityState": {
        "descr": "The Document.visibilityState read-only property returns the visibility of the document, that is in which context this element is now visible. It is useful to know if the document is in the background or an invisible tab, or only loaded for pre-rendering. Possible values are:", 
        "name": "document.visibilityState", 
        "params": [], 
        "path": "dom/document/visibilitystate", 
        "syntax": "var string = document.visibilityState Examples document.addEventListener(\"visibilitychange\", function() {  console.log( document.visibilityState );\n or   // Modify behavior...});", 
        "type": "Document"
    }, 
    "document.width": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "document.width", 
        "params": [], 
        "path": "dom/document/width", 
        "syntax": "pixels = document.width; Example function init() {    alert(\"The width of the document is \" + document.width + \" pixels.\");\n or });", 
        "type": "Document"
    }, 
    "document.write": {
        "descr": "Writes a string of text to a document stream opened by document.open().", 
        "name": "document.write", 
        "params": [], 
        "path": "dom/document/write", 
        "syntax": "document.write(markup);", 
        "type": "Document"
    }, 
    "document.writeln": {
        "descr": "Writes a string of text followed by a newline character to a document.", 
        "name": "document.writeln", 
        "params": [], 
        "path": "dom/document/writeln", 
        "syntax": "document.writeln(line);", 
        "type": "Document"
    }, 
    "drawArraysInstancedANGLE": {
        "descr": "The ANGLE_instanced_arrays.drawArraysInstancedANGLE() method of the WebGL API renders primitives from array data like the gl.drawArrays() method. In addition, it can execute multiple instances of the range of elements.", 
        "name": "drawArraysInstancedANGLE", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLint specifying the starting index in the array of vector points.", 
                "name": "first"
            }, 
            {
                "descr": "A GLsizei specifying the number of indices to be rendered.", 
                "name": "count"
            }, 
            {
                "descr": "A GLsizei specifying the number of instances of the range of elements to execute.", 
                "name": "primcount"
            }
        ], 
        "path": "dom/angle_instanced_arrays/drawarraysinstancedangle", 
        "syntax": "void ext.drawArraysInstancedANGLE(mode, first, count, primcount);", 
        "type": "WebGL"
    }, 
    "drawElementsInstancedANGLE": {
        "descr": "The ANGLE_instanced_arrays.drawElementsInstancedANGLE() method of the WebGL API renders primitives from array data like the gl.drawElements() method. In addition, it can execute multiple instances of a set of elements.", 
        "name": "drawElementsInstancedANGLE", 
        "params": [
            {
                "descr": "A GLenum specifying the type primitive to render. ", 
                "name": "mode"
            }, 
            {
                "descr": "A GLsizei specifying the number of elements to be rendered.", 
                "name": "count"
            }, 
            {
                "descr": "A GLenum specifying the type of the values in the element array buffer. ", 
                "name": "type"
            }, 
            {
                "descr": "A GLintptr specifying an offset in the element array buffer. ", 
                "name": "offset"
            }, 
            {
                "descr": "A GLsizei specifying the number of instances of the set of elements to execute.", 
                "name": "primcount"
            }
        ], 
        "path": "dom/angle_instanced_arrays/drawelementsinstancedangle", 
        "syntax": "void ext.drawElementsInstancedANGLE(mode, count, type, offset, primcount);", 
        "type": "WebGL"
    }, 
    "each": {
        "descr": "The .each() method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword this refers to the element.", 
        "name": "each", 
        "params": [
            {
                "descr": "Type: Function( Integer index, Element element ) A function to execute for each matched element.", 
                "name": "function"
            }
        ], 
        "path": "jquery/each", 
        "syntax": ".each( function ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "element": {
        "descr": "The Element interface represents an object of a Document. This interface describes methods and properties common to all kinds of elements. Specific behaviors are described in interfaces which inherit from Element but add additional functionality. For example, the HTMLElement interface is the base interface for HTML elements, while the SVGElement interface is the basis for all SVG elements.", 
        "name": "element", 
        "params": [
            {
                "descr": "Returns a NamedNodeMap that lists all attributes associated with the element.", 
                "name": "Element.attributes Read only"
            }, 
            {
                "descr": "Is a Number representing the number of child nodes that are elements.", 
                "name": "ParentNode.childElementCount Read only"
            }, 
            {
                "descr": "Is a live HTMLCollection containing all child elements of the element, as a collection.", 
                "name": "ParentNode.children Read only"
            }, 
            {
                "descr": "Returns a DOMTokenList containing the list of class attributes.", 
                "name": "Element.classList Read only"
            }, 
            {
                "descr": "Is a DOMString representing the class of the element.", 
                "name": "Element.className"
            }, 
            {
                "descr": "Returns a Number representing the inner height of the element.", 
                "name": "Element.clientHeight  Read only"
            }, 
            {
                "descr": "Returns a Number representing the width of the left border of the element.", 
                "name": "Element.clientLeft  Read only"
            }, 
            {
                "descr": "Returns a Number representing the width of the top border of the element.", 
                "name": "Element.clientTop  Read only"
            }, 
            {
                "descr": "Returns a Number representing the inner width of the element.", 
                "name": "Element.clientWidth  Read only"
            }, 
            {
                "descr": "Is a Element, the first direct child element of an element, or null if the element has no child elements.", 
                "name": "ParentNode.firstElementChild Read only"
            }, 
            {
                "descr": "Is a DOMString representing the id of the element.", 
                "name": "Element.id"
            }, 
            {
                "descr": "Is a DOMString representing the markup of the element's content.", 
                "name": "Element.innerHTML"
            }, 
            {
                "descr": "Is a Element, the last direct child element of an element, or null if the element has no child elements.", 
                "name": "ParentNode.lastElementChild Read only"
            }, 
            {
                "descr": "A DOMString representing the local part of the qualified name of the element.", 
                "name": "Element.localName Read only"
            }, 
            {
                "descr": "The namespace URI of the element, or null if it is no namespace. ", 
                "name": "Element.namespaceURI Read only"
            }, 
            {
                "descr": "Is a Element, the element immediately following the given one in the tree, or null if there's no sibling node.", 
                "name": "NonDocumentTypeChildNode.nextElementSibling Read only"
            }, 
            {
                "descr": "Is a DOMString representing the markup of the element including its content. ", 
                "name": "Element.outerHTML"
            }, 
            {
                "descr": "A DOMString representing the namespace prefix of the element, or null if no prefix is specified.", 
                "name": "Element.prefix Read only"
            }, 
            {
                "descr": "Is a Element, the element immediately preceding the given one in the tree, or null if there is no sibling element.", 
                "name": "NonDocumentTypeChildNode.previousElementSibling Read only"
            }, 
            {
                "descr": "Returns a Number representing the scroll view height of an element.", 
                "name": "Element.scrollHeight  Read only"
            }, 
            {
                "descr": "Is a Number representing the left scroll offset of the element.", 
                "name": "Element.scrollLeft"
            }, 
            {
                "descr": "Returns a Number representing the maximum left scroll offset possible for the element.", 
                "name": "Element.scrollLeftMax  Read only"
            }, 
            {
                "descr": "Is a Number representing the top scroll offset the an element.", 
                "name": "Element.scrollTop"
            }, 
            {
                "descr": "Returns a Number representing the maximum top scroll offset possible for the element.", 
                "name": "Element.scrollTopMax  Read only"
            }, 
            {
                "descr": "Returns a Number representing the scroll view width of the element.", 
                "name": "Element.scrollWidth  Read only"
            }, 
            {
                "descr": "Returns the youngest shadow root that is hosted by the element.", 
                "name": "Element.shadowRoot  Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if the element can receive input focus via the tab key.", 
                "name": "Element.tabStop"
            }, 
            {
                "descr": "Returns a String with the name of the tag for the given element.", 
                "name": "Element.tagName Read only"
            }, 
            {
                "descr": "Returns the UndoManager associated with the element.", 
                "name": "Element.undoManager  Read only"
            }, 
            {
                "descr": "Is a Boolean indicating if the element is an undo scope host, or not.", 
                "name": "Element.undoScope"
            }, 
            {
                "descr": "Returns the event handler for the gotpointercapture event type.", 
                "name": "Element.ongotpointercapture"
            }, 
            {
                "descr": "Returns the event handler for the lostpointercapture event type.", 
                "name": "Element.onlostpointercapture"
            }, 
            {
                "descr": "Returns the event handling code for the wheel event.", 
                "name": "Element.onwheel"
            }, 
            {
                "descr": "Registers an event handler to a specific event type on the element.", 
                "name": "EventTarget.addEventListener()"
            }, 
            {
                "descr": "Attatches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.", 
                "name": "Element.attachShadow()"
            }, 
            {
                "descr": "A shortcut method to create and run an animation on an element. ", 
                "name": "Element.animate()"
            }, 
            {
                "descr": "Returns the Element, descendant of this element (or this element itself), that is the closest ancestor of the elements selected by the selectors given in parameter.", 
                "name": "Element.closest()"
            }, 
            {
                "descr": "Creates a shadow DOM on on the element, turning it into a shadow host. ", 
                "name": "Element.createShadowRoot()"
            }, 
            {
                "descr": "Dispatches an event to this node in the DOM and returns a Boolean that indicates that at least one handler has not canceled it.", 
                "name": "EventTarget.dispatchEvent()"
            }, 
            {
                "descr": "...", 
                "name": "Element.find()"
            }, 
            {
                "descr": "...", 
                "name": "Element.findAll()"
            }, 
            {
                "descr": "Returns an array of Animation objects currently active on the element.", 
                "name": "Element.getAnimations()"
            }, 
            {
                "descr": "Retrieves the value of the named attribute from the current node and returns it as an Object.", 
                "name": "Element.getAttribute()"
            }, 
            {
                "descr": "Retrieves the value of the attribute with the specified name and namespace, from the current node and returns it as an Object.", 
                "name": "Element.getAttributeNames()  Element.getAttributeNS()"
            }, 
            {
                "descr": "Retrieves the node representation of the named attribute from the current node and returns it as an Attr.", 
                "name": "Element.getAttributeNode()"
            }, 
            {
                "descr": "Retrieves the node representation of the attribute with the specified name and namespace, from the current node and returns it as an Attr.", 
                "name": "Element.getAttributeNodeNS()"
            }, 
            {
                "descr": "...", 
                "name": "Element.getBoundingClientRect()"
            }, 
            {
                "descr": "Returns a collection of rectangles that indicate the bounding rectangles for each line of text in a client.", 
                "name": "Element.getClientRects()"
            }, 
            {
                "descr": "\u2026", 
                "name": "Element.getDestinationInsertionPoints()"
            }, 
            {
                "descr": "Returns a live HTMLCollection that contains all descendant of the current element that posses the list of classes given in parameter.", 
                "name": "Element.getElementsByClassName()"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all descendant elements, of a particular tag name, from the current element.", 
                "name": "Element.getElementsByTagName()"
            }, 
            {
                "descr": "Returns a live HTMLCollection containing all descendant elements, of a particular tag name and namespace, from the current element.", 
                "name": "Element.getElementsByTagNameNS()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has the specified attribute or not.", 
                "name": "Element.hasAttribute()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has the specified attribute, in the specified namespace, or not.", 
                "name": "Element.hasAttributeNS()"
            }, 
            {
                "descr": "Returns a Boolean indicating if the element has one or more HTML attributes present.", 
                "name": "Element.hasAttributes()"
            }, 
            {
                "descr": "Inserts a given element node at a given position relative to the element it is invoked upon.", 
                "name": "Element.insertAdjacentElement"
            }, 
            {
                "descr": "Parses the text as HTML or XML and inserts the resulting nodes into the tree in the position given.", 
                "name": "Element.insertAdjacentHTML"
            }, 
            {
                "descr": "Inserts a given text node at a given position relative to the element it is invoked upon.", 
                "name": "Element.insertAdjacentText"
            }, 
            {
                "descr": "Returns a Boolean indicating whether or not the element would be selected by the specified selector string.", 
                "name": "Element.matches()"
            }, 
            {
                "descr": "Returns the first Node which matches the specified selector string relative to the element.", 
                "name": "Element.querySelector()"
            }, 
            {
                "descr": "Returns a NodeList of nodes which match the specified selector string relative to the element.", 
                "name": "Element.querySelectorAll"
            }, 
            {
                "descr": "Releases (stops) pointer capture that was previously set for a specific pointer event.", 
                "name": "Element.releasePointerCapture"
            }, 
            {
                "descr": "Removes the element from the children list of its parent.", 
                "name": "ChildNode.remove()"
            }, 
            {
                "descr": "Removes the named attribute from the current node.", 
                "name": "Element.removeAttribute()"
            }, 
            {
                "descr": "Removes the attribute with the specified name and namespace, from the current node.", 
                "name": "Element.removeAttributeNS()"
            }, 
            {
                "descr": "Removes the node representation of the named attribute from the current node.", 
                "name": "Element.removeAttributeNode()"
            }, 
            {
                "descr": "Removes an event listener from the element.", 
                "name": "EventTarget.removeEventListener()"
            }, 
            {
                "descr": "Asynchronously asks the browser to make the element full-screen.", 
                "name": "Element.requestFullscreen()"
            }, 
            {
                "descr": "Allows to asynchronously ask for the pointer to be locked on the given element.", 
                "name": "Element.requestPointerLock()"
            }, 
            {
                "descr": "Scrolls the page until the element gets into the view.", 
                "name": "Element.scrollIntoView()"
            }, 
            {
                "descr": "Sets the value of a named attribute of the current node.", 
                "name": "Element.setAttribute()"
            }, 
            {
                "descr": "Sets the value of the attribute with the specified name and namespace, from the current node.", 
                "name": "Element.setAttributeNS()"
            }, 
            {
                "descr": "Sets the node representation of the named attribute from the current node.", 
                "name": "Element.setAttributeNode()"
            }, 
            {
                "descr": "Setw the node representation of the attribute with the specified name and namespace, from the current node.", 
                "name": "Element.setAttributeNodeNS()"
            }, 
            {
                "descr": "Sets up mouse event capture, redirecting all mouse events to this element.", 
                "name": "Element.setCapture()"
            }, 
            {
                "descr": "Designates a specific element as the capture target of future pointer events.", 
                "name": "Element.setPointerCapture()"
            }
        ], 
        "path": "dom/element", 
        "syntax": "Element.innerHTML Is a DOMString representing the markup of the element's content. ParentNode.lastElementChild Read only  Is a Element, the last direct child element of an element, or null if the element has no child elements. Element.localName Read only  A DOMString representing the local part of the qualified name of the element. Element.namespaceURI Read only  The namespace URI of the element, or null if it is no namespace.  Note: In Firefox 3.5 and earlier, HTML elements are in no namespace. In later versions, HTML elements are in the http://www.w3.org/1999/xhtml namespace in both HTML and XML trees.    NonDocumentTypeChildNode.nextElementSibling Read only  Is a Element, the element immediately following the given one in the tree, or null if there's no sibling node. Element.outerHTML  Is a DOMString representing the markup of the element including its content. When used as a setter, replaces the element with nodes parsed from the given string. Element.prefix Read only  A DOMString representing the namespace prefix of the element, or null if no prefix is specified. NonDocumentTypeChildNode.previousElementSibling Read only  Is a Element, the element immediately preceding the given one in the tree, or null if there is no sibling element. Element.scrollHeight  Read only  Returns a Number", 
        "type": "Element"
    }, 
    "element.animate": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "element.animate", 
        "params": [
            {
                "descr": "An Object formatted to represent a set of keyframes.", 
                "name": "keyframes"
            }, 
            {
                "descr": "Either an integer representing the animation's duration (in milliseconds), or an Object containing one or more timing properties:", 
                "name": "options"
            }, 
            {
                "descr": "A property unique to animate(): a DOMString with which to reference the animation.", 
                "name": "id Optional"
            }, 
            {
                "descr": "The number of milliseconds to delay the start of the animation. ", 
                "name": "delay\u00a0Optional"
            }, 
            {
                "descr": "Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to normal.", 
                "name": "direction\u00a0Optional"
            }, 
            {
                "descr": "The number of milliseconds each iteration of the animation takes to complete. ", 
                "name": "duration\u00a0Optional"
            }, 
            {
                "descr": "The rate of the animation's change over time. ", 
                "name": "easing\u00a0Optional"
            }, 
            {
                "descr": "The number of milliseconds to delay after the end of an animation. ", 
                "name": "endDelay\u00a0Optional"
            }, 
            {
                "descr": "Dictates whether the animation's effects should be reflected by the element(s) prior to playing (backwards), retained after the animation has completed playing (forwards), or both. ", 
                "name": "fill\u00a0Optional"
            }, 
            {
                "descr": "Describes at what point in the iteration the animation should start. ", 
                "name": "iterationStart\u00a0Optional"
            }, 
            {
                "descr": "The number of times the animation should repeat. ", 
                "name": "iterations\u00a0Optional"
            }, 
            {
                "descr": "Determines how values are combined between this animation and other, separate animations that do not specify their own specific composite operation. ", 
                "name": "composite\u00a0Optional"
            }, 
            {
                "descr": "Determines how values build from iteration to iteration in this animation. ", 
                "name": "iterationComposite\u00a0Optional"
            }, 
            {
                "descr": "Determines how keyframes without temporal offsets should be distributed during the animation's duration. ", 
                "name": "spacing\u00a0Optional"
            }
        ], 
        "path": "dom/element/animate", 
        "syntax": "Element.animate()", 
        "type": "Element"
    }, 
    "element.attributes": {
        "descr": "The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.", 
        "name": "element.attributes", 
        "params": [], 
        "path": "dom/element/attributes", 
        "syntax": "var attr = element.attributes; Example Basic examples // Get the first <p> element in the documentvar para = document.getElementsByTagName(\"p\")[0];var atts = para.attributes;", 
        "type": "Element"
    }, 
    "element.classList": {
        "descr": "The Element.classList is a read-only property which returns a live DOMTokenList\u00a0collection of the class attributes of the element.", 
        "name": "element.classList", 
        "params": [
            {
                "descr": "Add specified class values. If these classes already exist in attribute of the element, then they are ignored.", 
                "name": "add( String [, String] )"
            }, 
            {
                "descr": "Remove specified class values.", 
                "name": "remove( String [,String] )"
            }, 
            {
                "descr": "Return class value by index in collection.", 
                "name": "item ( Number )"
            }, 
            {
                "descr": "When only one argument is present: Toggle class value; i.e., if class exists then remove it and return false, if not, then add it and return true. ", 
                "name": "toggle ( String [, force] )"
            }, 
            {
                "descr": "Checks if specified class value exists in class attribute of the element.", 
                "name": "contains( String )"
            }
        ], 
        "path": "dom/element/classlist", 
        "syntax": "var elementClasses = elementNodeReference.classList; elementClasses is a DOMTokenList representing the class attribute of elementNodeReference. If the class attribute was not set or is empty elementClasses.length returns 0. element.classList itself is read-only, although you can modify it using the add()", 
        "type": "Element"
    }, 
    "element.className": {
        "descr": "className gets and sets the value of the class attribute of the specified element.", 
        "name": "element.className", 
        "params": [], 
        "path": "dom/element/classname", 
        "syntax": "var cName = elementNodeReference.className;elementNodeReference.className = cName;  cName is a string variable representing the class or space-separated classes of the current element.  Example var elm = document.getElementById(\"div1\");\n or if (elm.className === \"fixed\") {  // skip a particular class of element  goNextElement();\n or });", 
        "type": "Element"
    }, 
    "element.clientHeight": {
        "descr": "The Element.clientHeight read-only property is zero for elements with no CSS or inline layout boxes, otherwise it's the inner height of an element in pixels, including padding but not the horizontal scrollbar height, border, or margin.", 
        "name": "element.clientHeight", 
        "params": [], 
        "path": "dom/element/clientheight", 
        "syntax": "var h = element.clientHeight; h is an integer representing height of the element in pixels. Example    Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'clientHeight' in that specification. Working Draft      Notes clientHeight", 
        "type": "Element"
    }, 
    "element.clientLeft": {
        "descr": "The width of the left border of an element in pixels. It includes the width of the vertical scrollbar if the text direction of the element is right\u2013to\u2013left and if there is an overflow causing a left vertical scrollbar to be rendered. clientLeft does not include the left margin or the left padding. clientLeft is read-only.", 
        "name": "element.clientLeft", 
        "params": [], 
        "path": "dom/element/clientleft", 
        "syntax": "var left = element.clientLeft; Example   padding-top", 
        "type": "Element"
    }, 
    "element.clientTop": {
        "descr": "The width of the top border of an element in pixels. It does not include the top margin or padding. clientTop is read-only.", 
        "name": "element.clientTop", 
        "params": [], 
        "path": "dom/element/clienttop", 
        "syntax": "var top = element.clientTop; Example   padding-top", 
        "type": "Element"
    }, 
    "element.clientWidth": {
        "descr": "The Element.clientWidth property is zero for elements with no CSS or inline layout boxes, otherwise it's the inner width of an element in pixels. It includes padding but not the vertical scrollbar (if present, if rendered), border or margin.", 
        "name": "element.clientWidth", 
        "params": [], 
        "path": "dom/element/clientwidth", 
        "syntax": "var intElemClientWidth = element.clientWidth; intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. clientWidth is read\u2013only. Example    Specification    Specification Status Comment   CSS Object Model (CSSOM) View ModuleThe definition of 'clientWidth' in that specification. Working Draft      Notes clientWidth", 
        "type": "Element"
    }, 
    "element.closest": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "element.closest", 
        "params": [], 
        "path": "dom/element/closest", 
        "syntax": "Element.closest()", 
        "type": "Element"
    }, 
    "element.createShadowRoot": {
        "descr": "Draft This page is not complete.", 
        "name": "element.createShadowRoot", 
        "params": [], 
        "path": "dom/element/createshadowroot", 
        "syntax": "var shadowroot = element.createShadowRoot();", 
        "type": "Element"
    }, 
    "element.getAttribute": {
        "descr": "getAttribute() returns the value of a specified attribute on the element. If the given attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.", 
        "name": "element.getAttribute", 
        "params": [], 
        "path": "dom/element/getattribute", 
        "syntax": "var attribute = element.getAttribute(attributeName);", 
        "type": "Element"
    }, 
    "element.getAttributeNode": {
        "descr": "Returns the specified attribute of the specified element, as an Attr node.", 
        "name": "element.getAttributeNode", 
        "params": [], 
        "path": "dom/element/getattributenode", 
        "syntax": "var attrNode = element.getAttributeNode(attrName);", 
        "type": "Element"
    }, 
    "element.getBoundingClientRect": {
        "descr": "The Element.getBoundingClientRect() method returns the size of an element and its position relative to the viewport.", 
        "name": "element.getBoundingClientRect", 
        "params": [], 
        "path": "dom/element/getboundingclientrect", 
        "syntax": "rectObject = object.getBoundingClientRect();", 
        "type": "Element"
    }, 
    "element.getClientRects": {
        "descr": "The Element.getClientRects() method returns a collection of rectangles that indicate the bounding rectangles for each box in a client.", 
        "name": "element.getClientRects", 
        "params": [], 
        "path": "dom/element/getclientrects", 
        "syntax": "var rectCollection = object.getClientRects();", 
        "type": "Element"
    }, 
    "element.getElementsByClassName": {
        "descr": "The Element.getElementsByClassName() method returns a live HTMLCollection containing all child elements which have all of the given class names. When called on the document object, the complete document is searched, including the root node.", 
        "name": "element.getElementsByClassName", 
        "params": [], 
        "path": "dom/element/getelementsbyclassname", 
        "syntax": "var elements = element.getElementsByClassName(names);", 
        "type": "Element"
    }, 
    "element.getElementsByTagName": {
        "descr": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name. The subtree underneath the specified element is searched, excluding the element itself. The returned list is live, meaning that it updates itself with the DOM tree automatically. Consequently, there is no need to call several times Element.getElementsByTagName() with the same element and arguments.", 
        "name": "element.getElementsByTagName", 
        "params": [], 
        "path": "dom/element/getelementsbytagname", 
        "syntax": "elements = element.getElementsByTagName(tagName)", 
        "type": "Element"
    }, 
    "element.hasAttribute": {
        "descr": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.", 
        "name": "element.hasAttribute", 
        "params": [
            {
                "descr": "holds the return value true or false.", 
                "name": "result"
            }, 
            {
                "descr": "is a string representing the name of the attribute.", 
                "name": "attName"
            }
        ], 
        "path": "dom/element/hasattribute", 
        "syntax": "var result = element.hasAttribute(attName);", 
        "type": "Element"
    }, 
    "element.hasAttributes": {
        "descr": "The Element.hasAttributes() method returns a Boolean value, true or false, indicating if the current element has any attributes or not.", 
        "name": "element.hasAttributes", 
        "params": [], 
        "path": "dom/element/hasattributes", 
        "syntax": "result = targetElement.hasAttributes();", 
        "type": "Element"
    }, 
    "element.id": {
        "descr": "The Element.id property represents the element's identifier, reflecting the id global attribute.", 
        "name": "element.id", 
        "params": [], 
        "path": "dom/element/id", 
        "syntax": "var idStr = elt.id; // Get the id.elt.id = idStr; // Set the id  idStr is the identifier of the element.  Specifications    Specification Status Comment     DOMThe definition of 'id' in that specification. Living Standard No change from Document Object Model (DOM) Level 2 HTML Specification.   Document Object Model (DOM) Level 2 HTML SpecificationThe definition of 'id' in that specification. Recommendation No change from Document Object Model (DOM) Level 1 Specification.   Document Object Model (DOM) Level 1 SpecificationThe definition of 'id' in that specification. Recommendation Initial definition.    Browser compatibility", 
        "type": "Element"
    }, 
    "element.innerHTML": {
        "descr": "The Element.innerHTML property sets or gets the HTML syntax describing the element's descendants.", 
        "name": "element.innerHTML", 
        "params": [], 
        "path": "dom/element/innerhtml", 
        "syntax": "<div>, <span>", 
        "type": "Element"
    }, 
    "element.insertAdjacentElement": {
        "descr": "The insertAdjacentElement() method inserts a given element node at a given position relative to the element it is invoked upon.", 
        "name": "element.insertAdjacentElement", 
        "params": [
            {
                "descr": "A DOMString representing the position relative to the element; must be one of the following strings:  'beforebegin': Before the element itself. ", 
                "name": "position"
            }, 
            {
                "descr": "The element to be inserted into the tree.", 
                "name": "element"
            }
        ], 
        "path": "dom/element/insertadjacentelement", 
        "syntax": "element.insertAdjacentElement(position, element);", 
        "type": "Element"
    }, 
    "element.insertAdjacentHTML": {
        "descr": "insertAdjacentHTML() parses the specified text as HTML or XML and inserts the resulting nodes into the DOM tree at a specified position. It does not reparse the element it is being used on and thus it does not corrupt the existing elements inside the element. This, and avoiding the extra step of serialization make it much faster than direct innerHTML manipulation.", 
        "name": "element.insertAdjacentHTML", 
        "params": [
            {
                "descr": "Before the element itself.", 
                "name": "'beforebegin'"
            }, 
            {
                "descr": "Just inside the element, before its first child.", 
                "name": "'afterbegin'"
            }, 
            {
                "descr": "Just inside the element, after its last child.", 
                "name": "'beforeend'"
            }, 
            {
                "descr": "After the element itself.", 
                "name": "'afterend'"
            }
        ], 
        "path": "dom/element/insertadjacenthtml", 
        "syntax": "element.insertAdjacentHTML(position, text);", 
        "type": "Element"
    }, 
    "element.insertAdjacentText": {
        "descr": "The insertAdjacentText() method inserts a given text node at a given position relative to the element it is invoked upon.", 
        "name": "element.insertAdjacentText", 
        "params": [
            {
                "descr": "A DOMString representing the position relative to the element; must be one of the following strings:  'beforebegin': Before the element itself. ", 
                "name": "position"
            }, 
            {
                "descr": "A DOMString representing the text to be inserted into the tree.", 
                "name": "element"
            }
        ], 
        "path": "dom/element/insertadjacenttext", 
        "syntax": "element.insertAdjacentText(position, data);", 
        "type": "Element"
    }, 
    "element.localName": {
        "descr": "The Element.localName read-only property returns the local part of the qualified name of an element.", 
        "name": "element.localName", 
        "params": [], 
        "path": "dom/element/localname", 
        "syntax": "name = element.localName Return value A DOMString representing the local part of the element's qualified name. Example (Must be served with XML content type, such as text/xml or application/xhtml+xml.)", 
        "type": "Element"
    }, 
    "element.matches": {
        "descr": "The Element.matches() method returns true if the element would be selected by the specified selector string; otherwise, returns false.", 
        "name": "element.matches", 
        "params": [
            {
                "descr": "The specified selector string is invalid.", 
                "name": "SYNTAX_ERR"
            }
        ], 
        "path": "dom/element/matches", 
        "syntax": "var result = element.matches(selectorString);", 
        "type": "Element"
    }, 
    "element.name": {
        "descr": "name gets or sets the name property of a DOM object; it only applies to the following elements: <a>, <applet>, <button>, <form>, <frame>, <iframe>, <img>, <input>, <map>, <meta>, <object>, <param>, <select>, and <textarea>.", 
        "name": "element.name", 
        "params": [], 
        "path": "dom/element/name", 
        "syntax": "<form>, <frame>, <iframe>", 
        "type": "Element"
    }, 
    "element.namespaceURI": {
        "descr": "The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.", 
        "name": "element.namespaceURI", 
        "params": [], 
        "path": "dom/element/namespaceuri", 
        "syntax": "namespace = element.namespaceURI Example In this snippet, an element is being examined for its localName and its namespaceURI. If the namespaceURI returns the XUL namespace and the localName returns \"browser\", then the node is understood to be a XUL <browser/>. if (element.localName == \"browser\" &&     element.namespaceURI == \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\") {  // this is a XUL browser }", 
        "type": "Element"
    }, 
    "element.ongotpointercapture": {
        "descr": "ongotpointercapture is an EventHandler property of the Element interface that returns the event handler (function) for the gotpointercapture event type.", 
        "name": "element.ongotpointercapture", 
        "params": [
            {
                "descr": "The gotpointercapture event handler for element target.", 
                "name": "gotCaptureHandler"
            }
        ], 
        "path": "dom/element/ongotpointercapture", 
        "syntax": "var gotCaptureHandler = target.ongotpointercpature; Return value  gotCaptureHandler The gotpointercapture event handler for element target.  Example <html><script>function overHandler(ev) { // Determine the target event's gotpointercapture handler var gotCaptureHandler = ev.target.ongotpointercapture;}function init() { var el=document.getElementById(\"target\");\n or  el.onpointerover = overHandler;}</script><body onload=\"init();\n or \"><div id=\"target\"> Touch me ... </div></body></html>);", 
        "type": "Element"
    }, 
    "element.onlostpointercapture": {
        "descr": "onlostpointercapture is an EventHandler property of the Element interface that returns the event handler (function) for the lostpointercapture event type.", 
        "name": "element.onlostpointercapture", 
        "params": [
            {
                "descr": "The lostpointercapture event handler for element target.", 
                "name": "lostCaptureHandler"
            }
        ], 
        "path": "dom/element/onlostpointercapture", 
        "syntax": "var lostCaptureHandler = target.onlostpointercpature; Return value  lostCaptureHandler The lostpointercapture event handler for element target.  Example <html><script>function overHandler(ev) { // Determine the target event's lostpointercapture handler var lostCaptureHandler = ev.target.onlostpointercapture;}function init() { var el=document.getElementById(\"target\");\n or  el.onpointerover = overHandler;}</script><body onload=\"init();\n or \"><div id=\"target\"> Touch me ... </div></body></html>);", 
        "type": "Element"
    }, 
    "element.outerHTML": {
        "descr": "The outerHTML attribute of the element DOM interface gets the serialized HTML fragment describing the element including its descendants. It can be set to replace the element with nodes parsed from the given string.", 
        "name": "element.outerHTML", 
        "params": [], 
        "path": "dom/element/outerhtml", 
        "syntax": "var content = element.outerHTML; On return, content contains the serialized HTML fragment describing the element and its descendants. element.outerHTML = content; Replaces the element with the nodes generated by parsing the string content with the parent of element as the context node for the fragment parsing algorithm. Examples Getting the value of an element's outerHTML property: // HTML:// <div id=\"d\"><p>Content</p><p>Further Elaborated</p></div>d = document.getElementById(\"d\");\n or dump(d.outerHTML);\n or // the string '<div id=\"d\"><p>Content</p><p>Further Elaborated</p></div>'// is dumped to the console window);", 
        "type": "Element"
    }, 
    "element.prefix": {
        "descr": "The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.", 
        "name": "element.prefix", 
        "params": [], 
        "path": "dom/element/prefix", 
        "syntax": "string = element.prefix Examples The following logs \"x\" to the console. <x:div onclick=\"console.log(this.prefix)\"/>", 
        "type": "Element"
    }, 
    "element.querySelector": {
        "descr": "Returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.", 
        "name": "element.querySelector", 
        "params": [
            {
                "descr": "A group of selectors to match the descendant elements of the Element baseElement against; this must be valid CSS syntax, or a SyntaxError exception will occur. ", 
                "name": "selectors"
            }, 
            {
                "descr": "The specified selectors are invalid.", 
                "name": "SyntaxError"
            }
        ], 
        "path": "dom/element/queryselector", 
        "syntax": "element = baseElement.querySelector(selectors);", 
        "type": "Element"
    }, 
    "element.querySelectorAll": {
        "descr": "Returns a non-live NodeList of all elements descended from the element on which it is invoked that match the specified group of CSS selectors.", 
        "name": "element.querySelectorAll", 
        "params": [
            {
                "descr": "is a non-live node list [\u00a0NodeList[elements] ]\u00a0of element objects.", 
                "name": "elementList"
            }, 
            {
                "descr": "is an element object.", 
                "name": "baseElement"
            }, 
            {
                "descr": "is a group of selectors to match on or an elements of the DOM.", 
                "name": "selectors"
            }
        ], 
        "path": "dom/element/queryselectorall", 
        "syntax": "elementList = baseElement.querySelectorAll(selectors);", 
        "type": "Element"
    }, 
    "element.releasePointerCapture": {
        "descr": "Releases (stops) pointer capture that was previously set for a specific (PointerEvent) pointer.", 
        "name": "element.releasePointerCapture", 
        "params": [
            {
                "descr": "The identifier for a pointer event.", 
                "name": "pointerId"
            }
        ], 
        "path": "dom/element/releasepointercapture", 
        "syntax": "targetElement.releasePointerCapture(pointerId);", 
        "type": "Element"
    }, 
    "element.removeAttribute": {
        "descr": "removeAttribute removes an attribute from the specified element.", 
        "name": "element.removeAttribute", 
        "params": [], 
        "path": "dom/element/removeattribute", 
        "syntax": "element.removeAttribute(attrName);", 
        "type": "Element"
    }, 
    "element.removeAttributeNode": {
        "descr": "removeAttributeNode removes the specified attribute from the current element.", 
        "name": "element.removeAttributeNode", 
        "params": [], 
        "path": "dom/element/removeattributenode", 
        "syntax": "removedAttr = element.removeAttributeNode(attributeNode)", 
        "type": "Element"
    }, 
    "element.requestFullScreen": {
        "descr": "The Element.requestFullscreen() method issues an asynchronous request to make the element be displayed full-screen.", 
        "name": "element.requestFullScreen", 
        "params": [], 
        "path": "dom/element/requestfullscreen", 
        "syntax": "elt.requestFullscreen();", 
        "type": "Element"
    }, 
    "element.requestPointerLock": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "element.requestPointerLock", 
        "params": [], 
        "path": "dom/element/requestpointerlock", 
        "syntax": "Element.requestPointerLock()", 
        "type": "Element"
    }, 
    "element.scrollHeight": {
        "descr": "The Element.scrollHeight read-only attribute is a measurement of the height of an element's content, including content not visible on the screen due to overflow. The scrollHeight value is equal to the minimum clientHeight the element would require in order to fit all the content in the viewpoint without using a vertical scrollbar. It includes the element padding but not its margin.", 
        "name": "element.scrollHeight", 
        "params": [], 
        "path": "dom/element/scrollheight", 
        "syntax": "var intElemScrollHeight = element.scrollHeight; intElemScrollHeight is a variable storing an integer corresponding to the scrollHeight pixel value of the element. scrollHeight is a read-only property. Example   padding-top", 
        "type": "Element"
    }, 
    "element.scrollIntoView": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "element.scrollIntoView", 
        "params": [
            {
                "descr": "Is a Boolean value:  If true, the top of the element will be aligned to the top of the visible area of the scrollable ancestor. ", 
                "name": "alignToTop"
            }, 
            {
                "descr": "A boolean or an object with the following options:", 
                "name": "scrollIntoViewOptions"
            }
        ], 
        "path": "dom/element/scrollintoview", 
        "syntax": "Element.scrollIntoView()", 
        "type": "Element"
    }, 
    "element.scrollLeft": {
        "descr": "The Element.scrollLeft property gets or sets the number of pixels that an element's content is scrolled to the left.", 
        "name": "element.scrollLeft", 
        "params": [], 
        "path": "dom/element/scrollleft", 
        "syntax": "// Get the number of pixels scrolledvar sLeft = element.scrollLeft; sLeft is an integer representing the number of pixels that element has been scrolled to the left. // Set the number of pixels scrolledelement.scrollLeft = 10; scrollLeft can be set to any integer value, however:  If the element can't be scrolled (e.g. it has no overflow), scrollLeft", 
        "type": "Element"
    }, 
    "element.scrollTop": {
        "descr": "The Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward. An element's scrollTop is a measurement of the distance of an element's top to its topmost visible content. When an element content does not generate a vertical scrollbar, then its scrollTop value defaults to 0.", 
        "name": "element.scrollTop", 
        "params": [], 
        "path": "dom/element/scrolltop", 
        "syntax": "// Get the number of pixels scrolledvar  intElemScrollTop = someElement.scrollTop; After running this code, intElemScrollTop is an integer corresponding to number of pixels that the element's content has been scrolled upward. // Set the number of pixels scrolledelement.scrollTop = intValue; scrollTop can be set to any integer value, with certain caveats:  If the element can't be scrolled (e.g. it has no overflow or if the element is non-scrollable), scrollTop", 
        "type": "Element"
    }, 
    "element.scrollWidth": {
        "descr": "The Element.scrollWidth read\u2013only property returns either the width in pixels of the content of an element or the width of the element itself, whichever is greater. If the element is wider than its content area (for example, if there are scroll bars for scrolling through the content), the scrollWidth is larger than the clientWidth.", 
        "name": "element.scrollWidth", 
        "params": [], 
        "path": "dom/element/scrollwidth", 
        "syntax": "var xScrollWidth = element.scrollWidth; xScrollWidth is the width of the content of element in pixels. Example <!DOCTYPE html><html><head>\u00a0\u00a0 \u00a0<title>Example</title>\u00a0\u00a0 \u00a0<style>\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0div {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0overflow: hidden;\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0white-space: nowrap;\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0text-overflow: ellipsis;\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0#aDiv {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0width: 100px;\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0button {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0margin-bottom: 2em;\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\u00a0\u00a0 \u00a0</style></head><body>\u00a0\u00a0 \u00a0<div id=\"aDiv\">\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0FooBar-FooBar-FooBar-FooBar\u00a0\u00a0 \u00a0</div>\u00a0\u00a0 \u00a0<button id=\"aButton\">\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Check for overflow\u00a0\u00a0 \u00a0</button>\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0<div id=\"anotherDiv\">\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0FooBar-FooBar-FooBar-FooBar\u00a0\u00a0 \u00a0</div>\u00a0\u00a0 \u00a0<button id=\"anotherButton\">\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Check for overflow\u00a0\u00a0 \u00a0</button></body><script>\u00a0\u00a0 \u00a0var buttonOne = document.getElementById('aButton'),\u00a0\u00a0 \u00a0buttonTwo = document.getElementById('anotherButton'),\u00a0\u00a0 \u00a0divOne = document.getElementById('aDiv'),\u00a0\u00a0 \u00a0divTwo = document.getElementById('anotherDiv');\n or \u00a0\u00a0 \u00a0//check to determine if an overflow is happening\u00a0\u00a0 \u00a0function isOverflowing(element) {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return (element.scrollWidth > element.offsetWidth);\n or \u00a0\u00a0 \u00a0}\u00a0\u00a0 \u00a0function alertOverflow(element) {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0if (isOverflowing(element)) {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('Contents are overflowing the container.');\n or \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0} else {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('No overflows!');\n or \u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\u00a0\u00a0 \u00a0}\u00a0\u00a0 \u00a0buttonOne.addEventListener('click', function() {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alertOverflow(divOne);\n or \u00a0\u00a0 \u00a0});\n or \u00a0\u00a0 \u00a0buttonTwo.addEventListener('click', function() {\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alertOverflow(divTwo);\n or \u00a0\u00a0 \u00a0});\n or </script></html>);", 
        "type": "Element"
    }, 
    "element.setAttribute": {
        "descr": "Adds a new attribute or changes the value of an existing attribute on the specified element.", 
        "name": "element.setAttribute", 
        "params": [], 
        "path": "dom/element/setattribute", 
        "syntax": "element.setAttribute(name, value);", 
        "type": "Element"
    }, 
    "element.setAttributeNode": {
        "descr": "setAttributeNode() adds a new Attr node to the specified element.", 
        "name": "element.setAttributeNode", 
        "params": [], 
        "path": "dom/element/setattributenode", 
        "syntax": "var replacedAttr = element.setAttributeNode(attribute);", 
        "type": "Element"
    }, 
    "element.setCapture": {
        "descr": "Call this method during the handling of a mousedown event to retarget all mouse events to this element until the mouse button is released or document.releaseCapture() is called.", 
        "name": "element.setCapture", 
        "params": [
            {
                "descr": "If true, all events are targeted directly to this element; if false, events can also fire at descendants of this element.", 
                "name": "retargetToElement"
            }
        ], 
        "path": "dom/element/setcapture", 
        "syntax": "element.setCapture(retargetToElement);", 
        "type": "Element"
    }, 
    "element.setPointerCapture": {
        "descr": "Pointer capture allows events for a particular pointer event (PointerEvent) to be re-targeted to a particular element instead of the normal target (or hit test) at a pointer's location. This can be used to ensure that an element continues to receive pointer events even if the pointer device's contact moves off the element (for example by scrolling).", 
        "name": "element.setPointerCapture", 
        "params": [
            {
                "descr": "The identifier for a pointer event.", 
                "name": "pointerId"
            }
        ], 
        "path": "dom/element/setpointercapture", 
        "syntax": "targetElement.setPointerCapture(pointerId);", 
        "type": "Element"
    }, 
    "element.tagName": {
        "descr": "Returns the name of the element.", 
        "name": "element.tagName", 
        "params": [], 
        "path": "dom/element/tagname", 
        "syntax": "elementName = element.tagName;  elementName is a string containing the name of the current element.  Notes In XML (and XML-based languages such as XHTML), tagName", 
        "type": "Element"
    }, 
    "empty": {
        "descr": "This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:", 
        "name": "empty", 
        "params": [], 
        "path": "jquery/empty", 
        "syntax": ".empty() Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "encodeURI": {
        "descr": "The encodeURI() function encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).", 
        "name": "encodeURI", 
        "params": [
            {
                "descr": "A complete Uniform Resource Identifier.", 
                "name": "URI"
            }
        ], 
        "path": "javascript/global_objects/encodeuri", 
        "syntax": "encodeURI(URI)", 
        "type": "Global Objects"
    }, 
    "encodeURIComponent": {
        "descr": "The encodeURIComponent() function encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).", 
        "name": "encodeURIComponent", 
        "params": [
            {
                "descr": "String. A component of a URI.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/encodeuricomponent", 
        "syntax": "encodeURIComponent(str);", 
        "type": "Global Objects"
    }, 
    "end": {
        "descr": "Most of jQuery's DOM traversal methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use end() to pop the sets back off of the stack.", 
        "name": "end", 
        "params": [], 
        "path": "jquery/end", 
        "syntax": ".end() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "entries": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Object.entries", 
        "params": [
            {
                "descr": "The object whose enumerable own property [key, value] pairs are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/entries", 
        "syntax": "Object.entries()", 
        "type": "Object"
    }, 
    "eq": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .eq() method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set.", 
        "name": "eq", 
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the 0-based position of the element.", 
                "name": "index"
            }, 
            {
                "descr": "Type: Integer  An integer indicating the position of the element, counting backwards from the last element in the set.", 
                "name": "indexFromEnd"
            }
        ], 
        "path": "jquery/eq", 
        "syntax": ".eq( index ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "error": {
        "descr": "This method is a shortcut for .on( \"error\", handler ).", 
        "name": "error", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/error", 
        "syntax": ".error( handler ) Returns: jQueryversion deprecated: 1.8", 
        "type": "Events"
    }, 
    "error.toString": {
        "descr": "The toString() method returns a string representing the specified Error object.", 
        "name": "error.toString", 
        "params": [], 
        "path": "javascript/global_objects/error/tostring", 
        "syntax": "e.toString()", 
        "type": "Errors"
    }, 
    "escape": {
        "descr": "The deprecated escape() function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence. Use encodeURI or encodeURIComponent instead.", 
        "name": "escape", 
        "params": [
            {
                "descr": "A string to be encoded.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/escape", 
        "syntax": "escape(str)", 
        "type": "Global Objects"
    }, 
    "eval": {
        "descr": "The eval() function evaluates JavaScript code represented as a string.", 
        "name": "eval", 
        "params": [
            {
                "descr": "A string representing a JavaScript expression, statement, or sequence of statements. ", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/eval", 
        "syntax": "eval(string)", 
        "type": "Global Objects"
    }, 
    "event.currentTarget": {
        "descr": "This property will typically be equal to the this of the function.", 
        "name": "event.currentTarget", 
        "params": [], 
        "path": "jquery/event.currenttarget", 
        "syntax": "event.currentTargetReturns: Element   Description:  The current DOM element within the event bubbling phase.   version added: 1.3event.currentTarget  This property will typically be equal to the this of the function.  If you are using jQuery.proxy or another form of scope manipulation, this will be equal to whatever context you have provided, not event.currentTarget   Example: Alert that currentTarget matches the `this` keyword. $( \"p\" ).click(function( event ) {  alert( event.currentTarget === this );\n or  // true});", 
        "type": "Events"
    }, 
    "event.data": {
        "descr": "Within a for loop, pass the value of i to the .on() method so that the current iteration's value is preserved.", 
        "name": "event.data", 
        "params": [], 
        "path": "jquery/event.data", 
        "syntax": "event.dataReturns: Object   Description: An optional object of data passed to an event method when the current executing handler is bound.   version added: 1.1event.data Example: Within a for loop, pass the value of i to the .on()", 
        "type": "Events"
    }, 
    "event.delegateTarget": {
        "descr": "This property is most often useful in delegated events attached by .delegate() or .on(), where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.", 
        "name": "event.delegateTarget", 
        "params": [], 
        "path": "jquery/event.delegatetarget", 
        "syntax": "event.delegateTargetReturns: Element   Description: The element where the currently-called jQuery event handler was attached.  version added: 1.7event.delegateTarget  This property is most often useful in delegated events attached by .delegate()", 
        "type": "Events"
    }, 
    "event.isDefaultPrevented": {
        "descr": "Checks whether event.preventDefault() was called.", 
        "name": "event.isDefaultPrevented", 
        "params": [], 
        "path": "jquery/event.isdefaultprevented", 
        "syntax": "event.isDefaultPrevented() Returns: Boolean", 
        "type": "Events"
    }, 
    "event.isImmediatePropagationStopped": {
        "descr": "This property was introduced in DOM level 3.", 
        "name": "event.isImmediatePropagationStopped", 
        "params": [], 
        "path": "jquery/event.isimmediatepropagationstopped", 
        "syntax": "event.isImmediatePropagationStopped() Returns: Boolean", 
        "type": "Events"
    }, 
    "event.isPropagationStopped": {
        "descr": "This event method is described in the W3C DOM Level 3 specification.", 
        "name": "event.isPropagationStopped", 
        "params": [], 
        "path": "jquery/event.ispropagationstopped", 
        "syntax": "event.isPropagationStopped() Returns: Boolean", 
        "type": "Events"
    }, 
    "event.metaKey": {
        "descr": "Returns a boolean value (true or false) that indicates whether or not the META key was pressed at the time the event fired. This key might map to an alternative key name on some platforms.", 
        "name": "event.metaKey", 
        "params": [], 
        "path": "jquery/event.metakey", 
        "syntax": "event.metaKeyReturns: Boolean   Description: Indicates whether the META key was pressed when the event fired.  version added: 1.0.4event.metaKey  Returns a boolean value (true or false) that indicates whether or not the META key was pressed at the time the event fired. This key might map to an alternative key name on some platforms.", 
        "type": "Events"
    }, 
    "event.namespace": {
        "descr": "This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.", 
        "name": "event.namespace", 
        "params": [], 
        "path": "jquery/event.namespace", 
        "syntax": "event.namespaceReturns: String   Description: The namespace specified when the event was triggered.  version added: 1.4.3event.namespace  This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.  Example: Determine the event namespace used. <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>event.namespace demo</title>  <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script></head><body> <button>display event.namespace</button><p></p> <script>$( \"p\" ).on( \"test.something\", function( event ) {  alert( event.namespace );\n or });\n or $( \"button\" ).click(function( event ) {  $( \"p\" ).trigger( \"test.something\" );\n or });\n or </script> </body></html>);", 
        "type": "Events"
    }, 
    "event.pageX": {
        "descr": "Show the mouse position relative to the left and top edges of the document (within this iframe).", 
        "name": "event.pageX", 
        "params": [], 
        "path": "jquery/event.pagex", 
        "syntax": "event.pageXReturns: Number   Description: The mouse position relative to the left edge of the document.  version added: 1.0.4event.pageX Example: Show the mouse position relative to the left and top edges of the document (within this iframe).", 
        "type": "Events"
    }, 
    "event.pageY": {
        "descr": "Show the mouse position relative to the left and top edges of the document (within this iframe).", 
        "name": "event.pageY", 
        "params": [], 
        "path": "jquery/event.pagey", 
        "syntax": "event.pageYReturns: Number   Description: The mouse position relative to the top edge of the document.  version added: 1.0.4event.pageY Example: Show the mouse position relative to the left and top edges of the document (within this iframe).", 
        "type": "Events"
    }, 
    "event.preventDefault": {
        "descr": "For example, clicked anchors will not take the browser to a new URL. We can use event.isDefaultPrevented() to determine if this method has been called by an event handler that was triggered by this event.", 
        "name": "event.preventDefault", 
        "params": [], 
        "path": "jquery/event.preventdefault", 
        "syntax": "event.preventDefault() Returns: undefined", 
        "type": "Events"
    }, 
    "event.relatedTarget": {
        "descr": "For mouseout, indicates the element being entered; for mouseover, indicates the element being exited.", 
        "name": "event.relatedTarget", 
        "params": [], 
        "path": "jquery/event.relatedtarget", 
        "syntax": "event.relatedTargetReturns: Element   Description: The other DOM element involved in the event, if any.  version added: 1.1.4event.relatedTarget  For mouseout, indicates the element being entered; for mouseover, indicates the element being exited.   Example: On mouseout of anchors, alert the element type being entered. $( \"a\" ).mouseout(function( event ) {  alert( event.relatedTarget.nodeName );\n or  // \"DIV\"});", 
        "type": "Events"
    }, 
    "event.result": {
        "descr": "This property can be useful for getting previous return values of custom events.", 
        "name": "event.result", 
        "params": [], 
        "path": "jquery/event.result", 
        "syntax": "event.resultReturns: Object   Description: The last value returned by an event handler that was triggered by this event, unless the value was undefined.  version added: 1.3event.result  This property can be useful for getting previous return values of custom events.   Example: Display previous handler's return value <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>event.result demo</title>  <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script></head><body> <button>display event.result</button><p></p> <script>$( \"button\" ).click(function( event ) {  return \"hey\";});\n or $( \"button\" ).click(function( event ) {  $( \"p\" ).html( event.result );\n or });\n or </script> </body></html>);", 
        "type": "Events"
    }, 
    "event.stopImmediatePropagation": {
        "descr": "In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling event.stopPropagation(). To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use event.stopPropagation() instead.", 
        "name": "event.stopImmediatePropagation", 
        "params": [], 
        "path": "jquery/event.stopimmediatepropagation", 
        "syntax": "event.stopImmediatePropagation() Returns:", 
        "type": "Events"
    }, 
    "event.stopPropagation": {
        "descr": "We can use event.isPropagationStopped() to determine if this method was ever called (on that event object).", 
        "name": "event.stopPropagation", 
        "params": [], 
        "path": "jquery/event.stoppropagation", 
        "syntax": "event.stopPropagation() Returns:", 
        "type": "Events"
    }, 
    "event.target": {
        "descr": "The target property can be the element that registered for the event or a descendant of it. It is often useful to compare event.target to this in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.", 
        "name": "event.target", 
        "params": [], 
        "path": "jquery/event.target", 
        "syntax": "event.targetReturns: Element   Description:  The DOM element that initiated the event.   version added: 1.0event.target  The target property can be the element that registered for the event or a descendant of it. It is often useful to compare event.target to this in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.  Examples: Display the tag's name on click <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>event.target demo</title>  <style>  span, strong, p {    padding: 8px;    display: block;    border: 1px solid #999;  }  </style>  <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script></head><body> <div id=\"log\"></div><div>  <p>    <strong><span>click</span></strong>  </p></div> <script>$( \"body\" ).click(function( event ) {  $( \"#log\" ).html( \"clicked: \" + event.target.nodeName );\n or });\n or </script> </body></html>);", 
        "type": "Events"
    }, 
    "event.timeStamp": {
        "descr": "This property can be useful for profiling event performance by getting the event.timeStamp value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use (new Date).getTime() instead.", 
        "name": "event.timeStamp", 
        "params": [], 
        "path": "jquery/event.timestamp", 
        "syntax": "event.timeStampReturns: Number   Description: The difference in milliseconds between the time the browser created the event and January 1, 1970.  version added: 1.2.6event.timeStamp  This property can be useful for profiling event performance by getting the event.timeStamp value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use (new Date).getTime()", 
        "type": "Events"
    }, 
    "event.type": {
        "descr": "On all anchor clicks, alert the event type.", 
        "name": "event.type", 
        "params": [], 
        "path": "jquery/event.type", 
        "syntax": "event.typeReturns: String   Description: Describes the nature of the event.  version added: 1.0event.type Example: On all anchor clicks, alert the event type. $( \"a\" ).click(function( event ) {  alert( event.type );\n or  // \"click\"});", 
        "type": "Events"
    }, 
    "event.which": {
        "descr": "The event.which property normalizes event.keyCode and event.charCode. It is recommended to watch event.which for keyboard key input. For more detail, read about event.charCode on the MDN.", 
        "name": "event.which", 
        "params": [], 
        "path": "jquery/event.which", 
        "syntax": "event.whichReturns: Number   Description: For key or mouse events, this property indicates the specific key or button that was pressed.  version added: 1.1.3event.which  The event.which property normalizes event.keyCode and event.charCode. It is recommended to watch event.which for keyboard key input. For more detail, read about event.charCode on the MDN.  event.which also normalizes button presses (mousedown and mouseupevents), reporting 1", 
        "type": "Events"
    }, 
    "export": {
        "descr": "The export statement is used to export functions, objects or primitives from a given file (or module).", 
        "name": "export", 
        "params": [
            {
                "descr": "Identifier to be exported (so that it can be imported via import in another script).", 
                "name": "nameN"
            }
        ], 
        "path": "javascript/statements/export", 
        "syntax": "export { name1, name2, \u2026, nameN };export { variable1 as name1, variable2 as name2, \u2026, nameN };export let name1, name2, \u2026, nameN; // also varexport let name1 = \u2026, name2 = \u2026, \u2026, nameN; // also var, constexport default expression;export default function (\u2026) { \u2026 } // also class, function*export default function name1(\u2026) { \u2026 } // also class, function*export { name1 as default, \u2026 };export * from \u2026;export { name1, name2, \u2026, nameN } from \u2026;export { import1 as name1, import2 as name2, \u2026, nameN } from \u2026;", 
        "type": "Statements"
    }, 
    "ext.beginQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.beginQueryEXT() method of the WebGL API starts a timer query.", 
        "name": "ext.beginQueryEXT", 
        "params": [
            {
                "descr": "A GLenum specifying the target of the time query. ", 
                "name": "target"
            }, 
            {
                "descr": "A WebGLTimerQueryEXT object for which to start the time querying.", 
                "name": "query"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/beginqueryext", 
        "syntax": "void ext.beginQueryEXT(target, query);", 
        "type": "WebGL"
    }, 
    "ext.bindVertexArrayOES": {
        "descr": "The OES_vertex_array_object.bindVertexArrayOES() method of the WebGL API binds a passed WebGLVertexArrayObjectOES object to the buffer.", 
        "name": "ext.bindVertexArrayOES", 
        "params": [
            {
                "descr": "A WebGLVertexArrayObjectOES (VAO) object to bind.", 
                "name": "arrayObject"
            }
        ], 
        "path": "dom/oes_vertex_array_object/bindvertexarrayoes", 
        "syntax": "void ext.bindVertexArrayOES(arrayObject);", 
        "type": "WebGL"
    }, 
    "ext.createQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.createQueryEXT() method of the WebGL API creates and initializes WebGLTimerQueryEXT objects, which track the time needed to fully complete a set of GL commands.", 
        "name": "ext.createQueryEXT", 
        "params": [], 
        "path": "dom/ext_disjoint_timer_query/createqueryext", 
        "syntax": "WebGLTimerQueryEXT ext.createQueryEXT();", 
        "type": "WebGL"
    }, 
    "ext.createVertexArrayOES": {
        "descr": "The OES_vertex_array_object.createVertexArrayOES() method of the WebGL API creates and initializes a WebGLVertexArrayObjectOES object that represents a vertex array object (VAO) pointing to vertex array data and which provides names for different sets of vertex data.", 
        "name": "ext.createVertexArrayOES", 
        "params": [], 
        "path": "dom/oes_vertex_array_object/createvertexarrayoes", 
        "syntax": "WebGLVertexArrayObjectOES ext.createVertexArrayOES();", 
        "type": "WebGL"
    }, 
    "ext.deleteQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.deleteQueryEXT() method of the WebGL API deletes a given WebGLTimerQueryEXT object.", 
        "name": "ext.deleteQueryEXT", 
        "params": [
            {
                "descr": "A WebGLTimerQueryEXT object to delete.", 
                "name": "query"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/deletequeryext", 
        "syntax": "void ext.deleteQueryEXT(query);", 
        "type": "WebGL"
    }, 
    "ext.deleteVertexArrayOES": {
        "descr": "The OES_vertex_array_object.deleteVertexArrayOES() method of the WebGL API deletes a given WebGLVertexArrayObjectOES object.", 
        "name": "ext.deleteVertexArrayOES", 
        "params": [
            {
                "descr": "A WebGLVertexArrayObjectOES (VAO) object to delete.", 
                "name": "arrayObject"
            }
        ], 
        "path": "dom/oes_vertex_array_object/deletevertexarrayoes", 
        "syntax": "void ext.deleteVertexArrayOES(arrayObject);", 
        "type": "WebGL"
    }, 
    "ext.endQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.endQueryEXT() method of the WebGL API ends a timer query.", 
        "name": "ext.endQueryEXT", 
        "params": [
            {
                "descr": "A GLenum specifying the target of the time query. ", 
                "name": "target"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/endqueryext", 
        "syntax": "void ext.endQueryEXT(target);", 
        "type": "WebGL"
    }, 
    "ext.getQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.getQueryEXT() method of the WebGL API returns information about a query target.", 
        "name": "ext.getQueryEXT", 
        "params": [
            {
                "descr": "A GLenum specifying the target of the time query. ", 
                "name": "target"
            }, 
            {
                "descr": "A GLenum specifying which information to return. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/getqueryext", 
        "syntax": "any ext.getQueryEXT(target, pname);", 
        "type": "WebGL"
    }, 
    "ext.getQueryObjectEXT": {
        "descr": "The EXT_disjoint_timer_query.getQueryObjectEXT() method of the WebGL API returns the state of a query object.", 
        "name": "ext.getQueryObjectEXT", 
        "params": [
            {
                "descr": "A WebGLTimerQueryEXT object from which to return information.", 
                "name": "query"
            }, 
            {
                "descr": "A GLenum specifying which information to return. ", 
                "name": "pname"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/getqueryobjectext", 
        "syntax": "any ext.getQueryObjectEXT(query, pname);", 
        "type": "WebGL"
    }, 
    "ext.getTranslatedShaderSource": {
        "descr": "The WEBGL_debug_shaders.getTranslatedShaderSource() method is part of the WebGL API and allows you to debug a translated shader.", 
        "name": "ext.getTranslatedShaderSource", 
        "params": [
            {
                "descr": "A WebGLShader to get the translated source from.", 
                "name": "shader"
            }
        ], 
        "path": "dom/webgl_debug_shaders/gettranslatedshadersource", 
        "syntax": "gl.getExtension('WEBGL_debug_shaders').getTranslatedShaderSource(shader);", 
        "type": "WebGL"
    }, 
    "ext.isQueryEXT": {
        "descr": "The EXT_disjoint_timer_query.isQueryEXT() method of the WebGL API returns true if the passed object is a WebGLTimerQueryEXT object.", 
        "name": "ext.isQueryEXT", 
        "params": [
            {
                "descr": "A WebGLTimerQueryEXT object to test.", 
                "name": "query"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/isqueryext", 
        "syntax": "GLBoolean ext.isQueryEXT(query);", 
        "type": "WebGL"
    }, 
    "ext.isVertexArrayOES": {
        "descr": "The OES_vertex_array_object.isVertexArrayOES() method of the WebGL API returns true if the passed object is a WebGLVertexArrayObjectOES object.", 
        "name": "ext.isVertexArrayOES", 
        "params": [
            {
                "descr": "A WebGLVertexArrayObjectOES (VAO) object to test.", 
                "name": "arrayObject"
            }
        ], 
        "path": "dom/oes_vertex_array_object/isvertexarrayoes", 
        "syntax": "GLBoolean ext.isVertexArrayOES(arrayObject);", 
        "type": "WebGL"
    }, 
    "ext.loseContext": {
        "descr": "The WEBGL_lose_context.loseContext() method is part of the WebGL API and allows you to simulate losing the context of a WebGLRenderingContext context.", 
        "name": "ext.loseContext", 
        "params": [], 
        "path": "dom/webgl_lose_context/losecontext", 
        "syntax": "gl.getExtension('WEBGL_lose_context').loseContext();", 
        "type": "WebGL"
    }, 
    "ext.queryCounterEXT": {
        "descr": "The EXT_disjoint_timer_query.queryCounterEXT() method of the WebGL API records the current time into the corresponding query object.", 
        "name": "ext.queryCounterEXT", 
        "params": [
            {
                "descr": "A WebGLTimerQueryEXT object for which to record the current time.", 
                "name": "query"
            }, 
            {
                "descr": "A GLenum specifying the target of the time query. ", 
                "name": "target"
            }
        ], 
        "path": "dom/ext_disjoint_timer_query/querycounterext", 
        "syntax": "void ext.queryCounterEXT(query, target);", 
        "type": "WebGL"
    }, 
    "ext.restoreContext": {
        "descr": "The WEBGL_lose_context.restoreContext() method is part of the WebGL API and allows you to simulate restoring the context of a WebGLRenderingContext object.", 
        "name": "ext.restoreContext", 
        "params": [], 
        "path": "dom/webgl_lose_context/restorecontext", 
        "syntax": "gl.getExtension('WEBGL_lose_context').restoreContext();", 
        "type": "WebGL"
    }, 
    "extends": {
        "descr": "The extends keyword is used in a class declarations or class expressions to create a class with a child of another class.", 
        "name": "extends", 
        "params": [], 
        "path": "javascript/classes/extends", 
        "syntax": "class ChildClass extends ParentClass { ... } Description The extends keyword can be used to subclass custom classes as well as built-in objects. The .prototype of the extension must be an Object or null. Examples Using extends The first example creates a class called Square from a class called Polygon. This example is extracted from this live demo (source).", 
        "type": "Classes"
    }, 
    "fadeIn": {
        "descr": "The .fadeIn() method animates the opacity of the matched elements. It is similar to the .fadeTo() method but that method does not unhide the element and can specify the final opacity level.", 
        "name": "fadeIn", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/fadein", 
        "syntax": ".fadeIn( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "fadeOut": {
        "descr": "The .fadeOut() method animates the opacity of the matched elements. Once the opacity reaches 0, the display style property is set to none, so the element no longer affects the layout of the page.", 
        "name": "fadeOut", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/fadeout", 
        "syntax": ".fadeOut( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "fadeTo": {
        "descr": "The .fadeTo() method animates the opacity of the matched elements. It is similar to the .fadeIn() method but that method unhides the element and always fades to 100% opacity.", 
        "name": "fadeTo", 
        "params": [
            {
                "descr": "Type: String or Number  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Number  A number between 0 and 1 denoting the target opacity.", 
                "name": "opacity"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: String or Number  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Number  A number between 0 and 1 denoting the target opacity.", 
                "name": "opacity"
            }, 
            {
                "descr": "Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/fadeto", 
        "syntax": ".fadeTo( duration, opacity [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "fadeToggle": {
        "descr": "The .fadeToggle() method animates the opacity of the matched elements. When called on a visible element, the element's display style property is set to none once the opacity reaches 0, so the element no longer affects the layout of the page.", 
        "name": "fadeToggle", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }
        ], 
        "path": "jquery/fadetoggle", 
        "syntax": ".fadeToggle( [duration ] [, easing ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "filter": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .filter() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.", 
        "name": "filter", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match the current set of elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Function( Integer index, Element element ) => Boolean  A function used as a test for each element in the set. ", 
                "name": "function"
            }, 
            {
                "descr": "Type: Element  One or more DOM elements to match the current set of elements against.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: jQuery  An existing jQuery object to match the current set of elements against.", 
                "name": "selection"
            }
        ], 
        "path": "jquery/filter", 
        "syntax": ".filter( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "find": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .find() method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The .find() and .children() methods are similar, except that the latter only travels a single level down the DOM tree.", 
        "name": "find", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element or jQuery  An element or a jQuery object to match elements against.", 
                "name": "element"
            }
        ], 
        "path": "jquery/find", 
        "syntax": ".find( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "finish": {
        "descr": "When .finish() is called on an element, the currently-running animation and all queued animations (if any) immediately stop and their CSS properties set to their target values. All queued animations are removed.", 
        "name": "finish", 
        "params": [
            {
                "descr": "(default: 'fx') Type: String  The name of the queue in which to stop animations.", 
                "name": "queue"
            }
        ], 
        "path": "jquery/finish", 
        "syntax": ".finish( [queue ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "first": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .first() method constructs a new jQuery object from the first element in that set.", 
        "name": "first", 
        "params": [], 
        "path": "jquery/first", 
        "syntax": ".first() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "focus": {
        "descr": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.", 
        "name": "window.focus", 
        "params": [], 
        "path": "dom/window/focus", 
        "syntax": "window.focus()", 
        "type": "Window"
    }, 
    "focusin": {
        "descr": "This method is a shortcut for .on( \"focusin\", handler ) in the first two variations, and .trigger( \"focusin\" ) in the third.", 
        "name": "focusin", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/focusin", 
        "syntax": ".focusin( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "focusout": {
        "descr": "This method is a shortcut for .on( \"focusout\", handler ) when passed arguments, and .trigger( \"focusout\" ) when no arguments are passed.", 
        "name": "focusout", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/focusout", 
        "syntax": ".focusout( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "for": {
        "descr": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement or a set of statements executed in the loop.", 
        "name": "for", 
        "params": [
            {
                "descr": "An expression (including assignment expressions) or variable declaration. ", 
                "name": "initialization"
            }, 
            {
                "descr": "An expression to be evaluated before each loop iteration. ", 
                "name": "condition"
            }, 
            {
                "descr": "An expression to be evaluated at the end of each loop iteration. ", 
                "name": "final-expression"
            }, 
            {
                "descr": "A statement that is executed as long as the condition evaluates to true. ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/for", 
        "syntax": "for ([initialization]; [condition]; [final-expression])   statement", 
        "type": "Statements"
    }, 
    "for each...in": {
        "descr": "The for each...in statement is deprecated as the part of ECMA-357 (E4X) standard. E4X support has been removed, but for each...in will not be disabled and removed because of backward compatibility considerations. Consider using for...of instead. (Please refer to bug 791343.)", 
        "name": "for each...in", 
        "params": [
            {
                "descr": "Variable to iterate over property values, optionally declared with the var keyword. ", 
                "name": "variable"
            }, 
            {
                "descr": "Object for which the properties are iterated.", 
                "name": "object"
            }, 
            {
                "descr": "A statement to execute for each property. ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/for_each...in", 
        "syntax": "for each (variable in object) {  statement}", 
        "type": "Statements"
    }, 
    "for...in": {
        "descr": "The for...in statement iterates over the enumerable properties of an object, in arbitrary order. For each distinct property, statements can be executed.", 
        "name": "for...in", 
        "params": [
            {
                "descr": "A different property name is assigned to variable on each iteration.", 
                "name": "variable"
            }, 
            {
                "descr": "Object whose enumerable properties are iterated.", 
                "name": "object"
            }
        ], 
        "path": "javascript/statements/for...in", 
        "syntax": "for (variable in object) {...}", 
        "type": "Statements"
    }, 
    "for...of": {
        "descr": "The for...of statement creates a loop iterating over iterable objects (including Array, Map, Set, String, TypedArray, arguments object and so on), invoking a custom iteration hook with statements to be executed for the value of each distinct property.", 
        "name": "for...of", 
        "params": [
            {
                "descr": "On each iteration a value of a different property is assigned to variable.", 
                "name": "variable"
            }, 
            {
                "descr": "Object whose enumerable properties are iterated.", 
                "name": "iterable"
            }
        ], 
        "path": "javascript/statements/for...of", 
        "syntax": "for (variable of iterable) {  statement}", 
        "type": "Statements"
    }, 
    "frameElement": {
        "descr": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations.", 
        "name": "window.frameElement", 
        "params": [], 
        "path": "dom/window/frameelement", 
        "syntax": "frameEl = window.frameElement;  frameEl is the element which the window is embedded into. If the window isn't embedded into another document, or if the document into which it's embedded has a different origin (such as having been located from a different domain), this is null", 
        "type": "Window"
    }, 
    "frames": {
        "descr": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.", 
        "name": "window.frames", 
        "params": [], 
        "path": "dom/window/frames", 
        "syntax": "frameList = window.frames;  frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation. frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[ 0 ]", 
        "type": "Window"
    }, 
    "freeze": {
        "descr": "The Object.freeze() method freezes an object: that is, prevents new properties from being added to it; prevents existing properties from being removed; and prevents existing properties, or their enumerability, configurability, or writability, from being changed. In essence the object is made effectively immutable. The method returns the object being frozen.", 
        "name": "Object.freeze", 
        "params": [
            {
                "descr": "The object to freeze.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/freeze", 
        "syntax": "Object.freeze(obj)", 
        "type": "Object"
    }, 
    "from": {
        "descr": "The Array.from() method creates a new Array instance from an array-like or iterable object.", 
        "name": "Array.from", 
        "params": [
            {
                "descr": "An array-like or iterable object to convert to an array.", 
                "name": "arrayLike"
            }, 
            {
                "descr": "Optional. Map function to call on every element of the array.", 
                "name": "mapFn"
            }, 
            {
                "descr": "Optional. Value to use as this when executing mapFn.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/array/from", 
        "syntax": "Array.from are \"inherited\" by subclasses of Array and create new instances of the subclass, not Array. Syntax Array.from(arrayLike[, mapFn[, thisArg]])", 
        "type": "Array"
    }, 
    "fromCharCode": {
        "descr": "The static String.fromCharCode() method returns a string created by using the specified sequence of Unicode values.", 
        "name": "String.fromCharCode", 
        "params": [
            {
                "descr": "A sequence of numbers that are Unicode values.", 
                "name": "num1, ..., numN"
            }
        ], 
        "path": "javascript/global_objects/string/fromcharcode", 
        "syntax": "String.fromCharCode(num1[, ...[, numN]])", 
        "type": "String"
    }, 
    "fromCodePoint": {
        "descr": "The static String.fromCodePoint() method returns a string created by using the specified sequence of code points.", 
        "name": "String.fromCodePoint", 
        "params": [
            {
                "descr": "A sequence of code points.", 
                "name": "num1, ..., numN"
            }
        ], 
        "path": "javascript/global_objects/string/fromcodepoint", 
        "syntax": "String.fromCodePoint(num1[, ...[, numN]])", 
        "type": "String"
    }, 
    "fullScreen": {
        "descr": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.", 
        "name": "window.fullScreen", 
        "params": [
            {
                "descr": "A boolean. Possible Values:", 
                "name": "isInFullScreen"
            }
        ], 
        "path": "dom/window/fullscreen", 
        "syntax": "isInFullScreen = windowRef.fullScreen; With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking. Return Value  isInFullScreen A boolean. Possible Values:   true: The window is in full screen mode. false: The window is not in full screen mode.  Examples  Specification DOM Level 0. window.fullScreen is not part of any W3C specification or technical recommendation. Notes  This property is only reliable in Mozilla 1.9 (Firefox 3) and later. Mozilla 1.8 and earlier do have this property, but it always returns false", 
        "type": "Window"
    }, 
    "function": {
        "descr": "The function declaration defines a function with the specified parameters.", 
        "name": "function", 
        "params": [
            {
                "descr": "The function name.", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "param"
            }, 
            {
                "descr": "The statements which comprise the body of the function.", 
                "name": "statements"
            }
        ], 
        "path": "javascript/statements/function", 
        "syntax": "function name([param,[, param,[..., param]]]) {   [statements]}", 
        "type": "Statements"
    }, 
    "function*": {
        "descr": "The function* keyword can be used to define a generator function inside an expression.", 
        "name": "function*", 
        "params": [
            {
                "descr": "The function name. Can be omitted, in which case the function is anonymous. ", 
                "name": "name"
            }, 
            {
                "descr": "The name of an argument to be passed to the function. ", 
                "name": "paramN"
            }, 
            {
                "descr": "The statements which comprise the body of the function.", 
                "name": "statements"
            }
        ], 
        "path": "javascript/operators/function*", 
        "syntax": "function* [name]([param1[, param2[, ..., paramN]]]) {   statements}", 
        "type": "Operators"
    }, 
    "function.apply": {
        "descr": "The apply() method calls a function with a given this value and arguments provided as an array (or an array-like object).", 
        "name": "function.apply", 
        "params": [
            {
                "descr": "The value of this provided for the call to fun. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "An array-like object, specifying the arguments with which fun should be called, or null or undefined if no arguments should be provided to the function. ", 
                "name": "argsArray"
            }
        ], 
        "path": "javascript/global_objects/function/apply", 
        "syntax": "call()", 
        "type": "Function"
    }, 
    "function.bind": {
        "descr": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.", 
        "name": "function.bind", 
        "params": [
            {
                "descr": "The value to be passed as the this parameter to the target function when the bound function is called. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "Arguments to prepend to arguments provided to the bound function when invoking the target function.", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "javascript/global_objects/function/bind", 
        "syntax": "fun.bind(thisArg[, arg1[, arg2[, ...]]])", 
        "type": "Function"
    }, 
    "function.call": {
        "descr": "The call() method calls a function with a given this value and arguments provided individually.", 
        "name": "function.call", 
        "params": [
            {
                "descr": "The value of this provided for the call to fun. ", 
                "name": "thisArg"
            }, 
            {
                "descr": "Arguments for the object.", 
                "name": "arg1, arg2, ..."
            }
        ], 
        "path": "javascript/global_objects/function/call", 
        "syntax": "apply()", 
        "type": "Function"
    }, 
    "function.name": {
        "descr": "The function.name property returns the name of the function.", 
        "name": "function.name", 
        "params": [], 
        "path": "javascript/global_objects/function/name", 
        "syntax": "new Function(...)", 
        "type": "Function"
    }, 
    "function.toString": {
        "descr": "The toString() method returns a string representing the source code of the function.", 
        "name": "function.toString", 
        "params": [
            {
                "descr": "The amount of spaces to indent the string representation of the source code. ", 
                "name": "indentation  Obsolete since Gecko 17"
            }
        ], 
        "path": "javascript/global_objects/function/tostring", 
        "syntax": "function.toString(indentation)", 
        "type": "Function"
    }, 
    "generator.next": {
        "descr": "The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.", 
        "name": "generator.next", 
        "params": [
            {
                "descr": "The value to send to the generator.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/generator/next", 
        "syntax": "gen.next(value)", 
        "type": "Generator"
    }, 
    "generator.return": {
        "descr": "The return() method returns the given value and finishes the generator.", 
        "name": "generator.return", 
        "params": [
            {
                "descr": "The value to return.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/generator/return", 
        "syntax": "gen.return(value)", 
        "type": "Generator"
    }, 
    "generator.throw": {
        "descr": "The throw() method resumes the execution of a generator by throwing an error into it and returns an object with two properties done and value.", 
        "name": "generator.throw", 
        "params": [
            {
                "descr": "The exception to throw. For debugging purposes, it is useful to make it an instanceof Error.", 
                "name": "exception"
            }
        ], 
        "path": "javascript/global_objects/generator/throw", 
        "syntax": "gen.throw(exception)", 
        "type": "Generator"
    }, 
    "get": {
        "descr": "The get syntax binds an object property to a function that will be called when that property is looked up.", 
        "name": "get", 
        "params": [
            {
                "descr": "The name of the property to bind to the given function.", 
                "name": "prop"
            }, 
            {
                "descr": "Starting with ECMAScript 6, you can also use expressions for a computed property name to bind to the given function.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/functions/get", 
        "syntax": "{get prop() { ... } }{get [expression]() { ... } }", 
        "type": "Function"
    }, 
    "getComputedStyle": {
        "descr": "The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.", 
        "name": "window.getComputedStyle", 
        "params": [
            {
                "descr": "The Element for which to get the computed style.", 
                "name": "element"
            }, 
            {
                "descr": "A string specifying the pseudo-element to match. ", 
                "name": "pseudoElt Optional"
            }
        ], 
        "path": "dom/window/getcomputedstyle", 
        "syntax": "var style = window.getComputedStyle(element[, pseudoElt]);", 
        "type": "Window"
    }, 
    "getOwnPropertyDescriptor": {
        "descr": "The Object.getOwnPropertyDescriptor() method returns a property descriptor for an own property (that is, one directly present on an object, not present by dint of being along an object's prototype chain) of a given object.", 
        "name": "Object.getOwnPropertyDescriptor", 
        "params": [
            {
                "descr": "The object in which to look for the property.", 
                "name": "obj"
            }, 
            {
                "descr": "The name of the property whose description is to be retrieved.", 
                "name": "prop"
            }, 
            {
                "descr": "The value associated with the property (data descriptors only).", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).", 
                "name": "set"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.", 
                "name": "enumerable"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertydescriptor", 
        "syntax": "Object.getOwnPropertyDescriptor(obj, prop)", 
        "type": "Object"
    }, 
    "getOwnPropertyDescriptors": {
        "descr": "The Object.getOwnPropertyDescriptors() method returns all own property descriptors of a given object.", 
        "name": "Object.getOwnPropertyDescriptors", 
        "params": [
            {
                "descr": "The object for which to get all own property descriptors.", 
                "name": "obj"
            }, 
            {
                "descr": "The value associated with the property (data descriptors only).", 
                "name": "value"
            }, 
            {
                "descr": "true if and only if the value associated with the property may be changed (data descriptors only).", 
                "name": "writable"
            }, 
            {
                "descr": "A function which serves as a getter for the property, or undefined if there is no getter (accessor descriptors only).", 
                "name": "get"
            }, 
            {
                "descr": "A function which serves as a setter for the property, or undefined if there is no setter (accessor descriptors only).", 
                "name": "set"
            }, 
            {
                "descr": "true if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.", 
                "name": "configurable"
            }, 
            {
                "descr": "true if and only if this property shows up during enumeration of the properties on the corresponding object.", 
                "name": "enumerable"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertydescriptors", 
        "syntax": "Object.getOwnPropertyDescriptors(obj)", 
        "type": "Object"
    }, 
    "getOwnPropertyNames": {
        "descr": "The Object.getOwnPropertyNames() method returns an array of all properties (enumerable or not) found directly upon a given object.", 
        "name": "Object.getOwnPropertyNames", 
        "params": [
            {
                "descr": "The object whose enumerable and non-enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertynames", 
        "syntax": "Object.getOwnPropertyNames(obj)", 
        "type": "Object"
    }, 
    "getOwnPropertySymbols": {
        "descr": "The Object.getOwnPropertySymbols() method returns an array of all symbol properties found directly upon a given object.", 
        "name": "Object.getOwnPropertySymbols", 
        "params": [
            {
                "descr": "The object whose symbol properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getownpropertysymbols", 
        "syntax": "Object.getOwnPropertySymbols(obj)", 
        "type": "Object"
    }, 
    "getPrototypeOf": {
        "descr": "The Object.getPrototypeOf() method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.", 
        "name": "Object.getPrototypeOf", 
        "params": [
            {
                "descr": "The object whose prototype is to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/getprototypeof", 
        "syntax": "Object.getPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "getSelection": {
        "descr": "Returns a Selection object representing the range of text selected by the user or the current position of the caret.", 
        "name": "window.getSelection", 
        "params": [], 
        "path": "dom/window/getselection", 
        "syntax": "selection = window.getSelection();", 
        "type": "Window"
    }, 
    "has": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .has() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.", 
        "name": "has", 
        "params": [
            {
                "descr": "Type: String  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element  A DOM element to match elements against.", 
                "name": "contained"
            }
        ], 
        "path": "jquery/has", 
        "syntax": ".has( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "hasClass": {
        "descr": "Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:", 
        "name": "hasClass", 
        "params": [
            {
                "descr": "Type: String  The class name to search for.", 
                "name": "className"
            }
        ], 
        "path": "jquery/hasclass", 
        "syntax": ".hasClass( className ) Returns: Boolean", 
        "type": "Manipulation"
    }, 
    "height": {
        "descr": "The difference between .css( \"height\" ) and .height() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .height() method is recommended when an element's height needs to be used in a mathematical calculation.", 
        "name": "height", 
        "params": [
            {
                "descr": "Type: String or Number  An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).", 
                "name": "value"
            }, 
            {
                "descr": "Type: Function( Integer index, Integer height ) => String or Number  A function returning the height to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/height", 
        "syntax": ".height() Returns: Number", 
        "type": "Dimensions"
    }, 
    "hide": {
        "descr": "With no parameters, the .hide() method is the simplest way to hide an element:", 
        "name": "hide", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/hide", 
        "syntax": ".hide() Returns: jQuery", 
        "type": "Effects"
    }, 
    "history": {
        "descr": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).", 
        "name": "window.history", 
        "params": [], 
        "path": "dom/window/history", 
        "syntax": "var historyObj = window.history; Example history.back();\n or      // equivalent to clicking back buttonhistory.go(-1);\n or      // equivalent to history.back();", 
        "type": "Window"
    }, 
    "history.length": {
        "descr": "The History.length read-only property returns an Integer representing the number of elements in the session history, including the currently loaded page. For example, for a page loaded in a new tab this property returns 1.", 
        "name": "history.length", 
        "params": [], 
        "path": "dom/history/length", 
        "syntax": "length = history.length; Examples var result = window.history.length; // Returns the size of the history of the current session. Specifications    Specification Status Comment   WHATWG HTML Living StandardThe definition of 'History.length' in that specification. Living Standard No change from HTML5.   HTML5The definition of 'History.length' in that specification. Recommendation Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support (Yes) (Yes) (Yes) (Yes) (Yes)         Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "History"
    }, 
    "hover": {
        "descr": "The .hover() method binds handlers for both mouseenter and mouseleave events. You can use it to simply apply behavior to an element during the time the mouse is within the element.", 
        "name": "hover", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the mouse pointer enters the element.", 
                "name": "handlerIn"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the mouse pointer leaves the element.", 
                "name": "handlerOut"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the mouse pointer enters or leaves the element.", 
                "name": "handlerInOut"
            }
        ], 
        "path": "jquery/hover", 
        "syntax": ".hover( handlerIn, handlerOut ) Returns: jQuery", 
        "type": "Events"
    }, 
    "html": {
        "descr": "This method is not available on XML documents.", 
        "name": "html", 
        "params": [
            {
                "descr": "Type: htmlString  A string of HTML to set as the content of each matched element.", 
                "name": "htmlString"
            }, 
            {
                "descr": "Type: Function( Integer index, htmlString oldhtml ) => htmlString  A function returning the HTML content to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/html", 
        "syntax": ".html() Returns: String", 
        "type": "Manipulation"
    }, 
    "if...else": {
        "descr": "The if statement executes a statement if a specified condition is true. If the condition is false, another statement can be executed.", 
        "name": "if...else", 
        "params": [
            {
                "descr": "An expression that evaluates to true or false.", 
                "name": "condition"
            }, 
            {
                "descr": "Statement that is executed if condition evaluates to true. ", 
                "name": "statement1"
            }, 
            {
                "descr": "Statement that is executed if condition evaluates to false and the else clause exists. ", 
                "name": "statement2"
            }
        ], 
        "path": "javascript/statements/if...else", 
        "syntax": "if (condition)   statement1[else   statement2]", 
        "type": "Statements"
    }, 
    "import": {
        "descr": "The import statement is used to import functions, objects or primitives that have been exported from an external module, another script, etc.", 
        "name": "import", 
        "params": [
            {
                "descr": "Name of the object that will receive the imported values.", 
                "name": "name"
            }, 
            {
                "descr": "Name of the exported members to be imported.", 
                "name": "member, memberN"
            }, 
            {
                "descr": "Name of the exported default to be imported.", 
                "name": "defaultMember"
            }, 
            {
                "descr": "Name of the object that will receive the imported property", 
                "name": "alias, aliasN"
            }, 
            {
                "descr": "The name of the module to import. ", 
                "name": "module-name"
            }
        ], 
        "path": "javascript/statements/import", 
        "syntax": "import defaultMember from \"module-name\";import * as name from \"module-name\";import { member } from \"module-name\";import { member as alias } from \"module-name\";import { member1 , member2 } from \"module-name\";import { member1 , member2 as alias2 , [...] } from \"module-name\";import defaultMember, { member [ , [...] ] } from \"module-name\";import defaultMember, * as name from \"module-name\";import \"module-name\";  name Name of the object that will receive the imported values.   member, memberN Name of the exported members to be imported. defaultMember Name of the exported default to be imported. alias, aliasN Name of the object that will receive the imported property module-name The name of the module to import. This is a file name.  Description The name parameter is the name of the object that will receive the exported members. The member parameters specify individual members, while the name parameter imports all of them. name may also be a function if the module exports a single default parameter rather than a series of members. Below are examples to clarify the syntax. Import an entire module's contents. This inserts myModule into the current scope, containing all the exported bindings from \"my-module.js\". import * as myModule from \"my-module\"; Import a single member of a module. This inserts myMember into the current scope. import {myMember} from \"my-module\"; Import multiple members of a module. This inserts both foo and bar into the current scope. import {foo, bar} from \"my-module\"; Import a member with a more convenient alias. This inserts shortName into the current scope. import {reallyReallyLongModuleMemberName as shortName} from \"my-module\"; Import multiple members of a module with convenient aliases. import {reallyReallyLongModuleMemberName as shortName, anotherLongModuleName as short} from \"my-module\"; Import an entire module for side effects only, without importing any bindings. import \"my-module\"; Importing defaults It is possible to have default export (whether it is an object, a function, a class, etc.). Reciprocally, it is possible to use the import", 
        "type": "Statements"
    }, 
    "in": {
        "descr": "The in operator returns true if the specified property is in the specified object.", 
        "name": "in", 
        "params": [
            {
                "descr": "A string or symbol representing a property name or array index (non-symbols will be coerced to strings).", 
                "name": "prop"
            }, 
            {
                "descr": "Name of an object.", 
                "name": "objectName"
            }
        ], 
        "path": "javascript/operators/in", 
        "syntax": "prop in objectName Parameters  prop A string or symbol representing a property name or array index (non-symbols will be coerced to strings).   objectName", 
        "type": "Operators"
    }, 
    "index": {
        "descr": "If no argument is passed to the .index() method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.", 
        "name": "index", 
        "params": [
            {
                "descr": "Type: Selector  A selector representing a jQuery collection in which to look for an element.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element or jQuery  The DOM element or first element within the jQuery object to look for.", 
                "name": "element"
            }
        ], 
        "path": "jquery/index/index", 
        "syntax": ".index() Returns: Integer", 
        "type": "Miscellaneous"
    }, 
    "innerHeight": {
        "descr": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.", 
        "name": "window.innerHeight", 
        "params": [], 
        "path": "dom/window/innerheight", 
        "syntax": "var intViewportHeight = window.innerHeight; Value On return, intViewportHeight is the height of the browser window's viewport. The window.innerHeight property is read only; it has no default value. Notes The innerHeight property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the height of the viewport excluding, if rendered, the horizontal scrollbar. Example Assuming a frameset var intFrameHeight = window.innerHeight; // orvar intFrameHeight = self.innerHeight;// will return the height of the frame viewport within the framesetvar intFramesetHeight = parent.innerHeight;// will return the height of the viewport of the closest framesetvar intOuterFramesetHeight = top.innerHeight;// will return the height of the viewport of the outermost frameset  To change the size of a window, see window.resizeBy()", 
        "type": "Window"
    }, 
    "innerWidth": {
        "descr": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.", 
        "name": "window.innerWidth", 
        "params": [], 
        "path": "dom/window/innerwidth", 
        "syntax": "var intViewportWidth = window.innerWidth; Value intViewportWidth stores the window.innerWidth property value. The window.innerWidth property is read only; it has no default value. Notes The innerWidth property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the width of the viewport excluding, if rendered, the vertical scrollbar. Example // This will return the width of the viewportvar intFrameWidth = window.innerWidth;// This will return the width of the frame viewport within a framesetvar intFrameWidth = self.innerWidth;// This will return the width of the viewport of the closest framesetvar intFramesetWidth = parent.innerWidth;// This will return the width of the viewport of the outermost framesetvar intOuterFramesetWidth = top.innerWidth; To change the size of a window, see window.resizeBy and window.resizeTo. Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'window.innerWidth' in that specification. Working Draft Initial definition    Browser compatibility", 
        "type": "Window"
    }, 
    "insertAfter": {
        "descr": "The .after() and .insertAfter() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .after(), the selector expression preceding the method is the container after which the content is inserted. With .insertAfter(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.", 
        "name": "insertAfter", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/insertafter", 
        "syntax": ".insertAfter( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "insertBefore": {
        "descr": "The .before() and .insertBefore() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .before(), the selector expression preceding the method is the container before which the content is inserted. With .insertBefore(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.", 
        "name": "insertBefore", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/insertbefore", 
        "syntax": ".insertBefore( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "instanceof": {
        "descr": "The instanceof operator tests whether an object has in its prototype chain the prototype property of a constructor.", 
        "name": "instanceof", 
        "params": [
            {
                "descr": "The object to test.", 
                "name": "object"
            }, 
            {
                "descr": "Function to test against", 
                "name": "constructor"
            }
        ], 
        "path": "javascript/operators/instanceof", 
        "syntax": "object instanceof constructor Parameters  object The object to test.   constructor Function to test against  Description The instanceof operator tests presence of constructor.prototype in object's prototype chain. // defining constructorsfunction C(){}function D(){}var o = new C();\n or // true, because: Object.getPrototypeOf(o) === C.prototypeo instanceof C;// false, because D.prototype is nowhere in o's prototype chaino instanceof D;o instanceof Object; // true, because:C.prototype instanceof Object // trueC.prototype = {};var o2 = new C();\n or o2 instanceof C; // true// false, because C.prototype is nowhere in// o's prototype chain anymoreo instanceof C; D.prototype = new C();\n or  // use inheritancevar o3 = new D();\n or o3 instanceof D; // trueo3 instanceof C; // true);", 
        "type": "Operators"
    }, 
    "is": {
        "descr": "The Object.is() method determines whether two values are the same value.", 
        "name": "Object.is", 
        "params": [
            {
                "descr": "The first value to compare.", 
                "name": "value1"
            }, 
            {
                "descr": "The second value to compare.", 
                "name": "value2"
            }
        ], 
        "path": "javascript/global_objects/object/is", 
        "syntax": "Object.is(value1, value2);", 
        "type": "Object"
    }, 
    "isArray": {
        "descr": "The Array.isArray() determines whether the passed value is an Array.", 
        "name": "Array.isArray", 
        "params": [
            {
                "descr": "The object to be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/array/isarray", 
        "syntax": "Array.isArray(obj)", 
        "type": "Array"
    }, 
    "isExtensible": {
        "descr": "The Object.isExtensible() method determines if an object is extensible (whether it can have new properties added to it).", 
        "name": "Object.isExtensible", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isextensible", 
        "syntax": "Object.isExtensible(obj)", 
        "type": "Object"
    }, 
    "isFinite": {
        "descr": "The Number.isFinite() method determines whether the passed value is a finite number.", 
        "name": "Number.isFinite", 
        "params": [
            {
                "descr": "The value to be tested for finiteness.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/number/isfinite", 
        "syntax": "Number.isFinite(value)", 
        "type": "Number"
    }, 
    "isFrozen": {
        "descr": "The Object.isFrozen() determines if an object is frozen.", 
        "name": "Object.isFrozen", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/isfrozen", 
        "syntax": "Object.isFrozen(obj)", 
        "type": "Object"
    }, 
    "isInteger": {
        "descr": "The Number.isInteger() method determines whether the passed value is an integer.", 
        "name": "Number.isInteger", 
        "params": [
            {
                "descr": "The value to be tested for being an integer.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/number/isinteger", 
        "syntax": "Number.isInteger(value)", 
        "type": "Number"
    }, 
    "isNaN": {
        "descr": "The Number.isNaN() method determines whether the passed value is NaN. It is a more robust version of the original, global isNaN().", 
        "name": "Number.isNaN", 
        "params": [
            {
                "descr": "The value to be tested for NaN.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/number/isnan", 
        "syntax": "Number.isNaN(value)", 
        "type": "Number"
    }, 
    "isSafeInteger": {
        "descr": "The Number.isSafeInteger() method determines whether the provided value is a number that is a safe integer. A safe integer is an integer that", 
        "name": "Number.isSafeInteger", 
        "params": [
            {
                "descr": "The value to be tested for being a safe integer.", 
                "name": "testValue"
            }
        ], 
        "path": "javascript/global_objects/number/issafeinteger", 
        "syntax": "Number.isSafeInteger(testValue)", 
        "type": "Number"
    }, 
    "isSealed": {
        "descr": "The Object.isSealed() method determines if an object is sealed.", 
        "name": "Object.isSealed", 
        "params": [
            {
                "descr": "The object which should be checked.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/issealed", 
        "syntax": "Object.isSealed(obj)", 
        "type": "Object"
    }, 
    "isSecureContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.isSecureContext", 
        "params": [], 
        "path": "dom/window/issecurecontext", 
        "syntax": "Window.isSecureContext read-only property indicates whether a context is capable of using features that require secure contexts. Syntax var isSecure = Window.isSecureContext Examples Feature detection You can use feature detection to check whether they are in a secure context or not by using the isSecureContext boolean which is exposed on the global scope. if (window.isSecureContext) {  // Page is a secure context so service workers are now available  navigator.serviceWorker.register(\"/offline-worker.js\").then(function () {    ...  });\n or });", 
        "type": "Window"
    }, 
    "jQuery": {
        "descr": "In the first formulation listed above, jQuery() \u2014 which can also be written as $() \u2014 searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:", 
        "name": "jQuery", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Element or jQuery  A DOM Element, Document, or jQuery to use as context", 
                "name": "context"
            }, 
            {
                "descr": "Type: Element  A DOM element to wrap in a jQuery object.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Array  An array containing a set of DOM elements to wrap in a jQuery object.", 
                "name": "elementArray"
            }, 
            {
                "descr": "Type: PlainObject  A plain object to wrap in a jQuery object.", 
                "name": "object"
            }, 
            {
                "descr": "Type: jQuery  An existing jQuery object to clone.", 
                "name": "selection"
            }, 
            {
                "descr": "Type: htmlString  A string of HTML to create on the fly. ", 
                "name": "html"
            }, 
            {
                "descr": "Type: document  A document in which the new elements will be created.", 
                "name": "ownerDocument"
            }, 
            {
                "descr": "Type: htmlString  A string defining a single, standalone, HTML element (e.g. ", 
                "name": "html"
            }, 
            {
                "descr": "Type: PlainObject  An object of attributes, events, and methods to call on the newly-created element.", 
                "name": "attributes"
            }, 
            {
                "descr": "Type: Function() The function to execute when the DOM is ready.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery", 
        "syntax": "jQuery( selector [, context ] ) Returns: jQuery", 
        "type": "Miscellaneous"
    }, 
    "jQuery.Callbacks": {
        "descr": "The $.Callbacks() function is internally used to provide the base functionality behind the jQuery $.ajax() and $.Deferred() components. It can be used as a similar base to define functionality for new components.", 
        "name": "jQuery.Callbacks", 
        "params": [
            {
                "descr": "Type: String  An optional list of space-separated flags that change how the callback list behaves.", 
                "name": "flags"
            }
        ], 
        "path": "jquery/jquery.callbacks", 
        "syntax": "jQuery.Callbacks( flags ) Returns: Callbacks", 
        "type": "Callbacks Object"
    }, 
    "jQuery.Deferred": {
        "descr": "The jQuery.Deferred() factory creates a new deferred object.", 
        "name": "jQuery.Deferred", 
        "params": [
            {
                "descr": "Type: Function( Deferred deferred )  A function that is called just before the constructor returns.", 
                "name": "beforeStart"
            }
        ], 
        "path": "jquery/jquery.deferred", 
        "syntax": "jQuery.Deferred( [beforeStart ] ) Returns: Deferred", 
        "type": "Deferred Object"
    }, 
    "jQuery.ajax": {
        "descr": "An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:", 
        "name": "jQuery.ajax", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, all requests are sent asynchronously (i.e. ", 
                "name": "async"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, PlainObject settings ) A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. ", 
                "name": "beforeSend"
            }, 
            {
                "descr": "(default: true, false for dataType 'script' and 'jsonp') Type: Boolean  If set to false, it will force requested pages not to be cached by the browser. ", 
                "name": "cache"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus ) A function to be called when the request finishes (after success and error callbacks are executed). ", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type. ", 
                "name": "contents"
            }, 
            {
                "descr": "(default: 'application/x-www-form-urlencoded; charset=UTF-8') Type: Boolean or String  When sending data to the server, use this content type. ", 
                "name": "contentType"
            }, 
            {
                "descr": "Type: PlainObject  This object will be the context of all Ajax-related callbacks. ", 
                "name": "context"
            }, 
            {
                "descr": "(default: {\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}) Type: PlainObject  An object containing dataType-to-dataType converters. ", 
                "name": "converters"
            }, 
            {
                "descr": "(default: false for same-domain requests, true for cross-domain requests) Type: Boolean  If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to true. This allows, for example, server-side redirection to another domain. (version added: 1.5)", 
                "name": "crossDomain"
            }, 
            {
                "descr": "Type: PlainObject or String or Array  Data to be sent to the server. ", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( String data, String type ) => Anything  A function to be used to handle the raw response data of XMLHttpRequest. ", 
                "name": "dataFilter"
            }, 
            {
                "descr": "(default: Intelligent Guess (xml, json, script, or html)) Type: String  The type of data that you're expecting back from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function( jqXHR jqXHR, String textStatus, String errorThrown ) A function to be called if the request fails. ", 
                "name": "error"
            }, 
            {
                "descr": "(default: true) Type: Boolean  Whether to trigger global Ajax event handlers for this request. ", 
                "name": "global"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject  An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. ", 
                "name": "headers"
            }, 
            {
                "descr": "(default: false) Type: Boolean  Allow the request to be successful only if the response has changed since the last request. ", 
                "name": "ifModified"
            }, 
            {
                "descr": "(default: depends on current location protocol) Type: Boolean  Allow the current environment to be recognized as \"local,\" (e.g. ", 
                "name": "isLocal"
            }, 
            {
                "descr": "Type: String or Boolean  Override the callback function name in a JSONP request. ", 
                "name": "jsonp"
            }, 
            {
                "descr": "Type: String or Function() Specify the callback function name for a JSONP request. ", 
                "name": "jsonpCallback"
            }, 
            {
                "descr": "(default: 'GET') Type: String  The HTTP method to use for the request (e.g. ", 
                "name": "method"
            }, 
            {
                "descr": "Type: String  A mime type to override the XHR mime type. ", 
                "name": "mimeType"
            }, 
            {
                "descr": "Type: String  A password to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "password"
            }, 
            {
                "descr": "(default: true) Type: Boolean  By default, data passed in to the data option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to false.", 
                "name": "processData"
            }, 
            {
                "descr": "Type: String  Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). ", 
                "name": "scriptCharset"
            }, 
            {
                "descr": "(default: {}) Type: PlainObject   An object of numeric HTTP codes and functions to be called when the response has the corresponding code. ", 
                "name": "statusCode"
            }, 
            {
                "descr": "Type: Function( Anything data, String textStatus, jqXHR jqXHR ) A function to be called if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: Number  Set a timeout (in milliseconds) for the request. ", 
                "name": "timeout"
            }, 
            {
                "descr": "Type: Boolean  Set this to true if you wish to use the traditional style of param serialization.", 
                "name": "traditional"
            }, 
            {
                "descr": "(default: 'GET') Type: String  An alias for method. ", 
                "name": "type"
            }, 
            {
                "descr": "(default: The current page) Type: String   A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: String  A username to be used with XMLHttpRequest in response to an HTTP access authentication request.", 
                "name": "username"
            }, 
            {
                "descr": "(default: ActiveXObject when available (IE), the XMLHttpRequest otherwise) Type: Function() Callback for creating the XMLHttpRequest object. ", 
                "name": "xhr"
            }, 
            {
                "descr": "Type: PlainObject   An object of fieldName-fieldValue pairs to set on the native XHR object. ", 
                "name": "xhrFields"
            }
        ], 
        "path": "jquery/jquery.ajax", 
        "syntax": "jQuery.ajax( url [, settings ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.ajaxPrefilter": {
        "descr": "A typical prefilter registration using $.ajaxPrefilter() looks like this:", 
        "name": "jQuery.ajaxPrefilter", 
        "params": [
            {
                "descr": "Type: String  An optional string containing one or more space-separated dataTypes", 
                "name": "dataTypes"
            }, 
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to set default values for future Ajax requests.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/jquery.ajaxprefilter", 
        "syntax": "jQuery.ajaxPrefilter( [dataTypes ], handler ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "jQuery.ajaxSetup": {
        "descr": "For details on the settings available for $.ajaxSetup(), see $.ajax().", 
        "name": "jQuery.ajaxSetup", 
        "params": [
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the default Ajax request. ", 
                "name": "options"
            }
        ], 
        "path": "jquery/jquery.ajaxsetup", 
        "syntax": "jQuery.ajaxSetup( options ) Returns:", 
        "type": "Ajax"
    }, 
    "jQuery.ajaxTransport": {
        "descr": "A transport is an object that provides two methods, send and abort, that are used internally by $.ajax() to issue requests. A transport is the most advanced way to enhance $.ajax() and should be used only as a last resort when prefilters and converters are insufficient.", 
        "name": "jQuery.ajaxTransport", 
        "params": [
            {
                "descr": "Type: String  A string identifying the data type to use", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: Function( PlainObject options, PlainObject originalOptions, jqXHR jqXHR ) A handler to return the new transport object to use with the data type provided in the first argument.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/jquery.ajaxtransport", 
        "syntax": "jQuery.ajaxTransport( dataType, handler ) Returns: undefined", 
        "type": "Ajax"
    }, 
    "jQuery.browser": {
        "descr": "The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "name": "jQuery.browser", 
        "params": [], 
        "path": "jquery/jquery.browser", 
        "syntax": "jQuery.browserReturns: PlainObjectversion deprecated: 1.3, removed: 1.9   Description: Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.  version added: 1.0jQuery.browser  The $.browser property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.", 
        "type": "Utilities"
    }, 
    "jQuery.contains": {
        "descr": "The $.contains() method returns true if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns false. Only element nodes are supported; if the second argument is a text or comment node, $.contains() will return false.", 
        "name": "jQuery.contains", 
        "params": [
            {
                "descr": "Type: Element  The DOM element that may contain the other element.", 
                "name": "container"
            }, 
            {
                "descr": "Type: Element  The DOM element that may be contained by (a descendant of) the other element.", 
                "name": "contained"
            }
        ], 
        "path": "jquery/jquery.contains", 
        "syntax": "jQuery.contains( container, contained ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.cssHooks": {
        "descr": "The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.", 
        "name": "jQuery.cssHooks", 
        "params": [], 
        "path": "jquery/jquery.csshooks", 
        "syntax": "jQuery.cssHooksReturns: Object   Description: Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.  version added: 1.4.3jQuery.cssHooks  The $.cssHooks object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients.  For example, some versions of Webkit-based browsers require -webkit-border-radius to set the border-radius on an element, while earlier Firefox versions require -moz-border-radius. A css hook can normalize these vendor-prefixed properties to let .css()", 
        "type": "Miscellaneous"
    }, 
    "jQuery.cssNumber": {
        "descr": "You can think about jQuery.cssNumber as a list of all CSS properties you might use without a unit. It's used by .css() to determine if it needs to add px to unitless values.", 
        "name": "jQuery.cssNumber", 
        "params": [], 
        "path": "jquery/jquery.cssnumber", 
        "syntax": "jQuery.cssNumberReturns: Object   Description: An object containing all CSS properties that may be used without a unit. The .css()", 
        "type": "Manipulation"
    }, 
    "jQuery.data": {
        "descr": "Note: This is a low-level method; a more convenient .data() is also available.", 
        "name": "jQuery.data", 
        "params": [
            {
                "descr": "Type: Element  The DOM element to associate with the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to set.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Anything  The new data value; this can be any Javascript type except undefined.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  Name of the data stored.", 
                "name": "key"
            }, 
            {
                "descr": "Type: Element  The DOM element to query for the data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.data", 
        "syntax": "jQuery.data( element, key, value ) Returns: Object", 
        "type": "Data"
    }, 
    "jQuery.dequeue": {
        "descr": "Note: This is a low-level method, you should probably use .dequeue() instead.", 
        "name": "jQuery.dequeue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove and execute a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }
        ], 
        "path": "jquery/jquery.dequeue", 
        "syntax": "jQuery.dequeue( element [, queueName ] ) Returns: undefined", 
        "type": "Data"
    }, 
    "jQuery.each": {
        "descr": "The $.each() function is not the same as $(selector).each(), which is used to iterate, exclusively, over a jQuery object. The $.each() function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the this keyword, but Javascript will always wrap the this value as an Object even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.", 
        "name": "jQuery.each", 
        "params": [
            {
                "descr": "Type: Array  The array to iterate over.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function( Integer indexInArray, Object value ) The function that will be executed on every object.", 
                "name": "callback"
            }, 
            {
                "descr": "Type: Object  The object to iterate over.", 
                "name": "object"
            }, 
            {
                "descr": "Type: Function( String propertyName, Object valueOfProperty ) The function that will be executed on every object.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery.each", 
        "syntax": "jQuery.each( array, callback ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.error": {
        "descr": "This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.", 
        "name": "jQuery.error", 
        "params": [
            {
                "descr": "Type: String  The message to send out.", 
                "name": "message"
            }
        ], 
        "path": "jquery/jquery.error", 
        "syntax": "jQuery.error( message ) Returns:", 
        "type": "Miscellaneous"
    }, 
    "jQuery.escapeSelector": {
        "descr": "This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.", 
        "name": "jQuery.escapeSelector", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to escape.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/jquery.escapeselector", 
        "syntax": "jQuery.escapeSelector( selector ) Returns: Selector", 
        "type": "Miscellaneous"
    }, 
    "jQuery.extend": {
        "descr": "When two or more object arguments are supplied to $.extend(), properties from all of the objects are added to the target object. Arguments that are null or undefined are ignored.", 
        "name": "jQuery.extend", 
        "params": [
            {
                "descr": "Type: Object   An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }, 
            {
                "descr": "Type: Boolean  If true, the merge becomes recursive (aka. ", 
                "name": "deep"
            }, 
            {
                "descr": "Type: Object  The object to extend. ", 
                "name": "target"
            }, 
            {
                "descr": "Type: Object  An object containing additional properties to merge in.", 
                "name": "object1"
            }, 
            {
                "descr": "Type: Object  Additional objects containing properties to merge in.", 
                "name": "objectN"
            }
        ], 
        "path": "jquery/jquery.extend", 
        "syntax": "jQuery.extend( target [, object1 ] [, objectN ] ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.fn.extend": {
        "descr": "Add two methods to the jQuery prototype ($.fn) object and then use one of them.", 
        "name": "jQuery.fn.extend", 
        "params": [
            {
                "descr": "Type: Object  An object to merge onto the jQuery prototype.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.fn.extend", 
        "syntax": "jQuery.fn.extend( object ) Returns: Object", 
        "type": "Utilities"
    }, 
    "jQuery.fx.interval": {
        "descr": "This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.", 
        "name": "jQuery.fx.interval", 
        "params": [], 
        "path": "jquery/jquery.fx.interval", 
        "syntax": "jQuery.fx.intervalReturns: Number   Description: The rate (in milliseconds) at which animations fire.", 
        "type": "Effects"
    }, 
    "jQuery.fx.off": {
        "descr": "When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:", 
        "name": "jQuery.fx.off", 
        "params": [], 
        "path": "jquery/jquery.fx.off", 
        "syntax": "jQuery.fx.offReturns: Boolean   Description: Globally disable all animations.  version added: 1.3jQuery.fx.off  When this property is set to true, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:  jQuery is being used on a low-resource device. Users are encountering accessibility problems with the animations.  Animations can be turned back on by setting the property to false.  Example: Toggle animation on and off <!doctype html><html lang=\"en\"><head>  <meta charset=\"utf-8\">  <title>jQuery.fx.off demo</title>  <style>  div {    width: 50px;    height: 30px;    margin: 5px;    float: left;    background: green;  }  </style>  <script src=\"https://code.jquery.com/jquery-1.10.2.js\"></script></head><body> <input type=\"button\" value=\"Run\"><button>Toggle fx</button><div></div> <script>var toggleFx = function() {  $.fx.off = !$.fx.off;};toggleFx();\n or $( \"button\" ).click( toggleFx );\n or $( \"input\" ).click(function() {  $( \"div\" ).toggle( \"slow\" );\n or });\n or </script> </body></html>);", 
        "type": "Effects"
    }, 
    "jQuery.get": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.get", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }
        ], 
        "path": "jquery/jquery.get", 
        "syntax": "jQuery.get( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.getJSON": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getJSON", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.", 
                "name": "success"
            }
        ], 
        "path": "jquery/jquery.getjson", 
        "syntax": "jQuery.getJSON( url [, data ] [, success ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.getScript": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.getScript", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: Function( String script, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds.", 
                "name": "success"
            }
        ], 
        "path": "jquery/jquery.getscript", 
        "syntax": "jQuery.getScript( url [, success ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.globalEval": {
        "descr": "This method behaves differently from using a normal JavaScript eval() in that it's executed within the global context (which is important for loading external scripts dynamically).", 
        "name": "jQuery.globalEval", 
        "params": [
            {
                "descr": "Type: String  The JavaScript code to execute.", 
                "name": "code"
            }
        ], 
        "path": "jquery/jquery.globaleval", 
        "syntax": "jQuery.globalEval( code ) Returns:", 
        "type": "Utilities"
    }, 
    "jQuery.grep": {
        "descr": "The $.grep() method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.", 
        "name": "jQuery.grep", 
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The array-like object to search through.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Boolean  The function to process each item against. ", 
                "name": "function"
            }, 
            {
                "descr": "Type: Boolean  If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. ", 
                "name": "invert"
            }
        ], 
        "path": "jquery/jquery.grep", 
        "syntax": "jQuery.grep( array, function [, invert ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.hasData": {
        "descr": "The jQuery.hasData() method provides a way to determine if an element currently has any values that were set using jQuery.data(). If there is no data object associated with an element, the method returns false; otherwise it returns true.", 
        "name": "jQuery.hasData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to be checked for data.", 
                "name": "element"
            }
        ], 
        "path": "jquery/jquery.hasdata", 
        "syntax": "jQuery.hasData( element ) Returns: Boolean", 
        "type": "Data"
    }, 
    "jQuery.holdReady": {
        "descr": "The $.holdReady() method allows the caller to delay jQuery's ready event. This advanced feature would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <head> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect.", 
        "name": "jQuery.holdReady", 
        "params": [
            {
                "descr": "Type: Boolean  Indicates whether the ready hold is being requested or released", 
                "name": "hold"
            }
        ], 
        "path": "jquery/jquery.holdready", 
        "syntax": "jQuery.holdReady( hold ) Returns: undefined", 
        "type": "Miscellaneous"
    }, 
    "jQuery.htmlPrefilter": {
        "descr": "This method rarely needs to be called directly. Instead, use it as an entry point to modify existing jQuery manipulation methods. For instance, to remove all <del> tags from incoming HTML strings, do this:", 
        "name": "jQuery.htmlPrefilter", 
        "params": [
            {
                "descr": "Type: String  The HTML string on which to operate.", 
                "name": "html"
            }
        ], 
        "path": "jquery/jquery.htmlprefilter", 
        "syntax": "jQuery.htmlPrefilter( html ) Returns: String", 
        "type": "Manipulation"
    }, 
    "jQuery.inArray": {
        "descr": "The $.inArray() method is similar to JavaScript's native .indexOf() method in that it returns -1 when it doesn't find a match. If the first element within the array matches value, $.inArray() returns 0.", 
        "name": "jQuery.inArray", 
        "params": [
            {
                "descr": "Type: Anything  The value to search for.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Array  An array through which to search.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Number  The index of the array at which to begin the search. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "jquery/jquery.inarray", 
        "syntax": "jQuery.inArray( value, array [, fromIndex ] ) Returns: Number", 
        "type": "Utilities"
    }, 
    "jQuery.isArray": {
        "descr": "$.isArray() returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).", 
        "name": "jQuery.isArray", 
        "params": [
            {
                "descr": "Type: Object  Object to test whether or not it is an array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isarray", 
        "syntax": "jQuery.isArray( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isEmptyObject": {
        "descr": "As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript Object as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use $.isPlainObject()", 
        "name": "jQuery.isEmptyObject", 
        "params": [
            {
                "descr": "Type: Object  The object that will be checked to see if it's empty.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isemptyobject", 
        "syntax": "jQuery.isEmptyObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isFunction": {
        "descr": "Note: As of jQuery 1.3, functions provided by the browser like alert() and DOM element methods like getAttribute() are not guaranteed to be detected as functions in browsers such as Internet Explorer.", 
        "name": "jQuery.isFunction", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a function.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.isfunction", 
        "syntax": "jQuery.isFunction( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isNumeric": {
        "descr": "The $.isNumeric() method checks whether its argument represents a numeric value. If so, it returns true. Otherwise it returns false. The argument can be of any type.", 
        "name": "jQuery.isNumeric", 
        "params": [
            {
                "descr": "Type: Anything  The value to be tested.", 
                "name": "value"
            }
        ], 
        "path": "jquery/jquery.isnumeric", 
        "syntax": "jQuery.isNumeric( value ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isPlainObject": {
        "descr": "Note: Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, $.isPlainObject() may evaluate inconsistently across browsers in certain instances.", 
        "name": "jQuery.isPlainObject", 
        "params": [
            {
                "descr": "Type: PlainObject  The object that will be checked to see if it's a plain object.", 
                "name": "object"
            }
        ], 
        "path": "jquery/jquery.isplainobject", 
        "syntax": "jQuery.isPlainObject( object ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isWindow": {
        "descr": "This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).", 
        "name": "jQuery.isWindow", 
        "params": [
            {
                "descr": "Type: PlainObject  Object to test whether or not it is a window.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.iswindow", 
        "syntax": "jQuery.isWindow( obj ) Returns: boolean", 
        "type": "Utilities"
    }, 
    "jQuery.isXMLDoc": {
        "descr": "Check an object to see if it's in an XML document.", 
        "name": "jQuery.isXMLDoc", 
        "params": [
            {
                "descr": "Type: Element  The DOM node that will be checked to see if it's in an XML document.", 
                "name": "node"
            }
        ], 
        "path": "jquery/jquery.isxmldoc", 
        "syntax": "jQuery.isXMLDoc( node ) Returns: Boolean", 
        "type": "Utilities"
    }, 
    "jQuery.makeArray": {
        "descr": "Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function $() returns a jQuery object that has many of the properties of an array (a length, the [] array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as .pop() and .reverse()).", 
        "name": "jQuery.makeArray", 
        "params": [
            {
                "descr": "Type: PlainObject  Any object to turn into a native Array.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.makearray", 
        "syntax": "jQuery.makeArray( obj ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.map": {
        "descr": "If you wish to process a jQuery object \u2014 for example, $('div').map( callback ); \u2014 use .map() instead.", 
        "name": "jQuery.map", 
        "params": [
            {
                "descr": "Type: Array  The Array to translate.", 
                "name": "array"
            }, 
            {
                "descr": "Type: Function( Object elementOfArray, Integer indexInArray ) => Object  The function to process each item against. ", 
                "name": "callback"
            }, 
            {
                "descr": "Type: Object  The Object to translate.", 
                "name": "object"
            }, 
            {
                "descr": "Type: Function( Object propertyOfObject, String key ) => Object  The function to process each item against. ", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery.map", 
        "syntax": "jQuery.map( array, callback ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.merge": {
        "descr": "The $.merge() operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The $.merge() function is destructive. It alters the length and numeric index properties of the first object to include items from the second.", 
        "name": "jQuery.merge", 
        "params": [
            {
                "descr": "Type: ArrayLikeObject  The first array-like object to merge, the elements of second added.", 
                "name": "first"
            }, 
            {
                "descr": "Type: ArrayLikeObject  The second array-like object to merge into the first, unaltered.", 
                "name": "second"
            }
        ], 
        "path": "jquery/jquery.merge", 
        "syntax": "jQuery.merge( first, second ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.noConflict": {
        "descr": "Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If you need to use another JavaScript library alongside jQuery, return control of $ back to the other library with a call to $.noConflict(). Old references of $ are saved during jQuery initialization; noConflict() simply restores them.", 
        "name": "jQuery.noConflict", 
        "params": [
            {
                "descr": "Type: Boolean  A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).", 
                "name": "removeAll"
            }
        ], 
        "path": "jquery/jquery.noconflict", 
        "syntax": "jQuery.noConflict( [removeAll ] ) Returns: Object", 
        "type": "Miscellaneous"
    }, 
    "jQuery.noop": {
        "descr": "You can use this empty function when you wish to pass around a function that will do nothing.", 
        "name": "jQuery.noop", 
        "params": [], 
        "path": "jquery/jquery.noop", 
        "syntax": "jQuery.noop() Returns: undefined", 
        "type": "Utilities"
    }, 
    "jQuery.now": {
        "descr": "The $.now() method is a shorthand for the number returned by the expression (new Date).getTime().", 
        "name": "jQuery.now", 
        "params": [], 
        "path": "jquery/jquery.now", 
        "syntax": "jQuery.now() Returns: Number", 
        "type": "Utilities"
    }, 
    "jQuery.param": {
        "descr": "This function is used internally to convert form element values into a serialized string representation (See .serialize() for more information).", 
        "name": "jQuery.param", 
        "params": [
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Array or PlainObject or jQuery  An array, a plain object, or a jQuery object to serialize.", 
                "name": "obj"
            }, 
            {
                "descr": "Type: Boolean  A Boolean indicating whether to perform a traditional \"shallow\" serialization.", 
                "name": "traditional"
            }
        ], 
        "path": "jquery/jquery.param", 
        "syntax": "jQuery.param( obj ) Returns: String", 
        "type": "Ajax"
    }, 
    "jQuery.parseHTML": {
        "descr": "jQuery.parseHTML uses native methods to convert the string to a set of DOM nodes, which can then be inserted into the document. These methods do render all trailing or leading text (even if that's just whitespace). To prevent trailing/leading whitespace from being converted to text nodes you can pass the HTML string through jQuery.trim.", 
        "name": "jQuery.parseHTML", 
        "params": [
            {
                "descr": "Type: String  HTML string to be parsed", 
                "name": "data"
            }, 
            {
                "descr": "(default: document) Type: Element  Document element to serve as the context in which the HTML fragment will be created", 
                "name": "context"
            }, 
            {
                "descr": "(default: false) Type: Boolean  A Boolean indicating whether to include scripts passed in the HTML string", 
                "name": "keepScripts"
            }
        ], 
        "path": "jquery/jquery.parsehtml", 
        "syntax": "jQuery.parseHTML( data [, context ] [, keepScripts ] ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.parseJSON": {
        "descr": "Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:", 
        "name": "jQuery.parseJSON", 
        "params": [
            {
                "descr": "Type: String  The JSON string to parse.", 
                "name": "json"
            }
        ], 
        "path": "jquery/jquery.parsejson", 
        "syntax": "jQuery.parseJSON( json ) Returns: String or Number or Object or Array or Booleanversion deprecated: 3.0", 
        "type": "Utilities"
    }, 
    "jQuery.parseXML": {
        "descr": "jQuery.parseXML uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to jQuery to create a typical jQuery object that can be traversed and manipulated.", 
        "name": "jQuery.parseXML", 
        "params": [
            {
                "descr": "Type: String  a well-formed XML string to be parsed", 
                "name": "data"
            }
        ], 
        "path": "jquery/jquery.parsexml", 
        "syntax": "jQuery.parseXML( data ) Returns: XMLDocument", 
        "type": "Utilities"
    }, 
    "jQuery.post": {
        "descr": "This is a shorthand Ajax function, which is equivalent to:", 
        "name": "jQuery.post", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( PlainObject data, String textStatus, jqXHR jqXHR ) A callback function that is executed if the request succeeds. ", 
                "name": "success"
            }, 
            {
                "descr": "Type: String  The type of data expected from the server. ", 
                "name": "dataType"
            }, 
            {
                "descr": "Type: PlainObject  A set of key/value pairs that configure the Ajax request. ", 
                "name": "settings"
            }
        ], 
        "path": "jquery/jquery.post", 
        "syntax": "jQuery.post( url [, data ] [, success ] [, dataType ] ) Returns: jqXHR", 
        "type": "Ajax"
    }, 
    "jQuery.proxy": {
        "descr": "This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from jQuery.proxy() it will still unbind the correct function if passed the original.", 
        "name": "jQuery.proxy", 
        "params": [
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Function() The function whose context will be changed.", 
                "name": "function"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context (this) of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function referenced in the function argument.", 
                "name": "additionalArguments"
            }, 
            {
                "descr": "Type: PlainObject  The object to which the context of the function should be set.", 
                "name": "context"
            }, 
            {
                "descr": "Type: String  The name of the function whose context will be changed (should be a property of the context object).", 
                "name": "name"
            }, 
            {
                "descr": "Type: Anything  Any number of arguments to be passed to the function named in the name argument.", 
                "name": "additionalArguments"
            }
        ], 
        "path": "jquery/jquery.proxy", 
        "syntax": "jQuery.proxy( function, context ) Returns: Function", 
        "type": "Utilities"
    }, 
    "jQuery.queue": {
        "descr": "Note: This is a low-level method, you should probably use .queue() instead.", 
        "name": "jQuery.queue", 
        "params": [
            {
                "descr": "Type: Element  A DOM element to inspect for an attached queue.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Element  A DOM element where the array of queued functions is attached.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.", 
                "name": "newQueue"
            }, 
            {
                "descr": "Type: Element  A DOM element on which to add a queued function.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Function() The new function to add to the queue.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/jquery.queue", 
        "syntax": "jQuery.queue( element [, queueName ] ) Returns: Array", 
        "type": "Data"
    }, 
    "jQuery.removeData": {
        "descr": "Note: This is a low-level method, you should probably use .removeData() instead.", 
        "name": "jQuery.removeData", 
        "params": [
            {
                "descr": "Type: Element  A DOM element from which to remove data.", 
                "name": "element"
            }, 
            {
                "descr": "Type: String  A string naming the piece of data to remove.", 
                "name": "name"
            }
        ], 
        "path": "jquery/jquery.removedata", 
        "syntax": "jQuery.removeData( element [, name ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "jQuery.speed": {
        "descr": "The $.speed() method provides a way to define properties, such as duration, easing, and queue, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.", 
        "name": "jQuery.speed", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: PlainObject      easing (default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "settings"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject      duration (default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "settings"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/jquery.speed", 
        "syntax": "jQuery.speed( [duration ] [, settings ] ) Returns: PlainObject", 
        "type": "Effects"
    }, 
    "jQuery.sub": {
        "descr": "This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.", 
        "name": "jQuery.sub", 
        "params": [], 
        "path": "jquery/jquery.sub", 
        "syntax": "jQuery.sub() Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Miscellaneous"
    }, 
    "jQuery.trim": {
        "descr": "The $.trim() function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.", 
        "name": "jQuery.trim", 
        "params": [
            {
                "descr": "Type: String  The string to trim.", 
                "name": "str"
            }
        ], 
        "path": "jquery/jquery.trim", 
        "syntax": "jQuery.trim( str ) Returns: String", 
        "type": "Utilities"
    }, 
    "jQuery.type": {
        "descr": "A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:", 
        "name": "jQuery.type", 
        "params": [
            {
                "descr": "Type: Anything  Object to get the internal JavaScript [[Class]] of.", 
                "name": "obj"
            }
        ], 
        "path": "jquery/jquery.type", 
        "syntax": "jQuery.type( obj ) Returns: String", 
        "type": "Utilities"
    }, 
    "jQuery.unique": {
        "descr": "As of jQuery 3.0, this method is deprecated and just an alias of jQuery.uniqueSort(). Please use that method instead.", 
        "name": "jQuery.unique", 
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.", 
                "name": "array"
            }
        ], 
        "path": "jquery/jquery.unique", 
        "syntax": "jQuery.unique( array ) Returns: Arrayversion deprecated: 3.0", 
        "type": "Utilities"
    }, 
    "jQuery.uniqueSort": {
        "descr": "The $.uniqueSort() function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the exact same node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.", 
        "name": "jQuery.uniqueSort", 
        "params": [
            {
                "descr": "Type: Array  The Array of DOM elements.", 
                "name": "array"
            }
        ], 
        "path": "jquery/jquery.uniquesort", 
        "syntax": "jQuery.uniqueSort( array ) Returns: Array", 
        "type": "Utilities"
    }, 
    "jQuery.when": {
        "descr": "If no arguments are passed to jQuery.when(), it will return a resolved Promise.", 
        "name": "jQuery.when", 
        "params": [
            {
                "descr": "Type: Deferred  Zero or more Deferred objects, or plain JavaScript objects.", 
                "name": "deferreds"
            }
        ], 
        "path": "jquery/jquery.when", 
        "syntax": "jQuery.when( deferreds ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "jquery": {
        "descr": "The .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".", 
        "name": "jquery", 
        "params": [], 
        "path": "jquery/jquery-2", 
        "syntax": "jqueryReturns: String   Description: A string containing the jQuery version number.  version added: 1.0jquery  The .jquery property is assigned to the jQuery prototype, commonly referred to by its alias $.fn. It is a string containing the version number of jQuery, such as \"1.5.0\" or \"1.4.4\".  Examples: Determine if an object is a jQuery object var a = { what: \"A regular JS object\" },  b = $( \"body\" );\n or  if ( a.jquery ) { // Falsy, since it's undefined  alert( \"a is a jQuery object!\" );\n or } if ( b.jquery ) { // Truthy, since it's a string    alert( \"b is a jQuery object!\" );\n or });", 
        "type": "Miscellaneous"
    }, 
    "keydown": {
        "descr": "This method is a shortcut for .on( \"keydown\", handler ) in the first and second variations, and .trigger( \"keydown\" ) in the third.", 
        "name": "keydown", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/keydown", 
        "syntax": ".keydown( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "keypress": {
        "descr": "Note: as the keypress event isn't covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.", 
        "name": "keypress", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/keypress", 
        "syntax": ".keypress( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "keys": {
        "descr": "The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).", 
        "name": "Object.keys", 
        "params": [
            {
                "descr": "The object whose enumerable own properties are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/keys", 
        "syntax": "Object.keys(obj)", 
        "type": "Object"
    }, 
    "keyup": {
        "descr": "This method is a shortcut for .on( \"keyup\", handler ) in the first two variations, and .trigger( \"keyup\" ) in the third.", 
        "name": "keyup", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/keyup", 
        "syntax": ".keyup( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "label": {
        "descr": "The labeled statement can be used with break or continue statements. It is prefixing a statement with an identifier which you can refer to.", 
        "name": "label", 
        "params": [
            {
                "descr": "Any JavaScript identifier that is not a reserved word.", 
                "name": "label"
            }, 
            {
                "descr": "Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements.", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/label", 
        "syntax": "label :   statement  label Any JavaScript identifier that is not a reserved word. statement Statements. break can be used with any labeled statement, and continue can be used with looping labeled statements.  Description You can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution. Note that JavaScript has NO goto statement, you can only use labels with break or continue. Examples Using a labeled continue with for loops var i, j;loop1:for (i = 0; i < 3; i++) {      //The first for statement is labeled \"loop1\"   loop2:   for (j = 0; j < 3; j++) {   //The second for statement is labeled \"loop2\"      if (i === 1 && j === 1) {         continue loop1;      }      console.log(\"i = \" + i + \", j = \" + j);\n or    }}// Output is://   \"i = 0, j = 0\"//   \"i = 0, j = 1\"//   \"i = 0, j = 2\"//   \"i = 1, j = 0\"//   \"i = 2, j = 0\"//   \"i = 2, j = 1\"//   \"i = 2, j = 2\"// Notice how it skips both \"i = 1, j = 1\" and \"i = 1, j = 2\");", 
        "type": "Statements"
    }, 
    "last": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .last() method constructs a new jQuery object from the last element in that set.", 
        "name": "last", 
        "params": [], 
        "path": "jquery/last", 
        "syntax": ".last() Returns: jQuery", 
        "type": "Traversing"
    }, 
    "length": {
        "descr": "Returns the number of frames (either <frame> or <iframe> elements) in the window.", 
        "name": "window.length", 
        "params": [], 
        "path": "dom/window/length", 
        "syntax": "framesCount = window.length;  framesCount is the number of frames.  Example if (window.length) {  // this is a document with subframes}", 
        "type": "Window"
    }, 
    "let": {
        "descr": "The let statement declares a block scope local variable, optionally initializing it to a value.", 
        "name": "let", 
        "params": [
            {
                "descr": "Variable name. It can be any legal identifier.", 
                "name": "var1, var2, \u2026, varN"
            }, 
            {
                "descr": "Initial value of the variable. It can be any legal expression.", 
                "name": "value1, value2, \u2026, valueN"
            }
        ], 
        "path": "javascript/statements/let", 
        "syntax": "let var1 [= value1] [, var2 [= value2]] [, ..., varN [= valueN]]; Parameters  var1, var2, \u2026, varN Variable name. It can be any legal identifier. value1, value2, \u2026, valueN Initial value of the variable. It can be any legal expression.  Description let allows you to declare variables that are limited in scope to the block, statement, or expression on which it is used. This is unlike the var keyword, which defines a variable globally, or locally to an entire function regardless of block scope. Scoping rules Variables declared by let have as their scope the block in which they are defined, as well as in any contained sub-blocks . In this way, let works very much like var. The main difference is that the scope of a var variable is the entire enclosing function: function varTest() {  var x = 1;  if (true) {    var x = 2;  // same variable!    console.log(x);\n or   // 2  }  console.log(x);\n or   // 2}function letTest() {  let x = 1;  if (true) {    let x = 2;  // different variable    console.log(x);\n or   // 2  }  console.log(x);\n or   // 1});", 
        "type": "Statements"
    }, 
    "live": {
        "descr": "As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().", 
        "name": "live", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.", 
                "name": "events"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.", 
                "name": "events"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: PlainObject  A plain object of one or more JavaScript event types and functions to execute for them.", 
                "name": "events"
            }
        ], 
        "path": "jquery/live", 
        "syntax": ".live( events, handler ) Returns: jQueryversion deprecated: 1.7, removed: 1.9", 
        "type": "Events"
    }, 
    "load": {
        "descr": "Note: The event handling suite also has a method named .load(). jQuery determines which method to fire based on the set of arguments passed to it.", 
        "name": "load", 
        "params": [
            {
                "descr": "Type: String  A string containing the URL to which the request is sent.", 
                "name": "url"
            }, 
            {
                "descr": "Type: PlainObject or String  A plain object or string that is sent to the server with the request.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( String responseText, String textStatus, jqXHR jqXHR ) A callback function that is executed when the request completes.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/load", 
        "syntax": ".load( url [, data ] [, complete ] ) Returns: jQuery", 
        "type": "Ajax"
    }, 
    "localStorage": {
        "descr": "The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends\u2014that is, when the browser is closed.", 
        "name": "window.localStorage", 
        "params": [], 
        "path": "dom/window/localstorage", 
        "syntax": "myStorage = localStorage; Value A Storage object. Example The following snippet accesses the current domain's local Storage object and adds a data item to it using Storage.setItem()", 
        "type": "Window"
    }, 
    "location": {
        "descr": "The Window.location read-only property returns a Location object with information about the current location of the document.", 
        "name": "window.location", 
        "params": [], 
        "path": "dom/window/location", 
        "syntax": "var oldLocation = location;location = newLocation; Examples Basic Example alert(location);\n or  // alerts \"https://developer.mozilla.org/en-US/docs/Web/API/Window.location\");", 
        "type": "Window"
    }, 
    "location.assign": {
        "descr": "The Location.assign()\u00a0method causes the window to load and display the document at the URL specified.", 
        "name": "location.assign", 
        "params": [
            {
                "descr": "Is a DOMString containing the URL of the page to navigate to.", 
                "name": "url"
            }
        ], 
        "path": "dom/location/assign", 
        "syntax": "object.assign(url);", 
        "type": "Location"
    }, 
    "location.reload": {
        "descr": "The Location.reload() method reloads the resource from the current URL. Its optional unique parameter is a Boolean, which, when it is true, causes the page to always be reloaded from the server. If it is false or not specified, the browser may reload the page from its cache. Besides caching behaviour forcedReload flag also impacts how some browsers handle scroll position: ordinary reload happens to try to restore scroll position after reloading page DOM, while in forced mode (when parameter is set to true) the new DOM gets loaded with scrollTop == 0.", 
        "name": "location.reload", 
        "params": [
            {
                "descr": "Is a Boolean flag, which, when it is true, causes the page to always be reloaded from the server. ", 
                "name": "forcedReload Optional"
            }
        ], 
        "path": "dom/location/reload", 
        "syntax": "object.reload(forcedReload);", 
        "type": "Location"
    }, 
    "location.replace": {
        "descr": "The Location.replace() method replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.", 
        "name": "location.replace", 
        "params": [
            {
                "descr": "Is a DOMString containing the URL of the page to navigate to.", 
                "name": "url"
            }
        ], 
        "path": "dom/location/replace", 
        "syntax": "object.replace(url);", 
        "type": "Location"
    }, 
    "map": {
        "descr": "If you wish to process a plain array or object, use the jQuery.map() instead.", 
        "name": "map", 
        "params": [
            {
                "descr": "Type: Function( Integer index, Element domElement ) => Object  A function object that will be invoked for each element in the current set.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/map", 
        "syntax": ".map( callback ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "map.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the entries property.", 
        "name": "map.@@iterator", 
        "params": [], 
        "path": "javascript/global_objects/map/@@iterator", 
        "syntax": "myMap[Symbol.iterator] Examples Using [@@iterator]()", 
        "type": "Map"
    }, 
    "map.@@toStringTag": {
        "descr": "The Map[@@toStringTag] property has an initial value of \"Map\".", 
        "name": "map.@@toStringTag", 
        "params": [], 
        "path": "javascript/global_objects/map/@@tostringtag", 
        "syntax": "Map[Symbol.toStringTag] Example Object.prototype.toString.call(new Map()) // \"[object Map]\"", 
        "type": "Map"
    }, 
    "map.clear": {
        "descr": "The clear() method removes all elements from a Map object.", 
        "name": "map.clear", 
        "params": [], 
        "path": "javascript/global_objects/map/clear", 
        "syntax": "myMap.clear();", 
        "type": "Map"
    }, 
    "map.delete": {
        "descr": "The delete() method removes the specified element from a Map object.", 
        "name": "map.delete", 
        "params": [
            {
                "descr": "Required. The key of the element to remove from the Map object.", 
                "name": "key"
            }
        ], 
        "path": "javascript/global_objects/map/delete", 
        "syntax": "myMap.delete(key);", 
        "type": "Map"
    }, 
    "map.entries": {
        "descr": "The entries() method returns a new Iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.", 
        "name": "map.entries", 
        "params": [], 
        "path": "javascript/global_objects/map/entries", 
        "syntax": "myMap.entries()", 
        "type": "Map"
    }, 
    "map.forEach": {
        "descr": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.", 
        "name": "map.forEach", 
        "params": [
            {
                "descr": "Function to execute for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/map/foreach", 
        "syntax": "myMap.forEach(callback[, thisArg])", 
        "type": "Map"
    }, 
    "map.get": {
        "descr": "The get() method returns a specified element from a Map object.", 
        "name": "map.get", 
        "params": [
            {
                "descr": "Required. The key of the element to return from the Map object.", 
                "name": "key"
            }
        ], 
        "path": "javascript/global_objects/map/get", 
        "syntax": "myMap.get(key);", 
        "type": "Map"
    }, 
    "map.has": {
        "descr": "The has() method returns a boolean indicating whether an element with the specified key exists or not.", 
        "name": "map.has", 
        "params": [
            {
                "descr": "Required. The key of the element to test for presence in the Map object.", 
                "name": "key"
            }, 
            {
                "descr": "Returns true if an element with the specified key exists in the Map object; otherwise false.", 
                "name": "Boolean"
            }
        ], 
        "path": "javascript/global_objects/map/has", 
        "syntax": "myMap.has(key);", 
        "type": "Map"
    }, 
    "map.keys": {
        "descr": "The keys() method returns a new Iterator object that contains the keys for each element in the Map object in insertion order.", 
        "name": "map.keys", 
        "params": [], 
        "path": "javascript/global_objects/map/keys", 
        "syntax": "myMap.keys()", 
        "type": "Map"
    }, 
    "map.set": {
        "descr": "The set() method adds a new element with a specified key and value to a Map object.", 
        "name": "map.set", 
        "params": [
            {
                "descr": "Required. The key of the element to add to the Map object.", 
                "name": "key"
            }, 
            {
                "descr": "Required. The value of the element to add to the Map object.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/map/set", 
        "syntax": "myMap.set(key, value);", 
        "type": "Map"
    }, 
    "map.values": {
        "descr": "The values() method returns a new Iterator object that contains the values for each element in the Map object in insertion order.", 
        "name": "map.values", 
        "params": [], 
        "path": "javascript/global_objects/map/values", 
        "syntax": "myMap.values()", 
        "type": "Map"
    }, 
    "matchMedia": {
        "descr": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.", 
        "name": "window.matchMedia", 
        "params": [], 
        "path": "dom/window/matchmedia", 
        "syntax": "mql = window.matchMedia(mediaQueryString)", 
        "type": "Window"
    }, 
    "mousedown": {
        "descr": "This method is a shortcut for .on( \"mousedown\", handler) in the first variation, and .trigger( \"mousedown\" ) in the second.", 
        "name": "mousedown", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mousedown", 
        "syntax": ".mousedown( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseenter": {
        "descr": "This method is a shortcut for .on( \"mouseenter\", handler ) in the first two variations, and .trigger( \"mouseenter\" ) in the third.", 
        "name": "mouseenter", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mouseenter", 
        "syntax": ".mouseenter( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseleave": {
        "descr": "This method is a shortcut for .on('mouseleave', handler) in the first two variations, and .trigger('mouseleave') in the third.", 
        "name": "mouseleave", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mouseleave", 
        "syntax": ".mouseleave( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mousemove": {
        "descr": "This method is a shortcut for .on( \"mousemove\", handler ) in the first two variations, and .trigger( \"mousemove\" ) in the third.", 
        "name": "mousemove", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mousemove", 
        "syntax": ".mousemove( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseout": {
        "descr": "This method is a shortcut for .on( \"mouseout\", handler ) in the first two variation, and .trigger( \"mouseout\" ) in the third.", 
        "name": "mouseout", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mouseout", 
        "syntax": ".mouseout( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseover": {
        "descr": "This method is a shortcut for .on( \"mouseover\", handler ) in the first two variations, and .trigger( \"mouseover\" ) in the third.", 
        "name": "mouseover", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mouseover", 
        "syntax": ".mouseover( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "mouseup": {
        "descr": "This method is a shortcut for .on('mouseup', handler) in the first variation, and .trigger('mouseup') in the second.", 
        "name": "mouseup", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/mouseup", 
        "syntax": ".mouseup( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "moveBy": {
        "descr": "Moves the current window by a specified amount.", 
        "name": "window.moveBy", 
        "params": [], 
        "path": "dom/window/moveby", 
        "syntax": "window.moveBy(deltaX, deltaY)", 
        "type": "Window"
    }, 
    "moveTo": {
        "descr": "Moves the window to the specified coordinates.", 
        "name": "window.moveTo", 
        "params": [], 
        "path": "dom/window/moveto", 
        "syntax": "window.moveTo(x, y)", 
        "type": "Window"
    }, 
    "name": {
        "descr": "Gets/sets the name of the window.", 
        "name": "window.name", 
        "params": [], 
        "path": "dom/window/name", 
        "syntax": "string = window.name;window.name = string; Example window.name = \"lab_view\"; Notes The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names. It has also been used in some frameworks for providing cross-domain messaging (e.g., SessionVars and Dojo's dojox.io.windowName) as a more secure alternative to JSONP. Modern web applications hosting sensitive data should however not rely on window.name", 
        "type": "Window"
    }, 
    "navigator": {
        "descr": "The Window.navigator read-only property returns a reference to the Navigator object, which can be queried for information about the application running the script.", 
        "name": "navigator", 
        "params": [], 
        "path": "dom/window/navigator", 
        "syntax": "navigatorObject = window.navigator Examples Example #1: Browser detect and return a string var sBrowser, sUsrAg = navigator.userAgent;if(sUsrAg.indexOf(\"Chrome\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Google Chrome\";} else if (sUsrAg.indexOf(\"Safari\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Apple Safari\";} else if (sUsrAg.indexOf(\"Opera\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Opera\";} else if (sUsrAg.indexOf(\"Firefox\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Mozilla Firefox\";} else if (sUsrAg.indexOf(\"MSIE\") > -1) {\u00a0\u00a0 \u00a0sBrowser = \"Microsoft Internet Explorer\";}alert(\"You are using: \" + sBrowser);", 
        "type": "Navigator"
    }, 
    "navigator.activeVRDisplays": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "navigator.activeVRDisplays", 
        "params": [], 
        "path": "dom/navigator/activevrdisplays", 
        "syntax": "activeVRDisplays read-only property of the Navigator interface returns an array containing every VRDisplay object that is currently presenting (VRDisplay.ispresenting is true).", 
        "type": "Navigator"
    }, 
    "navigator.buildID": {
        "descr": "Returns the build identifier of the browser.", 
        "name": "navigator.buildID", 
        "params": [], 
        "path": "dom/navigator/buildid", 
        "syntax": "buildID = navigator.buildID; buildID is the build identifier of the application as a string. The build ID is in form YYYYMMDDHH. Example dump(window.navigator.buildID);\n or  // prints \"2006090803\" to the console);", 
        "type": "Navigator"
    }, 
    "navigator.connection": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "navigator.connection", 
        "params": [], 
        "path": "dom/navigator/connection", 
        "syntax": "Navigator.connection read-only property represents a NetworkInformation containing information about the system's connection, such as the current bandwidth of the user's device or whether the connection is metered. This could be used to select high definition content or low definition content based on the user's connection. Syntax connectionInfo = navigator.connection Specifications    Specification Status Comment     Network Information APIThe definition of 'Navigator.connection' in that specification. Editor's Draft Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported Not supported Not supported Not supported Not supported         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile   Basic support 2.2 webkit 12.0[1] 1.4 Not supported Not supported Not supported     [1] The Network API can be disabled using the dom.netinfo.enabled", 
        "type": "Navigator"
    }, 
    "navigator.cookieEnabled": {
        "descr": "Returns a Boolean value indicating whether cookies are enabled or not (read-only).", 
        "name": "navigator.cookieEnabled", 
        "params": [], 
        "path": "dom/navigator/cookieenabled", 
        "syntax": "var cookieEnabled = navigator.cookieEnabled;  cookieEnabled is a Boolean true or false.  Example if (!navigator.cookieEnabled) {   // let the user know that enabling cookies makes the web page much more useful}", 
        "type": "Navigator"
    }, 
    "navigator.credentials": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "navigator.credentials", 
        "params": [], 
        "path": "dom/navigator/credentials", 
        "syntax": "credentials property of the Navigator interface returns the CredentialsContainer interface which exposes methods to request credentials and notify the user agent when interesting events occur, such as successful sign in or sign out. This interface can be used for feature detection. Syntax var credentialsContainer = Navigator.credentials Value The CredentialsContainer interface. Example if ('credentials' in navigator) {\u00a0 navigator.credentials.get({password: true})\u00a0 .then(function(creds) {\u00a0   //Do something with the credentials.\u00a0 });\n or } else {\u00a0 //Handle sign-in the way you did before.};);", 
        "type": "Navigator"
    }, 
    "navigator.doNotTrack": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "navigator.doNotTrack", 
        "params": [], 
        "path": "dom/navigator/donottrack", 
        "syntax": "dnt = navigator.doNotTrack; The value reflects that of the do-not-track header, i.e. values of {\"1\", \"0\", \"unspecified\" }. Note: Prior to Gecko 32, Gecko used the values { \"yes\", \"no\", \"unspecified\"} (bug 887703).", 
        "type": "Navigator"
    }, 
    "navigator.geolocation": {
        "descr": "The Navigator.geolocation read-only property returns a Geolocation object that gives Web content access to the location of the device. This allows a Web site or app to offer customized results based on the user's location.", 
        "name": "navigator.geolocation", 
        "params": [], 
        "path": "dom/navigator/geolocation", 
        "syntax": "geo = navigator.geolocation Specifications    Specification Status Comment     Geolocation APIThe definition of 'Navigator.geolocation' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support 5 3.5 (1.9.1) 9 10.60 Not supported 15.0 16.0 5         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? 4.0 (4) ? 10.60 ?     See also", 
        "type": "Navigator"
    }, 
    "navigator.getBattery": {
        "descr": "The getBattery() method provides information about the system's battery, returns a battery promise, which is resolved in a BatteryManager object providing also some new events you can handle to monitor the battery status.. This implements the Battery Status API; see that documentation for additional details, a guide to using the API, and sample code.", 
        "name": "navigator.getBattery", 
        "params": [], 
        "path": "dom/navigator/getbattery", 
        "syntax": "navigator.getBattery().then(funcRef);", 
        "type": "Navigator"
    }, 
    "navigator.getVRDisplays": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "navigator.getVRDisplays", 
        "params": [], 
        "path": "dom/navigator/getvrdisplays", 
        "syntax": "getVRDisplays()", 
        "type": "Navigator"
    }, 
    "navigator.maxTouchPoints": {
        "descr": "Return the maximum number of simultaneous touch contact points are supported by the current device.", 
        "name": "navigator.maxTouchPoints", 
        "params": [], 
        "path": "dom/navigator/maxtouchpoints", 
        "syntax": "touchPoints = navigator.maxTouchPoints; Example if (navigator.maxTouchPoints > 1) {  // browser supports multi-touch}", 
        "type": "Navigator"
    }, 
    "navigator.mediaDevices": {
        "descr": "The Navigator.mediaDevices read-only property returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screensharing.", 
        "name": "navigator.mediaDevices", 
        "params": [], 
        "path": "dom/navigator/mediadevices", 
        "syntax": "var mediaDevices = navigator.mediaDevices; Return value The MediaDevices singleton object. Specifications    Specification Status Comment   Media Capture and StreamsThe definition of 'NavigatorUserMedia.mediaDevices' in that specification. Editor's Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 51.0 36.0 (36.0) No support No support No support         Feature Android Android Webview Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support No support No support 36.0 (36.0) 36.0 (36.0) No support No support No support No support     See also", 
        "type": "Navigator"
    }, 
    "navigator.oscpu": {
        "descr": "Returns a string that identifies the current operating system.", 
        "name": "navigator.oscpu", 
        "params": [], 
        "path": "dom/navigator/oscpu", 
        "syntax": "oscpuInfo = window.navigator.oscpu   oscpuInfo is a string that takes the following form:     Operating system oscpuInfo string format   OS/2 OS/2 Warp x (either 3, 4 or 4.5)   Windows CE WindowsCE x.y1   Windows 64-bit (64-bit build) Windows NT x.y; Win64; x64   Windows 64-bit (32-bit build) Windows NT x.y; WOW64   Windows 32-bit Windows NT x.y   Mac OS X (PPC build) PPC Mac OS X x.y   Mac OS X (i386/x64 build) Intel Mac OS X x.y   Linux 64-bit (32-bit build) Output of uname -s plus \"i686 on x86_64\"   Linux Output of uname -sm    1x.y refers to the version of the operating system", 
        "type": "Navigator"
    }, 
    "navigator.permissions": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "navigator.permissions", 
        "params": [], 
        "path": "dom/navigator/permissions", 
        "syntax": "Navigator.permissions read-only property returns a Permissions object that can be used to query and update permission status of APIs covered by the Permissions API. Syntax permissionsObj = globalObj.navigator.permissions Value A Permissions object. Examples navigator.permissions.query({name:'geolocation'}).then(function(result) {\u00a0 if (result.state === 'granted') {\u00a0\u00a0\u00a0 showMap();\n or \u00a0 } else if (result.state === 'prompt') {\u00a0\u00a0\u00a0 showButtonToEnableMap();\n or \u00a0 }\u00a0 // Don't do anything if the permission was denied.});", 
        "type": "Navigator"
    }, 
    "navigator.registerContentHandler": {
        "descr": "Allows web sites to register themselves as possible handlers for content of a particular MIME type.", 
        "name": "navigator.registerContentHandler", 
        "params": [], 
        "path": "dom/navigator/registercontenthandler", 
        "syntax": "navigator.registerContentHandler(mimeType, uri, title);", 
        "type": "Navigator"
    }, 
    "navigator.registerProtocolHandler": {
        "descr": "Allows web sites to register themselves as possible handlers for particular protocols.", 
        "name": "navigator.registerProtocolHandler", 
        "params": [
            {
                "descr": "The protocol the site wishes to handle, specified as a string. ", 
                "name": "protocol"
            }, 
            {
                "descr": "The URL of the handler, as a string. ", 
                "name": "url"
            }, 
            {
                "descr": "A user-readable title string for the protocol handler. ", 
                "name": "title"
            }, 
            {
                "descr": "The user agent blocked registration of the protocol handler. ", 
                "name": "SecurityError"
            }, 
            {
                "descr": "The \"%s\" string is missing from the specified protocol handler URL.", 
                "name": "SyntaxError"
            }
        ], 
        "path": "dom/navigator/registerprotocolhandler", 
        "syntax": "window.navigator.registerProtocolHandler(protocol, url, title);", 
        "type": "Navigator"
    }, 
    "navigator.requestMediaKeySystemAccess": {
        "descr": "The Navigator.requestMediaKeySystemAccess() method returns a Promise for a MediaKeySystemAccess object.", 
        "name": "navigator.requestMediaKeySystemAccess", 
        "params": [
            {
                "descr": "A DOMString identifier of the key system. ", 
                "name": "keySystem"
            }, 
            {
                "descr": "A non-empty Array of MediaKeySystemConfiguration objects. ", 
                "name": "supportedConfigurations"
            }
        ], 
        "path": "dom/navigator/requestmediakeysystemaccess", 
        "syntax": "\u200bNavigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations).then(function(mediaKeySystemAccess) { ... });", 
        "type": "Navigator"
    }, 
    "navigator.sendBeacon": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "navigator.sendBeacon", 
        "params": [
            {
                "descr": "The url parameter indicates the resolved URL where the data is to be transmitted.", 
                "name": "url"
            }, 
            {
                "descr": "The data parameter is the ArrayBufferView, Blob, DOMString, or FormData data that is to be transmitted.", 
                "name": "data"
            }
        ], 
        "path": "dom/navigator/sendbeacon", 
        "syntax": "navigator.sendBeacon()", 
        "type": "Navigator"
    }, 
    "navigator.serviceWorker": {
        "descr": "The Navigator.serviceWorker read-only property returns the ServiceWorkerContainer object for the associated document, which provides access to registration, removal, upgrade, and communication with the ServiceWorker.", 
        "name": "navigator.serviceWorker", 
        "params": [], 
        "path": "dom/navigator/serviceworker", 
        "syntax": "var workerContainerInstance = navigator.serviceWorker; Value ServiceWorkerContainer. Specifications    Specification Status Comment   Service WorkersThe definition of 'navigator.serviceWorker' in that specification. Working Draft Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit)   Basic support 40.0 44.0 (44.0)[1] No support 24 No support         Feature Android Firefox Mobile (Gecko) Firefox OS IE Mobile Opera Mobile Safari Mobile Chrome for Android   Basic support ? 44.0 (44.0) (Yes) No support ? No support ?     [1] Service workers (and Push) have been disabled in the Firefox 45 Extended Support Release (ESR.)", 
        "type": "Navigator"
    }, 
    "navigator.vibrate": {
        "descr": "The Navigator.vibrate() method pulses the vibration hardware on the device, if such hardware exists. If the device doesn't support vibration, this method has no effect. If a vibration pattern is already in progress when this method is called, the previous pattern is halted and the new one begins instead.", 
        "name": "navigator.vibrate", 
        "params": [
            {
                "descr": "Provides a pattern of vibration and pause intervals. ", 
                "name": "pattern"
            }
        ], 
        "path": "dom/navigator/vibrate", 
        "syntax": "var successBool = window.navigator.vibrate(pattern);", 
        "type": "Navigator"
    }, 
    "navigatorConcurrentHardware.hardwareConcurrency": {
        "descr": "The NavigatorConcurrentHardware.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.", 
        "name": "navigatorConcurrentHardware.hardwareConcurrency", 
        "params": [], 
        "path": "dom/navigatorconcurrenthardware/hardwareconcurrency", 
        "syntax": "logicalProcessors = window.navigator.hardwareConcurrency Value A Number", 
        "type": "Navigator"
    }, 
    "navigatorID.platform": {
        "descr": "Returns a string representing the platform of the browser. The specification allows browsers to always return the empty string, so don't rely on this property to get a reliable answer.", 
        "name": "navigatorID.platform", 
        "params": [], 
        "path": "dom/navigatorid/platform", 
        "syntax": "platform = navigator.platform  Value A DOMString. platform is a string that must be an empty string or a string representing the platform on which the browser is executing. For example: \"MacIntel\", \"Win32\", \"FreeBSD i386\", \"WebTV OS\" Example console.log(navigator.platform);", 
        "type": "Navigator"
    }, 
    "navigatorLanguage.language": {
        "descr": "The NavigatorLanguage.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.", 
        "name": "navigatorLanguage.language", 
        "params": [], 
        "path": "dom/navigatorlanguage/language", 
        "syntax": "lang = globalObj.navigator.language  Values A string representing the language version as defined in BCP 47. Examples of valid language codes include \"en\", \"en-US\", \"fr\", \"es-ES\", etc. Example if (window.navigator.language != \"en\") {         doLangSelect(window.navigator.language);\n or  });", 
        "type": "Navigator"
    }, 
    "navigatorLanguage.languages": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "navigatorLanguage.languages", 
        "params": [], 
        "path": "dom/navigatorlanguage/languages", 
        "syntax": "NavigatorLanguage.languages read-only property returns an array of DOMStrings representing the user's preferred languages. The language is described using BCP 47 language tags. In the returned array they are ordered by preference with the most preferred language first. The value of navigator.language is the first element of the returned array. When its value changes, as the user's preferred languages are changed a languagechange event is fired on the Window object. The Accept-Language HTTP header in every HTTP request from the user's browser uses the same value for the navigator.languages property except for the extra qvalues (quality values) field (e.g. en-US;q=0.8", 
        "type": "Navigator"
    }, 
    "navigatorOnLine.onLine": {
        "descr": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.", 
        "name": "navigatorOnLine.onLine", 
        "params": [], 
        "path": "dom/navigatoronline/online", 
        "syntax": "online = window.navigator.onLine; Value online is a boolean true or false. Example View  a live example. To check if you are online, query window.navigator.onLine, as in the following example: if (navigator.onLine) {  console.log('online');\n or } else {  console.log('offline');\n or });", 
        "type": "Navigator"
    }, 
    "navigatorPlugins": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "navigatorPlugins", 
        "params": [
            {
                "descr": "Returns an MimeTypeArray listing the MIME types supported by the browser.", 
                "name": "NavigatorPlugins.mimeTypes Read only"
            }, 
            {
                "descr": "Returns a PluginArray listing the plugins installed in the browser.", 
                "name": "NavigatorPlugins.plugins Read only"
            }, 
            {
                "descr": "Returns a Boolean flag indicating whether the host browser is Java-enabled or not.", 
                "name": "NavigatorPlugins.javaEnabled Read only"
            }
        ], 
        "path": "dom/navigatorplugins", 
        "syntax": "NavigatorPlugins interface contains methods and properties related to the plugins installed in the browser. There is no object of type NavigatorPlugins, but other interfaces, like Navigator, implement it. Properties  NavigatorPlugins.mimeTypes Read only  Returns an MimeTypeArray listing the MIME types supported by the browser. NavigatorPlugins.plugins Read only  Returns a PluginArray listing the plugins installed in the browser.  Methods The NavigatorPlugins interface doesn't inherit any method.  NavigatorPlugins.javaEnabled Read only  Returns a Boolean flag indicating whether the host browser is Java-enabled or not.  Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'NavigatorPlugins' in that specification. Living Standard Initial definition.    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes) (Yes) (Yes) (Yes)         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "Navigator"
    }, 
    "navigatorPlugins.javaEnabled": {
        "descr": "This method indicates whether the current browser is Java-enabled or not.", 
        "name": "navigatorPlugins.javaEnabled", 
        "params": [], 
        "path": "dom/navigatorplugins/javaenabled", 
        "syntax": "result = window.navigator.javaEnabled()", 
        "type": "Navigator"
    }, 
    "navigatorPlugins.mimeTypes": {
        "descr": "Returns a MimeTypeArray object, which contains a list of MimeType objects representing the MIME types recognized by the browser.", 
        "name": "navigatorPlugins.mimeTypes", 
        "params": [], 
        "path": "dom/navigatorplugins/mimetypes", 
        "syntax": "mimeTypes = navigator.mimeTypes;  mimeTypes is a MimeTypeArray object which has a length property as well as item(index)", 
        "type": "Navigator"
    }, 
    "navigatorPlugins.plugins": {
        "descr": "Returns a PluginArray object, listing the plugins installed in the application.", 
        "name": "navigatorPlugins.plugins", 
        "params": [], 
        "path": "dom/navigatorplugins/plugins", 
        "syntax": "var plugins = navigator.plugins; plugins is used to access Plugin objects either by name or as an array of items. The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index)", 
        "type": "Navigator"
    }, 
    "new": {
        "descr": "The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.", 
        "name": "new", 
        "params": [
            {
                "descr": "A function that specifies the type of the object instance.", 
                "name": "constructor"
            }, 
            {
                "descr": "A list of values that the constructor will be called with.", 
                "name": "arguments"
            }
        ], 
        "path": "javascript/operators/new", 
        "syntax": "new constructor[([arguments])]", 
        "type": "Operators"
    }, 
    "new.target": {
        "descr": "The new.target property lets you detect whether a function or constructor was called using the new operator. In constructors and functions instantiated with the new operator, new.target returns a reference to the constructor or function. In normal function calls, new.target is undefined.", 
        "name": "new.target", 
        "params": [], 
        "path": "javascript/operators/new.target", 
        "syntax": "new.target Description The new.target syntax consists of the keyword \"new\", a dot, and a property name \"target\". Normally \"new.\" serves as the context for a property access, but here \"new.\" is not really an object. In constructor calls, however, new.target refers the constructor invoked by new and so \"new.\" becomes a virtual context. The new.target property is a meta property that is available to all functions. In arrow functions, new.target refers to the new.target of the surrounding function. Examples new.target in function calls In normal function calls (as opposed to constructor function calls), new.target", 
        "type": "Operators"
    }, 
    "next": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .next() method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.", 
        "name": "next", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/next", 
        "syntax": ".next( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "nextAll": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .nextAll() method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.", 
        "name": "nextAll", 
        "params": [
            {
                "descr": "Type: String  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/nextall", 
        "syntax": ".nextAll( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "nextUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .nextUntil() method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the .nextUntil() argument.", 
        "name": "nextUntil", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching following sibling elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }, 
            {
                "descr": "Type: Element or jQuery  A DOM node or jQuery object indicating where to stop matching following sibling elements.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }
        ], 
        "path": "jquery/nextuntil", 
        "syntax": ".nextUntil( [selector ] [, filter ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "not": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .not() method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.", 
        "name": "not", 
        "params": [
            {
                "descr": "Type: Selector or Element or Array  A string containing a selector expression, a DOM element, or an array of elements to match against the set.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Function( Integer index, Element element ) => Boolean  A function used as a test for each element in the set. ", 
                "name": "function"
            }, 
            {
                "descr": "Type: jQuery  An existing jQuery object to match the current set of elements against.", 
                "name": "selection"
            }
        ], 
        "path": "jquery/not", 
        "syntax": ".not( selector ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "now": {
        "descr": "The Date.now() method returns the number of milliseconds elapsed since 1 January 1970 00:00:00 UTC.", 
        "name": "Date.now", 
        "params": [], 
        "path": "javascript/global_objects/date/now", 
        "syntax": "var timeInMs = Date.now();", 
        "type": "Date"
    }, 
    "null": {
        "descr": "The value null represents the intentional absence of any object value. It is one of JavaScript's primitive values.", 
        "name": "null", 
        "params": [], 
        "path": "javascript/global_objects/null", 
        "syntax": "null  Description The value null is written with a literal, null (it's not an identifer for a property of the global object like undefined can be). In APIs, null", 
        "type": "Global Objects"
    }, 
    "number.toExponential": {
        "descr": "The toExponential() method returns a string representing the Number object in exponential notation.", 
        "name": "number.toExponential", 
        "params": [
            {
                "descr": "Optional. An integer specifying the number of digits after the decimal point. ", 
                "name": "fractionDigits"
            }, 
            {
                "descr": "If fractionDigits is too small or too large. ", 
                "name": "RangeError"
            }, 
            {
                "descr": "If this method is invoked on an object that is not a Number.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/number/toexponential", 
        "syntax": "numObj.toExponential([fractionDigits])", 
        "type": "Number"
    }, 
    "number.toFixed": {
        "descr": "The toFixed() method formats a number using fixed-point notation.", 
        "name": "number.toFixed", 
        "params": [
            {
                "descr": "Optional. The number of digits to appear after the decimal point; this may be a value between 0 and 20, inclusive, and implementations may optionally support a larger range of values. ", 
                "name": "digits"
            }, 
            {
                "descr": "If digits is too small or too large. ", 
                "name": "RangeError"
            }, 
            {
                "descr": "If this method is invoked on an object that is not a Number.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/number/tofixed", 
        "syntax": "numObj.toFixed([digits])", 
        "type": "Number"
    }, 
    "number.toLocaleString": {
        "descr": "The toLocaleString() method returns a string with a language sensitive representation of this number.", 
        "name": "number.toLocaleString", 
        "params": [
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties: localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".", 
                "name": "style"
            }, 
            {
                "descr": "The currency to use in currency formatting. ", 
                "name": "currency"
            }, 
            {
                "descr": "How to display the currency in currency formatting. ", 
                "name": "currencyDisplay"
            }, 
            {
                "descr": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. ", 
                "name": "useGrouping"
            }, 
            {
                "descr": "The minimum number of integer digits to use. ", 
                "name": "minimumIntegerDigits"
            }, 
            {
                "descr": "The minimum number of fraction digits to use. ", 
                "name": "minimumFractionDigits"
            }, 
            {
                "descr": "The maximum number of fraction digits to use. ", 
                "name": "maximumFractionDigits"
            }, 
            {
                "descr": "The minimum number of significant digits to use. ", 
                "name": "minimumSignificantDigits"
            }, 
            {
                "descr": "The maximum number of significant digits to use. ", 
                "name": "maximumSignificantDigits"
            }
        ], 
        "path": "javascript/global_objects/number/tolocalestring", 
        "syntax": "numObj.toLocaleString([locales [, options]])", 
        "type": "Number"
    }, 
    "number.toPrecision": {
        "descr": "The toPrecision() method returns a string representing the Number object to the specified precision.", 
        "name": "number.toPrecision", 
        "params": [
            {
                "descr": "Optional. An integer specifying the number of significant digits.", 
                "name": "precision"
            }, 
            {
                "descr": "If precison is not between 1 and 100 (inclusive), a RangeError is thrown. ", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/number/toprecision", 
        "syntax": "numObj.toPrecision([precision])", 
        "type": "Number"
    }, 
    "number.toString": {
        "descr": "The toString() method returns a string representing the specified Number object.", 
        "name": "number.toString", 
        "params": [
            {
                "descr": "Optional. An integer between 2 and 36 specifying the base to use for representing numeric values.", 
                "name": "radix"
            }, 
            {
                "descr": "If toString() is given a radix not between 2 and 36, a RangeError is thrown.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/number/tostring", 
        "syntax": "numObj.toString([radix])", 
        "type": "Number"
    }, 
    "number.valueOf": {
        "descr": "The valueOf() method returns the wrapped primitive value of a Number object.", 
        "name": "number.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/number/valueof", 
        "syntax": "numObj.valueOf()", 
        "type": "Number"
    }, 
    "object.__defineGetter__": {
        "descr": "This feature is deprecated in favor of defining getters using the object initializer syntax or the Object.defineProperty() API. While this feature is widely implemented, it is only described in the ECMAScript specification because of legacy usage. This method should not be used since better alternatives exist.", 
        "name": "object.__defineGetter__", 
        "params": [
            {
                "descr": "A string containing the name of the property to bind to the given function.", 
                "name": "prop"
            }, 
            {
                "descr": "A function to be bound to a lookup of the specified property.", 
                "name": "func"
            }
        ], 
        "path": "javascript/global_objects/object/__definegetter__", 
        "syntax": "Object.defineProperty()", 
        "type": "Object"
    }, 
    "object.__defineSetter__": {
        "descr": "This feature is deprecated in favor of defining setters using the object initializer syntax or the Object.defineProperty() API.", 
        "name": "object.__defineSetter__", 
        "params": [
            {
                "descr": "A string containing the name of the property to be bound to the given function.", 
                "name": "prop"
            }, 
            {
                "descr": "A function to be called when there is an attempt to set the specified property. ", 
                "name": "fun"
            }
        ], 
        "path": "javascript/global_objects/object/__definesetter__", 
        "syntax": "Object.defineProperty()", 
        "type": "Object"
    }, 
    "object.__proto__": {
        "descr": "Warning: Changing the [[Prototype]] of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in every browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in obj.__proto__ = ... statement, but may extend to any code that has access to any object whose [[Prototype]] has been altered. If you care about performance you should avoid setting the [[Prototype]] of an object. Instead, create a new object with the desired [[Prototype]] using Object.create().", 
        "name": "object.__proto__", 
        "params": [], 
        "path": "javascript/global_objects/object/__proto__", 
        "syntax": "var shape = {};var circle = new Circle();\n or // Set the object prototype.// DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code.shape.__proto__ = circle;// Get the object prototypeconsole.log(shape.__proto__ === circle);\n or  // true);", 
        "type": "Object"
    }, 
    "object.hasOwnProperty": {
        "descr": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.", 
        "name": "object.hasOwnProperty", 
        "params": [
            {
                "descr": "The name of the property to test.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/hasownproperty", 
        "syntax": "obj.hasOwnProperty(prop)", 
        "type": "Object"
    }, 
    "object.isPrototypeOf": {
        "descr": "The isPrototypeOf() method tests for an object in another object's prototype chain.", 
        "name": "object.isPrototypeOf", 
        "params": [
            {
                "descr": "An object to be tested against each link in the prototype chain of the object argument.", 
                "name": "prototypeObj"
            }, 
            {
                "descr": "The object whose prototype chain will be searched.", 
                "name": "object"
            }
        ], 
        "path": "javascript/global_objects/object/isprototypeof", 
        "syntax": "prototypeObj.isPrototypeOf(obj)", 
        "type": "Object"
    }, 
    "object.propertyIsEnumerable": {
        "descr": "The propertyIsEnumerable() method returns a Boolean indicating whether the specified property is enumerable.", 
        "name": "object.propertyIsEnumerable", 
        "params": [
            {
                "descr": "The name of the property to test.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/propertyisenumerable", 
        "syntax": "obj.propertyIsEnumerable(prop)", 
        "type": "Object"
    }, 
    "object.toLocaleString": {
        "descr": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.", 
        "name": "object.toLocaleString", 
        "params": [], 
        "path": "javascript/global_objects/object/tolocalestring", 
        "syntax": "obj.toLocaleString();", 
        "type": "Object"
    }, 
    "object.toString": {
        "descr": "The toString() method returns a string representing object.", 
        "name": "object.toString", 
        "params": [], 
        "path": "javascript/global_objects/object/tostring", 
        "syntax": "obj.toString()", 
        "type": "Object"
    }, 
    "object.unwatch": {
        "descr": "Warning: Generally you should avoid using unwatch() and watch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Browser compatibility for details.", 
        "name": "object.unwatch", 
        "params": [
            {
                "descr": "The name of a property of the object to stop watching.", 
                "name": "prop"
            }
        ], 
        "path": "javascript/global_objects/object/unwatch", 
        "syntax": "obj.unwatch(prop)", 
        "type": "Object"
    }, 
    "object.valueOf": {
        "descr": "The valueOf() method returns the primitive value of the specified object.", 
        "name": "object.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/object/valueof", 
        "syntax": "object.valueOf()", 
        "type": "Object"
    }, 
    "object.watch": {
        "descr": "Warning: Generally you should avoid using watch() and unwatch() when possible. These two methods are implemented only in Gecko, and they're intended primarily for debugging use. In addition, using watchpoints has a serious negative impact on performance, which is especially true when used on global objects, such as window. You can usually use setters and getters or proxies instead. See Browser compatibility for details. Also, do not confuse Object.watch with Object.observe.", 
        "name": "object.watch", 
        "params": [
            {
                "descr": "The name of a property of the object on which you wish to monitor changes.", 
                "name": "prop"
            }, 
            {
                "descr": "A function to call when the specified property's value changes.", 
                "name": "handler"
            }
        ], 
        "path": "javascript/global_objects/object/watch", 
        "syntax": "obj.watch(prop, handler)", 
        "type": "Object"
    }, 
    "of": {
        "descr": "The Array.of() method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.", 
        "name": "Array.of", 
        "params": [
            {
                "descr": "Elements of which to create the array.", 
                "name": "elementN"
            }
        ], 
        "path": "javascript/global_objects/array/of", 
        "syntax": "Array.of(element0[, element1[, ...[, elementN]]])", 
        "type": "Array"
    }, 
    "off": {
        "descr": "The .off() method removes event handlers that were attached with .on(). See the discussion of delegated and directly bound events on that page for more information. Calling .off() with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.", 
        "name": "off", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector which should match the one originally passed to .on() when attaching event handlers.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A handler function previously attached for the event(s), or the special value false.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: PlainObject  An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector which should match the one originally passed to .on() when attaching event handlers.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Event  A jQuery.Event object.", 
                "name": "event"
            }
        ], 
        "path": "jquery/off", 
        "syntax": ".off( events [, selector ] [, handler ] ) Returns: jQuery", 
        "type": "Events"
    }, 
    "offset": {
        "descr": "The .offset() method allows us to retrieve the current position of an element relative to the document. Contrast this with .position(), which retrieves the current position relative to the offset parent. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), .offset() is more useful.", 
        "name": "offset", 
        "params": [
            {
                "descr": "Type: PlainObject  An object containing the properties top and left, which are numbers indicating the new top and left coordinates for the elements.", 
                "name": "coordinates"
            }, 
            {
                "descr": "Type: Function( Integer index, PlainObject coords ) => PlainObject  A function to return the coordinates to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/offset", 
        "syntax": ".offset() Returns: Object", 
        "type": "Offset"
    }, 
    "offsetParent": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .offsetParent() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of relative, absolute, or fixed. This information is useful for calculating offsets for performing animations and placing objects on the page.", 
        "name": "offsetParent", 
        "params": [], 
        "path": "jquery/offsetparent", 
        "syntax": ".offsetParent() Returns: jQuery", 
        "type": "Offset"
    }, 
    "on": {
        "descr": "The .on() method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the .on() method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see .bind(), .delegate(), and .live(). To remove events bound with .on(), see .off(). To attach an event that runs only once and then removes itself, see .one()", 
        "name": "on", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that trigger the event. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event is triggered.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( Event eventObject [, Anything extraParameter ] [, ... ", 
                "name": "handler"
            }, 
            {
                "descr": "Type: PlainObject  An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that will call the handler. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event occurs.", 
                "name": "data"
            }
        ], 
        "path": "jquery/on", 
        "syntax": ".on( events [, selector ] [, data ], handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "ondevicelight": {
        "descr": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.", 
        "name": "window.ondevicelight", 
        "params": [], 
        "path": "dom/window/ondevicelight", 
        "syntax": "window.ondevicelight = funcRef Where funcRef is a function to be called when the devicelight event occurs. These events are of type DeviceLightEvent. Specifications    Specification Status Comment     Ambient Light EventsThe definition of 'Ambient Light Events' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 22.0 (22.0)[1] Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0)[1] Not supported Not supported Not supported     [1] The devicelight", 
        "type": "Window"
    }, 
    "ondevicemotion": {
        "descr": "An event handler for the devicemotion events sent to the window.", 
        "name": "window.ondevicemotion", 
        "params": [], 
        "path": "dom/window/ondevicemotion", 
        "syntax": "window.ondevicemotion = funcRef; Where funcRef is a reference to a function. This function receives a DeviceMotionEvent object describing the motion that occurred. Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "Window"
    }, 
    "ondeviceorientation": {
        "descr": "An event handler for the deviceorientation event, which contains information about a relative device orientation change.", 
        "name": "window.ondeviceorientation", 
        "params": [], 
        "path": "dom/window/ondeviceorientation", 
        "syntax": "window.ondeviceorientation = function(event) { ... };window.addEventListener('deviceorientation', function(event) { ... });", 
        "type": "Window"
    }, 
    "ondeviceproximity": {
        "descr": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.", 
        "name": "window.ondeviceproximity", 
        "params": [], 
        "path": "dom/window/ondeviceproximity", 
        "syntax": "window.onuserproximity = funcRef Where funcRef is a function to be called when the deviceproximity event occurs. These events are of type DeviceProximityEvent. Specifications    Specification Status Comment     Proximity EventsThe definition of 'Proximity Events' in that specification. Candidate Recommendation Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported (Yes) Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported     See also", 
        "type": "Window"
    }, 
    "ondragdrop": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "window.ondragdrop", 
        "params": [
            {
                "descr": "the event handler function to be registered.", 
                "name": "funcRef"
            }
        ], 
        "path": "dom/window/ondragdrop", 
        "syntax": "window.ondragdrop = funcRef;window.addEventListener(\"dragdrop\", funcRef, useCapturing);", 
        "type": "Window"
    }, 
    "one": {
        "descr": "The .one() method is identical to .on(), except that the handler for a given element and event type is unbound after its first invocation. For example:", 
        "name": "one", 
        "params": [
            {
                "descr": "Type: String  A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.", 
                "name": "events"
            }, 
            {
                "descr": "Type: PlainObject  An object containing data that will be passed to the event handler.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that trigger the event. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event is triggered.", 
                "name": "data"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the event is triggered. ", 
                "name": "handler"
            }, 
            {
                "descr": "Type: PlainObject  An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A selector string to filter the descendants of the selected elements that will call the handler. ", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Anything  Data to be passed to the handler in event.data when an event occurs.", 
                "name": "data"
            }
        ], 
        "path": "jquery/one", 
        "syntax": ".one( events [, data ], handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "oninstall": {
        "descr": "The oninstall property of the Window interface represent the event handler for the install event, which is thrown each time the page is successfully installed as a web app.", 
        "name": "window.oninstall", 
        "params": [], 
        "path": "dom/window/oninstall", 
        "syntax": "window.oninstall = function(event) { ... };", 
        "type": "Window"
    }, 
    "onuserproximity": {
        "descr": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.", 
        "name": "window.onuserproximity", 
        "params": [], 
        "path": "dom/window/onuserproximity", 
        "syntax": "window.onuserproximity = eventHandler Specifications    Specification Status Comment     Proximity EventsThe definition of 'Proximity Events' in that specification. Candidate Recommendation Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported (Yes) Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported     See also", 
        "type": "Window"
    }, 
    "onvrdisplayconnected": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.onvrdisplayconnected", 
        "params": [], 
        "path": "dom/window/onvrdisplayconnected", 
        "syntax": "onvrdisplayconnected property of the SpeechSynthesis interface represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires).", 
        "type": "Window"
    }, 
    "onvrdisplaydisconnected": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.onvrdisplaydisconnected", 
        "params": [], 
        "path": "dom/window/onvrdisplaydisconnected", 
        "syntax": "onvrdisplaydisconnected event handler property of the Window interface is called when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires).", 
        "type": "Window"
    }, 
    "onvrdisplaypresentchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.onvrdisplaypresentchange", 
        "params": [], 
        "path": "dom/window/onvrdisplaypresentchange", 
        "syntax": "onvrdisplaypresentchange property of the SpeechSynthesis interface represents an event handler that will run when the presenting state of a VR device changes \u2014 i.e. goes from presenting to not presenting, or vice versa (when the onvrdisplaypresentchange event fires).", 
        "type": "Window"
    }, 
    "open": {
        "descr": "Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.", 
        "name": "window.open", 
        "params": [
            {
                "descr": "A reference to the newly created window. ", 
                "name": "windowObjectReference"
            }, 
            {
                "descr": "The URL to be loaded in the newly opened window. ", 
                "name": "strUrl"
            }, 
            {
                "descr": "A string name for the new window. ", 
                "name": "strWindowName"
            }, 
            {
                "descr": "An optional parameter listing the features (size, position, scrollbars, etc.) of the new window as a string. ", 
                "name": "strWindowFeatures"
            }, 
            {
                "descr": "Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenX"
            }, 
            {
                "descr": "Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenY"
            }, 
            {
                "descr": "Centers the window in relation to its parent's size and position. ", 
                "name": "centerscreen"
            }, 
            {
                "descr": "Specifies the height of the whole browser window in pixels. ", 
                "name": "outerHeight"
            }, 
            {
                "descr": "Specifies the width of the whole browser window in pixels. ", 
                "name": "outerWidth"
            }, 
            {
                "descr": "Same as height but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerHeight"
            }, 
            {
                "descr": "Same as width but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerWidth"
            }, 
            {
                "descr": "example \"status=yes\", \"status=1\" and \"status\" have identical results", 
                "name": "NOTE: All features can be set to yes, 1 or just be present to be \"on\", set to no or 0 or in most cases just not present to be \"off\""
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the menubar.", 
                "name": "menubar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). ", 
                "name": "toolbar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. ", 
                "name": "location"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. ", 
                "name": "personalbar"
            }, 
            {
                "descr": "Obsolete synonym of personalbar. ", 
                "name": "directories Obsolete since Gecko 2"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window has a status bar. ", 
                "name": "status"
            }, 
            {
                "descr": "If this feature is specified, the window is able to open even if another application is already in the foreground. ", 
                "name": "attention Non-standard"
            }, 
            {
                "descr": "If on, the new window is said to be dependent of its parent window. ", 
                "name": "dependent"
            }, 
            {
                "descr": "This setting can only apply to dialog windows; \"minimizable\" requires dialog=yes. ", 
                "name": "minimizable"
            }, 
            {
                "descr": "Do not use. Not implemented in Mozilla. ", 
                "name": "fullscreen"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will be resizable.", 
                "name": "resizable"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. ", 
                "name": "scrollbars"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the UniversalBrowserWrite privilege (bug 244965). ", 
                "name": "chrome"
            }, 
            {
                "descr": "Note: Starting with Firefox 44, this feature can only be used with chrome privileges. ", 
                "name": "dialog"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.2.1, this feature requires the UniversalBrowserWrite privilege (bug 180048). ", 
                "name": "modal"
            }, 
            {
                "descr": "By default, all new secondary windows have a titlebar. ", 
                "name": "titlebar"
            }, 
            {
                "descr": "If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.", 
                "name": "alwaysRaised"
            }, 
            {
                "descr": "If on, the new created window floats below, under its own parent when the parent window is not minimized. ", 
                "name": "alwaysLowered"
            }, 
            {
                "descr": "Same as alwaysLowered.", 
                "name": "z-lock"
            }, 
            {
                "descr": "When set to no or 0, this feature removes the system close command icon and system close menu item. ", 
                "name": "close"
            }, 
            {
                "descr": "You can not. New windows not opened by javascript can not as a rule be closed by JavaScript. ", 
                "name": "How can I prevent the confirmation message asking the user whether he wants to close the window?"
            }, 
            {
                "descr": "First check for the existence of the window object reference of such window and if it exists and if it has not been closed, then use the focus() method. ", 
                "name": "How can I bring back the window if it is minimized or behind another window?"
            }, 
            {
                "descr": "You cannot. All browser manufacturers try to make the opening of new secondary windows noticed by users and noticeable by users to avoid confusion, to avoid disorienting users.", 
                "name": "How do I force a maximized window?"
            }, 
            {
                "descr": "You cannot force this. Users with Mozilla-based browsers have absolute control over window functionalities like resizability, scrollability and toolbars presence via user preferences in about:config. ", 
                "name": "How do I turn off window resizability or remove toolbars?"
            }, 
            {
                "descr": "You can not reliably because the users can prevent the window from being resized by unchecking the Edit/Preferences/Advanced/Scripts & Plug-ins/Allow Scripts to/ Move or resize existing windows checkbox in Mozilla or Tools/Options.../Content tab/Enable Javascript/Advanced button/Move or resize existing windows checkbox in Firefox or by setting dom.disable_window_move_resize to true in about:config or by editing accordingly their user.js file.", 
                "name": "How do I resize a window to fit its content?"
            }, 
            {
                "descr": "To open a resource in a new tab see Tabbed browser. ", 
                "name": "How do I open a referenced resource of a link in a new tab? or in a specific tab?"
            }, 
            {
                "descr": "You can test for the existence of the window object reference which is the returned value in case of success of the window.open() call and then verify that windowObjectReference.closed return value is false.", 
                "name": "How do I know whether a window I opened is still open?"
            }, 
            {
                "descr": "With the built-in popup blockers of Mozilla/Firefox and Internet Explorer 6 SP2, you have to check the return value of window.open(): it will be null if the window wasn't allowed to open. ", 
                "name": "How can I tell when my window was blocked by a popup blocker?"
            }, 
            {
                "descr": "The window.open() method gives a main window a reference to a secondary window; the opener property gives a secondary window a reference to its main window.", 
                "name": "What is the JavaScript relationship between the main window and the secondary window?"
            }, 
            {
                "descr": "It is because of the cross-domain script security restriction (also referred as the \"Same Origin Policy\"). ", 
                "name": "I can not access the properties of the new secondary window. I always get an error in the javascript console saying \"Error: uncaught exception: Permission denied to get property <property_name or method_name>. Why is that?"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Opener window, parent window, main window, first window"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Sub-window, child window, secondary window, second window"
            }, 
            {
                "descr": "Script-initiated windows opening automatically without the user's consent.", 
                "name": "Unrequested popup windows"
            }
        ], 
        "path": "dom/window/open", 
        "syntax": "var windowObjectReference = window.open(strUrl, strWindowName, [strWindowFeatures]);", 
        "type": "Window"
    }, 
    "opener": {
        "descr": "Returns a reference to the window that opened this current window.", 
        "name": "window.opener", 
        "params": [], 
        "path": "dom/window/opener", 
        "syntax": "objRef = window.opener; Example if (window.opener != indexWin) {  referToTop(window.opener);\n or });", 
        "type": "Window"
    }, 
    "outerHeight": {
        "descr": "Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerHeight", 
        "params": [], 
        "path": "dom/window/outerheight", 
        "syntax": "outWindowHeight = window.outerHeight; On return, outWindowHeight contains the height of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "Window"
    }, 
    "outerWidth": {
        "descr": "Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerWidth", 
        "params": [], 
        "path": "dom/window/outerwidth", 
        "syntax": "outWindowWidth = window.outerWidth; On return, outWindowWidth is the width of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "Window"
    }, 
    "parent": {
        "descr": "A reference to the parent of the current window or subframe.", 
        "name": "window.parent", 
        "params": [], 
        "path": "dom/window/parent", 
        "syntax": "parentWindow = window.parent;  Example if (window.parent\u00a0!= window.top) {  // we're deeper than one down}", 
        "type": "Window"
    }, 
    "parents": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .parents() method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. When multiple DOM elements are in the original set, the resulting set will be in reverse order of the original elements as well, with duplicates removed.", 
        "name": "parents", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/parents", 
        "syntax": ".parents( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "parentsUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .parentsUntil() method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the .parentsUntil() selector.", 
        "name": "parentsUntil", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching ancestor elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }, 
            {
                "descr": "Type: Element or jQuery  A DOM node or jQuery object indicating where to stop matching ancestor elements.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }
        ], 
        "path": "jquery/parentsuntil", 
        "syntax": ".parentsUntil( [selector ] [, filter ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "parse": {
        "descr": "The Date.parse() method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or NaN if the string is unrecognised or, in some cases, contains illegal date values (e.g. 2015-02-31).", 
        "name": "Date.parse", 
        "params": [
            {
                "descr": "A string representing an RFC2822 or ISO 8601 date (other formats may be used, but results may be unexpected).", 
                "name": "dateString"
            }
        ], 
        "path": "javascript/global_objects/date/parse", 
        "syntax": "Date.parse(dateString)", 
        "type": "Date"
    }, 
    "parseFloat": {
        "descr": "The parseFloat() function parses a string argument and returns a floating point number.", 
        "name": "parseFloat", 
        "params": [
            {
                "descr": "A string that represents the value you want to parse.", 
                "name": "string"
            }
        ], 
        "path": "javascript/global_objects/parsefloat", 
        "syntax": "parseFloat(string)", 
        "type": "Global Objects"
    }, 
    "parseInt": {
        "descr": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).", 
        "name": "parseInt", 
        "params": [
            {
                "descr": "The value to parse. If string is not a string, then it is converted to a string (using the ToString abstract operation). ", 
                "name": "string"
            }, 
            {
                "descr": "An integer between 2 and 36 that represents the radix (the base in mathematical numeral systems) of the above mentioned string. ", 
                "name": "radix"
            }
        ], 
        "path": "javascript/global_objects/parseint", 
        "syntax": "parseInt(string, radix);", 
        "type": "Global Objects"
    }, 
    "position": {
        "descr": "The .position() method allows us to retrieve the current position of an element relative to the offset parent. Contrast this with .offset(), which retrieves the current position relative to the document. When positioning a new element near another one and within the same containing DOM element, .position() is the more useful.", 
        "name": "position", 
        "params": [], 
        "path": "jquery/position", 
        "syntax": ".position() Returns: Object", 
        "type": "Offset"
    }, 
    "postMessage": {
        "descr": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both https), port number (443 being the default for https), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.", 
        "name": "window.postMessage", 
        "params": [
            {
                "descr": "A reference to another window; such a reference may be obtained, for example, using the contentWindow property of an iframe element, the object returned by window.open, or by named or numeric index on window.frames.", 
                "name": "otherWindow"
            }, 
            {
                "descr": "Data to be sent to the other window. ", 
                "name": "message"
            }, 
            {
                "descr": "Specifies what the origin of otherWindow must be for the event to be dispatched, either as the literal string \"*\" (indicating no preference) or as a URI. ", 
                "name": "targetOrigin"
            }, 
            {
                "descr": "Is a sequence of Transferable objects that are transferred with the message. ", 
                "name": "transfer Optional"
            }, 
            {
                "descr": "The object passed from the other window.", 
                "name": "data"
            }, 
            {
                "descr": "The origin of the window that sent the message at the time postMessage was called. ", 
                "name": "origin"
            }, 
            {
                "descr": "A reference to the window object that sent the message; you can use this to establish two-way communication between two windows with different origins.", 
                "name": "source"
            }
        ], 
        "path": "dom/window/postmessage", 
        "syntax": "otherWindow.postMessage(message, targetOrigin, [transfer]);", 
        "type": "Window"
    }, 
    "prepend": {
        "descr": "The .prepend() method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the last child, use .append()).", 
        "name": "prepend", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: htmlString or Element or Text or Array or jQuery  One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.", 
                "name": "content"
            }, 
            {
                "descr": "Type: Function( Integer elementOfArray, String html ) => htmlString or Element or Text or jQuery  A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, this refers to the current element in the set.", 
                "name": "function"
            }
        ], 
        "path": "jquery/prepend", 
        "syntax": ".prepend( content [, content ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "prependTo": {
        "descr": "The .prepend() and .prependTo() methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With .prepend(), the selector expression preceding the method is the container into which the content is inserted. With .prependTo(), on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.", 
        "name": "prependTo", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or Array or jQuery  A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.", 
                "name": "target"
            }
        ], 
        "path": "jquery/prependto", 
        "syntax": ".prependTo( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "prev": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .prev() method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.", 
        "name": "prev", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/prev", 
        "syntax": ".prev( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "prevAll": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .prevAll() method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.", 
        "name": "prevAll", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/prevall", 
        "syntax": ".prevAll( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "prevUntil": {
        "descr": "Given a selector expression that represents a set of DOM elements, the .prevUntil() method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the .prevUntil() selector; the elements are returned in order from the closest sibling to the farthest.", 
        "name": "prevUntil", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to indicate where to stop matching preceding sibling elements.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }, 
            {
                "descr": "Type: Element or jQuery  A DOM node or jQuery object indicating where to stop matching preceding sibling elements.", 
                "name": "element"
            }, 
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "filter"
            }
        ], 
        "path": "jquery/prevuntil", 
        "syntax": ".prevUntil( [selector ] [, filter ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "preventExtensions": {
        "descr": "The Object.preventExtensions() method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).", 
        "name": "Object.preventExtensions", 
        "params": [
            {
                "descr": "The object which should be made non-extensible.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/preventextensions", 
        "syntax": "Object.preventExtensions(obj)", 
        "type": "Object"
    }, 
    "print": {
        "descr": "Opens the Print Dialog to print the current document.", 
        "name": "window.print", 
        "params": [], 
        "path": "dom/window/print", 
        "syntax": "window.print()", 
        "type": "Window"
    }, 
    "promise": {
        "descr": "The .promise() method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.", 
        "name": "promise", 
        "params": [
            {
                "descr": "(default: fx) Type: String   The type of queue that needs to be observed.", 
                "name": "type"
            }, 
            {
                "descr": "Type: PlainObject  Object onto which the promise methods have to be attached", 
                "name": "target"
            }
        ], 
        "path": "jquery/promise", 
        "syntax": ".promise( [type ] [, target ] ) Returns: Promise", 
        "type": "Deferred Object"
    }, 
    "promise.catch": {
        "descr": "The catch() method returns a Promise and deals with rejected cases only. It behaves the same as calling Promise.prototype.then(undefined, onRejected).", 
        "name": "promise.catch", 
        "params": [
            {
                "descr": "A Function called when the Promise is rejected. ", 
                "name": "onRejected"
            }
        ], 
        "path": "javascript/global_objects/promise/catch", 
        "syntax": "p.catch(onRejected);\n or p.catch(function(reason) {   // rejection});", 
        "type": "Promise"
    }, 
    "promise.then": {
        "descr": "The then() method returns a Promise. It takes two arguments: callback functions for the success and failure cases of the Promise.", 
        "name": "promise.then", 
        "params": [
            {
                "descr": "A Function called when the Promise is fulfilled. ", 
                "name": "onFulfilled"
            }, 
            {
                "descr": "A Function called when the Promise is rejected. ", 
                "name": "onRejected"
            }
        ], 
        "path": "javascript/global_objects/promise/then", 
        "syntax": "p.then(onFulfilled, onRejected);\n or p.then(function(value) {   // fulfillment  }, function(reason) {  // rejection});", 
        "type": "Promise"
    }, 
    "prompt": {
        "descr": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.", 
        "name": "window.prompt", 
        "params": [], 
        "path": "dom/window/prompt", 
        "syntax": "result = window.prompt(message, default);", 
        "type": "Window"
    }, 
    "prop": {
        "descr": "The .prop() method gets the property value for only the first element in the matched set. It returns undefined for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's .each() or .map() method.", 
        "name": "prop", 
        "params": [
            {
                "descr": "Type: String  The name of the property to get.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: String  The name of the property to set.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Anything  A value to set for the property.", 
                "name": "value"
            }, 
            {
                "descr": "Type: PlainObject  An object of property-value pairs to set.", 
                "name": "properties"
            }, 
            {
                "descr": "Type: String  The name of the property to set.", 
                "name": "propertyName"
            }, 
            {
                "descr": "Type: Function( Integer index, Anything oldPropertyValue ) => Anything  A function returning the value to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/prop", 
        "syntax": ".prop( propertyName ) Returns: Anything", 
        "type": "Manipulation"
    }, 
    "proto": {
        "descr": "Warning: Changing the [[Prototype]] of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in every browser and JavaScript engine. The effects on performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in obj.__proto__ = ... statement, but may extend to any code that has access to any object whose [[Prototype]] has been altered. If you care about performance you should avoid setting the [[Prototype]] of an object. Instead, create a new object with the desired [[Prototype]] using Object.create().", 
        "name": "Object.proto", 
        "params": [], 
        "path": "javascript/global_objects/object/proto", 
        "syntax": "var shape = {};var circle = new Circle();\n or // Set the object prototype.// DEPRECATED. This is for example purposes only. DO NOT DO THIS in real code.shape.__proto__ = circle;// Get the object prototypeconsole.log(shape.__proto__ === circle);\n or  // true);", 
        "type": "Object"
    }, 
    "prototype": {
        "descr": "The String.prototype property represents the String prototype object.", 
        "name": "String.prototype", 
        "params": [
            {
                "descr": "Specifies the function that creates an object's prototype.", 
                "name": "String.prototype.constructor"
            }, 
            {
                "descr": "Reflects the length of the string.", 
                "name": "String.prototype.length"
            }, 
            {
                "descr": "Used to access the character in the Nth position where N is a positive integer between 0 and one less than the value of length. ", 
                "name": "N"
            }, 
            {
                "descr": "Returns the character at the specified index.", 
                "name": "String.prototype.charAt()"
            }, 
            {
                "descr": "Returns a number indicating the Unicode value of the character at the given index.", 
                "name": "String.prototype.charCodeAt()"
            }, 
            {
                "descr": "Returns a non-negative integer that is the UTF-16 encoded code point value at the given position.", 
                "name": "String.prototype.codePointAt()"
            }, 
            {
                "descr": "Combines the text of two strings and returns a new string.", 
                "name": "String.prototype.concat()"
            }, 
            {
                "descr": "Determines whether one string may be found within another string.", 
                "name": "String.prototype.includes()"
            }, 
            {
                "descr": "Determines whether a string ends with the characters of another string.", 
                "name": "String.prototype.endsWith()"
            }, 
            {
                "descr": "Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.", 
                "name": "String.prototype.indexOf()"
            }, 
            {
                "descr": "Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.", 
                "name": "String.prototype.lastIndexOf()"
            }, 
            {
                "descr": "Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
                "name": "String.prototype.localeCompare()"
            }, 
            {
                "descr": "Used to match a regular expression against a string.", 
                "name": "String.prototype.match()"
            }, 
            {
                "descr": "Returns the Unicode Normalization Form of the calling string value.", 
                "name": "String.prototype.normalize()"
            }, 
            {
                "descr": "Pads the current string from the end with a given string to create a new string from a given length.", 
                "name": "String.prototype.padEnd()"
            }, 
            {
                "descr": "Pads the current string from the start with a given string to create a new string from a given length.", 
                "name": "String.prototype.padStart()"
            }, 
            {
                "descr": "Wraps the string in double quotes (\"\"\").", 
                "name": "String.prototype.quote()"
            }, 
            {
                "descr": "Returns a string consisting of the elements of the object repeated the given times.", 
                "name": "String.prototype.repeat()"
            }, 
            {
                "descr": "Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.", 
                "name": "String.prototype.replace()"
            }, 
            {
                "descr": "Executes the search for a match between a regular expression and a specified string.", 
                "name": "String.prototype.search()"
            }, 
            {
                "descr": "Extracts a section of a string and returns a new string.", 
                "name": "String.prototype.slice()"
            }, 
            {
                "descr": "Splits a String object into an array of strings by separating the string into substrings.", 
                "name": "String.prototype.split()"
            }, 
            {
                "descr": "Determines whether a string begins with the characters of another string.", 
                "name": "String.prototype.startsWith()"
            }, 
            {
                "descr": "Returns the characters in a string beginning at the specified location through the specified number of characters.", 
                "name": "String.prototype.substr()"
            }, 
            {
                "descr": "Returns the characters in a string between two indexes into the string.", 
                "name": "String.prototype.substring()"
            }, 
            {
                "descr": "The characters within a string are converted to lower case while respecting the current locale. ", 
                "name": "String.prototype.toLocaleLowerCase()"
            }, 
            {
                "descr": "The characters within a string are converted to upper case while respecting the current locale. ", 
                "name": "String.prototype.toLocaleUpperCase()"
            }, 
            {
                "descr": "Returns the calling string value converted to lower case.", 
                "name": "String.prototype.toLowerCase()"
            }, 
            {
                "descr": "Returns an object literal representing the specified object; you can use this value to create a new object. ", 
                "name": "String.prototype.toSource()"
            }, 
            {
                "descr": "Returns a string representing the specified object. ", 
                "name": "String.prototype.toString()"
            }, 
            {
                "descr": "Returns the calling string value converted to uppercase.", 
                "name": "String.prototype.toUpperCase()"
            }, 
            {
                "descr": "Trims whitespace from the beginning and end of the string. ", 
                "name": "String.prototype.trim()"
            }, 
            {
                "descr": "Trims whitespace from the left side of the string.", 
                "name": "String.prototype.trimLeft()"
            }, 
            {
                "descr": "Trims whitespace from the right side of the string.", 
                "name": "String.prototype.trimRight()"
            }, 
            {
                "descr": "Returns the primitive value of the specified object. ", 
                "name": "String.prototype.valueOf()"
            }, 
            {
                "descr": "Returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.", 
                "name": "String.prototype[@@iterator]()"
            }, 
            {
                "descr": "<a name=\"name\"> (hypertext target)", 
                "name": "String.prototype.anchor()"
            }, 
            {
                "descr": "<big>", 
                "name": "String.prototype.big()"
            }, 
            {
                "descr": "<blink>", 
                "name": "String.prototype.blink()"
            }, 
            {
                "descr": "<b>", 
                "name": "String.prototype.bold()"
            }, 
            {
                "descr": "<tt>", 
                "name": "String.prototype.fixed()"
            }, 
            {
                "descr": "<font color=\"color\">", 
                "name": "String.prototype.fontcolor()"
            }, 
            {
                "descr": "<font size=\"size\">", 
                "name": "String.prototype.fontsize()"
            }, 
            {
                "descr": "<i>", 
                "name": "String.prototype.italics()"
            }, 
            {
                "descr": "<a href=\"url\"> (link to URL)", 
                "name": "String.prototype.link()"
            }, 
            {
                "descr": "<small>", 
                "name": "String.prototype.small()"
            }, 
            {
                "descr": "<strike>", 
                "name": "String.prototype.strike()"
            }, 
            {
                "descr": "<sub>", 
                "name": "String.prototype.sub()"
            }, 
            {
                "descr": "<sup>", 
                "name": "String.prototype.sup()"
            }
        ], 
        "path": "javascript/global_objects/string/prototype", 
        "syntax": "String.prototype.slice()", 
        "type": "String"
    }, 
    "pushStack": {
        "descr": "Add some elements onto the jQuery stack, then pop back off again.", 
        "name": "pushStack", 
        "params": [
            {
                "descr": "Type: Array  An array of elements to push onto the stack and make into a new jQuery object.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: Array  An array of elements to push onto the stack and make into a new jQuery object.", 
                "name": "elements"
            }, 
            {
                "descr": "Type: String  The name of a jQuery method that generated the array of elements.", 
                "name": "name"
            }, 
            {
                "descr": "Type: Array  The arguments that were passed in to the jQuery method (for serialization).", 
                "name": "arguments"
            }
        ], 
        "path": "jquery/pushstack", 
        "syntax": ".pushStack( elements ) Returns: jQuery", 
        "type": "Miscellaneous"
    }, 
    "queue": {
        "descr": "Show the length of the queue.", 
        "name": "queue", 
        "params": [
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Array  An array of functions to replace the current queue contents.", 
                "name": "newQueue"
            }, 
            {
                "descr": "Type: String  A string containing the name of the queue. ", 
                "name": "queueName"
            }, 
            {
                "descr": "Type: Function( Function next() ) The new function to add to the queue, with a function to call that will dequeue the next item.", 
                "name": "callback"
            }
        ], 
        "path": "jquery/queue", 
        "syntax": ".queue( [queueName ] ) Returns: Array", 
        "type": "Data"
    }, 
    "raw": {
        "descr": "The static String.raw() method is a tag function of template literals, similar to the r prefix in Python or the @ prefix in C# for string literals (yet there is a difference: see explanations in this issue). It's used to get the raw string form of template strings (that is, the original, uninterpreted text).", 
        "name": "String.raw", 
        "params": [
            {
                "descr": "Well-formed template call site object, like { raw: 'string' }.", 
                "name": "callSite"
            }, 
            {
                "descr": "Contains substitution values.", 
                "name": "...substitutions"
            }, 
            {
                "descr": "A template string, optionally with substitutions (${...}).", 
                "name": "templateString"
            }, 
            {
                "descr": "A TypeError is thrown if the first argument is not a well formed object.", 
                "name": "TypeError"
            }
        ], 
        "path": "javascript/global_objects/string/raw", 
        "syntax": "String.raw(callSite, ...substitutions)String.raw`templateString`", 
        "type": "String"
    }, 
    "ready": {
        "descr": "While JavaScript provides the load event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to .ready() is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code. When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.", 
        "name": "ready", 
        "params": [
            {
                "descr": "Type: Function() A function to execute after the DOM is ready.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/ready", 
        "syntax": ".ready( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "regExp.@@match": {
        "descr": "The [@@match]() method retrieves the matches when matching a string against a regular expression.", 
        "name": "regExp.@@match", 
        "params": [
            {
                "descr": "A String that is a target of the match.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/@@match", 
        "syntax": "regexp[Symbol.match](str)", 
        "type": "RegExp"
    }, 
    "regExp.@@replace": {
        "descr": "The [@@replace]() method replaces some or all matches of a this pattern in a string by a replacement, and returns the result of the replacement as a new string. The replacement can be a string or a function to be called for each match.", 
        "name": "regExp.@@replace", 
        "params": [
            {
                "descr": "A String that is a target of the replacement.", 
                "name": "str"
            }, 
            {
                "descr": "The String that replaces the substring. ", 
                "name": "newSubStr (replacement)"
            }, 
            {
                "descr": "A function to be invoked to create the new substring. ", 
                "name": "function (replacement)"
            }
        ], 
        "path": "javascript/global_objects/regexp/@@replace", 
        "syntax": "regexp[Symbol.replace](str, newSubStr|function)", 
        "type": "RegExp"
    }, 
    "regExp.@@search": {
        "descr": "The [@@search]() method executes a search for a match between a this regular expression and a string.", 
        "name": "regExp.@@search", 
        "params": [
            {
                "descr": "A String that is a target of the search.", 
                "name": "str"
            }, 
            {
                "descr": "If successful, [@@search]() returns the index of the first match of the regular expression inside the string. ", 
                "name": "integer"
            }
        ], 
        "path": "javascript/global_objects/regexp/@@search", 
        "syntax": "regexp[Symbol.search](str)", 
        "type": "RegExp"
    }, 
    "regExp.@@split": {
        "descr": "The [@@split]() method splits a String object into an array of strings by separating the string into substrings.", 
        "name": "regExp.@@split", 
        "params": [
            {
                "descr": "The target of the split operation.", 
                "name": "str"
            }, 
            {
                "descr": "Optional. Integer specifying a limit on the number of splits to be found. ", 
                "name": "limit"
            }
        ], 
        "path": "javascript/global_objects/regexp/@@split", 
        "syntax": "regexp[Symbol.split](str[, limit])", 
        "type": "RegExp"
    }, 
    "regExp.exec": {
        "descr": "The exec() method executes a search for a match in a specified string. Returns a result array, or null.", 
        "name": "regExp.exec", 
        "params": [
            {
                "descr": "The string against which to match the regular expression.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/exec", 
        "syntax": "regexObj.exec(str)", 
        "type": "RegExp"
    }, 
    "regExp.lastIndex": {
        "descr": "The lastIndex is a read/write integer property of regular expression instances that specifies the index at which to start the next match.", 
        "name": "regExp.lastIndex", 
        "params": [], 
        "path": "javascript/global_objects/regexp/lastindex", 
        "syntax": "regExpObj.lastIndex Description This property is set only if the regular expression instance used the \"g\" flag to indicate a global search. The following rules apply:  If lastIndex is greater than the length of the string, test()", 
        "type": "RegExp"
    }, 
    "regExp.test": {
        "descr": "The test() method executes a search for a match between a regular expression and a specified string. Returns true or false.", 
        "name": "regExp.test", 
        "params": [
            {
                "descr": "The string against which to match the regular expression.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/regexp/test", 
        "syntax": "regexObj.test(str)", 
        "type": "RegExp"
    }, 
    "regExp.toString": {
        "descr": "The toString() method returns a string representing the regular expression.", 
        "name": "regExp.toString", 
        "params": [], 
        "path": "javascript/global_objects/regexp/tostring", 
        "syntax": "regexObj.toString();", 
        "type": "RegExp"
    }, 
    "remove": {
        "descr": "Similar to .empty(), the .remove() method takes elements out of the DOM. Use .remove() when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use .detach() instead.", 
        "name": "remove", 
        "params": [
            {
                "descr": "Type: String  A selector expression that filters the set of matched elements to be removed.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/remove", 
        "syntax": ".remove( [selector ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "removeAttr": {
        "descr": "The .removeAttr() method uses the JavaScript removeAttribute() function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.", 
        "name": "removeAttr", 
        "params": [
            {
                "descr": "Type: String  An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.", 
                "name": "attributeName"
            }
        ], 
        "path": "jquery/removeattr", 
        "syntax": ".removeAttr( attributeName ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "removeClass": {
        "descr": "If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.", 
        "name": "removeClass", 
        "params": [
            {
                "descr": "Type: String  One or more space-separated classes to be removed from the class attribute of each matched element.", 
                "name": "className"
            }, 
            {
                "descr": "Type: Function( Integer index, String className ) => String  A function returning one or more space-separated class names to be removed. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/removeclass", 
        "syntax": ".removeClass( [className ] ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "removeData": {
        "descr": "The .removeData() method allows us to remove values that were previously set using .data(). When called with the name of a key, .removeData() deletes that particular value. When called with no arguments, .removeData() removes all values.", 
        "name": "removeData", 
        "params": [
            {
                "descr": "Type: String  A string naming the piece of data to delete.", 
                "name": "name"
            }, 
            {
                "descr": "Type: Array or String  An array or space-separated string naming the pieces of data to delete.", 
                "name": "list"
            }
        ], 
        "path": "jquery/removedata", 
        "syntax": ".removeData( [name ] ) Returns: jQuery", 
        "type": "Data"
    }, 
    "removeProp": {
        "descr": "The .removeProp() method removes properties set by the .prop() method.", 
        "name": "removeProp", 
        "params": [
            {
                "descr": "Type: String  The name of the property to remove.", 
                "name": "propertyName"
            }
        ], 
        "path": "jquery/removeprop", 
        "syntax": ".removeProp( propertyName ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "replaceAll": {
        "descr": "The .replaceAll() method is similar to .replaceWith(), but with the source and target reversed. Consider this DOM structure:", 
        "name": "replaceAll", 
        "params": [
            {
                "descr": "Type: Selector or jQuery or Array or Element  A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.", 
                "name": "target"
            }
        ], 
        "path": "jquery/replaceall", 
        "syntax": ".replaceAll( target ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "replaceWith": {
        "descr": "The .replaceWith() method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:", 
        "name": "replaceWith", 
        "params": [
            {
                "descr": "Type: htmlString or Element or Array or jQuery  The content to insert. ", 
                "name": "newContent"
            }, 
            {
                "descr": "Type: Function() A function that returns content with which to replace the set of matched elements.", 
                "name": "function"
            }
        ], 
        "path": "jquery/replacewith", 
        "syntax": ".replaceWith( newContent ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "requestAnimationFrame": {
        "descr": "You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. The callback rate may be reduced to a lower rate when running in background tabs or in hidden <iframe>s in order to improve performance and battery life.", 
        "name": "window.requestAnimationFrame", 
        "params": [
            {
                "descr": "A parameter specifying a function to call when it's time to update your animation for the next repaint. ", 
                "name": "callback"
            }
        ], 
        "path": "dom/window/requestanimationframe", 
        "syntax": "window.requestAnimationFrame(callback);", 
        "type": "Window"
    }, 
    "requestIdleCallback": {
        "descr": "The window.requestIdleCallback() method queues a function to be called during a browser's idle periods. This enables developers to perform background and low priority work on the main event loop, without impacting latency-critical events such as animation and input response. Functions are generally called in first-in-first-out order unless the function's timeout is reached before the browser calls it.", 
        "name": "window.requestIdleCallback", 
        "params": [
            {
                "descr": "A reference to a function that should be called in the near future. ", 
                "name": "callback"
            }, 
            {
                "descr": "Contains optional configuration parameters. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/window/requestidlecallback", 
        "syntax": "var handle = window.requestIdleCallback(callback[, options])", 
        "type": "Window"
    }, 
    "resize": {
        "descr": "This method is a shortcut for .on('resize', handler) in the first and second variations, and .trigger( \"resize\" ) in the third.", 
        "name": "resize", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/resize", 
        "syntax": ".resize( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "resizeBy": {
        "descr": "Resizes the current window by a certain amount.", 
        "name": "window.resizeBy", 
        "params": [], 
        "path": "dom/window/resizeby", 
        "syntax": "window.resizeBy(xDelta, yDelta)", 
        "type": "Window"
    }, 
    "resizeTo": {
        "descr": "Dynamically resizes window.", 
        "name": "window.resizeTo", 
        "params": [], 
        "path": "dom/window/resizeto", 
        "syntax": "window.resizeTo(aWidth, aHeight)", 
        "type": "Window"
    }, 
    "rest parameters": {
        "descr": "The rest parameter syntax allows us to represent an indefinite number of arguments as an array.", 
        "name": "rest parameters", 
        "params": [], 
        "path": "javascript/functions/rest_parameters", 
        "syntax": "function(a, b, ...theArgs) {  // ...}", 
        "type": "Function"
    }, 
    "return": {
        "descr": "The return statement ends function execution and specifies a value to be returned to the function caller.", 
        "name": "return", 
        "params": [
            {
                "descr": "The expression to return. If omitted, undefined is returned instead.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/statements/return", 
        "syntax": "return [[expression]];   expression The expression to return. If omitted, undefined is returned instead.  Description When a return statement is called in a function, the execution of this function is stopped. If specified, a given value is returned to the function caller. If the expression is omitted, undefined is returned instead. The following return statements all break the function execution: return;return true;return false;return x;return x + y / 3; Automatic Semicolon Insertion The return statement is affected by automatic semicolon insertion (ASI). No line terminator is allowed between the return", 
        "type": "Statements"
    }, 
    "sIMD.toString": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "sIMD.toString", 
        "params": [], 
        "path": "javascript/global_objects/simd/tostring", 
        "syntax": "SIMD.%type%.toString()", 
        "type": "SIMD"
    }, 
    "sIMD.valueOf": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "sIMD.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/simd/valueof", 
        "syntax": "SIMD.%type%.valueOf()", 
        "type": "SIMD"
    }, 
    "screen": {
        "descr": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.", 
        "name": "window.screen", 
        "params": [], 
        "path": "dom/window/screen", 
        "syntax": "screenObj = window.screen;  Example  if (screen.pixelDepth < 8) {  // use low-color version of page} else {   // use regular, colorful page}", 
        "type": "Window"
    }, 
    "screen.availHeight": {
        "descr": "Returns the amount of vertical space available to the window on the screen.", 
        "name": "screen.availHeight", 
        "params": [], 
        "path": "dom/screen/availheight", 
        "syntax": "iAvail = window.screen.availHeight Example if (window.screen.availHeight !== window.screen.height) {  // something's in the way!  // use available to size window}", 
        "type": "Screen"
    }, 
    "screen.availWidth": {
        "descr": "Returns the amount of horizontal space in pixels available to the window.", 
        "name": "screen.availWidth", 
        "params": [], 
        "path": "dom/screen/availwidth", 
        "syntax": "window.screen.availWidth Example var screenAvailWidth = window.screen.availWidth;console.log(screenAvailWidth);", 
        "type": "Screen"
    }, 
    "screen.colorDepth": {
        "descr": "Returns the color depth of the screen. Per CSSOM View, the value is always 24, for compatibility reasons.", 
        "name": "screen.colorDepth", 
        "params": [], 
        "path": "dom/screen/colordepth", 
        "syntax": "bitDepth = window.screen.colorDepth Example // check the color depth of the screenif ( window.screen.colorDepth < 8) {  // use low-color version of page} else {   // use regular, colorful page}", 
        "type": "Screen"
    }, 
    "screen.height": {
        "descr": "Returns the height of the screen in pixels.", 
        "name": "screen.height", 
        "params": [], 
        "path": "dom/screen/height", 
        "syntax": "iHeight = window.screen.height Example if (window.screen.availHeight !== window.screen.height) {   // something is occupying some screen real estate!}", 
        "type": "Screen"
    }, 
    "screen.lockOrientation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "screen.lockOrientation", 
        "params": [
            {
                "descr": "The orientation into which to lock the screen. ", 
                "name": "orientation"
            }, 
            {
                "descr": "It represents the orientation of the screen when it is in its primary portrait mode. ", 
                "name": "portrait-primary"
            }, 
            {
                "descr": "It represents the orientation of the screen when it is in its secondary portrait mode. ", 
                "name": "portrait-secondary"
            }, 
            {
                "descr": "It represents the orientation of the screen when it is in its primary landscape mode. ", 
                "name": "landscape-primary"
            }, 
            {
                "descr": "It represents the orientation of the screen when it is in its secondary landscape mode. ", 
                "name": "landscape-secondary"
            }, 
            {
                "descr": "It represents both portrait-primary and portrait-secondary.", 
                "name": "portrait"
            }, 
            {
                "descr": "It represents both landscape-primary and landscape-secondary.", 
                "name": "landscape"
            }, 
            {
                "descr": "It represents either portrait-primary and landscape-primary depends on natural orientation of devices. ", 
                "name": "default"
            }
        ], 
        "path": "dom/screen/lockorientation", 
        "syntax": "lockOrientation method locks the screen into the specified orientation.  Note: This method only works for installed Web apps or for Web pages in full-screen mode.  Syntax lockedAllowed = window.screen.lockOrientation(orientation);", 
        "type": "Screen"
    }, 
    "screen.onorientationchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "screen.onorientationchange", 
        "params": [], 
        "path": "dom/screen/onorientationchange", 
        "syntax": "orientationchange events sent to the screen object. Syntax screen.onorientationchange = funcRef; Where funcRef is a reference to a function. Specifications    Specification Status Comment     Screen Orientation API Working Draft Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported (Yes) moz[1] Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported (Yes) moz[1] Not supported Not supported Not supported     [1] This API is only implemented as a prefixed method (onmozorientationchange", 
        "type": "Screen"
    }, 
    "screen.orientation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "screen.orientation", 
        "params": [], 
        "path": "dom/screen/orientation", 
        "syntax": "Screen.orientation property give the current orientation of the screen. Syntax var orientation = window.screen.orientation; Return value The return value is a string representing the orientation of the screen. It can be portrait-primary, portrait-secondary, landscape-primary, landscape-secondary (See lockOrientation for more info about those values).", 
        "type": "Screen"
    }, 
    "screen.pixelDepth": {
        "descr": "Returns the bit depth of the screen. Per CSSOM View, the value is always 24, for compatibility reasons.", 
        "name": "screen.pixelDepth", 
        "params": [], 
        "path": "dom/screen/pixeldepth", 
        "syntax": "depth = window.screen.pixelDepth Example // if there is not adequate bit depth// choose a simpler colorif ( window.screen.pixelDepth > 8 ) {  document.style.color = \"#FAEBD7\";} else {  document.style.color = \"#FFFFFF\";}", 
        "type": "Screen"
    }, 
    "screen.unlockOrientation": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for the proper prefixes to use in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the spec changes.", 
        "name": "screen.unlockOrientation", 
        "params": [], 
        "path": "dom/screen/unlockorientation", 
        "syntax": "Screen.unlockOrientation method removes all the previous screen locks set by the page/app.  Note: This method only works for installed Web apps or for Web pages in full-screen mode.  Syntax var unlocked = window.screen.unlockOrientation();", 
        "type": "Screen"
    }, 
    "screen.width": {
        "descr": "Returns the width of the screen.", 
        "name": "screen.width", 
        "params": [], 
        "path": "dom/screen/width", 
        "syntax": "lWidth = window.screen.width Example // crude way to check that the screen is at 1024x768if (window.screen.width > 1000) {  // resolution is below 10 x 7}", 
        "type": "Screen"
    }, 
    "screenX": {
        "descr": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser from the left side of the screen.", 
        "name": "window.screenX", 
        "params": [], 
        "path": "dom/window/screenx", 
        "syntax": "lLoc = window.screenX   lLoc is the number of CSS pixels from the left side the screen.  Specifications    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'Window.screenX' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "Window"
    }, 
    "screenY": {
        "descr": "The Window.screenY read-only property returns the vertical distance, in CSS pixels of the top border of the user's browser from the top edge of the screen.", 
        "name": "window.screenY", 
        "params": [], 
        "path": "dom/window/screeny", 
        "syntax": "lLoc = window.screenY   lLoc is the number of CSS pixels from the top of the screen.  Specifications    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'Window.screenY' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "Window"
    }, 
    "scroll": {
        "descr": "Scrolls the window to a particular place in the document.", 
        "name": "window.scroll", 
        "params": [], 
        "path": "dom/window/scroll", 
        "syntax": "window.scroll(x-coord, y-coord)", 
        "type": "Window"
    }, 
    "scrollBy": {
        "descr": "Scrolls the document in the window by the given amount.", 
        "name": "window.scrollBy", 
        "params": [], 
        "path": "dom/window/scrollby", 
        "syntax": "window.scrollBy(X, Y);", 
        "type": "Window"
    }, 
    "scrollLeft": {
        "descr": "The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be 0.", 
        "name": "scrollLeft", 
        "params": [
            {
                "descr": "Type: Number  An integer indicating the new position to set the scroll bar to.", 
                "name": "value"
            }
        ], 
        "path": "jquery/scrollleft", 
        "syntax": ".scrollLeft() Returns: Integer", 
        "type": "Offset"
    }, 
    "scrollTo": {
        "descr": "Scrolls to a particular set of coordinates in the document.", 
        "name": "window.scrollTo", 
        "params": [], 
        "path": "dom/window/scrollto", 
        "syntax": "window.scrollTo(x-coord, y-coord)", 
        "type": "Window"
    }, 
    "scrollTop": {
        "descr": "The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be 0.", 
        "name": "scrollTop", 
        "params": [
            {
                "descr": "Type: Number  A number indicating the new position to set the scroll bar to.", 
                "name": "value"
            }
        ], 
        "path": "jquery/scrolltop", 
        "syntax": ".scrollTop() Returns: Number", 
        "type": "Offset"
    }, 
    "scrollX": {
        "descr": "Returns the number of pixels that the document has already been scrolled horizontally.", 
        "name": "window.scrollX", 
        "params": [], 
        "path": "dom/window/scrollx", 
        "syntax": "var x = window.scrollX; Parameters  x is the number of pixels that the document is currently scrolled from the left.  Example // If scrollX is greater than 400, reset scroll position\u00a0to the top left of the document.if (window.scrollX > 400) {  window.scroll(0,0);\n or });", 
        "type": "Window"
    }, 
    "scrollY": {
        "descr": "Returns the number of pixels that the document has already been scrolled vertically.", 
        "name": "window.scrollY", 
        "params": [], 
        "path": "dom/window/scrolly", 
        "syntax": "var y = window.scrollY;  y is the number of pixels that the document is currently scrolled from the top.  Example // make sure and go down to the second page if (window.scrollY) {  window.scroll(0, 0);\n or   // reset the scroll position to the top left of the document.}window.scrollByPages(1);", 
        "type": "Window"
    }, 
    "seal": {
        "descr": "The Object.seal() method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.", 
        "name": "Object.seal", 
        "params": [
            {
                "descr": "The object which should be sealed.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/seal", 
        "syntax": "Object.seal(obj)", 
        "type": "Object"
    }, 
    "select": {
        "descr": "This method is a shortcut for .on( \"select\", handler ) in the first two variations, and .trigger( \"select\" ) in the third.", 
        "name": "select", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/select", 
        "syntax": ".select( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "selector": {
        "descr": "The .selector property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting .live() in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a \"foo\" plugin could be written as $.fn.foo = function( selector, options ) { /* plugin code goes here */ };, and the person using the plugin would write $( \"div.bar\" ).foo( \"div.bar\", {dog: \"bark\"} ); with the \"div.bar\" selector repeated as the first argument of .foo().", 
        "name": "selector", 
        "params": [], 
        "path": "jquery/selector", 
        "syntax": "selectorReturns: Stringversion deprecated: 1.7, removed: 3.0   Description: A selector representing selector passed to jQuery(), if any, when creating the original set.", 
        "type": "Miscellaneous"
    }, 
    "self": {
        "descr": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).", 
        "name": "window.self", 
        "params": [], 
        "path": "dom/window/self", 
        "syntax": "var w = window.self;  // w === window Example Uses of window.self like the following could just as well be replaced by window. if (window.parent.frames[0]\u00a0!= window.self) {    // this window is not the first frame in the list}", 
        "type": "Window"
    }, 
    "serialize": {
        "descr": "The .serialize() method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as <input>, <textarea>, and <select>: $( \"input, textarea, select\" ).serialize();", 
        "name": "serialize", 
        "params": [], 
        "path": "jquery/serialize", 
        "syntax": ".serialize() Returns: String", 
        "type": "Ajax"
    }, 
    "serializeArray": {
        "descr": "The .serializeArray() method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of forms and/or form controls. The controls can be of several types:", 
        "name": "serializeArray", 
        "params": [], 
        "path": "jquery/serializearray", 
        "syntax": ".serializeArray() Returns: Array", 
        "type": "Ajax"
    }, 
    "sessionStorage": {
        "descr": "The sessionStorage property allows you to access a session Storage object. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.", 
        "name": "window.sessionStorage", 
        "params": [], 
        "path": "dom/window/sessionstorage", 
        "syntax": "// Save data to sessionStoragesessionStorage.setItem('key', 'value');\n or // Get saved data from sessionStoragevar data = sessionStorage.getItem('key');\n or // Remove saved data from sessionStoragesessionStorage.removeItem('key'));", 
        "type": "Window"
    }, 
    "set": {
        "descr": "The set syntax binds an object property to a function to be called when there is an attempt to set that property.", 
        "name": "set", 
        "params": [
            {
                "descr": "The name of the property to bind to the given function.", 
                "name": "prop"
            }, 
            {
                "descr": "An alias for the variable that holds the value attempted to be assigned to prop.", 
                "name": "val"
            }, 
            {
                "descr": "Starting with ECMAScript 6, you can also use expressions for a computed property name to bind to the given function.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/functions/set", 
        "syntax": "{set prop(val) { . . . }}{set [expression](val) { . . . }}", 
        "type": "Function"
    }, 
    "set.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the values property.", 
        "name": "set.@@iterator", 
        "params": [], 
        "path": "javascript/global_objects/set/@@iterator", 
        "syntax": "mySet[Symbol.iterator] Examples Using [@@iterator]()", 
        "type": "Set"
    }, 
    "set.add": {
        "descr": "The add() method appends a new element with a specified value to the end of a Set object.", 
        "name": "set.add", 
        "params": [
            {
                "descr": "Required. The value of the element to add to the Set object.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/set/add", 
        "syntax": "mySet.add(value);", 
        "type": "Set"
    }, 
    "set.clear": {
        "descr": "The clear() method removes all elements from a Set object.", 
        "name": "set.clear", 
        "params": [], 
        "path": "javascript/global_objects/set/clear", 
        "syntax": "mySet.clear();", 
        "type": "Set"
    }, 
    "set.delete": {
        "descr": "The delete() method removes the specified element from a Set object.", 
        "name": "set.delete", 
        "params": [
            {
                "descr": "Required. The value of the element to remove from the Set object.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/set/delete", 
        "syntax": "mySet.delete(value);", 
        "type": "Set"
    }, 
    "set.entries": {
        "descr": "The entries() method returns a new Iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.", 
        "name": "set.entries", 
        "params": [], 
        "path": "javascript/global_objects/set/entries", 
        "syntax": "mySet.entries()", 
        "type": "Set"
    }, 
    "set.forEach": {
        "descr": "The forEach() method executes a provided function once per each value in the Set object, in insertion order.", 
        "name": "set.forEach", 
        "params": [
            {
                "descr": "Function to execute for each element.", 
                "name": "callback"
            }, 
            {
                "descr": "Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/set/foreach", 
        "syntax": "mySet.forEach(callback[, thisArg])", 
        "type": "Set"
    }, 
    "set.has": {
        "descr": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.", 
        "name": "set.has", 
        "params": [
            {
                "descr": "Required. The value to test for presence in the Set object.", 
                "name": "value"
            }, 
            {
                "descr": "Returns true if an element with the specified value exists in the Set object; otherwise false.", 
                "name": "Boolean"
            }
        ], 
        "path": "javascript/global_objects/set/has", 
        "syntax": "mySet.has(value);", 
        "type": "Set"
    }, 
    "set.keys": {
        "descr": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.", 
        "name": "set.keys", 
        "params": [], 
        "path": "javascript/global_objects/set/keys", 
        "syntax": "mySet.values();\n or mySet.keys();", 
        "type": "Set"
    }, 
    "set.values": {
        "descr": "The values() method returns a new Iterator object that contains the values for each element in the Set object in insertion order.", 
        "name": "set.values", 
        "params": [], 
        "path": "javascript/global_objects/set/values", 
        "syntax": "mySet.values();\n or mySet.keys();", 
        "type": "Set"
    }, 
    "setImmediate": {
        "descr": "This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.", 
        "name": "window.setImmediate", 
        "params": [], 
        "path": "dom/window/setimmediate", 
        "syntax": "var immediateID = setImmediate(func, [param1, param2, ...]);\n or var immediateID = setImmediate(func);", 
        "type": "Window"
    }, 
    "setPrototypeOf": {
        "descr": "The Object.setPrototypeOf() method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.", 
        "name": "Object.setPrototypeOf", 
        "params": [
            {
                "descr": "The object which is to have its prototype set.", 
                "name": "obj"
            }, 
            {
                "descr": "The object's new prototype (an object or null).", 
                "name": "prototype"
            }
        ], 
        "path": "javascript/global_objects/object/setprototypeof", 
        "syntax": "Object.setPrototypeOf(obj, prototype);", 
        "type": "Object"
    }, 
    "sharedArrayBuffer.byteLength": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "sharedArrayBuffer.byteLength", 
        "params": [], 
        "path": "javascript/global_objects/sharedarraybuffer/bytelength", 
        "syntax": "byteLength accessor property represents the length of an SharedArrayBuffer in bytes. Syntax sab.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the shared array is constructed and cannot be changed. Examples var sab = new SharedArrayBuffer(1024);\n or sab.byteLength; // 1024);", 
        "type": "SharedArrayBuffer"
    }, 
    "show": {
        "descr": "With no parameters, the .show() method is the simplest way to display an element:", 
        "name": "show", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/show", 
        "syntax": ".show() Returns: jQuery", 
        "type": "Effects"
    }, 
    "siblings": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .siblings() method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.", 
        "name": "siblings", 
        "params": [
            {
                "descr": "Type: Selector  A string containing a selector expression to match elements against.", 
                "name": "selector"
            }
        ], 
        "path": "jquery/siblings", 
        "syntax": ".siblings( [selector ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "size": {
        "descr": "The .size() method is deprecated as of jQuery 1.8. Use the .length property instead.", 
        "name": "size", 
        "params": [], 
        "path": "jquery/size", 
        "syntax": ".size() Returns: Integerversion deprecated: 1.8", 
        "type": "Miscellaneous"
    }, 
    "slice": {
        "descr": "Given a jQuery object that represents a set of DOM elements, the .slice() method constructs a new jQuery object containing a subset of the elements specified by the start and, optionally, end argument. The supplied start index identifies the position of one of the elements in the set; if end is omitted, all elements after this one will be included in the result.", 
        "name": "slice", 
        "params": [
            {
                "descr": "Type: Integer  An integer indicating the 0-based position at which the elements begin to be selected. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Integer  An integer indicating the 0-based position at which the elements stop being selected. ", 
                "name": "end"
            }
        ], 
        "path": "jquery/slice", 
        "syntax": ".slice( start [, end ] ) Returns: jQuery", 
        "type": "Traversing"
    }, 
    "slideDown": {
        "descr": "The .slideDown() method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.", 
        "name": "slideDown", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/slidedown", 
        "syntax": ".slideDown( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "slideToggle": {
        "descr": "The .slideToggle() method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The display property is saved and restored as needed. If an element has a display value of inline, then is hidden and shown, it will once again be displayed inline. When the height reaches 0 after a hiding animation, the display style property is set to none to ensure that the element no longer affects the layout of the page.", 
        "name": "slideToggle", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/slidetoggle", 
        "syntax": ".slideToggle( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "slideUp": {
        "descr": "The .slideUp() method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the display style property is set to none to ensure that the element no longer affects the layout of the page.", 
        "name": "slideUp", 
        "params": [
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: PlainObject  A map of additional options to pass to the method. ", 
                "name": "options"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "(default: true) Type: Boolean or String  A Boolean indicating whether to place the animation in the effects queue. ", 
                "name": "queue"
            }, 
            {
                "descr": "Type: PlainObject  An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions. ", 
                "name": "specialEasing"
            }, 
            {
                "descr": "Type: Function( Number now, Tween tween ) A function to be called for each animated property of each animated element. ", 
                "name": "step"
            }, 
            {
                "descr": "Type: Function( Promise animation, Number progress, Number remainingMs ) A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties. (version added: 1.8)", 
                "name": "progress"
            }, 
            {
                "descr": "Type: Function() A function that is called once the animation on an element is complete.", 
                "name": "complete"
            }, 
            {
                "descr": "Type: Function( Promise animation ) A function to call when the animation on an element begins. ", 
                "name": "start"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes (its Promise object is resolved). ", 
                "name": "done"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element fails to complete (its Promise object is rejected). ", 
                "name": "fail"
            }, 
            {
                "descr": "Type: Function( Promise animation, Boolean jumpedToEnd ) A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected). (version added: 1.8)", 
                "name": "always"
            }, 
            {
                "descr": "(default: 400) Type: Number or String  A string or number determining how long the animation will run.", 
                "name": "duration"
            }, 
            {
                "descr": "(default: swing) Type: String  A string indicating which easing function to use for the transition.", 
                "name": "easing"
            }, 
            {
                "descr": "Type: Function() A function to call once the animation is complete, called once per matched element.", 
                "name": "complete"
            }
        ], 
        "path": "jquery/slideup", 
        "syntax": ".slideUp( [duration ] [, complete ] ) Returns: jQuery", 
        "type": "Effects"
    }, 
    "speechSynthesis": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.speechSynthesis", 
        "params": [], 
        "path": "dom/window/speechsynthesis", 
        "syntax": "speechSynthesis read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality. Syntax var synth = window.speechSynthesis; Value A SpeechSynthesis object. Examples In our basic Speech synthesiser demo, we first grab a reference to the SpeechSynthesis controller using window.speechSynthesis. After defining some necessary variables, we retrieve a list of the voices available using SpeechSynthesis.getVoices()", 
        "type": "Window"
    }, 
    "static": {
        "descr": "The static keyword defines a static method for a class.", 
        "name": "static", 
        "params": [], 
        "path": "javascript/classes/static", 
        "syntax": "static methodName() { ... }", 
        "type": "Classes"
    }, 
    "stop": {
        "descr": "This method stops window loading.", 
        "name": "window.stop", 
        "params": [], 
        "path": "dom/window/stop", 
        "syntax": "window.stop()", 
        "type": "Window"
    }, 
    "string.@@iterator": {
        "descr": "The [@@iterator]() method returns a new Iterator object that iterates over the code points of a String value, returning each code point as a String value.", 
        "name": "string.@@iterator", 
        "params": [], 
        "path": "javascript/global_objects/string/@@iterator", 
        "syntax": "string[Symbol.iterator] Return value A new Iterator object. Examples Using [@@iterator]()", 
        "type": "String"
    }, 
    "string.anchor": {
        "descr": "The anchor() method creates an <a> HTML anchor element that is used as a hypertext target.", 
        "name": "string.anchor", 
        "params": [
            {
                "descr": "A string representing the name attribute of the a tag to be created.", 
                "name": "name"
            }
        ], 
        "path": "javascript/global_objects/string/anchor", 
        "syntax": "str.anchor(name)", 
        "type": "String"
    }, 
    "string.charAt": {
        "descr": "The charAt() method returns the specified character from a string.", 
        "name": "string.charAt", 
        "params": [
            {
                "descr": "An integer between 0 and 1-less-than the length of the string.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/string/charat", 
        "syntax": "str.charAt(index)", 
        "type": "String"
    }, 
    "string.charCodeAt": {
        "descr": "The charCodeAt() method returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index (the UTF-16 code unit matches the Unicode code point for code points representable in a single UTF-16 code unit, but might also be the first code unit of a surrogate pair for code points not representable in a single UTF-16 code unit, e.g. Unicode code points > 0x10000). If you want the entire code point value, use codePointAt().", 
        "name": "string.charCodeAt", 
        "params": [
            {
                "descr": "An integer greater than or equal to 0 and less than the length of the string; if it is not a number, it defaults to 0.", 
                "name": "index"
            }
        ], 
        "path": "javascript/global_objects/string/charcodeat", 
        "syntax": "str.charCodeAt(index)", 
        "type": "String"
    }, 
    "string.codePointAt": {
        "descr": "The codePointAt() method returns a non-negative integer that is the Unicode code point value.", 
        "name": "string.codePointAt", 
        "params": [
            {
                "descr": "Position of an element in the String to return the code point value from.", 
                "name": "pos"
            }
        ], 
        "path": "javascript/global_objects/string/codepointat", 
        "syntax": "str.codePointAt(pos)", 
        "type": "String"
    }, 
    "string.concat": {
        "descr": "The concat() method combines the text of one or more strings and returns a new string.", 
        "name": "string.concat", 
        "params": [
            {
                "descr": "Strings to concatenate to this string.", 
                "name": "string2...stringN"
            }
        ], 
        "path": "javascript/global_objects/string/concat", 
        "syntax": "str.concat(string2[, string3, ..., stringN])", 
        "type": "String"
    }, 
    "string.endsWith": {
        "descr": "The endsWith() method determines whether a string ends with the characters of another string, returning true or false as appropriate.", 
        "name": "string.endsWith", 
        "params": [
            {
                "descr": "The characters to be searched for at the end of this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "Optional. Search within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/endswith", 
        "syntax": "str.endsWith(searchString[, position])", 
        "type": "String"
    }, 
    "string.includes": {
        "descr": "The includes() method determines whether one string may be found within another string, returning true or false as appropriate.", 
        "name": "string.includes", 
        "params": [
            {
                "descr": "A string to be searched for within this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "Optional. The position in this string at which to begin searching for searchString; defaults to 0.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/includes", 
        "syntax": "str.includes(searchString[, position])", 
        "type": "String"
    }, 
    "string.indexOf": {
        "descr": "The indexOf() method returns the index within the calling String object of the first occurrence of the specified value, starting the search at fromIndex. Returns -1 if the value is not found.", 
        "name": "string.indexOf", 
        "params": [
            {
                "descr": "A string representing the value to search for.", 
                "name": "searchValue"
            }, 
            {
                "descr": "The index at which to start the searching forwards in the string. ", 
                "name": "fromIndex Optional"
            }
        ], 
        "path": "javascript/global_objects/string/indexof", 
        "syntax": "str.indexOf(searchValue[, fromIndex])", 
        "type": "String"
    }, 
    "string.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the index within the calling String object of the last occurrence of the specified value, searching backwards from fromIndex. Returns -1 if the value is not found.", 
        "name": "string.lastIndexOf", 
        "params": [
            {
                "descr": "A string representing the value to search for. ", 
                "name": "searchValue"
            }, 
            {
                "descr": "The index at which to start searching backwards in the string. ", 
                "name": "fromIndex\u00a0Optional"
            }
        ], 
        "path": "javascript/global_objects/string/lastindexof", 
        "syntax": "str.lastIndexOf(searchValue[, fromIndex])", 
        "type": "String"
    }, 
    "string.length": {
        "descr": "The length property represents the length of a string.", 
        "name": "string.length", 
        "params": [], 
        "path": "javascript/global_objects/string/length", 
        "syntax": "str.length Description This property returns the number of code units in the string. UTF-16, the string format used by JavaScript, uses a single 16-bit code unit to represent the most common characters, but needs to use two code units for less commonly-used characters, so it's possible for the value returned by length to not match the actual number of characters in the string. For an empty string, length is 0. The static property String.length returns the value 1. Examples Basic usage var x = 'Mozilla';var empty = '';console.log('Mozilla is ' + x.length + ' code units long');\n or /* \"Mozilla is 7 code units long\" */console.log('The empty string has a length of ' + empty.length);\n or /* \"The empty string has a length of 0\" */);", 
        "type": "String"
    }, 
    "string.link": {
        "descr": "The link() method creates a string representing the code for an <a> HTML element to be used as a hypertext link to another URL.", 
        "name": "string.link", 
        "params": [
            {
                "descr": "Any string that specifies the href attribute of the <a> tag; it should be a valid URL (relative or absolute), with any & characters escaped as &amp;, and any \" characters escaped as &quot;.", 
                "name": "url"
            }
        ], 
        "path": "javascript/global_objects/string/link", 
        "syntax": "str.link(url)", 
        "type": "String"
    }, 
    "string.localeCompare": {
        "descr": "The localeCompare() method returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.", 
        "name": "string.localeCompare", 
        "params": [
            {
                "descr": "The string against which the referring string is compared", 
                "name": "compareString"
            }, 
            {
                "descr": "Optional. A string with a BCP 47 language tag, or an array of such strings. ", 
                "name": "locales"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "kn"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "kf"
            }, 
            {
                "descr": "Optional. An object with some or all of the following properties: localeMatcher The locale matching algorithm to use. ", 
                "name": "options"
            }, 
            {
                "descr": "Whether the comparison is for sorting or for searching for matching strings. ", 
                "name": "usage"
            }, 
            {
                "descr": "Which differences in the strings should lead to non-zero result values. ", 
                "name": "sensitivity"
            }, 
            {
                "descr": "Whether punctuation should be ignored. ", 
                "name": "ignore\u00adPunctua\u00adtion"
            }, 
            {
                "descr": "Whether numeric collation should be used, such that \"1\" < \"2\" < \"10\". ", 
                "name": "numeric"
            }, 
            {
                "descr": "Whether upper case or lower case should sort first. ", 
                "name": "caseFirst"
            }, 
            {
                "descr": "occurs before compareStr", 
                "name": "referenceStr"
            }, 
            {
                "descr": "occurs after compareStr", 
                "name": "referenceStr"
            }
        ], 
        "path": "javascript/global_objects/string/localecompare", 
        "syntax": "referenceStr.localeCompare(compareString[, locales[, options]])", 
        "type": "String"
    }, 
    "string.match": {
        "descr": "The match() method retrieves the matches when matching a string against a regular expression.", 
        "name": "string.match", 
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).", 
                "name": "regexp"
            }
        ], 
        "path": "javascript/global_objects/string/match", 
        "syntax": "str.match(regexp)", 
        "type": "String"
    }, 
    "string.normalize": {
        "descr": "The normalize() method returns the Unicode Normalization Form of a given string (if the value isn't a string, it will be converted to one first).", 
        "name": "string.normalize", 
        "params": [
            {
                "descr": "One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. ", 
                "name": "form"
            }, 
            {
                "descr": "A RangeError is thrown if form isn't one of the values specified above.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/string/normalize", 
        "syntax": "str.normalize([form])", 
        "type": "String"
    }, 
    "string.padEnd": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "string.padEnd", 
        "params": [
            {
                "descr": "The length of the resulting string once the current string has been padded. ", 
                "name": "targetLength"
            }, 
            {
                "descr": "The string to pad the current string with. ", 
                "name": "padString Optional"
            }
        ], 
        "path": "javascript/global_objects/string/padend", 
        "syntax": "padEnd()", 
        "type": "String"
    }, 
    "string.padStart": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "string.padStart", 
        "params": [
            {
                "descr": "The length of the resulting string once the current string has been padded. ", 
                "name": "targetLength"
            }, 
            {
                "descr": "The string to pad the current string with. ", 
                "name": "padString Optional"
            }
        ], 
        "path": "javascript/global_objects/string/padstart", 
        "syntax": "padStart()", 
        "type": "String"
    }, 
    "string.quote": {
        "descr": "Obsolete since Gecko 37 (Firefox 37 / Thunderbird 37 / SeaMonkey 2.34)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "string.quote", 
        "params": [], 
        "path": "javascript/global_objects/string/quote", 
        "syntax": "str.quote()", 
        "type": "String"
    }, 
    "string.repeat": {
        "descr": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.", 
        "name": "string.repeat", 
        "params": [
            {
                "descr": "An integer between 0 and +\u221e: [0, +\u221e), indicating the number of times to repeat the string in the newly-created string that is to be returned.", 
                "name": "count"
            }
        ], 
        "path": "javascript/global_objects/string/repeat", 
        "syntax": "str.repeat(count)", 
        "type": "String"
    }, 
    "string.replace": {
        "descr": "The replace() method returns a new string with some or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match.", 
        "name": "string.replace", 
        "params": [
            {
                "descr": "A RegExp object or literal. The match is replaced by the return value of parameter #2.", 
                "name": "regexp (pattern)"
            }, 
            {
                "descr": "A String that is to be replaced by newSubStr. ", 
                "name": "substr (pattern)"
            }, 
            {
                "descr": "The String that replaces the substring received from parameter #1. ", 
                "name": "newSubStr (replacement)"
            }, 
            {
                "descr": "A function to be invoked to create the new substring (to put in place of the substring received from parameter #1). ", 
                "name": "function (replacement)"
            }
        ], 
        "path": "javascript/global_objects/string/replace", 
        "syntax": "str.replace(regexp|substr, newSubStr|function)", 
        "type": "String"
    }, 
    "string.search": {
        "descr": "The search() method executes a search for a match between a regular expression and this String object.", 
        "name": "string.search", 
        "params": [
            {
                "descr": "A regular expression object. If a non-RegExp object obj is passed, it is implicitly converted to a RegExp by using new RegExp(obj).", 
                "name": "regexp"
            }
        ], 
        "path": "javascript/global_objects/string/search", 
        "syntax": "str.search(regexp)", 
        "type": "String"
    }, 
    "string.slice": {
        "descr": "The slice() method extracts a section of a string and returns a new string.", 
        "name": "string.slice", 
        "params": [
            {
                "descr": "The zero-based index at which to begin extraction. ", 
                "name": "beginSlice"
            }, 
            {
                "descr": "Optional. The zero-based index at which to end extraction. ", 
                "name": "endSlice"
            }
        ], 
        "path": "javascript/global_objects/string/slice", 
        "syntax": "str.slice(beginSlice[, endSlice])", 
        "type": "String"
    }, 
    "string.split": {
        "descr": "The split() method splits a String object into an array of strings by separating the string into substrings.", 
        "name": "string.split", 
        "params": [
            {
                "descr": "Optional. Specifies the character(s) to use for separating the string. ", 
                "name": "separator"
            }, 
            {
                "descr": "Optional. Integer specifying a limit on the number of splits to be found. ", 
                "name": "limit"
            }
        ], 
        "path": "javascript/global_objects/string/split", 
        "syntax": "str.split([separator[, limit]])", 
        "type": "String"
    }, 
    "string.startsWith": {
        "descr": "The startsWith() method determines whether a string begins with the characters of another string, returning true or false as appropriate.", 
        "name": "string.startsWith", 
        "params": [
            {
                "descr": "The characters to be searched for at the start of this string.", 
                "name": "searchString"
            }, 
            {
                "descr": "Optional. The position in this string at which to begin searching for searchString; defaults to 0.", 
                "name": "position"
            }
        ], 
        "path": "javascript/global_objects/string/startswith", 
        "syntax": "str.startsWith(searchString[, position])", 
        "type": "String"
    }, 
    "string.substr": {
        "descr": "The substr() method returns the characters in a string beginning at the specified location through the specified number of characters.", 
        "name": "string.substr", 
        "params": [
            {
                "descr": "Location at which to begin extracting characters. ", 
                "name": "start"
            }, 
            {
                "descr": "Optional. The number of characters to extract.", 
                "name": "length"
            }
        ], 
        "path": "javascript/global_objects/string/substr", 
        "syntax": "str.substr(start[, length])", 
        "type": "String"
    }, 
    "string.substring": {
        "descr": "The substring() method returns a subset of a string between one index and another, or through the end of the string.", 
        "name": "string.substring", 
        "params": [
            {
                "descr": "An integer between 0 and the length of the string, specifying the offset into the string of the first character to include in the returned substring.", 
                "name": "indexStart"
            }, 
            {
                "descr": "Optional. An integer between 0 and the length of the string, which specifies the offset into the string of the first character not to include in the returned substring.", 
                "name": "indexEnd"
            }
        ], 
        "path": "javascript/global_objects/string/substring", 
        "syntax": "str.substring(indexStart[, indexEnd])", 
        "type": "String"
    }, 
    "string.toLocaleLowerCase": {
        "descr": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.", 
        "name": "string.toLocaleLowerCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolocalelowercase", 
        "syntax": "str.toLocaleLowerCase()", 
        "type": "String"
    }, 
    "string.toLocaleUpperCase": {
        "descr": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.", 
        "name": "string.toLocaleUpperCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolocaleuppercase", 
        "syntax": "str.toLocaleUpperCase()", 
        "type": "String"
    }, 
    "string.toLowerCase": {
        "descr": "The toLowerCase() method returns the calling string value converted to lower case.", 
        "name": "string.toLowerCase", 
        "params": [], 
        "path": "javascript/global_objects/string/tolowercase", 
        "syntax": "str.toLowerCase()", 
        "type": "String"
    }, 
    "string.toString": {
        "descr": "The toString() method returns a string representing the specified object.", 
        "name": "string.toString", 
        "params": [], 
        "path": "javascript/global_objects/string/tostring", 
        "syntax": "str.toString()", 
        "type": "String"
    }, 
    "string.toUpperCase": {
        "descr": "The toUpperCase() method returns the calling string value converted to upper case.", 
        "name": "string.toUpperCase", 
        "params": [], 
        "path": "javascript/global_objects/string/touppercase", 
        "syntax": "str.toUpperCase()", 
        "type": "String"
    }, 
    "string.trim": {
        "descr": "The trim() method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).", 
        "name": "string.trim", 
        "params": [], 
        "path": "javascript/global_objects/string/trim", 
        "syntax": "str.trim()", 
        "type": "String"
    }, 
    "string.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a String object.", 
        "name": "string.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/string/valueof", 
        "syntax": "str.valueOf()", 
        "type": "String"
    }, 
    "submit": {
        "descr": "This method is a shortcut for .on( \"submit\", handler ) in the first variation, and .trigger( \"submit\" ) in the third.", 
        "name": "submit", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  An object containing data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/submit", 
        "syntax": ".submit( handler ) Returns: jQuery", 
        "type": "Events"
    }, 
    "super": {
        "descr": "The super keyword is used to call functions on an object's parent.", 
        "name": "super", 
        "params": [], 
        "path": "javascript/operators/super", 
        "syntax": "super([arguments]);\n or  // calls the parent constructor.super.functionOnParent([arguments]);", 
        "type": "Operators"
    }, 
    "switch": {
        "descr": "The switch statement evaluates an expression, matching the expression's value to a case clause, and executes statements associated with that case.", 
        "name": "switch", 
        "params": [
            {
                "descr": "An expression whose result is matched against each case clause.", 
                "name": "expression"
            }, 
            {
                "descr": "A case clause used to match against expression.", 
                "name": "case valueN"
            }
        ], 
        "path": "javascript/statements/switch", 
        "syntax": "switch (expression) {  case value1:    //Statements executed when the result of expression matches value1    [break;]  case value2:    //Statements executed when the result of expression matches value2    [break;]  ...  case valueN:    //Statements executed when the result of expression matches valueN    [break;]  default:    //Statements executed when none of the values match the value of the expression    [break;]}", 
        "type": "Statements"
    }, 
    "symbol.@@toPrimitive": {
        "descr": "The [@@toPrimitive]() method converts a Symbol object to a primitive value.", 
        "name": "symbol.@@toPrimitive", 
        "params": [], 
        "path": "javascript/global_objects/symbol/@@toprimitive", 
        "syntax": "Symbol()[Symbol.toPrimitive](hint);", 
        "type": "Symbol"
    }, 
    "symbol.toString": {
        "descr": "The toString() method returns a string representing the specified Symbol object.", 
        "name": "symbol.toString", 
        "params": [], 
        "path": "javascript/global_objects/symbol/tostring", 
        "syntax": "Symbol().toString();", 
        "type": "Symbol"
    }, 
    "symbol.valueOf": {
        "descr": "The valueOf() method returns the primitive value of a Symbol object.", 
        "name": "symbol.valueOf", 
        "params": [], 
        "path": "javascript/global_objects/symbol/valueof", 
        "syntax": "Symbol().valueOf();", 
        "type": "Symbol"
    }, 
    "text": {
        "descr": "Unlike the .html() method, .text() can be used in both XML and HTML documents. The result of the .text() method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:", 
        "name": "text", 
        "params": [
            {
                "descr": "Type: String or Number or Boolean  The text to set as the content of each matched element. ", 
                "name": "text"
            }, 
            {
                "descr": "Type: Function( Integer index, String text ) => String  A function returning the text content to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/text", 
        "syntax": ".text() Returns: String", 
        "type": "Manipulation"
    }, 
    "this": {
        "descr": "A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.", 
        "name": "this", 
        "params": [], 
        "path": "javascript/operators/this", 
        "syntax": "this Global context In the global execution context (outside of any function), this", 
        "type": "Operators"
    }, 
    "throw": {
        "descr": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.", 
        "name": "throw", 
        "params": [
            {
                "descr": "The expression to throw.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/statements/throw", 
        "syntax": "throw expression;   expression The expression to throw.  Description Use the throw statement to throw an exception. When you throw an exception, expression specifies the value of the exception. Each of the following throws an exception: throw \"Error2\"; // generates an exception with a string valuethrow 42;       // generates an exception with the value 42throw true;     // generates an exception with the value true Also note that the throw statement is affected by automatic semicolon insertion (ASI) as no line terminator between the throw", 
        "type": "Statements"
    }, 
    "toArray": {
        "descr": ".toArray() returns all of the elements in the jQuery set:", 
        "name": "toArray", 
        "params": [], 
        "path": "jquery/toarray", 
        "syntax": ".toArray() Returns: Array", 
        "type": "Miscellaneous"
    }, 
    "toggle": {
        "descr": "Note: This method signature was deprecated in jQuery 1.8 and removed in jQuery 1.9. jQuery also provides an animation method named .toggle() that toggles the visibility of elements. Whether the animation or the event method is fired depends on the set of arguments passed.", 
        "name": "toggle", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute every even time the element is clicked.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute every odd time the element is clicked.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) Additional handlers to cycle through after clicks.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/toggle-event", 
        "syntax": ".toggle( handler, handler [, handler ] ) Returns: jQueryversion deprecated: 1.8, removed: 1.9", 
        "type": "Events"
    }, 
    "toggleClass": {
        "descr": "This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply .toggleClass() to a simple <div>:", 
        "name": "toggleClass", 
        "params": [
            {
                "descr": "Type: String  One or more class names (separated by spaces) to be toggled for each element in the matched set.", 
                "name": "className"
            }, 
            {
                "descr": "Type: String  One or more class names (separated by spaces) to be toggled for each element in the matched set.", 
                "name": "className"
            }, 
            {
                "descr": "Type: Boolean  A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.", 
                "name": "state"
            }, 
            {
                "descr": "Type: Function( Integer index, String className, Boolean state ) => String  A function that returns class names to be toggled in the class attribute of each element in the matched set. ", 
                "name": "function"
            }, 
            {
                "descr": "Type: Boolean  A boolean value to determine whether the class should be added or removed.", 
                "name": "state"
            }, 
            {
                "descr": "Type: Boolean  A boolean value to determine whether the class should be added or removed.", 
                "name": "state"
            }
        ], 
        "path": "jquery/toggleclass", 
        "syntax": ".toggleClass( className ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "top": {
        "descr": "Returns a reference to the topmost window in the window hierarchy.", 
        "name": "window.top", 
        "params": [], 
        "path": "dom/window/top", 
        "syntax": "var topWindow = window.top; Notes Where the window.parent property returns the immediate parent of the current window, window.top returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset. Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'window.top' in that specification. Living Standard     HTML5The definition of 'window.top' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes)[1] (Yes) (Yes) (Yes)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     [1] Starting in Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), this property is read only, as defined by the standard.", 
        "type": "Window"
    }, 
    "trigger": {
        "descr": "Any event handlers attached with .on() or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the .trigger() method. A call to .trigger() executes the handlers in the same order they would be if the event were triggered naturally by the user:", 
        "name": "trigger", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }, 
            {
                "descr": "Type: Event  A jQuery.Event object.", 
                "name": "event"
            }, 
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }
        ], 
        "path": "jquery/trigger", 
        "syntax": ".trigger( eventType [, extraParameters ] ) Returns: jQuery", 
        "type": "Events"
    }, 
    "triggerHandler": {
        "descr": ".triggerHandler( eventType ) executes all handlers bound with jQuery for the event type. It will also execute any method called on{eventType}() found on the element. The behavior of this method is similar to .trigger(), with the following exceptions:", 
        "name": "triggerHandler", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }, 
            {
                "descr": "Type: Event  A jQuery.Event object.", 
                "name": "event"
            }, 
            {
                "descr": "Type: Array or PlainObject  Additional parameters to pass along to the event handler.", 
                "name": "extraParameters"
            }
        ], 
        "path": "jquery/triggerhandler", 
        "syntax": ".triggerHandler( eventType [, extraParameters ] ) Returns: Object", 
        "type": "Events"
    }, 
    "try...catch": {
        "descr": "The try...catch statement marks a block of statements to try, and specifies a response, should an exception be thrown.", 
        "name": "try...catch", 
        "params": [
            {
                "descr": "The statements to be executed.", 
                "name": "try_statements"
            }, 
            {
                "descr": "Statements that are executed if an exception is thrown in the try block.", 
                "name": "catch_statements_1, catch_statements_2"
            }, 
            {
                "descr": "An identifier to hold an exception object for the associated catch clause.", 
                "name": "exception_var_1, exception_var_2"
            }, 
            {
                "descr": "A conditional expression.", 
                "name": "condition_1"
            }, 
            {
                "descr": "Statements that are executed after the try statement completes. ", 
                "name": "finally_statements"
            }
        ], 
        "path": "javascript/statements/try...catch", 
        "syntax": "try {   try_statements}[catch (exception_var_1 if condition_1) { // non-standard   catch_statements_1}]...[catch (exception_var_2) {   catch_statements_2}][finally {   finally_statements}]", 
        "type": "Statements"
    }, 
    "typedArray.@@iterator": {
        "descr": "The initial value of the @@iterator property is the same function object as the initial value of the values property.", 
        "name": "typedArray.@@iterator", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/@@iterator", 
        "syntax": "arr[Symbol.iterator]()", 
        "type": "TypedArray"
    }, 
    "typedArray.buffer": {
        "descr": "The buffer accessor property represents the ArrayBuffer referenced by a TypedArray at construction time.", 
        "name": "typedArray.buffer", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/buffer", 
        "syntax": "typedArray.buffer Description The buffer property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when the TypedArray is constructed and cannot be changed. TypedArray is one of the TypedArray objects. Examples Using the buffer property var buffer = new ArrayBuffer(8);\n or var uint16 = new Uint16Array(buffer);\n or uint16.buffer; // ArrayBuffer { byteLength: 8 });", 
        "type": "TypedArray"
    }, 
    "typedArray.byteLength": {
        "descr": "The byteLength accessor property represents the length (in bytes) of a typed array.", 
        "name": "typedArray.byteLength", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/bytelength", 
        "syntax": "typedarray.byteLength Description The byteLength property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. If the TypedArray is not specifying an byteOffset or a length, the length of the referenced ArrayBuffer will be returned. TypedArray is one of the TypedArray objects. Examples Using the byteLength property var buffer = new ArrayBuffer(8);\n or var uint8 = new Uint8Array(buffer);\n or uint8.byteLength; // 8 (matches the byteLength of the buffer)var uint8 = new Uint8Array(buffer, 1, 5);\n or uint8.byteLength; // 5 (as specified when constructing the Uint8Array)var uint8 = new Uint8Array(buffer, 2);\n or uint8.byteLength; // 6 (due to the offset of the constructed Uint8Array));", 
        "type": "TypedArray"
    }, 
    "typedArray.byteOffset": {
        "descr": "The byteOffset accessor property represents the offset (in bytes) of a typed array from the start of its ArrayBuffer.", 
        "name": "typedArray.byteOffset", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/byteoffset", 
        "syntax": "typedarray.byteOffset Description The byteOffset property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. TypedArray is one of the TypedArray objects. Examples Using the byteOffset property var buffer = new ArrayBuffer(8);\n or var uint8 = new Uint8Array(buffer);\n or uint8.byteOffset; // 0 (no offset specified)var uint8 = new Uint8Array(buffer, 3);\n or uint8.byteOffset; // 3 (as specified when constructing Uint8Array));", 
        "type": "TypedArray"
    }, 
    "typedArray.copyWithin": {
        "descr": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.", 
        "name": "typedArray.copyWithin", 
        "params": [
            {
                "descr": "Target start index position where to copy the elements to.", 
                "name": "target"
            }, 
            {
                "descr": "Source start index position where to start copying elements from.", 
                "name": "start"
            }, 
            {
                "descr": "Optional. Source end index position where to end copying elements from.", 
                "name": "end Optional"
            }
        ], 
        "path": "javascript/global_objects/typedarray/copywithin", 
        "syntax": "typedarray.copyWithin(target, start[, end = this.length])", 
        "type": "TypedArray"
    }, 
    "typedArray.entries": {
        "descr": "The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.", 
        "name": "typedArray.entries", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/entries", 
        "syntax": "arr.entries()", 
        "type": "TypedArray"
    }, 
    "typedArray.every": {
        "descr": "The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.every", 
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  currentValue The current element being processed in the typed array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The typed array every was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/every", 
        "syntax": "typedarray.every(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.fill": {
        "descr": "The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.fill", 
        "params": [
            {
                "descr": "Value to fill the typed array with.", 
                "name": "value"
            }, 
            {
                "descr": "Optional. Start index. Defaults to 0.", 
                "name": "start"
            }, 
            {
                "descr": "Optional. End index (not included). ", 
                "name": "end"
            }
        ], 
        "path": "javascript/global_objects/typedarray/fill", 
        "syntax": "typedarray.fill(value[, start = 0[, end = this.length]])", 
        "type": "TypedArray"
    }, 
    "typedArray.filter": {
        "descr": "The filter() method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.filter", 
        "params": [
            {
                "descr": "Function to test each element of the typed array. ", 
                "name": "callback"
            }, 
            {
                "descr": "Value to use as this when executing callback.", 
                "name": "thisArg Optional"
            }
        ], 
        "path": "javascript/global_objects/typedarray/filter", 
        "syntax": "typedarray.filter(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.find": {
        "descr": "The find() method returns a value in the typed array, if an element satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.", 
        "name": "typedArray.find", 
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking three arguments:  element The current element being processed in the typed array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The array find was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/find", 
        "syntax": "typedarray.find(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.findIndex": {
        "descr": "The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.", 
        "name": "typedArray.findIndex", 
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking three arguments:  element The current element being processed in the typed array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The typed array findIndex was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/findindex", 
        "syntax": "typedarray.findIndex(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.forEach": {
        "descr": "The forEach() method executes a provided function once per array element. This method has the same algorithm as Array.prototype.forEach(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.forEach", 
        "params": [
            {
                "descr": "Function that produces an element of the new typed array, taking three arguments:  currentValue The current element being processed in the typed array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the array.", 
                "name": "index"
            }, 
            {
                "descr": "The array forEach() was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/foreach", 
        "syntax": "typedarray.forEach(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.includes": {
        "descr": "The includes() method determines whether a typed array includes a certain element, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.includes", 
        "params": [
            {
                "descr": "The element to search for.", 
                "name": "searchElement"
            }, 
            {
                "descr": "Optional. The position in this array at which to begin searching for searchElement; defaults to 0.", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/typedarray/includes", 
        "syntax": "typedarray.includes(searchElement[, fromIndex]);", 
        "type": "TypedArray"
    }, 
    "typedArray.indexOf": {
        "descr": "The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.indexOf", 
        "params": [
            {
                "descr": "Element to locate in the typed array.", 
                "name": "searchElement"
            }, 
            {
                "descr": "The index to start the search at. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/typedarray/indexof", 
        "syntax": "typedarray.indexOf(searchElement[, fromIndex = 0])", 
        "type": "TypedArray"
    }, 
    "typedArray.join": {
        "descr": "The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.join", 
        "params": [
            {
                "descr": "Optional. Specifies a string to separate each element. ", 
                "name": "separator"
            }
        ], 
        "path": "javascript/global_objects/typedarray/join", 
        "syntax": "typedarray.join([separator = ',']);", 
        "type": "TypedArray"
    }, 
    "typedArray.keys": {
        "descr": "The keys() method returns a new Array Iterator object that contains the keys for each index in the array.", 
        "name": "typedArray.keys", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/keys", 
        "syntax": "arr.keys()", 
        "type": "TypedArray"
    }, 
    "typedArray.lastIndexOf": {
        "descr": "The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.lastIndexOf", 
        "params": [
            {
                "descr": "Element to locate in the typed array.", 
                "name": "searchElement"
            }, 
            {
                "descr": "Optional. The index at which to start searching backwards. ", 
                "name": "fromIndex"
            }
        ], 
        "path": "javascript/global_objects/typedarray/lastindexof", 
        "syntax": "typedarray.lastIndexOf(searchElement[, fromIndex = typedarray.length])", 
        "type": "TypedArray"
    }, 
    "typedArray.length": {
        "descr": "The length accessor property represents the length (in elements) of a typed array.", 
        "name": "typedArray.length", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/length", 
        "syntax": "typedarray.length Description The length property is an accessor property whose set accessor function is undefined, meaning that you can only read this property. The value is established when a TypedArray is constructed and cannot be changed. If the TypedArray is not specifying an byteOffset or a length, the length of the referenced ArrayBuffer will be returned. TypedArray is one of the TypedArray objects. Examples Using the length property var buffer = new ArrayBuffer(8);\n or var uint8 = new Uint8Array(buffer);\n or uint8.length; // 8 (matches the length of the buffer)var uint8 = new Uint8Array(buffer, 1, 5);\n or uint8.length; // 5 (as specified when constructing the Uint8Array)var uint8 = new Uint8Array(buffer, 2);\n or uint8.length; // 6 (due to the offset of the constructed Uint8Array));", 
        "type": "TypedArray"
    }, 
    "typedArray.map": {
        "descr": "The map() method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as Array.prototype.map(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.map", 
        "params": [
            {
                "descr": "Function that produces an element of the new typed array, taking three arguments:  currentValue The current element being processed in the typed array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The typed array map was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/map", 
        "syntax": "typedarray.map(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.reduce": {
        "descr": "The reduce() method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduce(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.reduce", 
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).", 
                "name": "callback"
            }, 
            {
                "descr": "The current element being processed in the typed array.", 
                "name": "currentValue"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The typed array reduce was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/typedarray/reduce", 
        "syntax": "typedarray.reduce(callback[, initialValue])", 
        "type": "TypedArray"
    }, 
    "typedArray.reduceRight": {
        "descr": "The reduceRight() method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.reduceRight", 
        "params": [
            {
                "descr": "Function to execute on each value in the typed array, taking four arguments:  previousValue The value previously returned in the last invocation of the callback, or initialValue, if supplied (see below).", 
                "name": "callback"
            }, 
            {
                "descr": "The current element being processed in the typed array.", 
                "name": "currentValue"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The typed array reduce was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Object to use as the first argument to the first call of the callback.", 
                "name": "initialValue"
            }
        ], 
        "path": "javascript/global_objects/typedarray/reduceright", 
        "syntax": "typedarray.reduceRight(callback[, initialValue])", 
        "type": "TypedArray"
    }, 
    "typedArray.reverse": {
        "descr": "The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.reverse", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/reverse", 
        "syntax": "typedarray.reverse();", 
        "type": "TypedArray"
    }, 
    "typedArray.set": {
        "descr": "The set() method stores multiple values in the typed array, reading input values from a specified array.", 
        "name": "typedArray.set", 
        "params": [
            {
                "descr": "The array from which to copy values. ", 
                "name": "array"
            }, 
            {
                "descr": "If the source array is a typed array, the two arrays may share the same underlying ArrayBuffer; the browser will intelligently copy the source range of the buffer to the destination range.", 
                "name": "typedarray"
            }, 
            {
                "descr": "The offset into the target array at which to begin writing values from the source array. ", 
                "name": "offset Optional"
            }, 
            {
                "descr": "Thrown if the offset is set such as it would store beyond the end of the typed array.", 
                "name": "RangeError"
            }
        ], 
        "path": "javascript/global_objects/typedarray/set", 
        "syntax": "typedarr.set(array [,offset])typedarr.set(typedarray [,offset])", 
        "type": "TypedArray"
    }, 
    "typedArray.slice": {
        "descr": "The slice() method returns a shallow copy of a portion of a typed array into a new typed array object. This method has the same algorithm as Array.prototype.slice(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.slice", 
        "params": [
            {
                "descr": "Zero-based index at which to begin extraction.", 
                "name": "begin Optional"
            }, 
            {
                "descr": "Zero-based index at which to end extraction. ", 
                "name": "end Optional"
            }
        ], 
        "path": "javascript/global_objects/typedarray/slice", 
        "syntax": "typedarray.slice([begin[, end]])", 
        "type": "TypedArray"
    }, 
    "typedArray.some": {
        "descr": "The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.some", 
        "params": [
            {
                "descr": "Function to test for each element, taking three arguments:  currentValue The current element being processed in the typed array.", 
                "name": "callback"
            }, 
            {
                "descr": "The index of the current element being processed in the typed array.", 
                "name": "index"
            }, 
            {
                "descr": "The typed array every was called upon.", 
                "name": "array"
            }, 
            {
                "descr": "Optional. Value to use as this when executing callback.", 
                "name": "thisArg"
            }
        ], 
        "path": "javascript/global_objects/typedarray/some", 
        "syntax": "typedarray.some(callback[, thisArg])", 
        "type": "TypedArray"
    }, 
    "typedArray.sort": {
        "descr": "The sort() method sorts the elements of a typed array in place and returns the typed array. This method has the same algorithm as Array.prototype.sort(). TypedArray is one of the typed array types here.", 
        "name": "typedArray.sort", 
        "params": [
            {
                "descr": "Specifies a function that defines the sort order.", 
                "name": "compareFunction Optional"
            }
        ], 
        "path": "javascript/global_objects/typedarray/sort", 
        "syntax": "typedarray.sort([compareFunction])", 
        "type": "TypedArray"
    }, 
    "typedArray.subarray": {
        "descr": "The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.", 
        "name": "typedArray.subarray", 
        "params": [
            {
                "descr": "Element to begin at. The offset is inclusive. ", 
                "name": "begin Optional"
            }, 
            {
                "descr": "Element to end at. The offset is exclusive. ", 
                "name": "end Optional"
            }
        ], 
        "path": "javascript/global_objects/typedarray/subarray", 
        "syntax": "typedarray.subarray([begin [,end]])", 
        "type": "TypedArray"
    }, 
    "typedArray.values": {
        "descr": "The values() method returns a new Array Iterator object that contains the values for each index in the array.", 
        "name": "typedArray.values", 
        "params": [], 
        "path": "javascript/global_objects/typedarray/values", 
        "syntax": "arr.values()", 
        "type": "TypedArray"
    }, 
    "typeof": {
        "descr": "The typeof operator returns a string indicating the type of the unevaluated operand.", 
        "name": "typeof", 
        "params": [], 
        "path": "javascript/operators/typeof", 
        "syntax": "typeof operator is followed by its operand: typeof operand Parameters operand is an expression representing the object or primitive whose type is to be returned.", 
        "type": "Operators"
    }, 
    "unbind": {
        "descr": "Event handlers attached with .bind() can be removed with .unbind(). (As of jQuery 1.7, the .on() and .off() methods are preferred to attach and remove event handlers on elements.) In the simplest case, with no arguments, .unbind() removes all handlers attached to the elements:", 
        "name": "unbind", 
        "params": [
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) The function that is to be no longer executed.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as click or submit.", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Boolean  Unbinds the corresponding 'return false' function that was bound using .bind( eventType, false ).", 
                "name": "false"
            }, 
            {
                "descr": "Type: Event  A jQuery.Event object.", 
                "name": "event"
            }
        ], 
        "path": "jquery/unbind", 
        "syntax": ".unbind( eventType [, handler ] ) Returns: jQuery", 
        "type": "Events"
    }, 
    "undefined": {
        "descr": "The global undefined property represents the primitive value undefined. It is one of JavaScript's primitive types.", 
        "name": "undefined", 
        "params": [], 
        "path": "javascript/global_objects/undefined", 
        "syntax": "undefined Description undefined is a property of the global object, i.e. it is a variable in global scope. The initial value of undefined is the primitive value undefined. In modern browsers (JavaScript 1.8.5 / Firefox 4+), undefined", 
        "type": "Global Objects"
    }, 
    "undelegate": {
        "descr": "The .undelegate() method is a way of removing event handlers that have been bound using .delegate(). As of jQuery 1.7, the .on() and .off() methods are preferred for attaching and removing event handlers.", 
        "name": "undelegate", 
        "params": [
            {
                "descr": "Type: String  A selector which will be used to filter the event results.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown\"", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: String  A selector which will be used to filter the event results.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: String  A string containing a JavaScript event type, such as \"click\" or \"keydown\"", 
                "name": "eventType"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute at the time the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: String  A selector which will be used to filter the event results.", 
                "name": "selector"
            }, 
            {
                "descr": "Type: PlainObject  An object of one or more event types and previously bound functions to unbind from them.", 
                "name": "events"
            }, 
            {
                "descr": "Type: String  A string containing a namespace to unbind all events from.", 
                "name": "namespace"
            }
        ], 
        "path": "jquery/undelegate", 
        "syntax": ".undelegate() Returns: jQuery", 
        "type": "Events"
    }, 
    "unescape": {
        "descr": "The deprecated unescape() function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Because unescape is deprecated, use decodeURI or decodeURIComponent instead.", 
        "name": "unescape", 
        "params": [
            {
                "descr": "A string to be decoded.", 
                "name": "str"
            }
        ], 
        "path": "javascript/global_objects/unescape", 
        "syntax": "unescape(str)", 
        "type": "Global Objects"
    }, 
    "unload": {
        "descr": "This method is a shortcut for .on( \"unload\", handler ).", 
        "name": "unload", 
        "params": [
            {
                "descr": "Type: Function( Event eventObject ) A function to execute when the event is triggered.", 
                "name": "handler"
            }, 
            {
                "descr": "Type: Anything  A plain object of data that will be passed to the event handler.", 
                "name": "eventData"
            }, 
            {
                "descr": "Type: Function( Event eventObject ) A function to execute each time the event is triggered.", 
                "name": "handler"
            }
        ], 
        "path": "jquery/unload", 
        "syntax": ".unload( handler ) Returns: jQueryversion deprecated: 1.8", 
        "type": "Events"
    }, 
    "unwrap": {
        "descr": "The .unwrap() method removes the element's parent. This is effectively the inverse of the .wrap() method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.", 
        "name": "unwrap", 
        "params": [
            {
                "descr": "Type: String  A selector to check the parent element against. ", 
                "name": "selector"
            }
        ], 
        "path": "jquery/unwrap", 
        "syntax": ".unwrap() Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "val": {
        "descr": "The .val() method is primarily used to get the values of form elements such as input, select and textarea. When the first element in the collection is a select-multiple (i.e., a select element with the multiple attribute set), it returns an array containing the value of each selected option, or null if no options are selected. When called on an empty collection, it returns undefined.", 
        "name": "val", 
        "params": [
            {
                "descr": "Type: String or Number or Array  A string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked.", 
                "name": "value"
            }, 
            {
                "descr": "Type: Function( Integer index, String value ) => String  A function returning the value to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/val", 
        "syntax": ".val() Returns: String or Number or Array", 
        "type": "Manipulation"
    }, 
    "values": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "Object.values", 
        "params": [
            {
                "descr": "The object whose enumerable own property values are to be returned.", 
                "name": "obj"
            }
        ], 
        "path": "javascript/global_objects/object/values", 
        "syntax": "Object.values()", 
        "type": "Object"
    }, 
    "var": {
        "descr": "The variable statement declares a variable, optionally initializing it to a value.", 
        "name": "var", 
        "params": [
            {
                "descr": "Variable name. It can be any legal identifier.", 
                "name": "varnameN"
            }, 
            {
                "descr": "Initial value of the variable. It can be any legal expression.", 
                "name": "valueN"
            }
        ], 
        "path": "javascript/statements/var", 
        "syntax": "var varname1 [= value1 [, varname2 [, varname3 ... [, varnameN]]]];  varnameN Variable name. It can be any legal identifier.   valueN Initial value of the variable. It can be any legal expression.  Description Variable declarations, wherever they occur, are processed before any code is executed. The scope of a variable declared with var is its current execution context, which is either the enclosing function or, for variables declared outside any function, global. Assigning a value to an undeclared variable implicitly creates it as a global variable (it becomes a property of the global object) when the assignment is executed. The differences between declared and undeclared variables are:", 
        "type": "Statements"
    }, 
    "vertexAttribDivisorANGLE": {
        "descr": "The ANGLE_instanced_arrays.vertexAttribDivisorANGLE() method of the WebGL API modifies the rate at which generic vertex attributes advance when rendering multiple instances of primitives with ext.drawArraysInstancedANGLE() and ext.drawElementsInstancedANGLE().", 
        "name": "vertexAttribDivisorANGLE", 
        "params": [
            {
                "descr": "A GLuint specifying the index of the generic vertex attributes.", 
                "name": "index"
            }, 
            {
                "descr": "A GLuint specifying the number of instances that will pass between updates of the generic attribute.", 
                "name": "divisor"
            }
        ], 
        "path": "dom/angle_instanced_arrays/vertexattribdivisorangle", 
        "syntax": "void ext.vertexAttribDivisorANGLE(index, divisor);", 
        "type": "WebGL"
    }, 
    "void": {
        "descr": "The void operator evaluates the given expression and then returns undefined.", 
        "name": "void", 
        "params": [], 
        "path": "javascript/operators/void", 
        "syntax": "void expression Description This operator allows inserting expressions that produce side effects into places where an expression that evaluates to undefined is desired. The void operator is often used merely to obtain the undefined primitive value, usually using \"void(0)", 
        "type": "Operators"
    }, 
    "weakMap.delete": {
        "descr": "The delete() method removes the specified element from a WeakMap object.", 
        "name": "weakMap.delete", 
        "params": [
            {
                "descr": "Required. The key of the element to remove from the WeakMap object.", 
                "name": "key"
            }
        ], 
        "path": "javascript/global_objects/weakmap/delete", 
        "syntax": "wm.delete(key);", 
        "type": "WeakMap"
    }, 
    "weakMap.get": {
        "descr": "The get() method returns a specified element from a WeakMap object.", 
        "name": "weakMap.get", 
        "params": [
            {
                "descr": "Required. The key of the element to return from the WeakMap object.", 
                "name": "key"
            }
        ], 
        "path": "javascript/global_objects/weakmap/get", 
        "syntax": "wm.get(key);", 
        "type": "WeakMap"
    }, 
    "weakMap.has": {
        "descr": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.", 
        "name": "weakMap.has", 
        "params": [
            {
                "descr": "Required. The key of the element to test for presence in the WeakMap object.", 
                "name": "key"
            }, 
            {
                "descr": "Returns true if an element with the specified key exists in the WeakMap object; otherwise false.", 
                "name": "Boolean"
            }
        ], 
        "path": "javascript/global_objects/weakmap/has", 
        "syntax": "wm.has(key);", 
        "type": "WeakMap"
    }, 
    "weakMap.set": {
        "descr": "The set() method adds a new element with a specified key and value to a WeakMap object.", 
        "name": "weakMap.set", 
        "params": [
            {
                "descr": "Required. The key of the element to add to the WeakMap object.", 
                "name": "key"
            }, 
            {
                "descr": "Required. The value of the element to add to the WeakMap object.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/weakmap/set", 
        "syntax": "wm.set(key, value);", 
        "type": "WeakMap"
    }, 
    "weakSet.add": {
        "descr": "The add() method appends a new object to the end of a WeakSet object.", 
        "name": "weakSet.add", 
        "params": [
            {
                "descr": "Required. The object to add to the WeakSet collection.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/weakset/add", 
        "syntax": "ws.add(value);", 
        "type": "WeakSet"
    }, 
    "weakSet.delete": {
        "descr": "The delete() method removes the specified element from a WeakSet object.", 
        "name": "weakSet.delete", 
        "params": [
            {
                "descr": "Required. The object remove from the WeakSet object.", 
                "name": "value"
            }
        ], 
        "path": "javascript/global_objects/weakset/delete", 
        "syntax": "ws.delete(value);", 
        "type": "WeakSet"
    }, 
    "weakSet.has": {
        "descr": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.", 
        "name": "weakSet.has", 
        "params": [
            {
                "descr": "Required. The object to test for presence in the WeakSet.", 
                "name": "value"
            }, 
            {
                "descr": "Returns true if an element with the specified value exists in the WeakSet object; otherwise false.", 
                "name": "Boolean"
            }
        ], 
        "path": "javascript/global_objects/weakset/has", 
        "syntax": "ws.has(value);", 
        "type": "WeakSet"
    }, 
    "while": {
        "descr": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.", 
        "name": "while", 
        "params": [
            {
                "descr": "An expression evaluated before each pass through the loop. ", 
                "name": "condition"
            }, 
            {
                "descr": "A statement that is executed as long as the condition evaluates to true. ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/while", 
        "syntax": "while (condition) {  statement}", 
        "type": "Statements"
    }, 
    "width": {
        "descr": "The difference between .css(width) and .width() is that the latter returns a unit-less pixel value (for example, 400) while the former returns a value with units intact (for example, 400px). The .width() method is recommended when an element's width needs to be used in a mathematical calculation.", 
        "name": "width", 
        "params": [
            {
                "descr": "Type: String or Number  An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).", 
                "name": "value"
            }, 
            {
                "descr": "Type: Function( Integer index, Integer value ) => String or Number  A function returning the width to set. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/width", 
        "syntax": ".width() Returns: Number", 
        "type": "Dimensions"
    }, 
    "window": {
        "descr": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:", 
        "name": "window.window", 
        "params": [], 
        "path": "dom/window/window", 
        "syntax": "window: var global = {data: 0};alert(global === window.global);\n or  // displays \"true\");", 
        "type": "Window"
    }, 
    "window.URL": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.URL", 
        "params": [], 
        "path": "dom/window/url", 
        "syntax": "Window.URL property returns an object that provides static methods used for creating and managing object URLs. It can also be called as a constructor to construct URL objects. Note: This feature is available in Web Workers. Syntax Calling a static method: img.src = URL.createObjectURL(blob);", 
        "type": "Window"
    }, 
    "window.alert": {
        "descr": "The Window.alert() method displays an alert dialog with the optional specified content and an OK button.", 
        "name": "window.alert", 
        "params": [], 
        "path": "dom/window/alert", 
        "syntax": "window.alert(message);", 
        "type": "Window"
    }, 
    "window.blur": {
        "descr": "Shifts focus away from the window.", 
        "name": "window.blur", 
        "params": [], 
        "path": "dom/window/blur", 
        "syntax": "window.blur()", 
        "type": "Window"
    }, 
    "window.caches": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.caches", 
        "params": [], 
        "path": "dom/window/caches", 
        "syntax": "Window.caches read-only property returns the CacheStorage", 
        "type": "Window"
    }, 
    "window.cancelAnimationFrame": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.cancelAnimationFrame", 
        "params": [
            {
                "descr": "The ID value returned by the call to window.requestAnimationFrame() that requested the callback.", 
                "name": "requestID"
            }
        ], 
        "path": "dom/window/cancelanimationframe", 
        "syntax": "window.requestAnimationFrame()", 
        "type": "Window"
    }, 
    "window.cancelIdleCallback": {
        "descr": "The Window.cancelIdleCallback() enables you to cancel a callback previously scheduled with Window.requestIdleCallback.", 
        "name": "window.cancelIdleCallback", 
        "params": [
            {
                "descr": "The unsigned long integer returned by calling Window.requestIdleCallback.", 
                "name": "handle"
            }
        ], 
        "path": "dom/window/cancelidlecallback", 
        "syntax": "Window.cancelIdleCallback(handle)", 
        "type": "Window"
    }, 
    "window.clearImmediate": {
        "descr": "This method clears the action specified by window.setImmediate.", 
        "name": "window.clearImmediate", 
        "params": [], 
        "path": "dom/window/clearimmediate", 
        "syntax": "window.clearImmediate(immediateID)", 
        "type": "Window"
    }, 
    "window.close": {
        "descr": "The Window.close() method closes the current window, or the window on which it was called.", 
        "name": "window.close", 
        "params": [], 
        "path": "dom/window/close", 
        "syntax": "window.close();", 
        "type": "Window"
    }, 
    "window.closed": {
        "descr": "This read-only property indicates whether the referenced window is closed or not.", 
        "name": "window.closed", 
        "params": [
            {
                "descr": "A boolean. Possible Values:  true: The window has been closed. ", 
                "name": "isClosed"
            }
        ], 
        "path": "dom/window/closed", 
        "syntax": "isClosed = windowRef.closed;   isClosed  A boolean. Possible Values:  true: The window has been closed. false: The window is open.    Examples Change the URL of a window from a popup The following example demonstrates how a popup window can change the URL of the window that opened it. Before attempting to change the URL, it checks that the current window has an opener using the window.opener property and that the opener isn't closed: // Check that an opener exists and is not closedif (window.opener && !window.opener.closed) {  window.opener.location.href = \"http://www.mozilla.org\";}", 
        "type": "Window"
    }, 
    "window.confirm": {
        "descr": "The Window.confirm() method displays a modal dialog with an optional message and two buttons, OK and Cancel.", 
        "name": "window.confirm", 
        "params": [], 
        "path": "dom/window/confirm", 
        "syntax": "result = window.confirm(message);", 
        "type": "Window"
    }, 
    "window.crypto": {
        "descr": "The Window.crypto read-only property returns the Crypto object associated to the global object. This object allows web pages access to certain cryptographic related services.", 
        "name": "window.crypto", 
        "params": [], 
        "path": "dom/window/crypto", 
        "syntax": "var cryptoObj = window.crypto || window.msCrypto; // for IE 11 Specifications    Specification Status Comment   Web Cryptography APIThe definition of 'Window.crypto' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Edge Opera Safari   Basic support 44 (Yes) (Yes) 6 ms 20 19 (Yes)         Feature Chrome for Android Firefox Mobile Firefox OS IE Phone Opera Mobile Safari Mobile   Basic support (Yes) (Yes) (Yes) (Yes) (Yes) (Yes)     See also", 
        "type": "Window"
    }, 
    "window.defaultStatus": {
        "descr": "Obsolete since Gecko 23 (Firefox 23 / Thunderbird 23 / SeaMonkey 2.20)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "window.defaultStatus", 
        "params": [], 
        "path": "dom/window/defaultstatus", 
        "syntax": "var sMsg = window.defaultStatus;window.defaultStatus = sMsg; Parameters  sMsg is a string containing the text to be displayed by default in the statusbar.  Example <html>  <body onload=\"window.defaultStatus='hello!';\"/>   <button onclick=\"window.confirm('Are you sure you want to quit?');\n or \">confirm</button>  </body> </html>);", 
        "type": "Window"
    }, 
    "window.devicePixelRatio": {
        "descr": "The Window.devicePixelRatio read-only property returns the ratio of the (vertical) size of one physical pixel on the current display device to the size of one device independent pixels(dips).", 
        "name": "window.devicePixelRatio", 
        "params": [], 
        "path": "dom/window/devicepixelratio", 
        "syntax": "value = window.devicePixelRatio; Specifications    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'Window.devicePixelRatio' in that specification. Working Draft Initial definition    Browser compatibility", 
        "type": "Window"
    }, 
    "window.directories": {
        "descr": "Obsolete since Gecko 2.0 (Firefox 4 / Thunderbird 3.3 / SeaMonkey 2.1)This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "window.directories", 
        "params": [], 
        "path": "dom/window/directories", 
        "syntax": "var dirBar = window.directories; Parameters dirBar is an object of the type BarProp. Example <script>  function dirs() {   alert(window.directories);\n or  } </script>);", 
        "type": "Window"
    }, 
    "window.document": {
        "descr": "Returns a reference to the document contained in the window.", 
        "name": "window.document", 
        "params": [], 
        "path": "dom/window/document", 
        "syntax": "doc = window.document  Parameters  doc is an object reference to a document.  Example <!DOCTYPE html><html><head>   <title>Hello, World!</title></head><body><script type=\"text/javascript\">   var doc = window.document;   console.log(doc.title);\n or  // Hello, World!</script></body></html>);", 
        "type": "Window"
    }, 
    "window.focus": {
        "descr": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.", 
        "name": "window.focus", 
        "params": [], 
        "path": "dom/window/focus", 
        "syntax": "window.focus()", 
        "type": "Window"
    }, 
    "window.frameElement": {
        "descr": "Returns the element (such as <iframe> or <object>) in which the window is embedded, or null if the element is either top-level or is embedded into a document with a different script origin; that is, in cross-origin situations.", 
        "name": "window.frameElement", 
        "params": [], 
        "path": "dom/window/frameelement", 
        "syntax": "frameEl = window.frameElement;  frameEl is the element which the window is embedded into. If the window isn't embedded into another document, or if the document into which it's embedded has a different origin (such as having been located from a different domain), this is null", 
        "type": "Window"
    }, 
    "window.frames": {
        "descr": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.", 
        "name": "window.frames", 
        "params": [], 
        "path": "dom/window/frames", 
        "syntax": "frameList = window.frames;  frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation. frameList === window evaluates to true. Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[ 0 ]", 
        "type": "Window"
    }, 
    "window.fullScreen": {
        "descr": "This property indicates whether the window is displayed in full screen mode or not. It is only reliable in Gecko 1.9 (Firefox 3) and later, see the Notes below.", 
        "name": "window.fullScreen", 
        "params": [
            {
                "descr": "A boolean. Possible Values:", 
                "name": "isInFullScreen"
            }
        ], 
        "path": "dom/window/fullscreen", 
        "syntax": "isInFullScreen = windowRef.fullScreen; With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking. Return Value  isInFullScreen A boolean. Possible Values:   true: The window is in full screen mode. false: The window is not in full screen mode.  Examples  Specification DOM Level 0. window.fullScreen is not part of any W3C specification or technical recommendation. Notes  This property is only reliable in Mozilla 1.9 (Firefox 3) and later. Mozilla 1.8 and earlier do have this property, but it always returns false", 
        "type": "Window"
    }, 
    "window.getComputedStyle": {
        "descr": "The Window.getComputedStyle() method gives the values of all the CSS properties of an element after applying the active stylesheets and resolving any basic computation those values may contain.", 
        "name": "window.getComputedStyle", 
        "params": [
            {
                "descr": "The Element for which to get the computed style.", 
                "name": "element"
            }, 
            {
                "descr": "A string specifying the pseudo-element to match. ", 
                "name": "pseudoElt Optional"
            }
        ], 
        "path": "dom/window/getcomputedstyle", 
        "syntax": "var style = window.getComputedStyle(element[, pseudoElt]);", 
        "type": "Window"
    }, 
    "window.getSelection": {
        "descr": "Returns a Selection object representing the range of text selected by the user or the current position of the caret.", 
        "name": "window.getSelection", 
        "params": [], 
        "path": "dom/window/getselection", 
        "syntax": "selection = window.getSelection();", 
        "type": "Window"
    }, 
    "window.history": {
        "descr": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).", 
        "name": "window.history", 
        "params": [], 
        "path": "dom/window/history", 
        "syntax": "var historyObj = window.history; Example history.back();\n or      // equivalent to clicking back buttonhistory.go(-1);\n or      // equivalent to history.back();", 
        "type": "Window"
    }, 
    "window.innerHeight": {
        "descr": "Height (in pixels) of the browser window viewport including, if rendered, the horizontal scrollbar.", 
        "name": "window.innerHeight", 
        "params": [], 
        "path": "dom/window/innerheight", 
        "syntax": "var intViewportHeight = window.innerHeight; Value On return, intViewportHeight is the height of the browser window's viewport. The window.innerHeight property is read only; it has no default value. Notes The innerHeight property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the height of the viewport excluding, if rendered, the horizontal scrollbar. Example Assuming a frameset var intFrameHeight = window.innerHeight; // orvar intFrameHeight = self.innerHeight;// will return the height of the frame viewport within the framesetvar intFramesetHeight = parent.innerHeight;// will return the height of the viewport of the closest framesetvar intOuterFramesetHeight = top.innerHeight;// will return the height of the viewport of the outermost frameset  To change the size of a window, see window.resizeBy()", 
        "type": "Window"
    }, 
    "window.innerWidth": {
        "descr": "Width (in pixels) of the browser window viewport including, if rendered, the vertical scrollbar.", 
        "name": "window.innerWidth", 
        "params": [], 
        "path": "dom/window/innerwidth", 
        "syntax": "var intViewportWidth = window.innerWidth; Value intViewportWidth stores the window.innerWidth property value. The window.innerWidth property is read only; it has no default value. Notes The innerWidth property is supported in any window object like a window, a frame, a frameset, or a secondary window. There is an algorithm to obtain the width of the viewport excluding, if rendered, the vertical scrollbar. Example // This will return the width of the viewportvar intFrameWidth = window.innerWidth;// This will return the width of the frame viewport within a framesetvar intFrameWidth = self.innerWidth;// This will return the width of the viewport of the closest framesetvar intFramesetWidth = parent.innerWidth;// This will return the width of the viewport of the outermost framesetvar intOuterFramesetWidth = top.innerWidth; To change the size of a window, see window.resizeBy and window.resizeTo. Specification    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'window.innerWidth' in that specification. Working Draft Initial definition    Browser compatibility", 
        "type": "Window"
    }, 
    "window.isSecureContext": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.isSecureContext", 
        "params": [], 
        "path": "dom/window/issecurecontext", 
        "syntax": "Window.isSecureContext read-only property indicates whether a context is capable of using features that require secure contexts. Syntax var isSecure = Window.isSecureContext Examples Feature detection You can use feature detection to check whether they are in a secure context or not by using the isSecureContext boolean which is exposed on the global scope. if (window.isSecureContext) {  // Page is a secure context so service workers are now available  navigator.serviceWorker.register(\"/offline-worker.js\").then(function () {    ...  });\n or });", 
        "type": "Window"
    }, 
    "window.length": {
        "descr": "Returns the number of frames (either <frame> or <iframe> elements) in the window.", 
        "name": "window.length", 
        "params": [], 
        "path": "dom/window/length", 
        "syntax": "framesCount = window.length;  framesCount is the number of frames.  Example if (window.length) {  // this is a document with subframes}", 
        "type": "Window"
    }, 
    "window.localStorage": {
        "descr": "The localStorage property allows you to access a local Storage object. localStorage is similar to sessionStorage. The only difference is that, while data stored in localStorage has no expiration time, data stored in sessionStorage gets cleared when the browsing session ends\u2014that is, when the browser is closed.", 
        "name": "window.localStorage", 
        "params": [], 
        "path": "dom/window/localstorage", 
        "syntax": "myStorage = localStorage; Value A Storage object. Example The following snippet accesses the current domain's local Storage object and adds a data item to it using Storage.setItem()", 
        "type": "Window"
    }, 
    "window.location": {
        "descr": "The Window.location read-only property returns a Location object with information about the current location of the document.", 
        "name": "window.location", 
        "params": [], 
        "path": "dom/window/location", 
        "syntax": "var oldLocation = location;location = newLocation; Examples Basic Example alert(location);\n or  // alerts \"https://developer.mozilla.org/en-US/docs/Web/API/Window.location\");", 
        "type": "Window"
    }, 
    "window.matchMedia": {
        "descr": "Returns a new MediaQueryList object representing the parsed results of the specified media query string.", 
        "name": "window.matchMedia", 
        "params": [], 
        "path": "dom/window/matchmedia", 
        "syntax": "mql = window.matchMedia(mediaQueryString)", 
        "type": "Window"
    }, 
    "window.moveBy": {
        "descr": "Moves the current window by a specified amount.", 
        "name": "window.moveBy", 
        "params": [], 
        "path": "dom/window/moveby", 
        "syntax": "window.moveBy(deltaX, deltaY)", 
        "type": "Window"
    }, 
    "window.moveTo": {
        "descr": "Moves the window to the specified coordinates.", 
        "name": "window.moveTo", 
        "params": [], 
        "path": "dom/window/moveto", 
        "syntax": "window.moveTo(x, y)", 
        "type": "Window"
    }, 
    "window.name": {
        "descr": "Gets/sets the name of the window.", 
        "name": "window.name", 
        "params": [], 
        "path": "dom/window/name", 
        "syntax": "string = window.name;window.name = string; Example window.name = \"lab_view\"; Notes The name of the window is used primarily for setting targets for hyperlinks and forms. Windows do not need to have names. It has also been used in some frameworks for providing cross-domain messaging (e.g., SessionVars and Dojo's dojox.io.windowName) as a more secure alternative to JSONP. Modern web applications hosting sensitive data should however not rely on window.name", 
        "type": "Window"
    }, 
    "window.ondevicelight": {
        "descr": "Specifies an event listener to receive devicelight events. These events occur when the device's light level sensor detects a change in the intensity of the ambient light level.", 
        "name": "window.ondevicelight", 
        "params": [], 
        "path": "dom/window/ondevicelight", 
        "syntax": "window.ondevicelight = funcRef Where funcRef is a function to be called when the devicelight event occurs. These events are of type DeviceLightEvent. Specifications    Specification Status Comment     Ambient Light EventsThe definition of 'Ambient Light Events' in that specification. Candidate Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported 22.0 (22.0)[1] Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0)[1] Not supported Not supported Not supported     [1] The devicelight", 
        "type": "Window"
    }, 
    "window.ondevicemotion": {
        "descr": "An event handler for the devicemotion events sent to the window.", 
        "name": "window.ondevicemotion", 
        "params": [], 
        "path": "dom/window/ondevicemotion", 
        "syntax": "window.ondevicemotion = funcRef; Where funcRef is a reference to a function. This function receives a DeviceMotionEvent object describing the motion that occurred. Specifications    Specification Status Comment     Device Orientation Events Working Draft Initial specification.    Browser compatibility  Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari (WebKit) Basic support (Yes) 6 (6) ? ? ?   Feature Android Firefox Mobile (Gecko) IE Phone Opera Mobile Safari Mobile Basic support (Yes) 6.0 (6) Not supported Not supported 4.2  See also", 
        "type": "Window"
    }, 
    "window.ondeviceorientation": {
        "descr": "An event handler for the deviceorientation event, which contains information about a relative device orientation change.", 
        "name": "window.ondeviceorientation", 
        "params": [], 
        "path": "dom/window/ondeviceorientation", 
        "syntax": "window.ondeviceorientation = function(event) { ... };window.addEventListener('deviceorientation', function(event) { ... });", 
        "type": "Window"
    }, 
    "window.ondeviceproximity": {
        "descr": "Specifies an event listener to receive deviceproximity events. These events occur when the device sensor detects that an object becomes closer to or farther from the device.", 
        "name": "window.ondeviceproximity", 
        "params": [], 
        "path": "dom/window/ondeviceproximity", 
        "syntax": "window.onuserproximity = funcRef Where funcRef is a function to be called when the deviceproximity event occurs. These events are of type DeviceProximityEvent. Specifications    Specification Status Comment     Proximity EventsThe definition of 'Proximity Events' in that specification. Candidate Recommendation Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported (Yes) Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported     See also", 
        "type": "Window"
    }, 
    "window.ondragdrop": {
        "descr": "ObsoleteThis feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.", 
        "name": "window.ondragdrop", 
        "params": [
            {
                "descr": "the event handler function to be registered.", 
                "name": "funcRef"
            }
        ], 
        "path": "dom/window/ondragdrop", 
        "syntax": "window.ondragdrop = funcRef;window.addEventListener(\"dragdrop\", funcRef, useCapturing);", 
        "type": "Window"
    }, 
    "window.oninstall": {
        "descr": "The oninstall property of the Window interface represent the event handler for the install event, which is thrown each time the page is successfully installed as a web app.", 
        "name": "window.oninstall", 
        "params": [], 
        "path": "dom/window/oninstall", 
        "syntax": "window.oninstall = function(event) { ... };", 
        "type": "Window"
    }, 
    "window.onuserproximity": {
        "descr": "The Window.onuserproxymity property represents an EventHandler, that is a function to be called when the userproximity event occurs. These events are of type UserProximityEvent and occur when the the device sensor detects that an object becomes nearby.", 
        "name": "window.onuserproximity", 
        "params": [], 
        "path": "dom/window/onuserproximity", 
        "syntax": "window.onuserproximity = eventHandler Specifications    Specification Status Comment     Proximity EventsThe definition of 'Proximity Events' in that specification. Candidate Recommendation Initial specification    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support Not supported (Yes) Not supported Not supported Not supported         Feature Android Chrome for Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support Not supported Not supported 15.0 (15.0) Not supported Not supported Not supported     See also", 
        "type": "Window"
    }, 
    "window.onvrdisplayconnected": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.onvrdisplayconnected", 
        "params": [], 
        "path": "dom/window/onvrdisplayconnected", 
        "syntax": "onvrdisplayconnected property of the SpeechSynthesis interface represents an event handler that will run when a compatible VR device has been connected to the computer (when the vrdisplayconnected event fires).", 
        "type": "Window"
    }, 
    "window.onvrdisplaydisconnected": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.onvrdisplaydisconnected", 
        "params": [], 
        "path": "dom/window/onvrdisplaydisconnected", 
        "syntax": "onvrdisplaydisconnected event handler property of the Window interface is called when a compatible VR device has been disconnected from the computer (when the vrdisplaydisconnected event fires).", 
        "type": "Window"
    }, 
    "window.onvrdisplaypresentchange": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.onvrdisplaypresentchange", 
        "params": [], 
        "path": "dom/window/onvrdisplaypresentchange", 
        "syntax": "onvrdisplaypresentchange property of the SpeechSynthesis interface represents an event handler that will run when the presenting state of a VR device changes \u2014 i.e. goes from presenting to not presenting, or vice versa (when the onvrdisplaypresentchange event fires).", 
        "type": "Window"
    }, 
    "window.open": {
        "descr": "Loads a resource into either a new browsing context (such as a window) or one that already exists, depending on the specified parameters.", 
        "name": "window.open", 
        "params": [
            {
                "descr": "A reference to the newly created window. ", 
                "name": "windowObjectReference"
            }, 
            {
                "descr": "The URL to be loaded in the newly opened window. ", 
                "name": "strUrl"
            }, 
            {
                "descr": "A string name for the new window. ", 
                "name": "strWindowName"
            }, 
            {
                "descr": "An optional parameter listing the features (size, position, scrollbars, etc.) of the new window as a string. ", 
                "name": "strWindowFeatures"
            }, 
            {
                "descr": "Deprecated. Same as left but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenX"
            }, 
            {
                "descr": "Deprecated. Same as top but only supported by Netscape and Mozilla-based browsers.", 
                "name": "screenY"
            }, 
            {
                "descr": "Centers the window in relation to its parent's size and position. ", 
                "name": "centerscreen"
            }, 
            {
                "descr": "Specifies the height of the whole browser window in pixels. ", 
                "name": "outerHeight"
            }, 
            {
                "descr": "Specifies the width of the whole browser window in pixels. ", 
                "name": "outerWidth"
            }, 
            {
                "descr": "Same as height but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerHeight"
            }, 
            {
                "descr": "Same as width but only supported by Netscape and Mozilla-based browsers. ", 
                "name": "innerWidth"
            }, 
            {
                "descr": "example \"status=yes\", \"status=1\" and \"status\" have identical results", 
                "name": "NOTE: All features can be set to yes, 1 or just be present to be \"on\", set to no or 0 or in most cases just not present to be \"off\""
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the menubar.", 
                "name": "menubar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Navigation Toolbar (Back, Forward, Reload, Stop buttons). ", 
                "name": "toolbar"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Location bar in Mozilla-based browsers. ", 
                "name": "location"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window renders the Personal Toolbar in Netscape 6.x, Netscape 7.x and Mozilla browser. ", 
                "name": "personalbar"
            }, 
            {
                "descr": "Obsolete synonym of personalbar. ", 
                "name": "directories Obsolete since Gecko 2"
            }, 
            {
                "descr": "If this feature is on, then the new secondary window has a status bar. ", 
                "name": "status"
            }, 
            {
                "descr": "If this feature is specified, the window is able to open even if another application is already in the foreground. ", 
                "name": "attention Non-standard"
            }, 
            {
                "descr": "If on, the new window is said to be dependent of its parent window. ", 
                "name": "dependent"
            }, 
            {
                "descr": "This setting can only apply to dialog windows; \"minimizable\" requires dialog=yes. ", 
                "name": "minimizable"
            }, 
            {
                "descr": "Do not use. Not implemented in Mozilla. ", 
                "name": "fullscreen"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will be resizable.", 
                "name": "resizable"
            }, 
            {
                "descr": "If this feature is on, the new secondary window will show horizontal and/or vertical scrollbar(s) if the document doesn't fit into the window's viewport. ", 
                "name": "scrollbars"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.7/Firefox 0.9, this feature requires the UniversalBrowserWrite privilege (bug 244965). ", 
                "name": "chrome"
            }, 
            {
                "descr": "Note: Starting with Firefox 44, this feature can only be used with chrome privileges. ", 
                "name": "dialog"
            }, 
            {
                "descr": "Note: Starting with Mozilla 1.2.1, this feature requires the UniversalBrowserWrite privilege (bug 180048). ", 
                "name": "modal"
            }, 
            {
                "descr": "By default, all new secondary windows have a titlebar. ", 
                "name": "titlebar"
            }, 
            {
                "descr": "If on, the new window will always be displayed on top of other browser windows, regardless of whether it is active or not.", 
                "name": "alwaysRaised"
            }, 
            {
                "descr": "If on, the new created window floats below, under its own parent when the parent window is not minimized. ", 
                "name": "alwaysLowered"
            }, 
            {
                "descr": "Same as alwaysLowered.", 
                "name": "z-lock"
            }, 
            {
                "descr": "When set to no or 0, this feature removes the system close command icon and system close menu item. ", 
                "name": "close"
            }, 
            {
                "descr": "You can not. New windows not opened by javascript can not as a rule be closed by JavaScript. ", 
                "name": "How can I prevent the confirmation message asking the user whether he wants to close the window?"
            }, 
            {
                "descr": "First check for the existence of the window object reference of such window and if it exists and if it has not been closed, then use the focus() method. ", 
                "name": "How can I bring back the window if it is minimized or behind another window?"
            }, 
            {
                "descr": "You cannot. All browser manufacturers try to make the opening of new secondary windows noticed by users and noticeable by users to avoid confusion, to avoid disorienting users.", 
                "name": "How do I force a maximized window?"
            }, 
            {
                "descr": "You cannot force this. Users with Mozilla-based browsers have absolute control over window functionalities like resizability, scrollability and toolbars presence via user preferences in about:config. ", 
                "name": "How do I turn off window resizability or remove toolbars?"
            }, 
            {
                "descr": "You can not reliably because the users can prevent the window from being resized by unchecking the Edit/Preferences/Advanced/Scripts & Plug-ins/Allow Scripts to/ Move or resize existing windows checkbox in Mozilla or Tools/Options.../Content tab/Enable Javascript/Advanced button/Move or resize existing windows checkbox in Firefox or by setting dom.disable_window_move_resize to true in about:config or by editing accordingly their user.js file.", 
                "name": "How do I resize a window to fit its content?"
            }, 
            {
                "descr": "To open a resource in a new tab see Tabbed browser. ", 
                "name": "How do I open a referenced resource of a link in a new tab? or in a specific tab?"
            }, 
            {
                "descr": "You can test for the existence of the window object reference which is the returned value in case of success of the window.open() call and then verify that windowObjectReference.closed return value is false.", 
                "name": "How do I know whether a window I opened is still open?"
            }, 
            {
                "descr": "With the built-in popup blockers of Mozilla/Firefox and Internet Explorer 6 SP2, you have to check the return value of window.open(): it will be null if the window wasn't allowed to open. ", 
                "name": "How can I tell when my window was blocked by a popup blocker?"
            }, 
            {
                "descr": "The window.open() method gives a main window a reference to a secondary window; the opener property gives a secondary window a reference to its main window.", 
                "name": "What is the JavaScript relationship between the main window and the secondary window?"
            }, 
            {
                "descr": "It is because of the cross-domain script security restriction (also referred as the \"Same Origin Policy\"). ", 
                "name": "I can not access the properties of the new secondary window. I always get an error in the javascript console saying \"Error: uncaught exception: Permission denied to get property <property_name or method_name>. Why is that?"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Opener window, parent window, main window, first window"
            }, 
            {
                "descr": "Terms often used to describe or to identify the same window. ", 
                "name": "Sub-window, child window, secondary window, second window"
            }, 
            {
                "descr": "Script-initiated windows opening automatically without the user's consent.", 
                "name": "Unrequested popup windows"
            }
        ], 
        "path": "dom/window/open", 
        "syntax": "var windowObjectReference = window.open(strUrl, strWindowName, [strWindowFeatures]);", 
        "type": "Window"
    }, 
    "window.opener": {
        "descr": "Returns a reference to the window that opened this current window.", 
        "name": "window.opener", 
        "params": [], 
        "path": "dom/window/opener", 
        "syntax": "objRef = window.opener; Example if (window.opener != indexWin) {  referToTop(window.opener);\n or });", 
        "type": "Window"
    }, 
    "window.outerHeight": {
        "descr": "Window.outerHeight gets the height in pixels of the whole browser window. It represents the height of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerHeight", 
        "params": [], 
        "path": "dom/window/outerheight", 
        "syntax": "outWindowHeight = window.outerHeight; On return, outWindowHeight contains the height of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "Window"
    }, 
    "window.outerWidth": {
        "descr": "Window.outerWidth gets the width of the outside of the browser window. It represents the width of the whole browser window including sidebar (if expanded), window chrome and window resizing borders/handles.", 
        "name": "window.outerWidth", 
        "params": [], 
        "path": "dom/window/outerwidth", 
        "syntax": "outWindowWidth = window.outerWidth; On return, outWindowWidth is the width of the outside of the window. Notes To change the size of a window, see window.resizeBy()", 
        "type": "Window"
    }, 
    "window.parent": {
        "descr": "A reference to the parent of the current window or subframe.", 
        "name": "window.parent", 
        "params": [], 
        "path": "dom/window/parent", 
        "syntax": "parentWindow = window.parent;  Example if (window.parent\u00a0!= window.top) {  // we're deeper than one down}", 
        "type": "Window"
    }, 
    "window.postMessage": {
        "descr": "The window.postMessage method safely enables cross-origin communication. Normally, scripts on different pages are allowed to access each other if and only if the pages that executed them are at locations with the same protocol (usually both https), port number (443 being the default for https), and host (modulo document.domain being set by both pages to the same value). window.postMessage provides a controlled mechanism to circumvent this restriction in a way which is secure when properly used.", 
        "name": "window.postMessage", 
        "params": [
            {
                "descr": "A reference to another window; such a reference may be obtained, for example, using the contentWindow property of an iframe element, the object returned by window.open, or by named or numeric index on window.frames.", 
                "name": "otherWindow"
            }, 
            {
                "descr": "Data to be sent to the other window. ", 
                "name": "message"
            }, 
            {
                "descr": "Specifies what the origin of otherWindow must be for the event to be dispatched, either as the literal string \"*\" (indicating no preference) or as a URI. ", 
                "name": "targetOrigin"
            }, 
            {
                "descr": "Is a sequence of Transferable objects that are transferred with the message. ", 
                "name": "transfer Optional"
            }, 
            {
                "descr": "The object passed from the other window.", 
                "name": "data"
            }, 
            {
                "descr": "The origin of the window that sent the message at the time postMessage was called. ", 
                "name": "origin"
            }, 
            {
                "descr": "A reference to the window object that sent the message; you can use this to establish two-way communication between two windows with different origins.", 
                "name": "source"
            }
        ], 
        "path": "dom/window/postmessage", 
        "syntax": "otherWindow.postMessage(message, targetOrigin, [transfer]);", 
        "type": "Window"
    }, 
    "window.print": {
        "descr": "Opens the Print Dialog to print the current document.", 
        "name": "window.print", 
        "params": [], 
        "path": "dom/window/print", 
        "syntax": "window.print()", 
        "type": "Window"
    }, 
    "window.prompt": {
        "descr": "The Window.prompt() displays a dialog with an optional message prompting the user to input some text.", 
        "name": "window.prompt", 
        "params": [], 
        "path": "dom/window/prompt", 
        "syntax": "result = window.prompt(message, default);", 
        "type": "Window"
    }, 
    "window.requestAnimationFrame": {
        "descr": "You should call this method whenever you're ready to update your animation onscreen. This will request that your animation function be called before the browser performs the next repaint. The number of callbacks is usually 60 times per second, but will generally match the display refresh rate in most web browsers as per W3C recommendation. The callback rate may be reduced to a lower rate when running in background tabs or in hidden <iframe>s in order to improve performance and battery life.", 
        "name": "window.requestAnimationFrame", 
        "params": [
            {
                "descr": "A parameter specifying a function to call when it's time to update your animation for the next repaint. ", 
                "name": "callback"
            }
        ], 
        "path": "dom/window/requestanimationframe", 
        "syntax": "window.requestAnimationFrame(callback);", 
        "type": "Window"
    }, 
    "window.requestIdleCallback": {
        "descr": "The window.requestIdleCallback() method queues a function to be called during a browser's idle periods. This enables developers to perform background and low priority work on the main event loop, without impacting latency-critical events such as animation and input response. Functions are generally called in first-in-first-out order unless the function's timeout is reached before the browser calls it.", 
        "name": "window.requestIdleCallback", 
        "params": [
            {
                "descr": "A reference to a function that should be called in the near future. ", 
                "name": "callback"
            }, 
            {
                "descr": "Contains optional configuration parameters. ", 
                "name": "options Optional"
            }
        ], 
        "path": "dom/window/requestidlecallback", 
        "syntax": "var handle = window.requestIdleCallback(callback[, options])", 
        "type": "Window"
    }, 
    "window.resizeBy": {
        "descr": "Resizes the current window by a certain amount.", 
        "name": "window.resizeBy", 
        "params": [], 
        "path": "dom/window/resizeby", 
        "syntax": "window.resizeBy(xDelta, yDelta)", 
        "type": "Window"
    }, 
    "window.resizeTo": {
        "descr": "Dynamically resizes window.", 
        "name": "window.resizeTo", 
        "params": [], 
        "path": "dom/window/resizeto", 
        "syntax": "window.resizeTo(aWidth, aHeight)", 
        "type": "Window"
    }, 
    "window.screen": {
        "descr": "Returns a reference to the screen object associated with the window. The screen object, implementing the Screen interface, is a special object for inspecting properties of the screen on which the current window is being rendered.", 
        "name": "window.screen", 
        "params": [], 
        "path": "dom/window/screen", 
        "syntax": "screenObj = window.screen;  Example  if (screen.pixelDepth < 8) {  // use low-color version of page} else {   // use regular, colorful page}", 
        "type": "Window"
    }, 
    "window.screenX": {
        "descr": "The Window.screenX read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser from the left side of the screen.", 
        "name": "window.screenX", 
        "params": [], 
        "path": "dom/window/screenx", 
        "syntax": "lLoc = window.screenX   lLoc is the number of CSS pixels from the left side the screen.  Specifications    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'Window.screenX' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "Window"
    }, 
    "window.screenY": {
        "descr": "The Window.screenY read-only property returns the vertical distance, in CSS pixels of the top border of the user's browser from the top edge of the screen.", 
        "name": "window.screenY", 
        "params": [], 
        "path": "dom/window/screeny", 
        "syntax": "lLoc = window.screenY   lLoc is the number of CSS pixels from the top of the screen.  Specifications    Specification Status Comment     CSS Object Model (CSSOM) View ModuleThe definition of 'Window.screenY' in that specification. Working Draft Initial definition.    Browser compatibility", 
        "type": "Window"
    }, 
    "window.scroll": {
        "descr": "Scrolls the window to a particular place in the document.", 
        "name": "window.scroll", 
        "params": [], 
        "path": "dom/window/scroll", 
        "syntax": "window.scroll(x-coord, y-coord)", 
        "type": "Window"
    }, 
    "window.scrollBy": {
        "descr": "Scrolls the document in the window by the given amount.", 
        "name": "window.scrollBy", 
        "params": [], 
        "path": "dom/window/scrollby", 
        "syntax": "window.scrollBy(X, Y);", 
        "type": "Window"
    }, 
    "window.scrollTo": {
        "descr": "Scrolls to a particular set of coordinates in the document.", 
        "name": "window.scrollTo", 
        "params": [], 
        "path": "dom/window/scrollto", 
        "syntax": "window.scrollTo(x-coord, y-coord)", 
        "type": "Window"
    }, 
    "window.scrollX": {
        "descr": "Returns the number of pixels that the document has already been scrolled horizontally.", 
        "name": "window.scrollX", 
        "params": [], 
        "path": "dom/window/scrollx", 
        "syntax": "var x = window.scrollX; Parameters  x is the number of pixels that the document is currently scrolled from the left.  Example // If scrollX is greater than 400, reset scroll position\u00a0to the top left of the document.if (window.scrollX > 400) {  window.scroll(0,0);\n or });", 
        "type": "Window"
    }, 
    "window.scrollY": {
        "descr": "Returns the number of pixels that the document has already been scrolled vertically.", 
        "name": "window.scrollY", 
        "params": [], 
        "path": "dom/window/scrolly", 
        "syntax": "var y = window.scrollY;  y is the number of pixels that the document is currently scrolled from the top.  Example // make sure and go down to the second page if (window.scrollY) {  window.scroll(0, 0);\n or   // reset the scroll position to the top left of the document.}window.scrollByPages(1);", 
        "type": "Window"
    }, 
    "window.self": {
        "descr": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).", 
        "name": "window.self", 
        "params": [], 
        "path": "dom/window/self", 
        "syntax": "var w = window.self;  // w === window Example Uses of window.self like the following could just as well be replaced by window. if (window.parent.frames[0]\u00a0!= window.self) {    // this window is not the first frame in the list}", 
        "type": "Window"
    }, 
    "window.sessionStorage": {
        "descr": "The sessionStorage property allows you to access a session Storage object. sessionStorage is similar to Window.localStorage, the only difference is while data stored in localStorage has no expiration set, data stored in sessionStorage gets cleared when the page session ends. A page session lasts for as long as the browser is open and survives over page reloads and restores. Opening a page in a new tab or window will cause a new session to be initiated, which differs from how session cookies work.", 
        "name": "window.sessionStorage", 
        "params": [], 
        "path": "dom/window/sessionstorage", 
        "syntax": "// Save data to sessionStoragesessionStorage.setItem('key', 'value');\n or // Get saved data from sessionStoragevar data = sessionStorage.getItem('key');\n or // Remove saved data from sessionStoragesessionStorage.removeItem('key'));", 
        "type": "Window"
    }, 
    "window.setImmediate": {
        "descr": "This method is used to break up long running operations and run a callback function immediately after the browser has completed other operations such as events and display updates.", 
        "name": "window.setImmediate", 
        "params": [], 
        "path": "dom/window/setimmediate", 
        "syntax": "var immediateID = setImmediate(func, [param1, param2, ...]);\n or var immediateID = setImmediate(func);", 
        "type": "Window"
    }, 
    "window.speechSynthesis": {
        "descr": "This is an experimental technologyBecause this technology's specification has not stabilized, check the compatibility table for usage in various browsers. Also note that the syntax and behavior of an experimental technology is subject to change in future versions of browsers as the specification changes.", 
        "name": "window.speechSynthesis", 
        "params": [], 
        "path": "dom/window/speechsynthesis", 
        "syntax": "speechSynthesis read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality. Syntax var synth = window.speechSynthesis; Value A SpeechSynthesis object. Examples In our basic Speech synthesiser demo, we first grab a reference to the SpeechSynthesis controller using window.speechSynthesis. After defining some necessary variables, we retrieve a list of the voices available using SpeechSynthesis.getVoices()", 
        "type": "Window"
    }, 
    "window.stop": {
        "descr": "This method stops window loading.", 
        "name": "window.stop", 
        "params": [], 
        "path": "dom/window/stop", 
        "syntax": "window.stop()", 
        "type": "Window"
    }, 
    "window.top": {
        "descr": "Returns a reference to the topmost window in the window hierarchy.", 
        "name": "window.top", 
        "params": [], 
        "path": "dom/window/top", 
        "syntax": "var topWindow = window.top; Notes Where the window.parent property returns the immediate parent of the current window, window.top returns the topmost window in the hierarchy of window objects. This property is especially useful when you are dealing with a window that is in a subframe of a parent or parents, and you want to get to the top-level frameset. Specifications    Specification Status Comment     WHATWG HTML Living StandardThe definition of 'window.top' in that specification. Living Standard     HTML5The definition of 'window.top' in that specification. Recommendation Initial definition    Browser compatibility      Feature Chrome Firefox (Gecko) Internet Explorer Opera Safari   Basic support (Yes) (Yes)[1] (Yes) (Yes) (Yes)         Feature Android Firefox Mobile (Gecko) IE Mobile Opera Mobile Safari Mobile   Basic support ? ? ? ? ?     [1] Starting in Gecko 6.0 (Firefox 6.0 / Thunderbird 6.0 / SeaMonkey 2.3), this property is read only, as defined by the standard.", 
        "type": "Window"
    }, 
    "window.window": {
        "descr": "The window property of a window object points to the window object itself. Thus the following expressions all return the same window object:", 
        "name": "window.window", 
        "params": [], 
        "path": "dom/window/window", 
        "syntax": "window: var global = {data: 0};alert(global === window.global);\n or  // displays \"true\");", 
        "type": "Window"
    }, 
    "with": {
        "descr": "The with statement extends the scope chain for a statement.", 
        "name": "with", 
        "params": [
            {
                "descr": "Adds the given expression to the scope chain used when evaluating the statement. ", 
                "name": "expression"
            }, 
            {
                "descr": "Any statement. To execute multiple statements, use a block statement ({ ... ", 
                "name": "statement"
            }
        ], 
        "path": "javascript/statements/with", 
        "syntax": "with (expression)  statement", 
        "type": "Statements"
    }, 
    "wrap": {
        "descr": "The .wrap() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.", 
        "name": "wrap", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or jQuery  A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. ", 
                "name": "wrappingElement"
            }, 
            {
                "descr": "Type: Function( Integer index ) => String or jQuery  A callback function returning the HTML content or jQuery object to wrap around the matched elements. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/wrap", 
        "syntax": ".wrap( wrappingElement ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "wrapAll": {
        "descr": "The .wrapAll() function can take any string or object that could be passed to the $() function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.", 
        "name": "wrapAll", 
        "params": [
            {
                "descr": "Type: Selector or htmlString or Element or jQuery  A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.", 
                "name": "wrappingElement"
            }, 
            {
                "descr": "Type: Function() => String or jQuery  A callback function returning the HTML content or jQuery object to wrap around all the matched elements. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/wrapall", 
        "syntax": ".wrapAll( wrappingElement ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "wrapInner": {
        "descr": "The .wrapInner() function can take any string or object that could be passed to the $() factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.", 
        "name": "wrapInner", 
        "params": [
            {
                "descr": "Type: htmlString or Selector or jQuery or Element  An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.", 
                "name": "wrappingElement"
            }, 
            {
                "descr": "Type: Function( Integer index ) => String  A callback function which generates a structure to wrap around the content of the matched elements. ", 
                "name": "function"
            }
        ], 
        "path": "jquery/wrapinner", 
        "syntax": ".wrapInner( wrappingElement ) Returns: jQuery", 
        "type": "Manipulation"
    }, 
    "yield": {
        "descr": "The yield keyword is used to pause and resume a generator function (function* or legacy generator function).", 
        "name": "yield", 
        "params": [
            {
                "descr": "Defines the value to return from the generator function via the iterator protocol. ", 
                "name": "expression"
            }, 
            {
                "descr": "Returns the optional value passed to the generator's next() method to resume its execution.", 
                "name": "rv"
            }
        ], 
        "path": "javascript/operators/yield", 
        "syntax": "[rv] = yield [expression];  expression Defines the value to return from the generator function via the iterator protocol. If omitted, undefined is returned instead. rv  Returns the optional value passed to the generator's next()", 
        "type": "Operators"
    }, 
    "yield*": {
        "descr": "The yield* expression is used to delegate to another generator or iterable object.", 
        "name": "yield*", 
        "params": [
            {
                "descr": "The expression which returns an iterable object.", 
                "name": "expression"
            }
        ], 
        "path": "javascript/operators/yield*", 
        "syntax": "yield* [[expression]];  expression The expression which returns an iterable object.  Description The yield* expression iterates over the operand and yields each value returned by it. The value of yield* expression itself is the value returned by that iterator when it's closed (i.e., when done is true).", 
        "type": "Operators"
    }, 
    "|": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": "|", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Bitwise_OR", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "|=": {
        "descr": "An assignment operator assigns a value to its left operand based on the value of its right operand.", 
        "name": "|=", 
        "params": [], 
        "path": "javascript/operators/assignment_operators#Bitwise_OR_assignment", 
        "syntax": "Operator: x = y Examples // Assuming the following variables//  x = 5//  y = 10//  z = 25x = y     // x is 10x = y = z // x, y and z are all 25 Addition assignment The addition assignment operator adds the value of the right operand to a variable and assigns the result to the variable. The types of the two operands determine the behavior of the addition assignment operator. Addition or concatenation is possible. See the addition operator for more details.", 
        "type": "Operators"
    }, 
    "||": {
        "descr": "Logical operators are typically used with Boolean (logical) values. When they are, they return a Boolean value. However, the && and || operators actually return the value of one of the specified operands, so if these operators are used with non-Boolean values, they may return a non-Boolean value.", 
        "name": "||", 
        "params": [], 
        "path": "javascript/operators/logical_operators#Logical_OR", 
        "syntax": "Standard Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Logical NOT Operator, Binary Logical Operators    Browser compatibility", 
        "type": "Operators"
    }, 
    "~": {
        "descr": "Bitwise operators treat their operands as a sequence of 32 bits (zeroes and ones), rather than as decimal, hexadecimal, or octal numbers. For example, the decimal number nine has a binary representation of 1001. Bitwise operators perform their operations on such binary representations, but they return standard JavaScript numerical values.", 
        "name": "~", 
        "params": [], 
        "path": "javascript/operators/bitwise_operators#Bitwise_NOT", 
        "syntax": "Standard Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators   ECMAScript 2017 Draft (ECMA-262) Draft Defined in several sections of the specification: Bitwise NOT operator, Bitwise shift operators, Binary bitwise operators    Browser compatibility", 
        "type": "Operators"
    }
}